{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst LogicElementManager = ({\n  onGenerateCode\n}) => {\n  _s();\n  const [elements, setElements] = useState([]);\n  useEffect(() => {\n    const handleElementAdded = event => {\n      const newElement = event.detail;\n      setElements(prevElements => [...prevElements, newElement]);\n    };\n    window.addEventListener('elementAdded', handleElementAdded);\n    return () => window.removeEventListener('elementAdded', handleElementAdded);\n  }, []);\n  useEffect(() => {\n    let vhdlCode = `library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\n`;\n    vhdlCode += `entity adder is\\nend adder;\\n\\narchitecture rtl of adder is\\n`;\n    elements.forEach((element, index) => {\n      switch (element.type) {\n        case 'AND':\n          vhdlCode += `AND_GATE_${index}: entity work.and_gate\\n`;\n          vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\n          break;\n        case 'OR':\n          vhdlCode += `OR_GATE_${index}: entity work.or_gate\\n`;\n          vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\n          break;\n        case 'NOT':\n          vhdlCode += `NOT_GATE_${index}: entity work.not_gate\\n`;\n          vhdlCode += `port map (A => ${element.inputs[0]}, Y => ${element.output});\\n`;\n          break;\n        case 'INPUT':\n          vhdlCode += `signal ${element.inputs[0]} : std_logic;\\n`;\n          break;\n        case 'OUTPUT':\n          vhdlCode += `signal ${element.output} : std_logic;\\n`;\n          break;\n        default:\n          vhdlCode += `-- Неизвестный элемент: ${element.type}\\n`;\n      }\n    });\n    vhdlCode += `begin\\n-- Добавьте свою логику здесь\\nend rtl;\\n`;\n    onGenerateCode(vhdlCode); // Передача кода в редактор\n  }, [elements]);\n};\n_s(LogicElementManager, \"tZwa6oWmA+aeqKemK9M90QcIDxc=\");\n_c = LogicElementManager;\nexport default LogicElementManager;\nvar _c;\n$RefreshReg$(_c, \"LogicElementManager\");","map":{"version":3,"names":["React","useState","useEffect","LogicElementManager","onGenerateCode","_s","elements","setElements","handleElementAdded","event","newElement","detail","prevElements","window","addEventListener","removeEventListener","vhdlCode","forEach","element","index","type","inputs","output","_c","$RefreshReg$"],"sources":["D:/OSPanel/domains/react/react-intro-main/src/components/LogicElementManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst LogicElementManager = ({ onGenerateCode }) => {\r\n  const [elements, setElements] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const handleElementAdded = (event) => {\r\n      const newElement = event.detail;\r\n      setElements((prevElements) => [...prevElements, newElement]);\r\n    };\r\n\r\n    window.addEventListener('elementAdded', handleElementAdded);\r\n    return () => window.removeEventListener('elementAdded', handleElementAdded);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let vhdlCode = `library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\n`;\r\n    vhdlCode += `entity adder is\\nend adder;\\n\\narchitecture rtl of adder is\\n`;\r\n\r\n    elements.forEach((element, index) => {\r\n      switch (element.type) {\r\n        case 'AND':\r\n          vhdlCode += `AND_GATE_${index}: entity work.and_gate\\n`;\r\n          vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\r\n          break;\r\n\r\n        case 'OR':\r\n          vhdlCode += `OR_GATE_${index}: entity work.or_gate\\n`;\r\n          vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\r\n          break;\r\n\r\n        case 'NOT':\r\n          vhdlCode += `NOT_GATE_${index}: entity work.not_gate\\n`;\r\n          vhdlCode += `port map (A => ${element.inputs[0]}, Y => ${element.output});\\n`;\r\n          break;\r\n\r\n        case 'INPUT':\r\n          vhdlCode += `signal ${element.inputs[0]} : std_logic;\\n`;\r\n          break;\r\n\r\n        case 'OUTPUT':\r\n          vhdlCode += `signal ${element.output} : std_logic;\\n`;\r\n          break;\r\n\r\n        default:\r\n          vhdlCode += `-- Неизвестный элемент: ${element.type}\\n`;\r\n      }\r\n    });\r\n\r\n    vhdlCode += `begin\\n-- Добавьте свою логику здесь\\nend rtl;\\n`;\r\n\r\n    onGenerateCode(vhdlCode); // Передача кода в редактор\r\n  }, [elements]);\r\n\r\n};\r\n\r\nexport default LogicElementManager;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMM,kBAAkB,GAAIC,KAAK,IAAK;MACpC,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM;MAC/BJ,WAAW,CAAEK,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEF,UAAU,CAAC,CAAC;IAC9D,CAAC;IAEDG,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAEN,kBAAkB,CAAC;IAC3D,OAAO,MAAMK,MAAM,CAACE,mBAAmB,CAAC,cAAc,EAAEP,kBAAkB,CAAC;EAC7E,CAAC,EAAE,EAAE,CAAC;EAENN,SAAS,CAAC,MAAM;IACd,IAAIc,QAAQ,GAAI,4EAA2E;IAC3FA,QAAQ,IAAK,+DAA8D;IAE3EV,QAAQ,CAACW,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MACnC,QAAQD,OAAO,CAACE,IAAI;QAClB,KAAK,KAAK;UACRJ,QAAQ,IAAK,YAAWG,KAAM,0BAAyB;UACvDH,QAAQ,IAAK,kBAAiBE,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,UAASH,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,UAASH,OAAO,CAACI,MAAO,MAAK;UACxG;QAEF,KAAK,IAAI;UACPN,QAAQ,IAAK,WAAUG,KAAM,yBAAwB;UACrDH,QAAQ,IAAK,kBAAiBE,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,UAASH,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,UAASH,OAAO,CAACI,MAAO,MAAK;UACxG;QAEF,KAAK,KAAK;UACRN,QAAQ,IAAK,YAAWG,KAAM,0BAAyB;UACvDH,QAAQ,IAAK,kBAAiBE,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,UAASH,OAAO,CAACI,MAAO,MAAK;UAC7E;QAEF,KAAK,OAAO;UACVN,QAAQ,IAAK,UAASE,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,iBAAgB;UACxD;QAEF,KAAK,QAAQ;UACXL,QAAQ,IAAK,UAASE,OAAO,CAACI,MAAO,iBAAgB;UACrD;QAEF;UACEN,QAAQ,IAAK,2BAA0BE,OAAO,CAACE,IAAK,IAAG;MAC3D;IACF,CAAC,CAAC;IAEFJ,QAAQ,IAAK,kDAAiD;IAE9DZ,cAAc,CAACY,QAAQ,CAAC,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACV,QAAQ,CAAC,CAAC;AAEhB,CAAC;AAACD,EAAA,CApDIF,mBAAmB;AAAAoB,EAAA,GAAnBpB,mBAAmB;AAsDzB,eAAeA,mBAAmB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
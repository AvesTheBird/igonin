{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n  constructor(other) {\n    this.left = other.left;\n    this.width = other.width;\n    this.startStyle = null;\n    this.endStyle = null;\n  }\n}\nclass LineVisibleRangesWithStyle {\n  constructor(lineNumber, ranges) {\n    this.lineNumber = lineNumber;\n    this.ranges = ranges;\n  }\n}\nfunction toStyledRange(item) {\n  return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n  return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n  static {\n    this.SELECTION_CLASS_NAME = 'selected-text';\n  }\n  static {\n    this.SELECTION_TOP_LEFT = 'top-left-radius';\n  }\n  static {\n    this.SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\n  }\n  static {\n    this.SELECTION_TOP_RIGHT = 'top-right-radius';\n  }\n  static {\n    this.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\n  }\n  static {\n    this.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\n  }\n  static {\n    this.ROUNDED_PIECE_WIDTH = 10;\n  }\n  constructor(context) {\n    super();\n    this._previousFrameVisibleRangesWithStyle = [];\n    this._context = context;\n    const options = this._context.configuration.options;\n    this._roundedSelection = options.get(102 /* EditorOption.roundedSelection */);\n    this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    this._selections = [];\n    this._renderResult = null;\n    this._context.addEventHandler(this);\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    this._roundedSelection = options.get(102 /* EditorOption.roundedSelection */);\n    this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    return true;\n  }\n  onCursorStateChanged(e) {\n    this._selections = e.selections.slice(0);\n    return true;\n  }\n  onDecorationsChanged(e) {\n    // true for inline decorations that can end up relayouting text\n    return true; //e.inlineDecorationsChanged;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  _visibleRangesHaveGaps(linesVisibleRanges) {\n    for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n      const lineVisibleRanges = linesVisibleRanges[i];\n      if (lineVisibleRanges.ranges.length > 1) {\n        // There are two ranges on the same line\n        return true;\n      }\n    }\n    return false;\n  }\n  _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n    const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n    let previousFrameTop = null;\n    let previousFrameBottom = null;\n    if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n      const topLineNumber = linesVisibleRanges[0].lineNumber;\n      if (topLineNumber === viewport.startLineNumber) {\n        for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n          if (previousFrame[i].lineNumber === topLineNumber) {\n            previousFrameTop = previousFrame[i].ranges[0];\n          }\n        }\n      }\n      const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n      if (bottomLineNumber === viewport.endLineNumber) {\n        for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n          if (previousFrame[i].lineNumber === bottomLineNumber) {\n            previousFrameBottom = previousFrame[i].ranges[0];\n          }\n        }\n      }\n      if (previousFrameTop && !previousFrameTop.startStyle) {\n        previousFrameTop = null;\n      }\n      if (previousFrameBottom && !previousFrameBottom.startStyle) {\n        previousFrameBottom = null;\n      }\n    }\n    for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n      // We know for a fact that there is precisely one range on each line\n      const curLineRange = linesVisibleRanges[i].ranges[0];\n      const curLeft = curLineRange.left;\n      const curRight = curLineRange.left + curLineRange.width;\n      const startStyle = {\n        top: 0 /* CornerStyle.EXTERN */,\n        bottom: 0 /* CornerStyle.EXTERN */\n      };\n      const endStyle = {\n        top: 0 /* CornerStyle.EXTERN */,\n        bottom: 0 /* CornerStyle.EXTERN */\n      };\n      if (i > 0) {\n        // Look above\n        const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n        const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n        if (abs(curLeft - prevLeft) < epsilon) {\n          startStyle.top = 2 /* CornerStyle.FLAT */;\n        } else if (curLeft > prevLeft) {\n          startStyle.top = 1 /* CornerStyle.INTERN */;\n        }\n        if (abs(curRight - prevRight) < epsilon) {\n          endStyle.top = 2 /* CornerStyle.FLAT */;\n        } else if (prevLeft < curRight && curRight < prevRight) {\n          endStyle.top = 1 /* CornerStyle.INTERN */;\n        }\n      } else if (previousFrameTop) {\n        // Accept some hiccups near the viewport edges to save on repaints\n        startStyle.top = previousFrameTop.startStyle.top;\n        endStyle.top = previousFrameTop.endStyle.top;\n      }\n      if (i + 1 < len) {\n        // Look below\n        const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n        const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n        if (abs(curLeft - nextLeft) < epsilon) {\n          startStyle.bottom = 2 /* CornerStyle.FLAT */;\n        } else if (nextLeft < curLeft && curLeft < nextRight) {\n          startStyle.bottom = 1 /* CornerStyle.INTERN */;\n        }\n        if (abs(curRight - nextRight) < epsilon) {\n          endStyle.bottom = 2 /* CornerStyle.FLAT */;\n        } else if (curRight < nextRight) {\n          endStyle.bottom = 1 /* CornerStyle.INTERN */;\n        }\n      } else if (previousFrameBottom) {\n        // Accept some hiccups near the viewport edges to save on repaints\n        startStyle.bottom = previousFrameBottom.startStyle.bottom;\n        endStyle.bottom = previousFrameBottom.endStyle.bottom;\n      }\n      curLineRange.startStyle = startStyle;\n      curLineRange.endStyle = endStyle;\n    }\n  }\n  _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n    const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n    const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n    const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n    if (!visibleRangesHaveGaps && this._roundedSelection) {\n      this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n    }\n    // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n    return linesVisibleRanges;\n  }\n  _createSelectionPiece(top, bottom, className, left, width) {\n    return '<div class=\"cslr ' + className + '\" style=\"' + 'top:' + top.toString() + 'px;' + 'bottom:' + bottom.toString() + 'px;' + 'left:' + left.toString() + 'px;' + 'width:' + width.toString() + 'px;' + '\"></div>';\n  }\n  _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n    if (visibleRanges.length === 0) {\n      return;\n    }\n    const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n    const firstLineNumber = visibleRanges[0].lineNumber;\n    const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n    for (let i = 0, len = visibleRanges.length; i < len; i++) {\n      const lineVisibleRanges = visibleRanges[i];\n      const lineNumber = lineVisibleRanges.lineNumber;\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      const top = hasMultipleSelections ? lineNumber === firstLineNumber ? 1 : 0 : 0;\n      const bottom = hasMultipleSelections ? lineNumber !== firstLineNumber && lineNumber === lastLineNumber ? 1 : 0 : 0;\n      let innerCornerOutput = '';\n      let restOfSelectionOutput = '';\n      for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n        const visibleRange = lineVisibleRanges.ranges[j];\n        if (visibleRangesHaveStyle) {\n          const startStyle = visibleRange.startStyle;\n          const endStyle = visibleRange.endStyle;\n          if (startStyle.top === 1 /* CornerStyle.INTERN */ || startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n            // Reverse rounded corner to the left\n            // First comes the selection (blue layer)\n            innerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n            // Second comes the background (white layer) with inverse border radius\n            let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n            if (startStyle.top === 1 /* CornerStyle.INTERN */) {\n              className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n            }\n            if (startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n              className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n            }\n            innerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n          }\n          if (endStyle.top === 1 /* CornerStyle.INTERN */ || endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n            // Reverse rounded corner to the right\n            // First comes the selection (blue layer)\n            innerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n            // Second comes the background (white layer) with inverse border radius\n            let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n            if (endStyle.top === 1 /* CornerStyle.INTERN */) {\n              className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n            }\n            if (endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n              className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n            }\n            innerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n          }\n        }\n        let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n        if (visibleRangesHaveStyle) {\n          const startStyle = visibleRange.startStyle;\n          const endStyle = visibleRange.endStyle;\n          if (startStyle.top === 0 /* CornerStyle.EXTERN */) {\n            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n          }\n          if (startStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n          }\n          if (endStyle.top === 0 /* CornerStyle.EXTERN */) {\n            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n          }\n          if (endStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n          }\n        }\n        restOfSelectionOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left, visibleRange.width);\n      }\n      output2[lineIndex][0] += innerCornerOutput;\n      output2[lineIndex][1] += restOfSelectionOutput;\n    }\n  }\n  prepareRender(ctx) {\n    // Build HTML for inner corners separate from HTML for the rest of selections,\n    // as the inner corner HTML can interfere with that of other selections.\n    // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n    const output = [];\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      output[lineIndex] = ['', ''];\n    }\n    const thisFrameVisibleRangesWithStyle = [];\n    for (let i = 0, len = this._selections.length; i < len; i++) {\n      const selection = this._selections[i];\n      if (selection.isEmpty()) {\n        thisFrameVisibleRangesWithStyle[i] = null;\n        continue;\n      }\n      const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n      thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n      this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n    }\n    this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n    this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n    return this._renderResult[lineIndex];\n  }\n}\nregisterThemingParticipant((theme, collector) => {\n  const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n  if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n    collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n  }\n});\nfunction abs(n) {\n  return n < 0 ? -n : n;\n}","map":{"version":3,"names":["DynamicViewOverlay","editorSelectionForeground","registerThemingParticipant","HorizontalRangeWithStyle","constructor","other","left","width","startStyle","endStyle","LineVisibleRangesWithStyle","lineNumber","ranges","toStyledRange","item","toStyled","map","SelectionsOverlay","SELECTION_CLASS_NAME","SELECTION_TOP_LEFT","SELECTION_BOTTOM_LEFT","SELECTION_TOP_RIGHT","SELECTION_BOTTOM_RIGHT","EDITOR_BACKGROUND_CLASS_NAME","ROUNDED_PIECE_WIDTH","context","_previousFrameVisibleRangesWithStyle","_context","options","configuration","_roundedSelection","get","_typicalHalfwidthCharacterWidth","typicalHalfwidthCharacterWidth","_selections","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onCursorStateChanged","selections","slice","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_visibleRangesHaveGaps","linesVisibleRanges","i","len","length","lineVisibleRanges","_enrichVisibleRangesWithStyle","viewport","previousFrame","epsilon","previousFrameTop","previousFrameBottom","topLineNumber","startLineNumber","bottomLineNumber","endLineNumber","curLineRange","curLeft","curRight","top","bottom","prevLeft","prevRight","abs","nextLeft","nextRight","_getVisibleRangesWithStyle","selection","ctx","_linesVisibleRanges","linesVisibleRangesForRange","visibleRangesHaveGaps","visibleRange","_createSelectionPiece","className","toString","_actualRenderOneSelection","output2","visibleStartLineNumber","hasMultipleSelections","visibleRanges","visibleRangesHaveStyle","firstLineNumber","lastLineNumber","lineIndex","innerCornerOutput","restOfSelectionOutput","j","lenJ","prepareRender","output","visibleEndLineNumber","thisFrameVisibleRangesWithStyle","isEmpty","visibleRangesWithStyle","internalCorners","restOfSelection","render","theme","collector","editorSelectionForegroundColor","getColor","isTransparent","addRule","n"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/selections/selections.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nclass HorizontalRangeWithStyle {\n    constructor(other) {\n        this.left = other.left;\n        this.width = other.width;\n        this.startStyle = null;\n        this.endStyle = null;\n    }\n}\nclass LineVisibleRangesWithStyle {\n    constructor(lineNumber, ranges) {\n        this.lineNumber = lineNumber;\n        this.ranges = ranges;\n    }\n}\nfunction toStyledRange(item) {\n    return new HorizontalRangeWithStyle(item);\n}\nfunction toStyled(item) {\n    return new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\nexport class SelectionsOverlay extends DynamicViewOverlay {\n    static { this.SELECTION_CLASS_NAME = 'selected-text'; }\n    static { this.SELECTION_TOP_LEFT = 'top-left-radius'; }\n    static { this.SELECTION_BOTTOM_LEFT = 'bottom-left-radius'; }\n    static { this.SELECTION_TOP_RIGHT = 'top-right-radius'; }\n    static { this.SELECTION_BOTTOM_RIGHT = 'bottom-right-radius'; }\n    static { this.EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background'; }\n    static { this.ROUNDED_PIECE_WIDTH = 10; }\n    constructor(context) {\n        super();\n        this._previousFrameVisibleRangesWithStyle = [];\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._roundedSelection = options.get(102 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._selections = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._roundedSelection = options.get(102 /* EditorOption.roundedSelection */);\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true; //e.inlineDecorationsChanged;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _visibleRangesHaveGaps(linesVisibleRanges) {\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = linesVisibleRanges[i];\n            if (lineVisibleRanges.ranges.length > 1) {\n                // There are two ranges on the same line\n                return true;\n            }\n        }\n        return false;\n    }\n    _enrichVisibleRangesWithStyle(viewport, linesVisibleRanges, previousFrame) {\n        const epsilon = this._typicalHalfwidthCharacterWidth / 4;\n        let previousFrameTop = null;\n        let previousFrameBottom = null;\n        if (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n            const topLineNumber = linesVisibleRanges[0].lineNumber;\n            if (topLineNumber === viewport.startLineNumber) {\n                for (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n                    if (previousFrame[i].lineNumber === topLineNumber) {\n                        previousFrameTop = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            const bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n            if (bottomLineNumber === viewport.endLineNumber) {\n                for (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n                    if (previousFrame[i].lineNumber === bottomLineNumber) {\n                        previousFrameBottom = previousFrame[i].ranges[0];\n                    }\n                }\n            }\n            if (previousFrameTop && !previousFrameTop.startStyle) {\n                previousFrameTop = null;\n            }\n            if (previousFrameBottom && !previousFrameBottom.startStyle) {\n                previousFrameBottom = null;\n            }\n        }\n        for (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n            // We know for a fact that there is precisely one range on each line\n            const curLineRange = linesVisibleRanges[i].ranges[0];\n            const curLeft = curLineRange.left;\n            const curRight = curLineRange.left + curLineRange.width;\n            const startStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            const endStyle = {\n                top: 0 /* CornerStyle.EXTERN */,\n                bottom: 0 /* CornerStyle.EXTERN */\n            };\n            if (i > 0) {\n                // Look above\n                const prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n                const prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n                if (abs(curLeft - prevLeft) < epsilon) {\n                    startStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curLeft > prevLeft) {\n                    startStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - prevRight) < epsilon) {\n                    endStyle.top = 2 /* CornerStyle.FLAT */;\n                }\n                else if (prevLeft < curRight && curRight < prevRight) {\n                    endStyle.top = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameTop) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.top = previousFrameTop.startStyle.top;\n                endStyle.top = previousFrameTop.endStyle.top;\n            }\n            if (i + 1 < len) {\n                // Look below\n                const nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n                const nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n                if (abs(curLeft - nextLeft) < epsilon) {\n                    startStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (nextLeft < curLeft && curLeft < nextRight) {\n                    startStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n                if (abs(curRight - nextRight) < epsilon) {\n                    endStyle.bottom = 2 /* CornerStyle.FLAT */;\n                }\n                else if (curRight < nextRight) {\n                    endStyle.bottom = 1 /* CornerStyle.INTERN */;\n                }\n            }\n            else if (previousFrameBottom) {\n                // Accept some hiccups near the viewport edges to save on repaints\n                startStyle.bottom = previousFrameBottom.startStyle.bottom;\n                endStyle.bottom = previousFrameBottom.endStyle.bottom;\n            }\n            curLineRange.startStyle = startStyle;\n            curLineRange.endStyle = endStyle;\n        }\n    }\n    _getVisibleRangesWithStyle(selection, ctx, previousFrame) {\n        const _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n        const linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n        const visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n        if (!visibleRangesHaveGaps && this._roundedSelection) {\n            this._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n        }\n        // The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n        return linesVisibleRanges;\n    }\n    _createSelectionPiece(top, bottom, className, left, width) {\n        return ('<div class=\"cslr '\n            + className\n            + '\" style=\"'\n            + 'top:' + top.toString() + 'px;'\n            + 'bottom:' + bottom.toString() + 'px;'\n            + 'left:' + left.toString() + 'px;'\n            + 'width:' + width.toString() + 'px;'\n            + '\"></div>');\n    }\n    _actualRenderOneSelection(output2, visibleStartLineNumber, hasMultipleSelections, visibleRanges) {\n        if (visibleRanges.length === 0) {\n            return;\n        }\n        const visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n        const firstLineNumber = visibleRanges[0].lineNumber;\n        const lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n        for (let i = 0, len = visibleRanges.length; i < len; i++) {\n            const lineVisibleRanges = visibleRanges[i];\n            const lineNumber = lineVisibleRanges.lineNumber;\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n            const bottom = hasMultipleSelections ? (lineNumber !== firstLineNumber && lineNumber === lastLineNumber ? 1 : 0) : 0;\n            let innerCornerOutput = '';\n            let restOfSelectionOutput = '';\n            for (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n                const visibleRange = lineVisibleRanges.ranges[j];\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 1 /* CornerStyle.INTERN */ || startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the left\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (startStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                        }\n                        if (startStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                    if (endStyle.top === 1 /* CornerStyle.INTERN */ || endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                        // Reverse rounded corner to the right\n                        // First comes the selection (blue layer)\n                        innerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                        // Second comes the background (white layer) with inverse border radius\n                        let className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n                        if (endStyle.top === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                        }\n                        if (endStyle.bottom === 1 /* CornerStyle.INTERN */) {\n                            className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                        }\n                        innerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n                    }\n                }\n                let className = SelectionsOverlay.SELECTION_CLASS_NAME;\n                if (visibleRangesHaveStyle) {\n                    const startStyle = visibleRange.startStyle;\n                    const endStyle = visibleRange.endStyle;\n                    if (startStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n                    }\n                    if (startStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n                    }\n                    if (endStyle.top === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n                    }\n                    if (endStyle.bottom === 0 /* CornerStyle.EXTERN */) {\n                        className += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n                    }\n                }\n                restOfSelectionOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left, visibleRange.width);\n            }\n            output2[lineIndex][0] += innerCornerOutput;\n            output2[lineIndex][1] += restOfSelectionOutput;\n        }\n    }\n    prepareRender(ctx) {\n        // Build HTML for inner corners separate from HTML for the rest of selections,\n        // as the inner corner HTML can interfere with that of other selections.\n        // In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n        const output = [];\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = ['', ''];\n        }\n        const thisFrameVisibleRangesWithStyle = [];\n        for (let i = 0, len = this._selections.length; i < len; i++) {\n            const selection = this._selections[i];\n            if (selection.isEmpty()) {\n                thisFrameVisibleRangesWithStyle[i] = null;\n                continue;\n            }\n            const visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n            thisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n            this._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n        }\n        this._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n        this._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nregisterThemingParticipant((theme, collector) => {\n    const editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n    if (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n        collector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n    }\n});\nfunction abs(n) {\n    return n < 0 ? -n : n;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { NONE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement an cylinder shape. If a custom shape with one filled area and an overlay path is\n * needed, then this shape's {@link redrawPath} should be overridden.\n *\n * This shape is registered under {@link mxConstants.SHAPE_CYLINDER} in {@link cellRenderer}.\n */\nclass CylinderShape extends Shape {\n  constructor(bounds, fill, stroke, strokeWidth = 1) {\n    super();\n    /**\n     * Defines the maximum height of the top and bottom part of the cylinder shape.\n     */\n    this.maxHeight = 40;\n    /**\n     * Sets stroke tolerance to 0 for SVG.\n     */\n    this.svgStrokeTolerance = 0;\n    this.bounds = bounds;\n    this.fill = fill;\n    this.stroke = stroke;\n    this.strokeWidth = strokeWidth;\n  }\n  /**\n   * Redirects to redrawPath for subclasses to work.\n   */\n  paintVertexShape(c, x, y, w, h) {\n    c.translate(x, y);\n    c.begin();\n    this.redrawPath(c, x, y, w, h, false);\n    c.fillAndStroke();\n    if (!this.outline || !this.style || !(this.style.backgroundOutline ?? false)) {\n      c.setShadow(false);\n      c.begin();\n      this.redrawPath(c, x, y, w, h, true);\n      c.stroke();\n    }\n  }\n  /**\n   * Redirects to redrawPath for subclasses to work.\n   */\n  getCylinderSize(x, y, w, h) {\n    return Math.min(this.maxHeight, Math.round(h / 5));\n  }\n  /**\n   * Draws the path for this shape.\n   */\n  redrawPath(c, x, y, w, h, isForeground = false) {\n    const dy = this.getCylinderSize(x, y, w, h);\n    if (isForeground && this.fill !== NONE || !isForeground && this.fill === NONE) {\n      c.moveTo(0, dy);\n      c.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n      // Needs separate shapes for correct hit-detection\n      if (!isForeground) {\n        c.stroke();\n        c.begin();\n      }\n    }\n    if (!isForeground) {\n      c.moveTo(0, dy);\n      c.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n      c.lineTo(w, h - dy);\n      c.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n      c.close();\n    }\n  }\n}\nexport default CylinderShape;","map":{"version":3,"names":["Shape","NONE","CylinderShape","constructor","bounds","fill","stroke","strokeWidth","maxHeight","svgStrokeTolerance","paintVertexShape","c","x","y","w","h","translate","begin","redrawPath","fillAndStroke","outline","style","backgroundOutline","setShadow","getCylinderSize","Math","min","round","isForeground","dy","moveTo","curveTo","lineTo","close"],"sources":["D:/ospanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/geometry/node/CylinderShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { NONE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement an cylinder shape. If a custom shape with one filled area and an overlay path is\n * needed, then this shape's {@link redrawPath} should be overridden.\n *\n * This shape is registered under {@link mxConstants.SHAPE_CYLINDER} in {@link cellRenderer}.\n */\nclass CylinderShape extends Shape {\n    constructor(bounds, fill, stroke, strokeWidth = 1) {\n        super();\n        /**\n         * Defines the maximum height of the top and bottom part of the cylinder shape.\n         */\n        this.maxHeight = 40;\n        /**\n         * Sets stroke tolerance to 0 for SVG.\n         */\n        this.svgStrokeTolerance = 0;\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Redirects to redrawPath for subclasses to work.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        c.translate(x, y);\n        c.begin();\n        this.redrawPath(c, x, y, w, h, false);\n        c.fillAndStroke();\n        if (!this.outline || !this.style || !(this.style.backgroundOutline ?? false)) {\n            c.setShadow(false);\n            c.begin();\n            this.redrawPath(c, x, y, w, h, true);\n            c.stroke();\n        }\n    }\n    /**\n     * Redirects to redrawPath for subclasses to work.\n     */\n    getCylinderSize(x, y, w, h) {\n        return Math.min(this.maxHeight, Math.round(h / 5));\n    }\n    /**\n     * Draws the path for this shape.\n     */\n    redrawPath(c, x, y, w, h, isForeground = false) {\n        const dy = this.getCylinderSize(x, y, w, h);\n        if ((isForeground && this.fill !== NONE) || (!isForeground && this.fill === NONE)) {\n            c.moveTo(0, dy);\n            c.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n            // Needs separate shapes for correct hit-detection\n            if (!isForeground) {\n                c.stroke();\n                c.begin();\n            }\n        }\n        if (!isForeground) {\n            c.moveTo(0, dy);\n            c.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n            c.lineTo(w, h - dy);\n            c.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n            c.close();\n        }\n    }\n}\nexport default CylinderShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
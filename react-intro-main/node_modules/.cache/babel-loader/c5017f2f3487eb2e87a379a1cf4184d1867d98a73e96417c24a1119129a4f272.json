{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../view/event/InternalEvent';\nimport { write } from './domUtils';\n/**\n * Adds a hyperlink to the specified parent that invokes action on the\n * specified editor.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param editor <Editor> that will execute the action.\n * @param action String that defines the name of the action to be executed.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const linkAction = function (parent, text, editor, action) {\n  let pad = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  return link(parent, text, () => {\n    editor.execute(action);\n  }, pad);\n};\n/**\n * Adds a hyperlink to the specified parent that invokes the specified\n * function on the editor passing along the specified argument. The\n * function name is the name of a function of the editor instance,\n * not an action name.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param editor <Editor> instance to execute the function on.\n * @param functName String that represents the name of the function.\n * @param arg Object that represents the argument to the function.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const linkInvoke = function (parent, text, editor, functName, arg) {\n  let pad = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  return link(parent, text, () => {\n    // @ts-ignore\n    editor[functName](arg);\n  }, pad);\n};\n/**\n * Adds a hyperlink to the specified parent and invokes the given function\n * when the link is clicked.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param funct Function to execute when the link is clicked.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const link = function (parent, text, funct) {\n  let pad = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  const a = document.createElement('span');\n  a.style.color = 'blue';\n  a.style.textDecoration = 'underline';\n  a.style.cursor = 'pointer';\n  a.style.paddingLeft = \"\".concat(pad, \"px\");\n  InternalEvent.addListener(a, 'click', funct);\n  write(a, text);\n  if (parent != null) {\n    parent.appendChild(a);\n  }\n  return a;\n};\n/**\n * Returns a new button with the given level and function as an onclick\n * event handler.\n *\n * ```javascript\n * document.body.appendChild(mxUtils.button('Test', (evt)=>\n * {\n *   alert('Hello, World!');\n * }));\n * ```\n *\n * @param label String that represents the label of the button.\n * @param funct Function to be called if the button is pressed.\n * @param doc Optional document to be used for creating the button. Default is the\n * current document.\n */\nexport const button = function (label, funct) {\n  let doc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  doc = doc != null ? doc : document;\n  const button = doc.createElement('button');\n  write(button, label);\n  InternalEvent.addListener(button, 'click', evt => {\n    funct(evt);\n  });\n  return button;\n};","map":{"version":3,"names":["InternalEvent","write","linkAction","parent","text","editor","action","pad","arguments","length","undefined","link","execute","linkInvoke","functName","arg","funct","a","document","createElement","style","color","textDecoration","cursor","paddingLeft","concat","addListener","appendChild","button","label","doc","evt"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/util/domHelpers.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../view/event/InternalEvent';\nimport { write } from './domUtils';\n/**\n * Adds a hyperlink to the specified parent that invokes action on the\n * specified editor.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param editor <Editor> that will execute the action.\n * @param action String that defines the name of the action to be executed.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const linkAction = (parent, text, editor, action, pad = 0) => {\n    return link(parent, text, () => {\n        editor.execute(action);\n    }, pad);\n};\n/**\n * Adds a hyperlink to the specified parent that invokes the specified\n * function on the editor passing along the specified argument. The\n * function name is the name of a function of the editor instance,\n * not an action name.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param editor <Editor> instance to execute the function on.\n * @param functName String that represents the name of the function.\n * @param arg Object that represents the argument to the function.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const linkInvoke = (parent, text, editor, functName, arg, pad = 0) => {\n    return link(parent, text, () => {\n        // @ts-ignore\n        editor[functName](arg);\n    }, pad);\n};\n/**\n * Adds a hyperlink to the specified parent and invokes the given function\n * when the link is clicked.\n *\n * @param parent DOM node to contain the new link.\n * @param text String that is used as the link label.\n * @param funct Function to execute when the link is clicked.\n * @param pad Optional left-padding for the link. Default is 0.\n */\nexport const link = (parent, text, funct, pad = 0) => {\n    const a = document.createElement('span');\n    a.style.color = 'blue';\n    a.style.textDecoration = 'underline';\n    a.style.cursor = 'pointer';\n    a.style.paddingLeft = `${pad}px`;\n    InternalEvent.addListener(a, 'click', funct);\n    write(a, text);\n    if (parent != null) {\n        parent.appendChild(a);\n    }\n    return a;\n};\n/**\n * Returns a new button with the given level and function as an onclick\n * event handler.\n *\n * ```javascript\n * document.body.appendChild(mxUtils.button('Test', (evt)=>\n * {\n *   alert('Hello, World!');\n * }));\n * ```\n *\n * @param label String that represents the label of the button.\n * @param funct Function to be called if the button is pressed.\n * @param doc Optional document to be used for creating the button. Default is the\n * current document.\n */\nexport const button = (label, funct, doc = null) => {\n    doc = doc != null ? doc : document;\n    const button = doc.createElement('button');\n    write(button, label);\n    InternalEvent.addListener(button, 'click', (evt) => {\n        funct(evt);\n    });\n    return button;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,6BAA6B;AACvD,SAASC,KAAK,QAAQ,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,SAAAA,CAACC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAc;EAAA,IAAZC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAC5D,OAAOG,IAAI,CAACR,MAAM,EAAEC,IAAI,EAAE,MAAM;IAC5BC,MAAM,CAACO,OAAO,CAACN,MAAM,CAAC;EAC1B,CAAC,EAAEC,GAAG,CAAC;AACX,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,UAAU,GAAG,SAAAA,CAACV,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAES,SAAS,EAAEC,GAAG,EAAc;EAAA,IAAZR,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACpE,OAAOG,IAAI,CAACR,MAAM,EAAEC,IAAI,EAAE,MAAM;IAC5B;IACAC,MAAM,CAACS,SAAS,CAAC,CAACC,GAAG,CAAC;EAC1B,CAAC,EAAER,GAAG,CAAC;AACX,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,IAAI,GAAG,SAAAA,CAACR,MAAM,EAAEC,IAAI,EAAEY,KAAK,EAAc;EAAA,IAAZT,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAC7C,MAAMS,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;EACxCF,CAAC,CAACG,KAAK,CAACC,KAAK,GAAG,MAAM;EACtBJ,CAAC,CAACG,KAAK,CAACE,cAAc,GAAG,WAAW;EACpCL,CAAC,CAACG,KAAK,CAACG,MAAM,GAAG,SAAS;EAC1BN,CAAC,CAACG,KAAK,CAACI,WAAW,MAAAC,MAAA,CAAMlB,GAAG,OAAI;EAChCP,aAAa,CAAC0B,WAAW,CAACT,CAAC,EAAE,OAAO,EAAED,KAAK,CAAC;EAC5Cf,KAAK,CAACgB,CAAC,EAAEb,IAAI,CAAC;EACd,IAAID,MAAM,IAAI,IAAI,EAAE;IAChBA,MAAM,CAACwB,WAAW,CAACV,CAAC,CAAC;EACzB;EACA,OAAOA,CAAC;AACZ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMW,MAAM,GAAG,SAAAA,CAACC,KAAK,EAAEb,KAAK,EAAiB;EAAA,IAAfc,GAAG,GAAAtB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC3CsB,GAAG,GAAGA,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAGZ,QAAQ;EAClC,MAAMU,MAAM,GAAGE,GAAG,CAACX,aAAa,CAAC,QAAQ,CAAC;EAC1ClB,KAAK,CAAC2B,MAAM,EAAEC,KAAK,CAAC;EACpB7B,aAAa,CAAC0B,WAAW,CAACE,MAAM,EAAE,OAAO,EAAGG,GAAG,IAAK;IAChDf,KAAK,CAACe,GAAG,CAAC;EACd,CAAC,CAAC;EACF,OAAOH,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from './ObjectCodec';\n/**\n * Singleton class that acts as a global registry for codecs.\n *\n * ### Adding a Codec\n *\n * 1. Define a default codec with a new instance of the object to be handled.\n *\n *     ```javascript\n *     const codec = new ObjectCodec(new Transactions());\n *     ```\n *\n * 2. Define the functions required for encoding and decoding objects.\n *\n *     ```javascript\n *     codec.encode = function(enc, obj) { ... }\n *     codec.decode = function(dec: Codec, node: Element, into: any): any { ... }\n *     ```\n *\n * 3. Register the codec in the CodecRegistry.\n *\n *     ```javascript\n *     CodecRegistry.register(codec);\n *     ```\n *\n * {@link ObjectCodec.decode} may be used to either create a new instance of an object or to configure an existing instance,\n * in which case the into argument points to the existing object. In this case, we say the codec \"configures\" the object.\n */\nclass CodecRegistry {\n  /**\n   * Registers a new codec and associates the name of the codec via {@link ObjectCodec.getName} with the codec object.\n   *\n   * @param codec ObjectCodec to be registered.\n   * @param registerAlias if `true`, register an alias if the codec name doesn't match the name of the constructor of {@link ObjectCodec.template}.\n   */\n  static register(codec) {\n    let registerAlias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (codec != null) {\n      const name = codec.getName();\n      CodecRegistry.codecs[name] = codec;\n      const classname = codec.template.constructor.name;\n      if (registerAlias && classname !== name) {\n        CodecRegistry.addAlias(classname, name);\n      }\n    }\n    return codec;\n  }\n  /**\n   * Adds an alias for mapping a classname to a codec name.\n   */\n  static addAlias(classname, codecname) {\n    CodecRegistry.aliases[classname] = codecname;\n  }\n  /**\n   * Returns a codec that handles objects that are constructed using the given constructor or a codec registered under the provided name.\n   *\n   * When passing a name, the method first check if an alias exists for the name, and if so, it uses it to retrieve the codec.\n   *\n   * If there is no registered Codec, the method tries to register a new Codec using the provided constructor.\n   *\n   * @param constructorOrName JavaScript constructor function of the Codec or Codec name.\n   */\n  static getCodec(constructorOrName) {\n    var _CodecRegistry$codecs;\n    if (constructorOrName == null) {\n      return null;\n    }\n    let codec = null;\n    // Equivalent of calling import { getFunctionName } from '../util/StringUtils';\n    let name = typeof constructorOrName === 'string' ? constructorOrName : constructorOrName.name;\n    const tmp = CodecRegistry.aliases[name];\n    if (tmp != null) {\n      name = tmp;\n    }\n    codec = (_CodecRegistry$codecs = CodecRegistry.codecs[name]) !== null && _CodecRegistry$codecs !== void 0 ? _CodecRegistry$codecs : null;\n    // Registers a new default codec for the given constructor if no codec has been previously defined.\n    if (codec == null) {\n      try {\n        codec = new ObjectCodec(new constructorOrName());\n        CodecRegistry.register(codec);\n      } catch (e) {\n        // ignore\n      }\n    }\n    return codec;\n  }\n  /**\n   * First try to get the codec by the name it is registered with. If it doesn't exist, use the alias eventually declared\n   * to get the codec.\n   * @param name the name of the codec that is willing to be retrieved.\n   */\n  static getCodecByName(name) {\n    var _codec;\n    let codec = CodecRegistry.codecs[name];\n    if (!codec) {\n      const alias = CodecRegistry.aliases[name];\n      if (alias) {\n        codec = CodecRegistry.codecs[alias];\n      }\n    }\n    return (_codec = codec) !== null && _codec !== void 0 ? _codec : null;\n  }\n}\nCodecRegistry.codecs = {};\n/**\n * Maps from classnames to codec names.\n */\nCodecRegistry.aliases = {};\nexport default CodecRegistry;","map":{"version":3,"names":["ObjectCodec","CodecRegistry","register","codec","registerAlias","arguments","length","undefined","name","getName","codecs","classname","template","constructor","addAlias","codecname","aliases","getCodec","constructorOrName","_CodecRegistry$codecs","tmp","e","getCodecByName","_codec","alias"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/serialization/CodecRegistry.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from './ObjectCodec';\n/**\n * Singleton class that acts as a global registry for codecs.\n *\n * ### Adding a Codec\n *\n * 1. Define a default codec with a new instance of the object to be handled.\n *\n *     ```javascript\n *     const codec = new ObjectCodec(new Transactions());\n *     ```\n *\n * 2. Define the functions required for encoding and decoding objects.\n *\n *     ```javascript\n *     codec.encode = function(enc, obj) { ... }\n *     codec.decode = function(dec: Codec, node: Element, into: any): any { ... }\n *     ```\n *\n * 3. Register the codec in the CodecRegistry.\n *\n *     ```javascript\n *     CodecRegistry.register(codec);\n *     ```\n *\n * {@link ObjectCodec.decode} may be used to either create a new instance of an object or to configure an existing instance,\n * in which case the into argument points to the existing object. In this case, we say the codec \"configures\" the object.\n */\nclass CodecRegistry {\n    /**\n     * Registers a new codec and associates the name of the codec via {@link ObjectCodec.getName} with the codec object.\n     *\n     * @param codec ObjectCodec to be registered.\n     * @param registerAlias if `true`, register an alias if the codec name doesn't match the name of the constructor of {@link ObjectCodec.template}.\n     */\n    static register(codec, registerAlias = true) {\n        if (codec != null) {\n            const name = codec.getName();\n            CodecRegistry.codecs[name] = codec;\n            const classname = codec.template.constructor.name;\n            if (registerAlias && classname !== name) {\n                CodecRegistry.addAlias(classname, name);\n            }\n        }\n        return codec;\n    }\n    /**\n     * Adds an alias for mapping a classname to a codec name.\n     */\n    static addAlias(classname, codecname) {\n        CodecRegistry.aliases[classname] = codecname;\n    }\n    /**\n     * Returns a codec that handles objects that are constructed using the given constructor or a codec registered under the provided name.\n     *\n     * When passing a name, the method first check if an alias exists for the name, and if so, it uses it to retrieve the codec.\n     *\n     * If there is no registered Codec, the method tries to register a new Codec using the provided constructor.\n     *\n     * @param constructorOrName JavaScript constructor function of the Codec or Codec name.\n     */\n    static getCodec(constructorOrName) {\n        if (constructorOrName == null) {\n            return null;\n        }\n        let codec = null;\n        // Equivalent of calling import { getFunctionName } from '../util/StringUtils';\n        let name = typeof constructorOrName === 'string' ? constructorOrName : constructorOrName.name;\n        const tmp = CodecRegistry.aliases[name];\n        if (tmp != null) {\n            name = tmp;\n        }\n        codec = CodecRegistry.codecs[name] ?? null;\n        // Registers a new default codec for the given constructor if no codec has been previously defined.\n        if (codec == null) {\n            try {\n                codec = new ObjectCodec(new constructorOrName());\n                CodecRegistry.register(codec);\n            }\n            catch (e) {\n                // ignore\n            }\n        }\n        return codec;\n    }\n    /**\n     * First try to get the codec by the name it is registered with. If it doesn't exist, use the alias eventually declared\n     * to get the codec.\n     * @param name the name of the codec that is willing to be retrieved.\n     */\n    static getCodecByName(name) {\n        let codec = CodecRegistry.codecs[name];\n        if (!codec) {\n            const alias = CodecRegistry.aliases[name];\n            if (alias) {\n                codec = CodecRegistry.codecs[alias];\n            }\n        }\n        return codec ?? null;\n    }\n}\nCodecRegistry.codecs = {};\n/**\n * Maps from classnames to codec names.\n */\nCodecRegistry.aliases = {};\nexport default CodecRegistry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
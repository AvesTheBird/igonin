{"ast":null,"code":"var _ResourceMap;\nlet _ref;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a, _b;\nclass ResourceMapEntry {\n  constructor(uri, value) {\n    this.uri = uri;\n    this.value = value;\n  }\n}\nfunction isEntries(arg) {\n  return Array.isArray(arg);\n}\n_ref = (_a = Symbol.toStringTag, Symbol.iterator);\nexport class ResourceMap {\n  constructor(arg, toKey) {\n    this[_a] = 'ResourceMap';\n    if (arg instanceof ResourceMap) {\n      this.map = new Map(arg.map);\n      this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\n    } else if (isEntries(arg)) {\n      this.map = new Map();\n      this.toKey = toKey !== null && toKey !== void 0 ? toKey : ResourceMap.defaultToKey;\n      for (const [resource, value] of arg) {\n        this.set(resource, value);\n      }\n    } else {\n      this.map = new Map();\n      this.toKey = arg !== null && arg !== void 0 ? arg : ResourceMap.defaultToKey;\n    }\n  }\n  set(resource, value) {\n    this.map.set(this.toKey(resource), new ResourceMapEntry(resource, value));\n    return this;\n  }\n  get(resource) {\n    var _this$map$get;\n    return (_this$map$get = this.map.get(this.toKey(resource))) === null || _this$map$get === void 0 ? void 0 : _this$map$get.value;\n  }\n  has(resource) {\n    return this.map.has(this.toKey(resource));\n  }\n  get size() {\n    return this.map.size;\n  }\n  clear() {\n    this.map.clear();\n  }\n  delete(resource) {\n    return this.map.delete(this.toKey(resource));\n  }\n  forEach(clb, thisArg) {\n    if (typeof thisArg !== 'undefined') {\n      clb = clb.bind(thisArg);\n    }\n    for (const [_, entry] of this.map) {\n      clb(entry.value, entry.uri, this);\n    }\n  }\n  *values() {\n    for (const entry of this.map.values()) {\n      yield entry.value;\n    }\n  }\n  *keys() {\n    for (const entry of this.map.values()) {\n      yield entry.uri;\n    }\n  }\n  *entries() {\n    for (const entry of this.map.values()) {\n      yield [entry.uri, entry.value];\n    }\n  }\n  *[_ref]() {\n    for (const [, entry] of this.map) {\n      yield [entry.uri, entry.value];\n    }\n  }\n}\n_ResourceMap = ResourceMap;\n_ResourceMap.defaultToKey = resource => resource.toString();\nexport class LinkedMap {\n  constructor() {\n    this[_b] = 'LinkedMap';\n    this._map = new Map();\n    this._head = undefined;\n    this._tail = undefined;\n    this._size = 0;\n    this._state = 0;\n  }\n  clear() {\n    this._map.clear();\n    this._head = undefined;\n    this._tail = undefined;\n    this._size = 0;\n    this._state++;\n  }\n  isEmpty() {\n    return !this._head && !this._tail;\n  }\n  get size() {\n    return this._size;\n  }\n  get first() {\n    var _this$_head;\n    return (_this$_head = this._head) === null || _this$_head === void 0 ? void 0 : _this$_head.value;\n  }\n  get last() {\n    var _this$_tail;\n    return (_this$_tail = this._tail) === null || _this$_tail === void 0 ? void 0 : _this$_tail.value;\n  }\n  has(key) {\n    return this._map.has(key);\n  }\n  get(key) {\n    let touch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const item = this._map.get(key);\n    if (!item) {\n      return undefined;\n    }\n    if (touch !== 0 /* Touch.None */) {\n      this.touch(item, touch);\n    }\n    return item.value;\n  }\n  set(key, value) {\n    let touch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let item = this._map.get(key);\n    if (item) {\n      item.value = value;\n      if (touch !== 0 /* Touch.None */) {\n        this.touch(item, touch);\n      }\n    } else {\n      item = {\n        key,\n        value,\n        next: undefined,\n        previous: undefined\n      };\n      switch (touch) {\n        case 0 /* Touch.None */:\n          this.addItemLast(item);\n          break;\n        case 1 /* Touch.AsOld */:\n          this.addItemFirst(item);\n          break;\n        case 2 /* Touch.AsNew */:\n          this.addItemLast(item);\n          break;\n        default:\n          this.addItemLast(item);\n          break;\n      }\n      this._map.set(key, item);\n      this._size++;\n    }\n    return this;\n  }\n  delete(key) {\n    return !!this.remove(key);\n  }\n  remove(key) {\n    const item = this._map.get(key);\n    if (!item) {\n      return undefined;\n    }\n    this._map.delete(key);\n    this.removeItem(item);\n    this._size--;\n    return item.value;\n  }\n  shift() {\n    if (!this._head && !this._tail) {\n      return undefined;\n    }\n    if (!this._head || !this._tail) {\n      throw new Error('Invalid list');\n    }\n    const item = this._head;\n    this._map.delete(item.key);\n    this.removeItem(item);\n    this._size--;\n    return item.value;\n  }\n  forEach(callbackfn, thisArg) {\n    const state = this._state;\n    let current = this._head;\n    while (current) {\n      if (thisArg) {\n        callbackfn.bind(thisArg)(current.value, current.key, this);\n      } else {\n        callbackfn(current.value, current.key, this);\n      }\n      if (this._state !== state) {\n        throw new Error(\"LinkedMap got modified during iteration.\");\n      }\n      current = current.next;\n    }\n  }\n  keys() {\n    const map = this;\n    const state = this._state;\n    let current = this._head;\n    const iterator = {\n      [Symbol.iterator]() {\n        return iterator;\n      },\n      next() {\n        if (map._state !== state) {\n          throw new Error(\"LinkedMap got modified during iteration.\");\n        }\n        if (current) {\n          const result = {\n            value: current.key,\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }\n    };\n    return iterator;\n  }\n  values() {\n    const map = this;\n    const state = this._state;\n    let current = this._head;\n    const iterator = {\n      [Symbol.iterator]() {\n        return iterator;\n      },\n      next() {\n        if (map._state !== state) {\n          throw new Error(\"LinkedMap got modified during iteration.\");\n        }\n        if (current) {\n          const result = {\n            value: current.value,\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }\n    };\n    return iterator;\n  }\n  entries() {\n    const map = this;\n    const state = this._state;\n    let current = this._head;\n    const iterator = {\n      [Symbol.iterator]() {\n        return iterator;\n      },\n      next() {\n        if (map._state !== state) {\n          throw new Error(\"LinkedMap got modified during iteration.\");\n        }\n        if (current) {\n          const result = {\n            value: [current.key, current.value],\n            done: false\n          };\n          current = current.next;\n          return result;\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }\n    };\n    return iterator;\n  }\n  [(_b = Symbol.toStringTag, Symbol.iterator)]() {\n    return this.entries();\n  }\n  trimOld(newSize) {\n    if (newSize >= this.size) {\n      return;\n    }\n    if (newSize === 0) {\n      this.clear();\n      return;\n    }\n    let current = this._head;\n    let currentSize = this.size;\n    while (current && currentSize > newSize) {\n      this._map.delete(current.key);\n      current = current.next;\n      currentSize--;\n    }\n    this._head = current;\n    this._size = currentSize;\n    if (current) {\n      current.previous = undefined;\n    }\n    this._state++;\n  }\n  trimNew(newSize) {\n    if (newSize >= this.size) {\n      return;\n    }\n    if (newSize === 0) {\n      this.clear();\n      return;\n    }\n    let current = this._tail;\n    let currentSize = this.size;\n    while (current && currentSize > newSize) {\n      this._map.delete(current.key);\n      current = current.previous;\n      currentSize--;\n    }\n    this._tail = current;\n    this._size = currentSize;\n    if (current) {\n      current.next = undefined;\n    }\n    this._state++;\n  }\n  addItemFirst(item) {\n    // First time Insert\n    if (!this._head && !this._tail) {\n      this._tail = item;\n    } else if (!this._head) {\n      throw new Error('Invalid list');\n    } else {\n      item.next = this._head;\n      this._head.previous = item;\n    }\n    this._head = item;\n    this._state++;\n  }\n  addItemLast(item) {\n    // First time Insert\n    if (!this._head && !this._tail) {\n      this._head = item;\n    } else if (!this._tail) {\n      throw new Error('Invalid list');\n    } else {\n      item.previous = this._tail;\n      this._tail.next = item;\n    }\n    this._tail = item;\n    this._state++;\n  }\n  removeItem(item) {\n    if (item === this._head && item === this._tail) {\n      this._head = undefined;\n      this._tail = undefined;\n    } else if (item === this._head) {\n      // This can only happen if size === 1 which is handled\n      // by the case above.\n      if (!item.next) {\n        throw new Error('Invalid list');\n      }\n      item.next.previous = undefined;\n      this._head = item.next;\n    } else if (item === this._tail) {\n      // This can only happen if size === 1 which is handled\n      // by the case above.\n      if (!item.previous) {\n        throw new Error('Invalid list');\n      }\n      item.previous.next = undefined;\n      this._tail = item.previous;\n    } else {\n      const next = item.next;\n      const previous = item.previous;\n      if (!next || !previous) {\n        throw new Error('Invalid list');\n      }\n      next.previous = previous;\n      previous.next = next;\n    }\n    item.next = undefined;\n    item.previous = undefined;\n    this._state++;\n  }\n  touch(item, touch) {\n    if (!this._head || !this._tail) {\n      throw new Error('Invalid list');\n    }\n    if (touch !== 1 /* Touch.AsOld */ && touch !== 2 /* Touch.AsNew */) {\n      return;\n    }\n    if (touch === 1 /* Touch.AsOld */) {\n      if (item === this._head) {\n        return;\n      }\n      const next = item.next;\n      const previous = item.previous;\n      // Unlink the item\n      if (item === this._tail) {\n        // previous must be defined since item was not head but is tail\n        // So there are more than on item in the map\n        previous.next = undefined;\n        this._tail = previous;\n      } else {\n        // Both next and previous are not undefined since item was neither head nor tail.\n        next.previous = previous;\n        previous.next = next;\n      }\n      // Insert the node at head\n      item.previous = undefined;\n      item.next = this._head;\n      this._head.previous = item;\n      this._head = item;\n      this._state++;\n    } else if (touch === 2 /* Touch.AsNew */) {\n      if (item === this._tail) {\n        return;\n      }\n      const next = item.next;\n      const previous = item.previous;\n      // Unlink the item.\n      if (item === this._head) {\n        // next must be defined since item was not tail but is head\n        // So there are more than on item in the map\n        next.previous = undefined;\n        this._head = next;\n      } else {\n        // Both next and previous are not undefined since item was neither head nor tail.\n        next.previous = previous;\n        previous.next = next;\n      }\n      item.next = undefined;\n      item.previous = this._tail;\n      this._tail.next = item;\n      this._tail = item;\n      this._state++;\n    }\n  }\n  toJSON() {\n    const data = [];\n    this.forEach((value, key) => {\n      data.push([key, value]);\n    });\n    return data;\n  }\n  fromJSON(data) {\n    this.clear();\n    for (const [key, value] of data) {\n      this.set(key, value);\n    }\n  }\n}\nclass Cache extends LinkedMap {\n  constructor(limit) {\n    let ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super();\n    this._limit = limit;\n    this._ratio = Math.min(Math.max(0, ratio), 1);\n  }\n  get limit() {\n    return this._limit;\n  }\n  set limit(limit) {\n    this._limit = limit;\n    this.checkTrim();\n  }\n  get(key) {\n    let touch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    return super.get(key, touch);\n  }\n  peek(key) {\n    return super.get(key, 0 /* Touch.None */);\n  }\n  set(key, value) {\n    super.set(key, value, 2 /* Touch.AsNew */);\n    return this;\n  }\n  checkTrim() {\n    if (this.size > this._limit) {\n      this.trim(Math.round(this._limit * this._ratio));\n    }\n  }\n}\nexport class LRUCache extends Cache {\n  constructor(limit) {\n    let ratio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    super(limit, ratio);\n  }\n  trim(newSize) {\n    this.trimOld(newSize);\n  }\n  set(key, value) {\n    super.set(key, value);\n    this.checkTrim();\n    return this;\n  }\n}\n/**\n * A map that allows access both by keys and values.\n * **NOTE**: values need to be unique.\n */\nexport class BidirectionalMap {\n  constructor(entries) {\n    this._m1 = new Map();\n    this._m2 = new Map();\n    if (entries) {\n      for (const [key, value] of entries) {\n        this.set(key, value);\n      }\n    }\n  }\n  clear() {\n    this._m1.clear();\n    this._m2.clear();\n  }\n  set(key, value) {\n    this._m1.set(key, value);\n    this._m2.set(value, key);\n  }\n  get(key) {\n    return this._m1.get(key);\n  }\n  getKey(value) {\n    return this._m2.get(value);\n  }\n  delete(key) {\n    const value = this._m1.get(key);\n    if (value === undefined) {\n      return false;\n    }\n    this._m1.delete(key);\n    this._m2.delete(value);\n    return true;\n  }\n  keys() {\n    return this._m1.keys();\n  }\n  values() {\n    return this._m1.values();\n  }\n}\nexport class SetMap {\n  constructor() {\n    this.map = new Map();\n  }\n  add(key, value) {\n    let values = this.map.get(key);\n    if (!values) {\n      values = new Set();\n      this.map.set(key, values);\n    }\n    values.add(value);\n  }\n  delete(key, value) {\n    const values = this.map.get(key);\n    if (!values) {\n      return;\n    }\n    values.delete(value);\n    if (values.size === 0) {\n      this.map.delete(key);\n    }\n  }\n  forEach(key, fn) {\n    const values = this.map.get(key);\n    if (!values) {\n      return;\n    }\n    values.forEach(fn);\n  }\n  get(key) {\n    const values = this.map.get(key);\n    if (!values) {\n      return new Set();\n    }\n    return values;\n  }\n}","map":{"version":3,"names":["_a","_b","ResourceMapEntry","constructor","uri","value","isEntries","arg","Array","isArray","_ref","Symbol","toStringTag","iterator","ResourceMap","toKey","map","Map","defaultToKey","resource","set","get","_this$map$get","has","size","clear","delete","forEach","clb","thisArg","bind","_","entry","values","keys","entries","_ResourceMap","toString","LinkedMap","_map","_head","undefined","_tail","_size","_state","isEmpty","first","_this$_head","last","_this$_tail","key","touch","arguments","length","item","next","previous","addItemLast","addItemFirst","remove","removeItem","shift","Error","callbackfn","state","current","result","done","trimOld","newSize","currentSize","trimNew","toJSON","data","push","fromJSON","Cache","limit","ratio","_limit","_ratio","Math","min","max","checkTrim","peek","trim","round","LRUCache","BidirectionalMap","_m1","_m2","getKey","SetMap","add","Set","fn"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/base/common/map.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a, _b;\nclass ResourceMapEntry {\n    constructor(uri, value) {\n        this.uri = uri;\n        this.value = value;\n    }\n}\nfunction isEntries(arg) {\n    return Array.isArray(arg);\n}\nexport class ResourceMap {\n    static { this.defaultToKey = (resource) => resource.toString(); }\n    constructor(arg, toKey) {\n        this[_a] = 'ResourceMap';\n        if (arg instanceof ResourceMap) {\n            this.map = new Map(arg.map);\n            this.toKey = toKey ?? ResourceMap.defaultToKey;\n        }\n        else if (isEntries(arg)) {\n            this.map = new Map();\n            this.toKey = toKey ?? ResourceMap.defaultToKey;\n            for (const [resource, value] of arg) {\n                this.set(resource, value);\n            }\n        }\n        else {\n            this.map = new Map();\n            this.toKey = arg ?? ResourceMap.defaultToKey;\n        }\n    }\n    set(resource, value) {\n        this.map.set(this.toKey(resource), new ResourceMapEntry(resource, value));\n        return this;\n    }\n    get(resource) {\n        return this.map.get(this.toKey(resource))?.value;\n    }\n    has(resource) {\n        return this.map.has(this.toKey(resource));\n    }\n    get size() {\n        return this.map.size;\n    }\n    clear() {\n        this.map.clear();\n    }\n    delete(resource) {\n        return this.map.delete(this.toKey(resource));\n    }\n    forEach(clb, thisArg) {\n        if (typeof thisArg !== 'undefined') {\n            clb = clb.bind(thisArg);\n        }\n        for (const [_, entry] of this.map) {\n            clb(entry.value, entry.uri, this);\n        }\n    }\n    *values() {\n        for (const entry of this.map.values()) {\n            yield entry.value;\n        }\n    }\n    *keys() {\n        for (const entry of this.map.values()) {\n            yield entry.uri;\n        }\n    }\n    *entries() {\n        for (const entry of this.map.values()) {\n            yield [entry.uri, entry.value];\n        }\n    }\n    *[(_a = Symbol.toStringTag, Symbol.iterator)]() {\n        for (const [, entry] of this.map) {\n            yield [entry.uri, entry.value];\n        }\n    }\n}\nexport class LinkedMap {\n    constructor() {\n        this[_b] = 'LinkedMap';\n        this._map = new Map();\n        this._head = undefined;\n        this._tail = undefined;\n        this._size = 0;\n        this._state = 0;\n    }\n    clear() {\n        this._map.clear();\n        this._head = undefined;\n        this._tail = undefined;\n        this._size = 0;\n        this._state++;\n    }\n    isEmpty() {\n        return !this._head && !this._tail;\n    }\n    get size() {\n        return this._size;\n    }\n    get first() {\n        return this._head?.value;\n    }\n    get last() {\n        return this._tail?.value;\n    }\n    has(key) {\n        return this._map.has(key);\n    }\n    get(key, touch = 0 /* Touch.None */) {\n        const item = this._map.get(key);\n        if (!item) {\n            return undefined;\n        }\n        if (touch !== 0 /* Touch.None */) {\n            this.touch(item, touch);\n        }\n        return item.value;\n    }\n    set(key, value, touch = 0 /* Touch.None */) {\n        let item = this._map.get(key);\n        if (item) {\n            item.value = value;\n            if (touch !== 0 /* Touch.None */) {\n                this.touch(item, touch);\n            }\n        }\n        else {\n            item = { key, value, next: undefined, previous: undefined };\n            switch (touch) {\n                case 0 /* Touch.None */:\n                    this.addItemLast(item);\n                    break;\n                case 1 /* Touch.AsOld */:\n                    this.addItemFirst(item);\n                    break;\n                case 2 /* Touch.AsNew */:\n                    this.addItemLast(item);\n                    break;\n                default:\n                    this.addItemLast(item);\n                    break;\n            }\n            this._map.set(key, item);\n            this._size++;\n        }\n        return this;\n    }\n    delete(key) {\n        return !!this.remove(key);\n    }\n    remove(key) {\n        const item = this._map.get(key);\n        if (!item) {\n            return undefined;\n        }\n        this._map.delete(key);\n        this.removeItem(item);\n        this._size--;\n        return item.value;\n    }\n    shift() {\n        if (!this._head && !this._tail) {\n            return undefined;\n        }\n        if (!this._head || !this._tail) {\n            throw new Error('Invalid list');\n        }\n        const item = this._head;\n        this._map.delete(item.key);\n        this.removeItem(item);\n        this._size--;\n        return item.value;\n    }\n    forEach(callbackfn, thisArg) {\n        const state = this._state;\n        let current = this._head;\n        while (current) {\n            if (thisArg) {\n                callbackfn.bind(thisArg)(current.value, current.key, this);\n            }\n            else {\n                callbackfn(current.value, current.key, this);\n            }\n            if (this._state !== state) {\n                throw new Error(`LinkedMap got modified during iteration.`);\n            }\n            current = current.next;\n        }\n    }\n    keys() {\n        const map = this;\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]() {\n                return iterator;\n            },\n            next() {\n                if (map._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: current.key, done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    values() {\n        const map = this;\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]() {\n                return iterator;\n            },\n            next() {\n                if (map._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: current.value, done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    entries() {\n        const map = this;\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]() {\n                return iterator;\n            },\n            next() {\n                if (map._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: [current.key, current.value], done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    [(_b = Symbol.toStringTag, Symbol.iterator)]() {\n        return this.entries();\n    }\n    trimOld(newSize) {\n        if (newSize >= this.size) {\n            return;\n        }\n        if (newSize === 0) {\n            this.clear();\n            return;\n        }\n        let current = this._head;\n        let currentSize = this.size;\n        while (current && currentSize > newSize) {\n            this._map.delete(current.key);\n            current = current.next;\n            currentSize--;\n        }\n        this._head = current;\n        this._size = currentSize;\n        if (current) {\n            current.previous = undefined;\n        }\n        this._state++;\n    }\n    trimNew(newSize) {\n        if (newSize >= this.size) {\n            return;\n        }\n        if (newSize === 0) {\n            this.clear();\n            return;\n        }\n        let current = this._tail;\n        let currentSize = this.size;\n        while (current && currentSize > newSize) {\n            this._map.delete(current.key);\n            current = current.previous;\n            currentSize--;\n        }\n        this._tail = current;\n        this._size = currentSize;\n        if (current) {\n            current.next = undefined;\n        }\n        this._state++;\n    }\n    addItemFirst(item) {\n        // First time Insert\n        if (!this._head && !this._tail) {\n            this._tail = item;\n        }\n        else if (!this._head) {\n            throw new Error('Invalid list');\n        }\n        else {\n            item.next = this._head;\n            this._head.previous = item;\n        }\n        this._head = item;\n        this._state++;\n    }\n    addItemLast(item) {\n        // First time Insert\n        if (!this._head && !this._tail) {\n            this._head = item;\n        }\n        else if (!this._tail) {\n            throw new Error('Invalid list');\n        }\n        else {\n            item.previous = this._tail;\n            this._tail.next = item;\n        }\n        this._tail = item;\n        this._state++;\n    }\n    removeItem(item) {\n        if (item === this._head && item === this._tail) {\n            this._head = undefined;\n            this._tail = undefined;\n        }\n        else if (item === this._head) {\n            // This can only happen if size === 1 which is handled\n            // by the case above.\n            if (!item.next) {\n                throw new Error('Invalid list');\n            }\n            item.next.previous = undefined;\n            this._head = item.next;\n        }\n        else if (item === this._tail) {\n            // This can only happen if size === 1 which is handled\n            // by the case above.\n            if (!item.previous) {\n                throw new Error('Invalid list');\n            }\n            item.previous.next = undefined;\n            this._tail = item.previous;\n        }\n        else {\n            const next = item.next;\n            const previous = item.previous;\n            if (!next || !previous) {\n                throw new Error('Invalid list');\n            }\n            next.previous = previous;\n            previous.next = next;\n        }\n        item.next = undefined;\n        item.previous = undefined;\n        this._state++;\n    }\n    touch(item, touch) {\n        if (!this._head || !this._tail) {\n            throw new Error('Invalid list');\n        }\n        if ((touch !== 1 /* Touch.AsOld */ && touch !== 2 /* Touch.AsNew */)) {\n            return;\n        }\n        if (touch === 1 /* Touch.AsOld */) {\n            if (item === this._head) {\n                return;\n            }\n            const next = item.next;\n            const previous = item.previous;\n            // Unlink the item\n            if (item === this._tail) {\n                // previous must be defined since item was not head but is tail\n                // So there are more than on item in the map\n                previous.next = undefined;\n                this._tail = previous;\n            }\n            else {\n                // Both next and previous are not undefined since item was neither head nor tail.\n                next.previous = previous;\n                previous.next = next;\n            }\n            // Insert the node at head\n            item.previous = undefined;\n            item.next = this._head;\n            this._head.previous = item;\n            this._head = item;\n            this._state++;\n        }\n        else if (touch === 2 /* Touch.AsNew */) {\n            if (item === this._tail) {\n                return;\n            }\n            const next = item.next;\n            const previous = item.previous;\n            // Unlink the item.\n            if (item === this._head) {\n                // next must be defined since item was not tail but is head\n                // So there are more than on item in the map\n                next.previous = undefined;\n                this._head = next;\n            }\n            else {\n                // Both next and previous are not undefined since item was neither head nor tail.\n                next.previous = previous;\n                previous.next = next;\n            }\n            item.next = undefined;\n            item.previous = this._tail;\n            this._tail.next = item;\n            this._tail = item;\n            this._state++;\n        }\n    }\n    toJSON() {\n        const data = [];\n        this.forEach((value, key) => {\n            data.push([key, value]);\n        });\n        return data;\n    }\n    fromJSON(data) {\n        this.clear();\n        for (const [key, value] of data) {\n            this.set(key, value);\n        }\n    }\n}\nclass Cache extends LinkedMap {\n    constructor(limit, ratio = 1) {\n        super();\n        this._limit = limit;\n        this._ratio = Math.min(Math.max(0, ratio), 1);\n    }\n    get limit() {\n        return this._limit;\n    }\n    set limit(limit) {\n        this._limit = limit;\n        this.checkTrim();\n    }\n    get(key, touch = 2 /* Touch.AsNew */) {\n        return super.get(key, touch);\n    }\n    peek(key) {\n        return super.get(key, 0 /* Touch.None */);\n    }\n    set(key, value) {\n        super.set(key, value, 2 /* Touch.AsNew */);\n        return this;\n    }\n    checkTrim() {\n        if (this.size > this._limit) {\n            this.trim(Math.round(this._limit * this._ratio));\n        }\n    }\n}\nexport class LRUCache extends Cache {\n    constructor(limit, ratio = 1) {\n        super(limit, ratio);\n    }\n    trim(newSize) {\n        this.trimOld(newSize);\n    }\n    set(key, value) {\n        super.set(key, value);\n        this.checkTrim();\n        return this;\n    }\n}\n/**\n * A map that allows access both by keys and values.\n * **NOTE**: values need to be unique.\n */\nexport class BidirectionalMap {\n    constructor(entries) {\n        this._m1 = new Map();\n        this._m2 = new Map();\n        if (entries) {\n            for (const [key, value] of entries) {\n                this.set(key, value);\n            }\n        }\n    }\n    clear() {\n        this._m1.clear();\n        this._m2.clear();\n    }\n    set(key, value) {\n        this._m1.set(key, value);\n        this._m2.set(value, key);\n    }\n    get(key) {\n        return this._m1.get(key);\n    }\n    getKey(value) {\n        return this._m2.get(value);\n    }\n    delete(key) {\n        const value = this._m1.get(key);\n        if (value === undefined) {\n            return false;\n        }\n        this._m1.delete(key);\n        this._m2.delete(value);\n        return true;\n    }\n    keys() {\n        return this._m1.keys();\n    }\n    values() {\n        return this._m1.values();\n    }\n}\nexport class SetMap {\n    constructor() {\n        this.map = new Map();\n    }\n    add(key, value) {\n        let values = this.map.get(key);\n        if (!values) {\n            values = new Set();\n            this.map.set(key, values);\n        }\n        values.add(value);\n    }\n    delete(key, value) {\n        const values = this.map.get(key);\n        if (!values) {\n            return;\n        }\n        values.delete(value);\n        if (values.size === 0) {\n            this.map.delete(key);\n        }\n    }\n    forEach(key, fn) {\n        const values = this.map.get(key);\n        if (!values) {\n            return;\n        }\n        values.forEach(fn);\n    }\n    get(key) {\n        const values = this.map.get(key);\n        if (!values) {\n            return new Set();\n        }\n        return values;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as monaco from 'monaco-editor';\n\n// Define VHDL language\nmonaco.languages.register({\n  id: 'vhdl'\n});\n\n// Set up the syntax highlighting rules (Monarch Tokens)\nmonaco.languages.setMonarchTokensProvider('vhdl', {\n  keywords: ['library', 'use', 'entity', 'architecture', 'is', 'port', 'in', 'out', 'inout', 'begin', 'end', 'signal', 'process', 'if', 'then', 'else', 'elsif', 'case', 'when', 'loop', 'while', 'for', 'generate', 'component', 'generic', 'map', 'report', 'severity', 'not', 'and', 'or', 'nor', 'nand', 'xor', 'xnor', 'others'],\n  operators: ['<=', '=>', '=', '/=', '<', '<=', '>', '>=', '+', '-', '*', '/', '&', '|', 'and', 'or', 'not', 'nor', 'nand', 'xor', 'xnor'],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [\n    // Keywords\n    [/\\b(?:library|use|entity|architecture|is|port|in|out|inout|begin|end|signal|process|if|then|else|elsif|case|when|loop|while|for|generate|component|generic|map|report|severity|not|and|or|nor|nand|xor|xnor|others)\\b/, 'keyword'], [/\\b(?:not|and|or|nor|nand|xor|xnor)\\b/, 'logical-operator'],\n    // Numbers (integers, decimals, and hex)\n    [/\\b\\d+(\\.\\d+)?([eE][\\-+]?\\d+)?\\b/, 'number'],\n    // Comments\n    [/--.*/, 'comment'],\n    // Operators (e.g., assignment and comparison)\n    [/[=><!~?:&|+\\-*\\/\\^%]+/, 'operator'],\n    // Identifiers (e.g., signal names, variable names)\n    [/\\b[a-zA-Z_][a-zA-Z0-9_]*\\b/, 'identifier'],\n    // Strings\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n    // Incomplete string\n    [/\"([^\"\\\\]|\\\\.)*\"/, 'string'],\n    // Handle 'if-then-else', 'case' expressions, etc.\n    [/\\bif\\b/, 'keyword'], [/\\belsif\\b/, 'keyword'], [/\\belse\\b/, 'keyword'], [/\\bcase\\b/, 'keyword'], [/\\bwhen\\b/, 'keyword'], [/\\bothers\\b/, 'keyword'],\n    // Handle logical grouping (such as parentheses in expressions)\n    [/\\(/, 'parenthesis'], [/\\)/, 'parenthesis']],\n    // Rules for different blocks (handling keywords inside logical expressions)\n    logicalExpressions: [\n    // Handle 'not' with logical expressions\n    [/\\bnot\\b\\s+[a-zA-Z_][a-zA-Z0-9_]*/, 'logical-operator'],\n    // Handle logical conjunctions like 'and', 'or', etc.\n    [/\\b(?:and|or|nor|nand|xor|xnor)\\b/, 'logical-operator'],\n    // Handle conditionals and expressions\n    [/\\b(?:if|elsif|else|then)\\b/, 'keyword'],\n    // Handle case statements\n    [/\\b(?:case|when|others)\\b/, 'keyword'],\n    // Logical expressions like: (not signal_1) and (signal_2 xor signal_3)\n    [/\\(.*\\)/, 'expression']]\n  }\n});","map":{"version":3,"names":["monaco","languages","register","id","setMonarchTokensProvider","keywords","operators","symbols","tokenizer","root","logicalExpressions"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/monaco-vhdl.js"],"sourcesContent":["import * as monaco from 'monaco-editor';\r\n\r\n// Define VHDL language\r\nmonaco.languages.register({ id: 'vhdl' });\r\n\r\n// Set up the syntax highlighting rules (Monarch Tokens)\r\nmonaco.languages.setMonarchTokensProvider('vhdl', {\r\n  keywords: [\r\n    'library', 'use', 'entity', 'architecture', 'is', 'port', 'in', 'out', 'inout',\r\n    'begin', 'end', 'signal', 'process', 'if', 'then', 'else', 'elsif', \r\n    'case', 'when', 'loop', 'while', 'for', 'generate', 'component', \r\n    'generic', 'map', 'report', 'severity', 'not', 'and', 'or', 'nor', 'nand', \r\n    'xor', 'xnor', 'others'\r\n  ],\r\n  operators: [\r\n    '<=', '=>', '=', '/=', '<', '<=', '>', '>=', '+', '-', '*', '/', '&', '|', \r\n    'and', 'or', 'not', 'nor', 'nand', 'xor', 'xnor'\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  tokenizer: {\r\n    root: [\r\n      // Keywords\r\n      [/\\b(?:library|use|entity|architecture|is|port|in|out|inout|begin|end|signal|process|if|then|else|elsif|case|when|loop|while|for|generate|component|generic|map|report|severity|not|and|or|nor|nand|xor|xnor|others)\\b/, 'keyword'],\r\n      \r\n      \r\n      \r\n      [/\\b(?:not|and|or|nor|nand|xor|xnor)\\b/, 'logical-operator'],\r\n      \r\n      // Numbers (integers, decimals, and hex)\r\n      [/\\b\\d+(\\.\\d+)?([eE][\\-+]?\\d+)?\\b/, 'number'],\r\n      \r\n      // Comments\r\n      [/--.*/, 'comment'],\r\n      \r\n      // Operators (e.g., assignment and comparison)\r\n      [/[=><!~?:&|+\\-*\\/\\^%]+/, 'operator'],\r\n      \r\n      // Identifiers (e.g., signal names, variable names)\r\n      [/\\b[a-zA-Z_][a-zA-Z0-9_]*\\b/, 'identifier'],\r\n      \r\n      // Strings\r\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // Incomplete string\r\n      [/\"([^\"\\\\]|\\\\.)*\"/, 'string'],\r\n\r\n      // Handle 'if-then-else', 'case' expressions, etc.\r\n      [/\\bif\\b/, 'keyword'],\r\n      [/\\belsif\\b/, 'keyword'],\r\n      [/\\belse\\b/, 'keyword'],\r\n      [/\\bcase\\b/, 'keyword'],\r\n      [/\\bwhen\\b/, 'keyword'],\r\n      [/\\bothers\\b/, 'keyword'],\r\n      \r\n      // Handle logical grouping (such as parentheses in expressions)\r\n      [/\\(/, 'parenthesis'],\r\n      [/\\)/, 'parenthesis'],\r\n    ],\r\n    \r\n    // Rules for different blocks (handling keywords inside logical expressions)\r\n    logicalExpressions: [\r\n      // Handle 'not' with logical expressions\r\n      [/\\bnot\\b\\s+[a-zA-Z_][a-zA-Z0-9_]*/, 'logical-operator'],\r\n      \r\n      // Handle logical conjunctions like 'and', 'or', etc.\r\n      [/\\b(?:and|or|nor|nand|xor|xnor)\\b/, 'logical-operator'],\r\n      \r\n      // Handle conditionals and expressions\r\n      [/\\b(?:if|elsif|else|then)\\b/, 'keyword'],\r\n      \r\n      // Handle case statements\r\n      [/\\b(?:case|when|others)\\b/, 'keyword'],\r\n      \r\n      // Logical expressions like: (not signal_1) and (signal_2 xor signal_3)\r\n      [/\\(.*\\)/, 'expression'],\r\n    ],\r\n  },\r\n});\r\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,eAAe;;AAEvC;AACAA,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC;EAAEC,EAAE,EAAE;AAAO,CAAC,CAAC;;AAEzC;AACAH,MAAM,CAACC,SAAS,CAACG,wBAAwB,CAAC,MAAM,EAAE;EAChDC,QAAQ,EAAE,CACR,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAC9E,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAClE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,WAAW,EAC/D,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EACzE,KAAK,EAAE,MAAM,EAAE,QAAQ,CACxB;EACDC,SAAS,EAAE,CACT,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CACjD;EACDC,OAAO,EAAE,uBAAuB;EAChCC,SAAS,EAAE;IACTC,IAAI,EAAE;IACJ;IACA,CAAC,sNAAsN,EAAE,SAAS,CAAC,EAInO,CAAC,sCAAsC,EAAE,kBAAkB,CAAC;IAE5D;IACA,CAAC,iCAAiC,EAAE,QAAQ,CAAC;IAE7C;IACA,CAAC,MAAM,EAAE,SAAS,CAAC;IAEnB;IACA,CAAC,uBAAuB,EAAE,UAAU,CAAC;IAErC;IACA,CAAC,4BAA4B,EAAE,YAAY,CAAC;IAE5C;IACA,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;IAAE;IACvC,CAAC,iBAAiB,EAAE,QAAQ,CAAC;IAE7B;IACA,CAAC,QAAQ,EAAE,SAAS,CAAC,EACrB,CAAC,WAAW,EAAE,SAAS,CAAC,EACxB,CAAC,UAAU,EAAE,SAAS,CAAC,EACvB,CAAC,UAAU,EAAE,SAAS,CAAC,EACvB,CAAC,UAAU,EAAE,SAAS,CAAC,EACvB,CAAC,YAAY,EAAE,SAAS,CAAC;IAEzB;IACA,CAAC,IAAI,EAAE,aAAa,CAAC,EACrB,CAAC,IAAI,EAAE,aAAa,CAAC,CACtB;IAED;IACAC,kBAAkB,EAAE;IAClB;IACA,CAAC,kCAAkC,EAAE,kBAAkB,CAAC;IAExD;IACA,CAAC,kCAAkC,EAAE,kBAAkB,CAAC;IAExD;IACA,CAAC,4BAA4B,EAAE,SAAS,CAAC;IAEzC;IACA,CAAC,0BAA0B,EAAE,SAAS,CAAC;IAEvC;IACA,CAAC,QAAQ,EAAE,YAAY,CAAC;EAE5B;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
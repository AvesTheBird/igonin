{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from './Dictionary';\n/*****************************************************************************\n * Group: Tree and traversal-related\n *****************************************************************************/\n/**\n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n *\n * @param parent {@link mxCell} whose children should be checked.\n * @param isolate Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * @param invert Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is `false`.\n */\nexport function findTreeRoots(graph, parent, isolate = false, invert = false) {\n  const roots = [];\n  if (parent != null) {\n    let best = null;\n    let maxDiff = 0;\n    for (const cell of parent.getChildren()) {\n      if (cell.isVertex() && cell.isVisible()) {\n        const conns = graph.getConnections(cell, isolate ? parent : null);\n        let fanOut = 0;\n        let fanIn = 0;\n        for (let j = 0; j < conns.length; j++) {\n          const src = graph.view.getVisibleTerminal(conns[j], true);\n          if (src == cell) {\n            fanOut++;\n          } else {\n            fanIn++;\n          }\n        }\n        if (invert && fanOut == 0 && fanIn > 0 || !invert && fanIn == 0 && fanOut > 0) {\n          roots.push(cell);\n        }\n        const diff = invert ? fanIn - fanOut : fanOut - fanIn;\n        if (diff > maxDiff) {\n          maxDiff = diff;\n          best = cell;\n        }\n      }\n    }\n    if (roots.length == 0 && best != null) {\n      roots.push(best);\n    }\n  }\n  return roots;\n}\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n *\n * Example:\n *\n * ```javascript\n * MaxLog.show();\n * let cell = graph.getSelectionCell();\n * graph.traverse(cell, false, (vertex, edge)=>\n * {\n *   MaxLog.debug(graph.getLabel(vertex));\n * });\n * ```\n *\n * @param vertex <Cell> that represents the vertex where the traversal starts.\n * @param directed Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * @param func Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * @param edge Optional <Cell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * @param visited Optional {@link Dictionary} from cells to true for the visited cells.\n * @param inverse Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nexport function traverse(vertex = null, directed = true, func = null, edge = null, visited = null, inverse = false) {\n  if (func != null && vertex != null) {\n    directed = directed != null ? directed : true;\n    inverse = inverse != null ? inverse : false;\n    visited = visited || new Dictionary();\n    if (!visited.get(vertex)) {\n      visited.put(vertex, true);\n      const result = func(vertex, edge);\n      if (result == null || result) {\n        const edgeCount = vertex.getEdgeCount();\n        if (edgeCount > 0) {\n          for (let i = 0; i < edgeCount; i += 1) {\n            const e = vertex.getEdgeAt(i);\n            const isSource = e.getTerminal(true) == vertex;\n            if (!directed || !inverse == isSource) {\n              const next = e.getTerminal(!isSource);\n              traverse(next, directed, func, e, visited, inverse);\n            }\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["Dictionary","findTreeRoots","graph","parent","isolate","invert","roots","best","maxDiff","cell","getChildren","isVertex","isVisible","conns","getConnections","fanOut","fanIn","j","length","src","view","getVisibleTerminal","push","diff","traverse","vertex","directed","func","edge","visited","inverse","get","put","result","edgeCount","getEdgeCount","i","e","getEdgeAt","isSource","getTerminal","next"],"sources":["D:/OSPanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/util/treeTraversal.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from './Dictionary';\n/*****************************************************************************\n * Group: Tree and traversal-related\n *****************************************************************************/\n/**\n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n *\n * @param parent {@link mxCell} whose children should be checked.\n * @param isolate Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * @param invert Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is `false`.\n */\nexport function findTreeRoots(graph, parent, isolate = false, invert = false) {\n    const roots = [];\n    if (parent != null) {\n        let best = null;\n        let maxDiff = 0;\n        for (const cell of parent.getChildren()) {\n            if (cell.isVertex() && cell.isVisible()) {\n                const conns = graph.getConnections(cell, isolate ? parent : null);\n                let fanOut = 0;\n                let fanIn = 0;\n                for (let j = 0; j < conns.length; j++) {\n                    const src = graph.view.getVisibleTerminal(conns[j], true);\n                    if (src == cell) {\n                        fanOut++;\n                    }\n                    else {\n                        fanIn++;\n                    }\n                }\n                if ((invert && fanOut == 0 && fanIn > 0) ||\n                    (!invert && fanIn == 0 && fanOut > 0)) {\n                    roots.push(cell);\n                }\n                const diff = invert ? fanIn - fanOut : fanOut - fanIn;\n                if (diff > maxDiff) {\n                    maxDiff = diff;\n                    best = cell;\n                }\n            }\n        }\n        if (roots.length == 0 && best != null) {\n            roots.push(best);\n        }\n    }\n    return roots;\n}\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n *\n * Example:\n *\n * ```javascript\n * MaxLog.show();\n * let cell = graph.getSelectionCell();\n * graph.traverse(cell, false, (vertex, edge)=>\n * {\n *   MaxLog.debug(graph.getLabel(vertex));\n * });\n * ```\n *\n * @param vertex <Cell> that represents the vertex where the traversal starts.\n * @param directed Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * @param func Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * @param edge Optional <Cell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * @param visited Optional {@link Dictionary} from cells to true for the visited cells.\n * @param inverse Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nexport function traverse(vertex = null, directed = true, func = null, edge = null, visited = null, inverse = false) {\n    if (func != null && vertex != null) {\n        directed = directed != null ? directed : true;\n        inverse = inverse != null ? inverse : false;\n        visited = visited || new Dictionary();\n        if (!visited.get(vertex)) {\n            visited.put(vertex, true);\n            const result = func(vertex, edge);\n            if (result == null || result) {\n                const edgeCount = vertex.getEdgeCount();\n                if (edgeCount > 0) {\n                    for (let i = 0; i < edgeCount; i += 1) {\n                        const e = vertex.getEdgeAt(i);\n                        const isSource = e.getTerminal(true) == vertex;\n                        if (!directed || !inverse == isSource) {\n                            const next = e.getTerminal(!isSource);\n                            traverse(next, directed, func, e, visited, inverse);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\SignalGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { parse } from 'vcd-parser';\nimport * as WaveDrom from 'wavedrom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignalGraph = () => {\n  _s();\n  const [vcdContent, setVcdContent] = useState(null);\n  const [parsedData, setParsedData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Загрузка содержимого VCD-файла\n  useEffect(() => {\n    const fetchVCD = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/download-vcd-content');\n        const data = await response.json();\n        if (data.success) {\n          setVcdContent(data.content);\n        } else {\n          setError(data.error || 'Ошибка загрузки VCD-файла');\n        }\n      } catch (err) {\n        setError('Ошибка подключения к серверу');\n      }\n    };\n    fetchVCD();\n  }, []);\n\n  // Парсинг VCD-файла\n  useEffect(() => {\n    if (vcdContent) {\n      try {\n        const parsed = parse(vcdContent);\n        setParsedData(parsed);\n      } catch (err) {\n        setError('Ошибка парсинга VCD-файла');\n      }\n    }\n  }, [vcdContent]);\n\n  // Построение графика с использованием WaveDrom\n  useEffect(() => {\n    if (parsedData) {\n      const waveData = {\n        signal: Object.entries(parsedData.signal).map(([name, values]) => ({\n          name,\n          wave: values.map(value => value ? '1' : '0').join('')\n        }))\n      };\n      WaveDrom.RenderWaveForm(0, waveData, document.getElementById('waveform'));\n    }\n  }, [parsedData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0413\\u0440\\u0430\\u0444\\u0438\\u043A \\u0441\\u0438\\u0433\\u043D\\u0430\\u043B\\u043E\\u0432\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }, this), !error && !parsedData && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"waveform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n};\n_s(SignalGraph, \"K6CVzeU+yrTb6N9gkQhs2gF/wng=\");\n_c = SignalGraph;\nexport default SignalGraph;\nvar _c;\n$RefreshReg$(_c, \"SignalGraph\");","map":{"version":3,"names":["React","useEffect","useState","parse","WaveDrom","jsxDEV","_jsxDEV","SignalGraph","_s","vcdContent","setVcdContent","parsedData","setParsedData","error","setError","fetchVCD","response","fetch","data","json","success","content","err","parsed","waveData","signal","Object","entries","map","name","values","wave","value","join","RenderWaveForm","document","getElementById","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","id","_c","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/SignalGraph.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { parse } from 'vcd-parser';\r\nimport * as WaveDrom from 'wavedrom';\r\nconst SignalGraph = () => {\r\n    const [vcdContent, setVcdContent] = useState(null);\r\n    const [parsedData, setParsedData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n  \r\n    // Загрузка содержимого VCD-файла\r\n    useEffect(() => {\r\n      const fetchVCD = async () => {\r\n        try {\r\n          const response = await fetch('http://localhost:5000/download-vcd-content');\r\n          const data = await response.json();\r\n          if (data.success) {\r\n            setVcdContent(data.content);\r\n          } else {\r\n            setError(data.error || 'Ошибка загрузки VCD-файла');\r\n          }\r\n        } catch (err) {\r\n          setError('Ошибка подключения к серверу');\r\n        }\r\n      };\r\n  \r\n      fetchVCD();\r\n    }, []);\r\n  \r\n    // Парсинг VCD-файла\r\n    useEffect(() => {\r\n      if (vcdContent) {\r\n        try {\r\n          const parsed = parse(vcdContent);\r\n          setParsedData(parsed);\r\n        } catch (err) {\r\n          setError('Ошибка парсинга VCD-файла');\r\n        }\r\n      }\r\n    }, [vcdContent]);\r\n  \r\n    // Построение графика с использованием WaveDrom\r\n    useEffect(() => {\r\n      if (parsedData) {\r\n        const waveData = {\r\n          signal: Object.entries(parsedData.signal).map(([name, values]) => ({\r\n            name,\r\n            wave: values.map((value) => (value ? '1' : '0')).join(''),\r\n          })),\r\n        };\r\n  \r\n        WaveDrom.RenderWaveForm(0, waveData, document.getElementById('waveform'));\r\n      }\r\n    }, [parsedData]);\r\n  \r\n    return (\r\n      <div>\r\n        <h3>График сигналов</h3>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        {!error && !parsedData && <p>Загрузка...</p>}\r\n        <div id=\"waveform\"></div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default SignalGraph;\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\SignalGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { renderWaveForm } from 'wavedrom';\nimport { parse } from 'vcd-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignalGraph = ({\n  vcdContent\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (vcdContent && containerRef.current) {\n      try {\n        // Парсим содержимое VCD-файла\n        const parsedData = parse(vcdContent);\n\n        // Преобразуем данные в формат WaveDrom\n        const waveData = convertVCDToWaveDrom(parsedData);\n\n        // Рендерим график сигналов с помощью WaveDrom\n        renderWaveForm(waveData, containerRef.current);\n      } catch (error) {\n        console.error('Ошибка обработки VCD-файла:', error);\n      }\n    }\n  }, [vcdContent]);\n\n  // Преобразуем данные VCD в формат WaveDrom\n  const convertVCDToWaveDrom = parsedData => {\n    const signals = Object.keys(parsedData.signals).map(key => {\n      const signal = parsedData.signals[key];\n      const wave = signal.transitions.map(transition => {\n        switch (transition.value) {\n          case '1':\n            return '1';\n          case '0':\n            return '0';\n          case 'x':\n            return 'x';\n          case 'z':\n            return 'z';\n          default:\n            return '.';\n          // Пустое состояние\n        }\n      }).join('');\n      return {\n        name: key,\n        wave\n      };\n    });\n    return {\n      signal: signals\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n_s(SignalGraph, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SignalGraph;\nexport default SignalGraph;\nvar _c;\n$RefreshReg$(_c, \"SignalGraph\");","map":{"version":3,"names":["React","useEffect","useRef","renderWaveForm","parse","jsxDEV","_jsxDEV","SignalGraph","vcdContent","_s","containerRef","current","parsedData","waveData","convertVCDToWaveDrom","error","console","signals","Object","keys","map","key","signal","wave","transitions","transition","value","join","name","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/SignalGraph.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { renderWaveForm } from 'wavedrom';\r\nimport { parse } from 'vcd-parser';\r\n\r\nconst SignalGraph = ({ vcdContent }) => {\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (vcdContent && containerRef.current) {\r\n      try {\r\n        // Парсим содержимое VCD-файла\r\n        const parsedData = parse(vcdContent);\r\n\r\n        // Преобразуем данные в формат WaveDrom\r\n        const waveData = convertVCDToWaveDrom(parsedData);\r\n\r\n        // Рендерим график сигналов с помощью WaveDrom\r\n        renderWaveForm(waveData, containerRef.current);\r\n      } catch (error) {\r\n        console.error('Ошибка обработки VCD-файла:', error);\r\n      }\r\n    }\r\n  }, [vcdContent]);\r\n\r\n  // Преобразуем данные VCD в формат WaveDrom\r\n  const convertVCDToWaveDrom = (parsedData) => {\r\n    const signals = Object.keys(parsedData.signals).map((key) => {\r\n      const signal = parsedData.signals[key];\r\n      const wave = signal.transitions.map((transition) => {\r\n        switch (transition.value) {\r\n          case '1':\r\n            return '1';\r\n          case '0':\r\n            return '0';\r\n          case 'x':\r\n            return 'x';\r\n          case 'z':\r\n            return 'z';\r\n          default:\r\n            return '.'; // Пустое состояние\r\n        }\r\n      }).join('');\r\n\r\n      return { name: key, wave };\r\n    });\r\n\r\n    return { signal: signals };\r\n  };\r\n\r\n  return <div ref={containerRef}></div>;\r\n};\r\n\r\nexport default SignalGraph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,cAAc,QAAQ,UAAU;AACzC,SAASC,KAAK,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAMC,YAAY,GAAGR,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACd,IAAIO,UAAU,IAAIE,YAAY,CAACC,OAAO,EAAE;MACtC,IAAI;QACF;QACA,MAAMC,UAAU,GAAGR,KAAK,CAACI,UAAU,CAAC;;QAEpC;QACA,MAAMK,QAAQ,GAAGC,oBAAoB,CAACF,UAAU,CAAC;;QAEjD;QACAT,cAAc,CAACU,QAAQ,EAAEH,YAAY,CAACC,OAAO,CAAC;MAChD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF;EACF,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMM,oBAAoB,GAAIF,UAAU,IAAK;IAC3C,MAAMK,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACP,UAAU,CAACK,OAAO,CAAC,CAACG,GAAG,CAAEC,GAAG,IAAK;MAC3D,MAAMC,MAAM,GAAGV,UAAU,CAACK,OAAO,CAACI,GAAG,CAAC;MACtC,MAAME,IAAI,GAAGD,MAAM,CAACE,WAAW,CAACJ,GAAG,CAAEK,UAAU,IAAK;QAClD,QAAQA,UAAU,CAACC,KAAK;UACtB,KAAK,GAAG;YACN,OAAO,GAAG;UACZ,KAAK,GAAG;YACN,OAAO,GAAG;UACZ,KAAK,GAAG;YACN,OAAO,GAAG;UACZ,KAAK,GAAG;YACN,OAAO,GAAG;UACZ;YACE,OAAO,GAAG;UAAE;QAChB;MACF,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MAEX,OAAO;QAAEC,IAAI,EAAEP,GAAG;QAAEE;MAAK,CAAC;IAC5B,CAAC,CAAC;IAEF,OAAO;MAAED,MAAM,EAAEL;IAAQ,CAAC;EAC5B,CAAC;EAED,oBAAOX,OAAA;IAAKuB,GAAG,EAAEnB;EAAa;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACvC,CAAC;AAACxB,EAAA,CA9CIF,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAgDjB,eAAeA,WAAW;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
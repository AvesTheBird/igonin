{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport HierarchicalLayoutStage from './HierarchicalLayoutStage';\nimport { remove } from '../../../util/arrayUtils';\nimport CellPath from '../../cell/CellPath';\nimport { clone } from '../../../util/cloneUtils';\n/**\n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n *\n * Constructor: SwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nclass SwimlaneOrdering extends HierarchicalLayoutStage {\n  constructor(layout) {\n    super();\n    this.layout = layout;\n  }\n  /**\n   * Takes the graph detail and configuration information within the facade\n   * and creates the resulting laid out graph within that facade for further\n   * use.\n   */\n  execute(parent) {\n    const model = this.layout.getDataModel();\n    const seenNodes = {};\n    const unseenNodes = clone(model.vertexMapper, null, true);\n    // Perform a dfs through the internal model. If a cycle is found,\n    // reverse it.\n    let rootsArray = null;\n    if (model.roots != null) {\n      const modelRoots = model.roots;\n      rootsArray = [];\n      for (let i = 0; i < modelRoots.length; i += 1) {\n        rootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n      }\n    }\n    model.visit((parent, node, connectingEdge, layer, seen) => {\n      // Check if the cell is in it's own ancestor list, if so\n      // invert the connecting edge and reverse the target/source\n      // relationship to that edge in the parent and the cell\n      // Ancestor hashes only line up within a swimlane\n      const isAncestor = parent != null && parent.swimlaneIndex === node.swimlaneIndex && node.isAncestor(parent);\n      // If the source->target swimlane indices go from higher to\n      // lower, the edge is reverse\n      const reversedOverSwimlane = parent != null && connectingEdge != null && parent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source === node;\n      if (isAncestor) {\n        connectingEdge.invert();\n        remove(connectingEdge, parent.connectsAsSource);\n        node.connectsAsSource.push(connectingEdge);\n        parent.connectsAsTarget.push(connectingEdge);\n        remove(connectingEdge, node.connectsAsTarget);\n      } else if (reversedOverSwimlane) {\n        connectingEdge.invert();\n        remove(connectingEdge, parent.connectsAsTarget);\n        node.connectsAsTarget.push(connectingEdge);\n        parent.connectsAsSource.push(connectingEdge);\n        remove(connectingEdge, node.connectsAsSource);\n      }\n      const cellId = CellPath.create(node.cell);\n      seenNodes[cellId] = node;\n      delete unseenNodes[cellId];\n    }, rootsArray, true, null);\n  }\n}\nexport default SwimlaneOrdering;","map":{"version":3,"names":["HierarchicalLayoutStage","remove","CellPath","clone","SwimlaneOrdering","constructor","layout","execute","parent","model","getDataModel","seenNodes","unseenNodes","vertexMapper","rootsArray","roots","modelRoots","i","length","get","visit","node","connectingEdge","layer","seen","isAncestor","swimlaneIndex","reversedOverSwimlane","source","invert","connectsAsSource","push","connectsAsTarget","cellId","create","cell"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/view/layout/hierarchical/SwimlaneOrdering.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport HierarchicalLayoutStage from './HierarchicalLayoutStage';\nimport { remove } from '../../../util/arrayUtils';\nimport CellPath from '../../cell/CellPath';\nimport { clone } from '../../../util/cloneUtils';\n/**\n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n *\n * Constructor: SwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nclass SwimlaneOrdering extends HierarchicalLayoutStage {\n    constructor(layout) {\n        super();\n        this.layout = layout;\n    }\n    /**\n     * Takes the graph detail and configuration information within the facade\n     * and creates the resulting laid out graph within that facade for further\n     * use.\n     */\n    execute(parent) {\n        const model = this.layout.getDataModel();\n        const seenNodes = {};\n        const unseenNodes = clone(model.vertexMapper, null, true);\n        // Perform a dfs through the internal model. If a cycle is found,\n        // reverse it.\n        let rootsArray = null;\n        if (model.roots != null) {\n            const modelRoots = model.roots;\n            rootsArray = [];\n            for (let i = 0; i < modelRoots.length; i += 1) {\n                rootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n            }\n        }\n        model.visit((parent, node, connectingEdge, layer, seen) => {\n            // Check if the cell is in it's own ancestor list, if so\n            // invert the connecting edge and reverse the target/source\n            // relationship to that edge in the parent and the cell\n            // Ancestor hashes only line up within a swimlane\n            const isAncestor = parent != null &&\n                parent.swimlaneIndex === node.swimlaneIndex &&\n                node.isAncestor(parent);\n            // If the source->target swimlane indices go from higher to\n            // lower, the edge is reverse\n            const reversedOverSwimlane = parent != null &&\n                connectingEdge != null &&\n                parent.swimlaneIndex < node.swimlaneIndex &&\n                connectingEdge.source === node;\n            if (isAncestor) {\n                connectingEdge.invert();\n                remove(connectingEdge, parent.connectsAsSource);\n                node.connectsAsSource.push(connectingEdge);\n                parent.connectsAsTarget.push(connectingEdge);\n                remove(connectingEdge, node.connectsAsTarget);\n            }\n            else if (reversedOverSwimlane) {\n                connectingEdge.invert();\n                remove(connectingEdge, parent.connectsAsTarget);\n                node.connectsAsTarget.push(connectingEdge);\n                parent.connectsAsSource.push(connectingEdge);\n                remove(connectingEdge, node.connectsAsSource);\n            }\n            const cellId = CellPath.create(node.cell);\n            seenNodes[cellId] = node;\n            delete unseenNodes[cellId];\n        }, rootsArray, true, null);\n    }\n}\nexport default SwimlaneOrdering;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,uBAAuB,MAAM,2BAA2B;AAC/D,SAASC,MAAM,QAAQ,0BAA0B;AACjD,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,SAASC,KAAK,QAAQ,0BAA0B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,SAASJ,uBAAuB,CAAC;EACnDK,WAAWA,CAACC,MAAM,EAAE;IAChB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACA;AACJ;AACA;AACA;AACA;EACIC,OAAOA,CAACC,MAAM,EAAE;IACZ,MAAMC,KAAK,GAAG,IAAI,CAACH,MAAM,CAACI,YAAY,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpB,MAAMC,WAAW,GAAGT,KAAK,CAACM,KAAK,CAACI,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC;IACzD;IACA;IACA,IAAIC,UAAU,GAAG,IAAI;IACrB,IAAIL,KAAK,CAACM,KAAK,IAAI,IAAI,EAAE;MACrB,MAAMC,UAAU,GAAGP,KAAK,CAACM,KAAK;MAC9BD,UAAU,GAAG,EAAE;MACf,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACE,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QAC3CH,UAAU,CAACG,CAAC,CAAC,GAAGR,KAAK,CAACI,YAAY,CAACM,GAAG,CAACH,UAAU,CAACC,CAAC,CAAC,CAAC;MACzD;IACJ;IACAR,KAAK,CAACW,KAAK,CAAC,CAACZ,MAAM,EAAEa,IAAI,EAAEC,cAAc,EAAEC,KAAK,EAAEC,IAAI,KAAK;MACvD;MACA;MACA;MACA;MACA,MAAMC,UAAU,GAAGjB,MAAM,IAAI,IAAI,IAC7BA,MAAM,CAACkB,aAAa,KAAKL,IAAI,CAACK,aAAa,IAC3CL,IAAI,CAACI,UAAU,CAACjB,MAAM,CAAC;MAC3B;MACA;MACA,MAAMmB,oBAAoB,GAAGnB,MAAM,IAAI,IAAI,IACvCc,cAAc,IAAI,IAAI,IACtBd,MAAM,CAACkB,aAAa,GAAGL,IAAI,CAACK,aAAa,IACzCJ,cAAc,CAACM,MAAM,KAAKP,IAAI;MAClC,IAAII,UAAU,EAAE;QACZH,cAAc,CAACO,MAAM,CAAC,CAAC;QACvB5B,MAAM,CAACqB,cAAc,EAAEd,MAAM,CAACsB,gBAAgB,CAAC;QAC/CT,IAAI,CAACS,gBAAgB,CAACC,IAAI,CAACT,cAAc,CAAC;QAC1Cd,MAAM,CAACwB,gBAAgB,CAACD,IAAI,CAACT,cAAc,CAAC;QAC5CrB,MAAM,CAACqB,cAAc,EAAED,IAAI,CAACW,gBAAgB,CAAC;MACjD,CAAC,MACI,IAAIL,oBAAoB,EAAE;QAC3BL,cAAc,CAACO,MAAM,CAAC,CAAC;QACvB5B,MAAM,CAACqB,cAAc,EAAEd,MAAM,CAACwB,gBAAgB,CAAC;QAC/CX,IAAI,CAACW,gBAAgB,CAACD,IAAI,CAACT,cAAc,CAAC;QAC1Cd,MAAM,CAACsB,gBAAgB,CAACC,IAAI,CAACT,cAAc,CAAC;QAC5CrB,MAAM,CAACqB,cAAc,EAAED,IAAI,CAACS,gBAAgB,CAAC;MACjD;MACA,MAAMG,MAAM,GAAG/B,QAAQ,CAACgC,MAAM,CAACb,IAAI,CAACc,IAAI,CAAC;MACzCxB,SAAS,CAACsB,MAAM,CAAC,GAAGZ,IAAI;MACxB,OAAOT,WAAW,CAACqB,MAAM,CAAC;IAC9B,CAAC,EAAEnB,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC;EAC9B;AACJ;AACA,eAAeV,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
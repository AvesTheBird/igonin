{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport InternalEvent from '../event/InternalEvent';\n/**\n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n *\n * ```javascript\n * var mgr = new AutoSaveManager(editor.graph);\n * mgr.save()\n * {\n *   MaxLog.show();\n *   MaxLog.debug('save');\n * };\n * ```\n *\n * @class AutoSaveManager\n * @extends EventSource\n */\nclass AutoSaveManager extends EventSource {\n  constructor(graph) {\n    super();\n    /**\n     * Reference to the enclosing {@link Graph}.\n     */\n    this.graph = null;\n    /**\n     * Minimum amount of seconds between two consecutive autosaves. Eg. a\n     * value of 1 (s) means the graph is not stored more than once per second.\n     * Default is 10.\n     */\n    this.autoSaveDelay = 10;\n    /**\n     * Minimum amount of seconds between two consecutive autosaves triggered by\n     * more than <autoSaveThreshhold> changes within a timespan of less than\n     * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n     * stored more than once per second even if there are more than\n     * <autoSaveThreshold> changes within that timespan. Default is 2.\n     */\n    this.autoSaveThrottle = 2;\n    /**\n     * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n     * means after 2 change of the graph model the autosave will trigger if the\n     * condition below is true. Default is 5.\n     */\n    this.autoSaveThreshold = 5;\n    /**\n     * Counter for ignored changes in autosave.\n     */\n    this.ignoredChanges = 0;\n    /**\n     * Used for autosaving. See <autosave>.\n     */\n    this.lastSnapshot = 0;\n    /**\n     * Specifies if event handling is enabled. Default is true.\n     */\n    this.enabled = true;\n    // Notifies the manager of a change\n    this.changeHandler = (sender, evt) => {\n      if (this.isEnabled()) {\n        this.graphModelChanged(evt.getProperty('edit').changes);\n      }\n    };\n    this.setGraph(graph);\n  }\n  /**\n   * Returns true if events are handled. This implementation\n   * returns <enabled>.\n   */\n  isEnabled() {\n    return this.enabled;\n  }\n  /**\n   * Enables or disables event handling. This implementation\n   * updates <enabled>.\n   *\n   * @param enabled - Boolean that specifies the new enabled state.\n   */\n  setEnabled(value) {\n    this.enabled = value;\n  }\n  /**\n   * Sets the graph that the layouts operate on.\n   */\n  setGraph(graph) {\n    if (this.graph != null) {\n      this.graph.getDataModel().removeListener(this.changeHandler);\n    }\n    this.graph = graph;\n    if (this.graph != null) {\n      this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.changeHandler);\n    }\n  }\n  /**\n   * Empty hook that is called if the graph should be saved.\n   */\n  save() {\n    // empty\n  }\n  /**\n   * Invoked when the graph model has changed.\n   */\n  graphModelChanged(changes) {\n    const now = new Date().getTime();\n    const dt = (now - this.lastSnapshot) / 1000;\n    if (dt > this.autoSaveDelay || this.ignoredChanges >= this.autoSaveThreshold && dt > this.autoSaveThrottle) {\n      this.save();\n      this.reset();\n    } else {\n      // Increments the number of ignored changes\n      this.ignoredChanges++;\n    }\n  }\n  /**\n   * Resets all counters.\n   */\n  reset() {\n    this.lastSnapshot = new Date().getTime();\n    this.ignoredChanges = 0;\n  }\n  /**\n   * Removes all handlers from the <graph> and deletes the reference to it.\n   */\n  destroy() {\n    this.setGraph(null);\n  }\n}\nexport default AutoSaveManager;","map":{"version":3,"names":["EventSource","InternalEvent","AutoSaveManager","constructor","graph","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","enabled","changeHandler","sender","evt","isEnabled","graphModelChanged","getProperty","changes","setGraph","setEnabled","value","getDataModel","removeListener","addListener","CHANGE","save","now","Date","getTime","dt","reset","destroy"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/other/AutoSaveManager.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport InternalEvent from '../event/InternalEvent';\n/**\n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n *\n * ```javascript\n * var mgr = new AutoSaveManager(editor.graph);\n * mgr.save()\n * {\n *   MaxLog.show();\n *   MaxLog.debug('save');\n * };\n * ```\n *\n * @class AutoSaveManager\n * @extends EventSource\n */\nclass AutoSaveManager extends EventSource {\n    constructor(graph) {\n        super();\n        /**\n         * Reference to the enclosing {@link Graph}.\n         */\n        this.graph = null;\n        /**\n         * Minimum amount of seconds between two consecutive autosaves. Eg. a\n         * value of 1 (s) means the graph is not stored more than once per second.\n         * Default is 10.\n         */\n        this.autoSaveDelay = 10;\n        /**\n         * Minimum amount of seconds between two consecutive autosaves triggered by\n         * more than <autoSaveThreshhold> changes within a timespan of less than\n         * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n         * stored more than once per second even if there are more than\n         * <autoSaveThreshold> changes within that timespan. Default is 2.\n         */\n        this.autoSaveThrottle = 2;\n        /**\n         * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n         * means after 2 change of the graph model the autosave will trigger if the\n         * condition below is true. Default is 5.\n         */\n        this.autoSaveThreshold = 5;\n        /**\n         * Counter for ignored changes in autosave.\n         */\n        this.ignoredChanges = 0;\n        /**\n         * Used for autosaving. See <autosave>.\n         */\n        this.lastSnapshot = 0;\n        /**\n         * Specifies if event handling is enabled. Default is true.\n         */\n        this.enabled = true;\n        // Notifies the manager of a change\n        this.changeHandler = (sender, evt) => {\n            if (this.isEnabled()) {\n                this.graphModelChanged(evt.getProperty('edit').changes);\n            }\n        };\n        this.setGraph(graph);\n    }\n    /**\n     * Returns true if events are handled. This implementation\n     * returns <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation\n     * updates <enabled>.\n     *\n     * @param enabled - Boolean that specifies the new enabled state.\n     */\n    setEnabled(value) {\n        this.enabled = value;\n    }\n    /**\n     * Sets the graph that the layouts operate on.\n     */\n    setGraph(graph) {\n        if (this.graph != null) {\n            this.graph.getDataModel().removeListener(this.changeHandler);\n        }\n        this.graph = graph;\n        if (this.graph != null) {\n            this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.changeHandler);\n        }\n    }\n    /**\n     * Empty hook that is called if the graph should be saved.\n     */\n    save() {\n        // empty\n    }\n    /**\n     * Invoked when the graph model has changed.\n     */\n    graphModelChanged(changes) {\n        const now = new Date().getTime();\n        const dt = (now - this.lastSnapshot) / 1000;\n        if (dt > this.autoSaveDelay ||\n            (this.ignoredChanges >= this.autoSaveThreshold && dt > this.autoSaveThrottle)) {\n            this.save();\n            this.reset();\n        }\n        else {\n            // Increments the number of ignored changes\n            this.ignoredChanges++;\n        }\n    }\n    /**\n     * Resets all counters.\n     */\n    reset() {\n        this.lastSnapshot = new Date().getTime();\n        this.ignoredChanges = 0;\n    }\n    /**\n     * Removes all handlers from the <graph> and deletes the reference to it.\n     */\n    destroy() {\n        this.setGraph(null);\n    }\n}\nexport default AutoSaveManager;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,aAAa,MAAM,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASF,WAAW,CAAC;EACtCG,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAAC,CAAC;IACP;AACR;AACA;IACQ,IAAI,CAACA,KAAK,GAAG,IAAI;IACjB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,CAAC;IACzB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,CAAC;IAC1B;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,CAAC;IACvB;AACR;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;IACA,IAAI,CAACC,aAAa,GAAG,CAACC,MAAM,EAAEC,GAAG,KAAK;MAClC,IAAI,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE;QAClB,IAAI,CAACC,iBAAiB,CAACF,GAAG,CAACG,WAAW,CAAC,MAAM,CAAC,CAACC,OAAO,CAAC;MAC3D;IACJ,CAAC;IACD,IAAI,CAACC,QAAQ,CAACd,KAAK,CAAC;EACxB;EACA;AACJ;AACA;AACA;EACIU,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACJ,OAAO;EACvB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIS,UAAUA,CAACC,KAAK,EAAE;IACd,IAAI,CAACV,OAAO,GAAGU,KAAK;EACxB;EACA;AACJ;AACA;EACIF,QAAQA,CAACd,KAAK,EAAE;IACZ,IAAI,IAAI,CAACA,KAAK,IAAI,IAAI,EAAE;MACpB,IAAI,CAACA,KAAK,CAACiB,YAAY,CAAC,CAAC,CAACC,cAAc,CAAC,IAAI,CAACX,aAAa,CAAC;IAChE;IACA,IAAI,CAACP,KAAK,GAAGA,KAAK;IAClB,IAAI,IAAI,CAACA,KAAK,IAAI,IAAI,EAAE;MACpB,IAAI,CAACA,KAAK,CAACiB,YAAY,CAAC,CAAC,CAACE,WAAW,CAACtB,aAAa,CAACuB,MAAM,EAAE,IAAI,CAACb,aAAa,CAAC;IACnF;EACJ;EACA;AACJ;AACA;EACIc,IAAIA,CAAA,EAAG;IACH;EAAA;EAEJ;AACJ;AACA;EACIV,iBAAiBA,CAACE,OAAO,EAAE;IACvB,MAAMS,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IAChC,MAAMC,EAAE,GAAG,CAACH,GAAG,GAAG,IAAI,CAACjB,YAAY,IAAI,IAAI;IAC3C,IAAIoB,EAAE,GAAG,IAAI,CAACxB,aAAa,IACtB,IAAI,CAACG,cAAc,IAAI,IAAI,CAACD,iBAAiB,IAAIsB,EAAE,GAAG,IAAI,CAACvB,gBAAiB,EAAE;MAC/E,IAAI,CAACmB,IAAI,CAAC,CAAC;MACX,IAAI,CAACK,KAAK,CAAC,CAAC;IAChB,CAAC,MACI;MACD;MACA,IAAI,CAACtB,cAAc,EAAE;IACzB;EACJ;EACA;AACJ;AACA;EACIsB,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACrB,YAAY,GAAG,IAAIkB,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACxC,IAAI,CAACpB,cAAc,GAAG,CAAC;EAC3B;EACA;AACJ;AACA;EACIuB,OAAOA,CAAA,EAAG;IACN,IAAI,CAACb,QAAQ,CAAC,IAAI,CAAC;EACvB;AACJ;AACA,eAAehB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport RootChange from '../../view/undoable_changes/RootChange';\nimport { NODETYPE } from '../../util/Constants';\n/**\n * Codec for {@link RootChange}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n * - root\n */\nexport class RootChangeCodec extends ObjectCodec {\n  constructor() {\n    const __dummy = undefined;\n    super(new RootChange(__dummy, __dummy), ['model', 'previous', 'root']);\n  }\n  /**\n   * Encodes the child recursively.\n   */\n  afterEncode(enc, obj, node) {\n    enc.encodeCell(obj.root, node);\n    return node;\n  }\n  /**\n   * Decodes the optional children as cells using the respective decoder.\n   */\n  beforeDecode(dec, node, obj) {\n    if (node.firstChild != null && node.firstChild.nodeType === NODETYPE.ELEMENT) {\n      // Makes sure the original node isn't modified\n      node = node.cloneNode(true);\n      let tmp = node.firstChild;\n      obj.root = dec.decodeCell(tmp, false);\n      let tmp2 = tmp.nextSibling;\n      tmp.parentNode.removeChild(tmp);\n      tmp = tmp2;\n      while (tmp != null) {\n        tmp2 = tmp.nextSibling;\n        dec.decodeCell(tmp);\n        tmp.parentNode.removeChild(tmp);\n        tmp = tmp2;\n      }\n    }\n    return node;\n  }\n  /**\n   * Restores the state by assigning the previous value.\n   */\n  afterDecode(_dec, _node, obj) {\n    obj.previous = obj.root;\n    return obj;\n  }\n}","map":{"version":3,"names":["ObjectCodec","RootChange","NODETYPE","RootChangeCodec","constructor","__dummy","undefined","afterEncode","enc","obj","node","encodeCell","root","beforeDecode","dec","firstChild","nodeType","ELEMENT","cloneNode","tmp","decodeCell","tmp2","nextSibling","parentNode","removeChild","afterDecode","_dec","_node","previous"],"sources":["D:/OSPanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/serialization/codecs/RootChangeCodec.js"],"sourcesContent":["/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport RootChange from '../../view/undoable_changes/RootChange';\nimport { NODETYPE } from '../../util/Constants';\n/**\n * Codec for {@link RootChange}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n * - root\n */\nexport class RootChangeCodec extends ObjectCodec {\n    constructor() {\n        const __dummy = undefined;\n        super(new RootChange(__dummy, __dummy), ['model', 'previous', 'root']);\n    }\n    /**\n     * Encodes the child recursively.\n     */\n    afterEncode(enc, obj, node) {\n        enc.encodeCell(obj.root, node);\n        return node;\n    }\n    /**\n     * Decodes the optional children as cells using the respective decoder.\n     */\n    beforeDecode(dec, node, obj) {\n        if (node.firstChild != null && node.firstChild.nodeType === NODETYPE.ELEMENT) {\n            // Makes sure the original node isn't modified\n            node = node.cloneNode(true);\n            let tmp = node.firstChild;\n            obj.root = dec.decodeCell(tmp, false);\n            let tmp2 = tmp.nextSibling;\n            tmp.parentNode.removeChild(tmp);\n            tmp = tmp2;\n            while (tmp != null) {\n                tmp2 = tmp.nextSibling;\n                dec.decodeCell(tmp);\n                tmp.parentNode.removeChild(tmp);\n                tmp = tmp2;\n            }\n        }\n        return node;\n    }\n    /**\n     * Restores the state by assigning the previous value.\n     */\n    afterDecode(_dec, _node, obj) {\n        obj.previous = obj.root;\n        return obj;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,gBAAgB;AACxC,OAAOC,UAAU,MAAM,wCAAwC;AAC/D,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,SAASH,WAAW,CAAC;EAC7CI,WAAWA,CAAA,EAAG;IACV,MAAMC,OAAO,GAAGC,SAAS;IACzB,KAAK,CAAC,IAAIL,UAAU,CAACI,OAAO,EAAEA,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;EAC1E;EACA;AACJ;AACA;EACIE,WAAWA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;IACxBF,GAAG,CAACG,UAAU,CAACF,GAAG,CAACG,IAAI,EAAEF,IAAI,CAAC;IAC9B,OAAOA,IAAI;EACf;EACA;AACJ;AACA;EACIG,YAAYA,CAACC,GAAG,EAAEJ,IAAI,EAAED,GAAG,EAAE;IACzB,IAAIC,IAAI,CAACK,UAAU,IAAI,IAAI,IAAIL,IAAI,CAACK,UAAU,CAACC,QAAQ,KAAKd,QAAQ,CAACe,OAAO,EAAE;MAC1E;MACAP,IAAI,GAAGA,IAAI,CAACQ,SAAS,CAAC,IAAI,CAAC;MAC3B,IAAIC,GAAG,GAAGT,IAAI,CAACK,UAAU;MACzBN,GAAG,CAACG,IAAI,GAAGE,GAAG,CAACM,UAAU,CAACD,GAAG,EAAE,KAAK,CAAC;MACrC,IAAIE,IAAI,GAAGF,GAAG,CAACG,WAAW;MAC1BH,GAAG,CAACI,UAAU,CAACC,WAAW,CAACL,GAAG,CAAC;MAC/BA,GAAG,GAAGE,IAAI;MACV,OAAOF,GAAG,IAAI,IAAI,EAAE;QAChBE,IAAI,GAAGF,GAAG,CAACG,WAAW;QACtBR,GAAG,CAACM,UAAU,CAACD,GAAG,CAAC;QACnBA,GAAG,CAACI,UAAU,CAACC,WAAW,CAACL,GAAG,CAAC;QAC/BA,GAAG,GAAGE,IAAI;MACd;IACJ;IACA,OAAOX,IAAI;EACf;EACA;AACJ;AACA;EACIe,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAElB,GAAG,EAAE;IAC1BA,GAAG,CAACmB,QAAQ,GAAGnB,GAAG,CAACG,IAAI;IACvB,OAAOH,GAAG;EACd;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport HierarchicalLayoutStage from './HierarchicalLayoutStage';\nimport { remove } from '../../../util/arrayUtils';\nimport { clone } from '../../../util/cloneUtils';\n/**\n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n *\n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nclass MinimumCycleRemover extends HierarchicalLayoutStage {\n  constructor(layout) {\n    super();\n    this.layout = layout;\n  }\n  /**\n   * Takes the graph detail and configuration information within the facade\n   * and creates the resulting laid out graph within that facade for further\n   * use.\n   */\n  execute(parent) {\n    const model = this.layout.getDataModel();\n    const seenNodes = {};\n    const unseenNodesArray = model.vertexMapper.getValues();\n    const unseenNodes = {};\n    for (let i = 0; i < unseenNodesArray.length; i += 1) {\n      unseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n    }\n    // Perform a dfs through the internal model. If a cycle is found,\n    // reverse it.\n    let rootsArray = null;\n    if (model.roots != null) {\n      const modelRoots = model.roots;\n      rootsArray = [];\n      for (let i = 0; i < modelRoots.length; i += 1) {\n        rootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n      }\n    }\n    model.visit((parent, node, connectingEdge, layer, seen) => {\n      // Check if the cell is in it's own ancestor list, if so\n      // invert the connecting edge and reverse the target/source\n      // relationship to that edge in the parent and the cell\n      if (node.isAncestor(parent)) {\n        connectingEdge.invert();\n        remove(connectingEdge, parent.connectsAsSource);\n        parent.connectsAsTarget.push(connectingEdge);\n        remove(connectingEdge, node.connectsAsTarget);\n        node.connectsAsSource.push(connectingEdge);\n      }\n      seenNodes[node.id] = node;\n      delete unseenNodes[node.id];\n    }, rootsArray, true, null);\n    // If there are any nodes that should be nodes that the dfs can miss\n    // these need to be processed with the dfs and the roots assigned\n    // correctly to form a correct internal model\n    const seenNodesCopy = clone(seenNodes, null, true);\n    // Pick a random cell and dfs from it\n    model.visit((parent, node, connectingEdge, layer, seen) => {\n      // Check if the cell is in it's own ancestor list, if so\n      // invert the connecting edge and reverse the target/source\n      // relationship to that edge in the parent and the cell\n      if (node.isAncestor(parent)) {\n        connectingEdge.invert();\n        remove(connectingEdge, parent.connectsAsSource);\n        node.connectsAsSource.push(connectingEdge);\n        parent.connectsAsTarget.push(connectingEdge);\n        remove(connectingEdge, node.connectsAsTarget);\n      }\n      seenNodes[node.id] = node;\n      delete unseenNodes[node.id];\n    }, Object.values(unseenNodes), true, seenNodesCopy);\n  }\n}\nexport default MinimumCycleRemover;","map":{"version":3,"names":["HierarchicalLayoutStage","remove","clone","MinimumCycleRemover","constructor","layout","execute","parent","model","getDataModel","seenNodes","unseenNodesArray","vertexMapper","getValues","unseenNodes","i","length","id","rootsArray","roots","modelRoots","get","visit","node","connectingEdge","layer","seen","isAncestor","invert","connectsAsSource","connectsAsTarget","push","seenNodesCopy","Object","values"],"sources":["D:/ospanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/layout/hierarchical/MinimumCycleRemover.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport HierarchicalLayoutStage from './HierarchicalLayoutStage';\nimport { remove } from '../../../util/arrayUtils';\nimport { clone } from '../../../util/cloneUtils';\n/**\n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n *\n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nclass MinimumCycleRemover extends HierarchicalLayoutStage {\n    constructor(layout) {\n        super();\n        this.layout = layout;\n    }\n    /**\n     * Takes the graph detail and configuration information within the facade\n     * and creates the resulting laid out graph within that facade for further\n     * use.\n     */\n    execute(parent) {\n        const model = this.layout.getDataModel();\n        const seenNodes = {};\n        const unseenNodesArray = model.vertexMapper.getValues();\n        const unseenNodes = {};\n        for (let i = 0; i < unseenNodesArray.length; i += 1) {\n            unseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n        }\n        // Perform a dfs through the internal model. If a cycle is found,\n        // reverse it.\n        let rootsArray = null;\n        if (model.roots != null) {\n            const modelRoots = model.roots;\n            rootsArray = [];\n            for (let i = 0; i < modelRoots.length; i += 1) {\n                rootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n            }\n        }\n        model.visit((parent, node, connectingEdge, layer, seen) => {\n            // Check if the cell is in it's own ancestor list, if so\n            // invert the connecting edge and reverse the target/source\n            // relationship to that edge in the parent and the cell\n            if (node.isAncestor(parent)) {\n                connectingEdge.invert();\n                remove(connectingEdge, parent.connectsAsSource);\n                parent.connectsAsTarget.push(connectingEdge);\n                remove(connectingEdge, node.connectsAsTarget);\n                node.connectsAsSource.push(connectingEdge);\n            }\n            seenNodes[node.id] = node;\n            delete unseenNodes[node.id];\n        }, rootsArray, true, null);\n        // If there are any nodes that should be nodes that the dfs can miss\n        // these need to be processed with the dfs and the roots assigned\n        // correctly to form a correct internal model\n        const seenNodesCopy = clone(seenNodes, null, true);\n        // Pick a random cell and dfs from it\n        model.visit((parent, node, connectingEdge, layer, seen) => {\n            // Check if the cell is in it's own ancestor list, if so\n            // invert the connecting edge and reverse the target/source\n            // relationship to that edge in the parent and the cell\n            if (node.isAncestor(parent)) {\n                connectingEdge.invert();\n                remove(connectingEdge, parent.connectsAsSource);\n                node.connectsAsSource.push(connectingEdge);\n                parent.connectsAsTarget.push(connectingEdge);\n                remove(connectingEdge, node.connectsAsTarget);\n            }\n            seenNodes[node.id] = node;\n            delete unseenNodes[node.id];\n        }, Object.values(unseenNodes), true, seenNodesCopy);\n    }\n}\nexport default MinimumCycleRemover;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
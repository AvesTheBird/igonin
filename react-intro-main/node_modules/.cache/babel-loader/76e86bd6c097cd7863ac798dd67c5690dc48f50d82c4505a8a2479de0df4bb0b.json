{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from './Shape';\nimport { NONE } from '../../util/Constants';\n/**\n * Extends {@link Shape} to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's {@link redrawPath} method should be overridden.\n *\n * This shape is registered under {@link Constants.SHAPE_ACTOR} in {@link cellRenderer}.\n *\n * ```javascript\n * function SampleShape() { }\n *\n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n *\n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * ```\n */\nclass ActorShape extends Shape {\n  constructor(bounds = null, fill = NONE, stroke = NONE, strokeWidth = 1) {\n    super();\n    this.bounds = bounds;\n    this.fill = fill;\n    this.stroke = stroke;\n    this.strokeWidth = strokeWidth;\n  }\n  /**\n   * Redirects to redrawPath for subclasses to work.\n   */\n  paintVertexShape(c, x, y, w, h) {\n    c.translate(x, y);\n    c.begin();\n    this.redrawPath(c, x, y, w, h);\n    c.fillAndStroke();\n  }\n  /**\n   * Draws the path for this shape.\n   */\n  redrawPath(c, x, y, w, h) {\n    const width = w / 3;\n    c.moveTo(0, h);\n    c.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n    c.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n    c.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n    c.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n    c.close();\n  }\n}\nexport default ActorShape;","map":{"version":3,"names":["Shape","NONE","ActorShape","constructor","bounds","fill","stroke","strokeWidth","paintVertexShape","c","x","y","w","h","translate","begin","redrawPath","fillAndStroke","width","moveTo","curveTo","close"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/geometry/ActorShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from './Shape';\nimport { NONE } from '../../util/Constants';\n/**\n * Extends {@link Shape} to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's {@link redrawPath} method should be overridden.\n *\n * This shape is registered under {@link Constants.SHAPE_ACTOR} in {@link cellRenderer}.\n *\n * ```javascript\n * function SampleShape() { }\n *\n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n *\n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * ```\n */\nclass ActorShape extends Shape {\n    constructor(bounds = null, fill = NONE, stroke = NONE, strokeWidth = 1) {\n        super();\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Redirects to redrawPath for subclasses to work.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        c.translate(x, y);\n        c.begin();\n        this.redrawPath(c, x, y, w, h);\n        c.fillAndStroke();\n    }\n    /**\n     * Draws the path for this shape.\n     */\n    redrawPath(c, x, y, w, h) {\n        const width = w / 3;\n        c.moveTo(0, h);\n        c.curveTo(0, (3 * h) / 5, 0, (2 * h) / 5, w / 2, (2 * h) / 5);\n        c.curveTo(w / 2 - width, (2 * h) / 5, w / 2 - width, 0, w / 2, 0);\n        c.curveTo(w / 2 + width, 0, w / 2 + width, (2 * h) / 5, w / 2, (2 * h) / 5);\n        c.curveTo(w, (2 * h) / 5, w, (3 * h) / 5, w, h);\n        c.close();\n    }\n}\nexport default ActorShape;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,SAAS;AAC3B,SAASC,IAAI,QAAQ,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASF,KAAK,CAAC;EAC3BG,WAAWA,CAACC,MAAM,GAAG,IAAI,EAAEC,IAAI,GAAGJ,IAAI,EAAEK,MAAM,GAAGL,IAAI,EAAEM,WAAW,GAAG,CAAC,EAAE;IACpE,KAAK,CAAC,CAAC;IACP,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EACA;AACJ;AACA;EACIC,gBAAgBA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC5BJ,CAAC,CAACK,SAAS,CAACJ,CAAC,EAAEC,CAAC,CAAC;IACjBF,CAAC,CAACM,KAAK,CAAC,CAAC;IACT,IAAI,CAACC,UAAU,CAACP,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAC9BJ,CAAC,CAACQ,aAAa,CAAC,CAAC;EACrB;EACA;AACJ;AACA;EACID,UAAUA,CAACP,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACtB,MAAMK,KAAK,GAAGN,CAAC,GAAG,CAAC;IACnBH,CAAC,CAACU,MAAM,CAAC,CAAC,EAAEN,CAAC,CAAC;IACdJ,CAAC,CAACW,OAAO,CAAC,CAAC,EAAG,CAAC,GAAGP,CAAC,GAAI,CAAC,EAAE,CAAC,EAAG,CAAC,GAAGA,CAAC,GAAI,CAAC,EAAED,CAAC,GAAG,CAAC,EAAG,CAAC,GAAGC,CAAC,GAAI,CAAC,CAAC;IAC7DJ,CAAC,CAACW,OAAO,CAACR,CAAC,GAAG,CAAC,GAAGM,KAAK,EAAG,CAAC,GAAGL,CAAC,GAAI,CAAC,EAAED,CAAC,GAAG,CAAC,GAAGM,KAAK,EAAE,CAAC,EAAEN,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACjEH,CAAC,CAACW,OAAO,CAACR,CAAC,GAAG,CAAC,GAAGM,KAAK,EAAE,CAAC,EAAEN,CAAC,GAAG,CAAC,GAAGM,KAAK,EAAG,CAAC,GAAGL,CAAC,GAAI,CAAC,EAAED,CAAC,GAAG,CAAC,EAAG,CAAC,GAAGC,CAAC,GAAI,CAAC,CAAC;IAC3EJ,CAAC,CAACW,OAAO,CAACR,CAAC,EAAG,CAAC,GAAGC,CAAC,GAAI,CAAC,EAAED,CAAC,EAAG,CAAC,GAAGC,CAAC,GAAI,CAAC,EAAED,CAAC,EAAEC,CAAC,CAAC;IAC/CJ,CAAC,CAACY,KAAK,CAAC,CAAC;EACb;AACJ;AACA,eAAenB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
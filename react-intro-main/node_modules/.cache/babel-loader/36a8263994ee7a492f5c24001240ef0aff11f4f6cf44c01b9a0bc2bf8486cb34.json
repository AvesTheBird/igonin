{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport Point from '../geometry/Point';\nimport PolylineShape from '../geometry/edge/PolylineShape';\nimport { Graph } from '../Graph';\nimport { mixInto } from '../../util/Utils';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst PageBreaksMixin = {\n  horizontalPageBreaks: null,\n  verticalPageBreaks: null,\n  /**\n   * Invokes from {@link sizeDidChange} to redraw the page breaks.\n   *\n   * @param visible Boolean that specifies if page breaks should be shown.\n   * @param width Specifies the width of the container in pixels.\n   * @param height Specifies the height of the container in pixels.\n   */\n  updatePageBreaks(visible, width, height) {\n    const {\n      scale,\n      translate: tr\n    } = this.getView();\n    const fmt = this.getPageFormat();\n    const ps = scale * this.getPageScale();\n    const bounds = new Rectangle(0, 0, fmt.width * ps, fmt.height * ps);\n    const gb = Rectangle.fromRectangle(this.getGraphBounds());\n    gb.width = Math.max(1, gb.width);\n    gb.height = Math.max(1, gb.height);\n    bounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n    bounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n    gb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n    gb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n    // Does not show page breaks if the scale is too small\n    visible = visible && Math.min(bounds.width, bounds.height) > this.getMinPageBreakDist();\n    const horizontalCount = visible ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n    const verticalCount = visible ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n    const right = (verticalCount - 1) * bounds.width;\n    const bottom = (horizontalCount - 1) * bounds.height;\n    if (this.horizontalPageBreaks == null && horizontalCount > 0) {\n      this.horizontalPageBreaks = [];\n    }\n    if (this.verticalPageBreaks == null && verticalCount > 0) {\n      this.verticalPageBreaks = [];\n    }\n    const drawPageBreaks = breaks => {\n      if (breaks != null) {\n        const count = breaks === this.horizontalPageBreaks ? horizontalCount : verticalCount;\n        for (let i = 0; i <= count; i += 1) {\n          const pts = breaks === this.horizontalPageBreaks ? [new Point(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)), new Point(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] : [new Point(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)), new Point(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n          if (breaks[i] != null) {\n            breaks[i].points = pts;\n            breaks[i].redraw();\n          } else {\n            const pageBreak = new PolylineShape(pts, this.getPageBreakColor());\n            pageBreak.dialect = this.getDialect();\n            pageBreak.pointerEvents = false;\n            pageBreak.isDashed = this.isPageBreakDashed();\n            pageBreak.init(this.getView().backgroundPane);\n            pageBreak.redraw();\n            breaks[i] = pageBreak;\n          }\n        }\n        for (let i = count; i < breaks.length; i += 1) {\n          breaks[i].destroy();\n        }\n        breaks.splice(count, breaks.length - count);\n      }\n    };\n    drawPageBreaks(this.horizontalPageBreaks);\n    drawPageBreaks(this.verticalPageBreaks);\n  }\n};\nmixInto(Graph)(PageBreaksMixin);","map":{"version":3,"names":["Rectangle","Point","PolylineShape","Graph","mixInto","PageBreaksMixin","horizontalPageBreaks","verticalPageBreaks","updatePageBreaks","visible","width","height","scale","translate","tr","getView","fmt","getPageFormat","ps","getPageScale","bounds","gb","fromRectangle","getGraphBounds","Math","max","x","floor","y","ceil","min","getMinPageBreakDist","horizontalCount","verticalCount","right","bottom","drawPageBreaks","breaks","count","i","pts","round","points","redraw","pageBreak","getPageBreakColor","dialect","getDialect","pointerEvents","isDashed","isPageBreakDashed","init","backgroundPane","length","destroy","splice"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/mixins/PageBreaksMixin.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport Point from '../geometry/Point';\nimport PolylineShape from '../geometry/edge/PolylineShape';\nimport { Graph } from '../Graph';\nimport { mixInto } from '../../util/Utils';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst PageBreaksMixin = {\n    horizontalPageBreaks: null,\n    verticalPageBreaks: null,\n    /**\n     * Invokes from {@link sizeDidChange} to redraw the page breaks.\n     *\n     * @param visible Boolean that specifies if page breaks should be shown.\n     * @param width Specifies the width of the container in pixels.\n     * @param height Specifies the height of the container in pixels.\n     */\n    updatePageBreaks(visible, width, height) {\n        const { scale, translate: tr } = this.getView();\n        const fmt = this.getPageFormat();\n        const ps = scale * this.getPageScale();\n        const bounds = new Rectangle(0, 0, fmt.width * ps, fmt.height * ps);\n        const gb = Rectangle.fromRectangle(this.getGraphBounds());\n        gb.width = Math.max(1, gb.width);\n        gb.height = Math.max(1, gb.height);\n        bounds.x =\n            Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n        bounds.y =\n            Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n        gb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n        gb.height =\n            Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n        // Does not show page breaks if the scale is too small\n        visible =\n            visible && Math.min(bounds.width, bounds.height) > this.getMinPageBreakDist();\n        const horizontalCount = visible ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n        const verticalCount = visible ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n        const right = (verticalCount - 1) * bounds.width;\n        const bottom = (horizontalCount - 1) * bounds.height;\n        if (this.horizontalPageBreaks == null && horizontalCount > 0) {\n            this.horizontalPageBreaks = [];\n        }\n        if (this.verticalPageBreaks == null && verticalCount > 0) {\n            this.verticalPageBreaks = [];\n        }\n        const drawPageBreaks = (breaks) => {\n            if (breaks != null) {\n                const count = breaks === this.horizontalPageBreaks ? horizontalCount : verticalCount;\n                for (let i = 0; i <= count; i += 1) {\n                    const pts = breaks === this.horizontalPageBreaks\n                        ? [\n                            new Point(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n                            new Point(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height)),\n                        ]\n                        : [\n                            new Point(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n                            new Point(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom)),\n                        ];\n                    if (breaks[i] != null) {\n                        breaks[i].points = pts;\n                        breaks[i].redraw();\n                    }\n                    else {\n                        const pageBreak = new PolylineShape(pts, this.getPageBreakColor());\n                        pageBreak.dialect = this.getDialect();\n                        pageBreak.pointerEvents = false;\n                        pageBreak.isDashed = this.isPageBreakDashed();\n                        pageBreak.init(this.getView().backgroundPane);\n                        pageBreak.redraw();\n                        breaks[i] = pageBreak;\n                    }\n                }\n                for (let i = count; i < breaks.length; i += 1) {\n                    breaks[i].destroy();\n                }\n                breaks.splice(count, breaks.length - count);\n            }\n        };\n        drawPageBreaks(this.horizontalPageBreaks);\n        drawPageBreaks(this.verticalPageBreaks);\n    },\n};\nmixInto(Graph)(PageBreaksMixin);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalMouseEvent from './InternalMouseEvent';\nimport Client from '../../Client';\nimport { isConsumed, isMouseEvent } from '../../util/EventUtils';\n// Checks if passive event listeners are supported\n// see https://github.com/Modernizr/Modernizr/issues/1894\nlet supportsPassive = false;\ntry {\n  document.addEventListener('test', () => {\n    return;\n  }, Object.defineProperty && Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {\n  // ignore\n}\n/**\n * @class InternalEvent\n *\n * Cross-browser DOM event support. For internal event handling,\n * {@link mxEventSource} and the graph event dispatch loop in {@link graph} are used.\n *\n * ### Memory Leaks:\n *\n * Use this class for adding and removing listeners to/from DOM nodes. The\n * {@link removeAllListeners} function is provided to remove all listeners that\n * have been added using {@link addListener}. The function should be invoked when\n * the last reference is removed in the JavaScript code, typically when the\n * referenced DOM node is removed from the DOM.\n */\nclass InternalEvent {\n  /**\n   * Binds the function to the specified event on the given element. Use\n   * {@link mxUtils.bind} in order to bind the \"this\" keyword inside the function\n   * to a given execution scope.\n   */\n  static addListener(element, eventName, funct) {\n    element.addEventListener(eventName, funct, supportsPassive ? {\n      passive: false\n    } : false);\n    if (!element.mxListenerList) {\n      element.mxListenerList = [];\n    }\n    const entry = {\n      name: eventName,\n      f: funct\n    };\n    element.mxListenerList.push(entry);\n  }\n  /**\n   * Removes the specified listener from the given element.\n   */\n  static removeListener(element, eventName, funct) {\n    element.removeEventListener(eventName, funct, false);\n    if (element.mxListenerList) {\n      const listenerCount = element.mxListenerList.length;\n      for (let i = 0; i < listenerCount; i += 1) {\n        const entry = element.mxListenerList[i];\n        if (entry.f === funct) {\n          element.mxListenerList.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  /**\n   * Removes all listeners from the given element.\n   */\n  static removeAllListeners(element) {\n    const list = element.mxListenerList;\n    if (list) {\n      while (list.length > 0) {\n        const entry = list[0];\n        InternalEvent.removeListener(element, entry.name, entry.f);\n      }\n    }\n  }\n  /**\n   * Adds the given listeners for touch, mouse and/or pointer events. If\n   * <Client.IS_POINTER> is true then pointer events will be registered,\n   * else the respective mouse events will be registered. If <Client.IS_POINTER>\n   * is false and <Client.IS_TOUCH> is true then the respective touch events\n   * will be registered as well as the mouse events.\n   */\n  static addGestureListeners(node, startListener = null, moveListener = null, endListener = null) {\n    if (startListener) {\n      InternalEvent.addListener(node, Client.IS_POINTER ? 'pointerdown' : 'mousedown', startListener);\n    }\n    if (moveListener) {\n      InternalEvent.addListener(node, Client.IS_POINTER ? 'pointermove' : 'mousemove', moveListener);\n    }\n    if (endListener) {\n      InternalEvent.addListener(node, Client.IS_POINTER ? 'pointerup' : 'mouseup', endListener);\n    }\n    if (!Client.IS_POINTER && Client.IS_TOUCH) {\n      if (startListener) {\n        InternalEvent.addListener(node, 'touchstart', startListener);\n      }\n      if (moveListener) {\n        InternalEvent.addListener(node, 'touchmove', moveListener);\n      }\n      if (endListener) {\n        InternalEvent.addListener(node, 'touchend', endListener);\n      }\n    }\n  }\n  /**\n   * Removes the given listeners from mousedown, mousemove, mouseup and the\n   * respective touch events if <Client.IS_TOUCH> is true.\n   */\n  static removeGestureListeners(node, startListener, moveListener, endListener) {\n    if (startListener) {\n      InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointerdown' : 'mousedown', startListener);\n    }\n    if (moveListener) {\n      InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointermove' : 'mousemove', moveListener);\n    }\n    if (endListener) {\n      InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointerup' : 'mouseup', endListener);\n    }\n    if (!Client.IS_POINTER && Client.IS_TOUCH) {\n      if (startListener) {\n        InternalEvent.removeListener(node, 'touchstart', startListener);\n      }\n      if (moveListener) {\n        InternalEvent.removeListener(node, 'touchmove', moveListener);\n      }\n      if (endListener) {\n        InternalEvent.removeListener(node, 'touchend', endListener);\n      }\n    }\n  }\n  /**\n   * Redirects the mouse events from the given DOM node to the graph dispatch\n   * loop using the event and given state as event arguments. State can\n   * either be an instance of <CellState> or a function that returns an\n   * <CellState>. The down, move, up and dblClick arguments are optional\n   * functions that take the trigger event as arguments and replace the\n   * default behaviour.\n   */\n  static redirectMouseEvents(node, graph, state = null, down = null, move = null, up = null, dblClick = null) {\n    const getState = evt => {\n      return typeof state === 'function' ? state(evt) : state;\n    };\n    InternalEvent.addGestureListeners(node, evt => {\n      if (down) {\n        down(evt);\n      } else if (!isConsumed(evt)) {\n        graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt, getState(evt)));\n      }\n    }, evt => {\n      if (move) {\n        move(evt);\n      } else if (!isConsumed(evt)) {\n        graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, getState(evt)));\n      }\n    }, evt => {\n      if (up) {\n        up(evt);\n      } else if (!isConsumed(evt)) {\n        graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt, getState(evt)));\n      }\n    });\n    InternalEvent.addListener(node, 'dblclick', evt => {\n      if (dblClick) {\n        dblClick(evt);\n      } else if (!isConsumed(evt)) {\n        const tmp = getState(evt);\n        graph.dblClick(evt, tmp?.cell);\n      }\n    });\n  }\n  /**\n   * Removes the known listeners from the given DOM node and its descendants.\n   *\n   * @param element DOM node to remove the listeners from.\n   */\n  static release(element) {\n    try {\n      InternalEvent.removeAllListeners(element);\n      // @ts-ignore\n      const children = element.childNodes;\n      if (children !== undefined) {\n        const childCount = children.length;\n        for (let i = 0; i < childCount; i += 1) {\n          InternalEvent.release(children[i]);\n        }\n      }\n    } catch (e) {\n      // ignores errors as this is typically called in cleanup code\n    }\n  }\n  /**\n   * Installs the given function as a handler for mouse wheel events. The\n   * function has two arguments: the mouse event and a boolean that specifies\n   * if the wheel was moved up or down.\n   *\n   * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n   * Safari. It does currently not work on Safari for Mac.\n   *\n   * ### Example\n   *\n   * @example\n   * ```javascript\n   * mxEvent.addMouseWheelListener(function (evt, up)\n   * {\n   *   MaxLog.show();\n   *   MaxLog.debug('mouseWheel: up='+up);\n   * });\n   * ```\n   *\n   * @param funct Handler function that takes the event argument and a boolean up\n   * argument for the mousewheel direction.\n   * @param target Target for installing the listener in Google Chrome. See\n   * https://www.chromestatus.com/features/6662647093133312.\n   */\n  static addMouseWheelListener(funct, target) {\n    if (funct != null) {\n      const wheelHandler = evt => {\n        // To prevent window zoom on trackpad pinch\n        if (evt.ctrlKey) {\n          evt.preventDefault();\n        }\n        // Handles the event using the given function\n        if (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5) {\n          funct(evt, evt.deltaY == 0 ? -evt.deltaX > 0 : -evt.deltaY > 0);\n        }\n      };\n      target = target != null ? target : window;\n      if (Client.IS_SF && !Client.IS_TOUCH) {\n        let scale = 1;\n        InternalEvent.addListener(target, 'gesturestart', evt => {\n          InternalEvent.consume(evt);\n          scale = 1;\n        });\n        InternalEvent.addListener(target, 'gesturechange', evt => {\n          InternalEvent.consume(evt);\n          if (typeof evt.scale === 'number') {\n            const diff = scale - evt.scale;\n            if (Math.abs(diff) > 0.2) {\n              funct(evt, diff < 0, true);\n              scale = evt.scale;\n            }\n          }\n        });\n        InternalEvent.addListener(target, 'gestureend', evt => {\n          InternalEvent.consume(evt);\n        });\n      } else {\n        let evtCache = [];\n        let dx0 = 0;\n        let dy0 = 0;\n        // Adds basic listeners for graph event dispatching\n        InternalEvent.addGestureListeners(target, evt => {\n          if (!isMouseEvent(evt) && evt.pointerId != null) {\n            evtCache.push(evt);\n          }\n        }, evt => {\n          if (!isMouseEvent(evt) && evtCache.length == 2) {\n            // Find this event in the cache and update its record with this event\n            for (let i = 0; i < evtCache.length; i += 1) {\n              if (evt.pointerId == evtCache[i].pointerId) {\n                evtCache[i] = evt;\n                break;\n              }\n            }\n            // Calculate the distance between the two pointers\n            const dx = Math.abs(evtCache[0].clientX - evtCache[1].clientX);\n            const dy = Math.abs(evtCache[0].clientY - evtCache[1].clientY);\n            const tx = Math.abs(dx - dx0);\n            const ty = Math.abs(dy - dy0);\n            if (tx > InternalEvent.PINCH_THRESHOLD || ty > InternalEvent.PINCH_THRESHOLD) {\n              const cx = evtCache[0].clientX + (evtCache[1].clientX - evtCache[0].clientX) / 2;\n              const cy = evtCache[0].clientY + (evtCache[1].clientY - evtCache[0].clientY) / 2;\n              funct(evtCache[0], tx > ty ? dx > dx0 : dy > dy0, true, cx, cy);\n              // Cache the distance for the next move event\n              dx0 = dx;\n              dy0 = dy;\n            }\n          }\n        }, evt => {\n          evtCache = [];\n          dx0 = 0;\n          dy0 = 0;\n        });\n      }\n      InternalEvent.addListener(target, 'wheel', wheelHandler);\n    }\n  }\n  /**\n   * Disables the context menu for the given element.\n   */\n  static disableContextMenu(element) {\n    InternalEvent.addListener(element, 'contextmenu', evt => {\n      if (evt.preventDefault) {\n        evt.preventDefault();\n      }\n      return false;\n    });\n  }\n  /**\n   * Consumes the given event.\n   *\n   * @param evt Native event to be consumed.\n   * @param {boolean} [preventDefault=true] Optional boolean to prevent the default for the event.\n   * Default is true.\n   * @param {boolean} [stopPropagation=true] Option boolean to stop event propagation. Default is\n   * true.\n   */\n  static consume(evt, preventDefault = true, stopPropagation = true) {\n    if (preventDefault) {\n      if (evt.preventDefault) {\n        if (stopPropagation) {\n          evt.stopPropagation();\n        }\n        evt.preventDefault();\n      } else if (stopPropagation) {\n        evt.cancelBubble = true;\n      }\n    }\n    // Opera\n    // @ts-ignore This is a non-standard property.\n    evt.isConsumed = true;\n    // Other browsers\n    if (!evt.preventDefault) {\n      evt.returnValue = false;\n    }\n  }\n}\n//\n// Special handles in mouse events\n//\n/**\n * Index for the label handle in an mxMouseEvent. This should be a negative\n * value that does not interfere with any possible handle indices.\n * @default -1\n */\nInternalEvent.LABEL_HANDLE = -1;\n/**\n * Index for the rotation handle in an mxMouseEvent. This should be a\n * negative value that does not interfere with any possible handle indices.\n * @default -2\n */\nInternalEvent.ROTATION_HANDLE = -2;\n/**\n * Start index for the custom handles in an mxMouseEvent. This should be a\n * negative value and is the start index which is decremented for each\n * custom handle.\n * @default -100\n */\nInternalEvent.CUSTOM_HANDLE = -100;\n/**\n * Start index for the virtual handles in an mxMouseEvent. This should be a\n * negative value and is the start index which is decremented for each\n * virtual handle.\n * This assumes that there are no more\n * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n *\n * @default -100000\n */\nInternalEvent.VIRTUAL_HANDLE = -100000;\n//\n// Event names\n//\n/**\n * Specifies the event name for mouseDown.\n */\nInternalEvent.MOUSE_DOWN = 'mouseDown';\n/**\n * Specifies the event name for mouseMove.\n */\nInternalEvent.MOUSE_MOVE = 'mouseMove';\n/**\n * Specifies the event name for mouseUp.\n */\nInternalEvent.MOUSE_UP = 'mouseUp';\n/**\n * Specifies the event name for activate.\n */\nInternalEvent.ACTIVATE = 'activate';\n/**\n * Specifies the event name for resizeStart.\n */\nInternalEvent.RESIZE_START = 'resizeStart';\n/**\n * Specifies the event name for resize.\n */\nInternalEvent.RESIZE = 'resize';\n/**\n * Specifies the event name for resizeEnd.\n */\nInternalEvent.RESIZE_END = 'resizeEnd';\n/**\n * Specifies the event name for moveStart.\n */\nInternalEvent.MOVE_START = 'moveStart';\n/**\n * Specifies the event name for move.\n */\nInternalEvent.MOVE = 'move';\n/**\n * Specifies the event name for moveEnd.\n */\nInternalEvent.MOVE_END = 'moveEnd';\n/**\n * Specifies the event name for panStart.\n */\nInternalEvent.PAN_START = 'panStart';\n/**\n * Specifies the event name for pan.\n */\nInternalEvent.PAN = 'pan';\n/**\n * Specifies the event name for panEnd.\n */\nInternalEvent.PAN_END = 'panEnd';\n/**\n * Specifies the event name for minimize.\n */\nInternalEvent.MINIMIZE = 'minimize';\n/**\n * Specifies the event name for normalize.\n */\nInternalEvent.NORMALIZE = 'normalize';\n/**\n * Specifies the event name for maximize.\n */\nInternalEvent.MAXIMIZE = 'maximize';\n/**\n * Specifies the event name for hide.\n */\nInternalEvent.HIDE = 'hide';\n/**\n * Specifies the event name for show.\n */\nInternalEvent.SHOW = 'show';\n/**\n * Specifies the event name for close.\n */\nInternalEvent.CLOSE = 'close';\n/**\n * Specifies the event name for destroy.\n */\nInternalEvent.DESTROY = 'destroy';\n/**\n * Specifies the event name for refresh.\n */\nInternalEvent.REFRESH = 'refresh';\n/**\n * Specifies the event name for size.\n */\nInternalEvent.SIZE = 'size';\n/**\n * Specifies the event name for select.\n */\nInternalEvent.SELECT = 'select';\n/**\n * Specifies the event name for fired.\n */\nInternalEvent.FIRED = 'fired';\n/**\n * Specifies the event name for fireMouseEvent.\n */\nInternalEvent.FIRE_MOUSE_EVENT = 'fireMouseEvent';\n/**\n * Specifies the event name for gesture.\n */\nInternalEvent.GESTURE = 'gesture';\n/**\n * Specifies the event name for tapAndHold.\n */\nInternalEvent.TAP_AND_HOLD = 'tapAndHold';\n/**\n * Specifies the event name for get.\n */\nInternalEvent.GET = 'get';\n/**\n * Specifies the event name for receive.\n */\nInternalEvent.RECEIVE = 'receive';\n/**\n * Specifies the event name for connect.\n */\nInternalEvent.CONNECT = 'connect';\n/**\n * Specifies the event name for disconnect.\n */\nInternalEvent.DISCONNECT = 'disconnect';\n/**\n * Specifies the event name for suspend.\n */\nInternalEvent.SUSPEND = 'suspend';\n/**\n * Specifies the event name for suspend.\n */\nInternalEvent.RESUME = 'resume';\n/**\n * Specifies the event name for mark.\n */\nInternalEvent.MARK = 'mark';\n/**\n * Specifies the event name for root.\n */\nInternalEvent.ROOT = 'root';\n/**\n * Specifies the event name for post.\n */\nInternalEvent.POST = 'post';\n/**\n * Specifies the event name for open.\n */\nInternalEvent.OPEN = 'open';\n/**\n * Specifies the event name for open.\n */\nInternalEvent.SAVE = 'save';\n/**\n * Specifies the event name for beforeAddVertex.\n */\nInternalEvent.BEFORE_ADD_VERTEX = 'beforeAddVertex';\n/**\n * Specifies the event name for addVertex.\n */\nInternalEvent.ADD_VERTEX = 'addVertex';\n/**\n * Specifies the event name for afterAddVertex.\n */\nInternalEvent.AFTER_ADD_VERTEX = 'afterAddVertex';\n/**\n * Specifies the event name for done.\n */\nInternalEvent.DONE = 'done';\n/**\n * Specifies the event name for execute.\n */\nInternalEvent.EXECUTE = 'execute';\n/**\n * Specifies the event name for executed.\n */\nInternalEvent.EXECUTED = 'executed';\n/**\n * Specifies the event name for beginUpdate.\n */\nInternalEvent.BEGIN_UPDATE = 'beginUpdate';\n/**\n * Specifies the event name for startEdit.\n */\nInternalEvent.START_EDIT = 'startEdit';\n/**\n * Specifies the event name for endUpdate.\n */\nInternalEvent.END_UPDATE = 'endUpdate';\n/**\n * Specifies the event name for endEdit.\n */\nInternalEvent.END_EDIT = 'endEdit';\n/**\n * Specifies the event name for beforeUndo.\n */\nInternalEvent.BEFORE_UNDO = 'beforeUndo';\n/**\n * Specifies the event name for undo.\n */\nInternalEvent.UNDO = 'undo';\n/**\n * Specifies the event name for redo.\n */\nInternalEvent.REDO = 'redo';\n/**\n * Specifies the event name for change.\n */\nInternalEvent.CHANGE = 'change';\n/**\n * Specifies the event name for notify.\n */\nInternalEvent.NOTIFY = 'notify';\n/**\n * Specifies the event name for layoutCells.\n */\nInternalEvent.LAYOUT_CELLS = 'layoutCells';\n/**\n * Specifies the event name for click.\n */\nInternalEvent.CLICK = 'click';\n/**\n * Specifies the event name for scale.\n */\nInternalEvent.SCALE = 'scale';\n/**\n * Specifies the event name for translate.\n */\nInternalEvent.TRANSLATE = 'translate';\n/**\n * Specifies the event name for scaleAndTranslate.\n */\nInternalEvent.SCALE_AND_TRANSLATE = 'scaleAndTranslate';\n/**\n * Specifies the event name for up.\n */\nInternalEvent.UP = 'up';\n/**\n * Specifies the event name for down.\n */\nInternalEvent.DOWN = 'down';\n/**\n * Specifies the event name for add.\n */\nInternalEvent.ADD = 'add';\n/**\n * Specifies the event name for remove.\n */\nInternalEvent.REMOVE = 'remove';\n/**\n * Specifies the event name for clear.\n */\nInternalEvent.CLEAR = 'clear';\n/**\n * Specifies the event name for addCells.\n */\nInternalEvent.ADD_CELLS = 'addCells';\n/**\n * Specifies the event name for cellsAdded.\n */\nInternalEvent.CELLS_ADDED = 'cellsAdded';\n/**\n * Specifies the event name for moveCells.\n */\nInternalEvent.MOVE_CELLS = 'moveCells';\n/**\n * Specifies the event name for cellsMoved.\n */\nInternalEvent.CELLS_MOVED = 'cellsMoved';\n/**\n * Specifies the event name for resizeCells.\n */\nInternalEvent.RESIZE_CELLS = 'resizeCells';\n/**\n * Specifies the event name for cellsResized.\n */\nInternalEvent.CELLS_RESIZED = 'cellsResized';\n/**\n * Specifies the event name for toggleCells.\n */\nInternalEvent.TOGGLE_CELLS = 'toggleCells';\n/**\n * Specifies the event name for cellsToggled.\n */\nInternalEvent.CELLS_TOGGLED = 'cellsToggled';\n/**\n * Specifies the event name for orderCells.\n */\nInternalEvent.ORDER_CELLS = 'orderCells';\n/**\n * Specifies the event name for cellsOrdered.\n */\nInternalEvent.CELLS_ORDERED = 'cellsOrdered';\n/**\n * Specifies the event name for removeCells.\n */\nInternalEvent.REMOVE_CELLS = 'removeCells';\n/**\n * Specifies the event name for cellsRemoved.\n */\nInternalEvent.CELLS_REMOVED = 'cellsRemoved';\n/**\n * Specifies the event name for groupCells.\n */\nInternalEvent.GROUP_CELLS = 'groupCells';\n/**\n * Specifies the event name for ungroupCells.\n */\nInternalEvent.UNGROUP_CELLS = 'ungroupCells';\n/**\n * Specifies the event name for removeCellsFromParent.\n */\nInternalEvent.REMOVE_CELLS_FROM_PARENT = 'removeCellsFromParent';\n/**\n * Specifies the event name for foldCells.\n */\nInternalEvent.FOLD_CELLS = 'foldCells';\n/**\n * Specifies the event name for cellsFolded.\n */\nInternalEvent.CELLS_FOLDED = 'cellsFolded';\n/**\n * Specifies the event name for alignCells.\n */\nInternalEvent.ALIGN_CELLS = 'alignCells';\n/**\n * Specifies the event name for labelChanged.\n */\nInternalEvent.LABEL_CHANGED = 'labelChanged';\n/**\n * Specifies the event name for connectCell.\n */\nInternalEvent.CONNECT_CELL = 'connectCell';\n/**\n * Specifies the event name for cellConnected.\n */\nInternalEvent.CELL_CONNECTED = 'cellConnected';\n/**\n * Specifies the event name for splitEdge.\n */\nInternalEvent.SPLIT_EDGE = 'splitEdge';\n/**\n * Specifies the event name for flipEdge.\n */\nInternalEvent.FLIP_EDGE = 'flipEdge';\n/**\n * Specifies the event name for startEditing.\n */\nInternalEvent.START_EDITING = 'startEditing';\n/**\n * Specifies the event name for editingStarted.\n */\nInternalEvent.EDITING_STARTED = 'editingStarted';\n/**\n * Specifies the event name for editingStopped.\n */\nInternalEvent.EDITING_STOPPED = 'editingStopped';\n/**\n * Specifies the event name for addOverlay.\n */\nInternalEvent.ADD_OVERLAY = 'addOverlay';\n/**\n * Specifies the event name for removeOverlay.\n */\nInternalEvent.REMOVE_OVERLAY = 'removeOverlay';\n/**\n * Specifies the event name for updateCellSize.\n */\nInternalEvent.UPDATE_CELL_SIZE = 'updateCellSize';\n/**\n * Specifies the event name for escape.\n */\nInternalEvent.ESCAPE = 'escape';\n/**\n * Specifies the event name for doubleClick.\n */\nInternalEvent.DOUBLE_CLICK = 'doubleClick';\n/**\n * Specifies the event name for start.\n */\nInternalEvent.START = 'start';\n/**\n * Specifies the event name for reset.\n */\nInternalEvent.RESET = 'reset';\n/**\n * Threshold for pinch gestures to fire a mouse wheel event.\n * Default value is 10.\n */\nInternalEvent.PINCH_THRESHOLD = 10;\nexport default InternalEvent;","map":{"version":3,"names":["InternalMouseEvent","Client","isConsumed","isMouseEvent","supportsPassive","document","addEventListener","Object","defineProperty","get","e","InternalEvent","addListener","element","eventName","funct","passive","mxListenerList","entry","name","f","push","removeListener","removeEventListener","listenerCount","length","i","splice","removeAllListeners","list","addGestureListeners","node","startListener","moveListener","endListener","IS_POINTER","IS_TOUCH","removeGestureListeners","redirectMouseEvents","graph","state","down","move","up","dblClick","getState","evt","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","tmp","cell","release","children","childNodes","undefined","childCount","addMouseWheelListener","target","wheelHandler","ctrlKey","preventDefault","Math","abs","deltaX","deltaY","window","IS_SF","scale","consume","diff","evtCache","dx0","dy0","pointerId","dx","clientX","dy","clientY","tx","ty","PINCH_THRESHOLD","cx","cy","disableContextMenu","stopPropagation","cancelBubble","returnValue","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","RESIZE_END","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","NORMALIZE","MAXIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/event/InternalEvent.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalMouseEvent from './InternalMouseEvent';\nimport Client from '../../Client';\nimport { isConsumed, isMouseEvent } from '../../util/EventUtils';\n// Checks if passive event listeners are supported\n// see https://github.com/Modernizr/Modernizr/issues/1894\nlet supportsPassive = false;\ntry {\n    document.addEventListener('test', () => {\n        return;\n    }, Object.defineProperty &&\n        Object.defineProperty({}, 'passive', {\n            get: () => {\n                supportsPassive = true;\n            },\n        }));\n}\ncatch (e) {\n    // ignore\n}\n/**\n * @class InternalEvent\n *\n * Cross-browser DOM event support. For internal event handling,\n * {@link mxEventSource} and the graph event dispatch loop in {@link graph} are used.\n *\n * ### Memory Leaks:\n *\n * Use this class for adding and removing listeners to/from DOM nodes. The\n * {@link removeAllListeners} function is provided to remove all listeners that\n * have been added using {@link addListener}. The function should be invoked when\n * the last reference is removed in the JavaScript code, typically when the\n * referenced DOM node is removed from the DOM.\n */\nclass InternalEvent {\n    /**\n     * Binds the function to the specified event on the given element. Use\n     * {@link mxUtils.bind} in order to bind the \"this\" keyword inside the function\n     * to a given execution scope.\n     */\n    static addListener(element, eventName, funct) {\n        element.addEventListener(eventName, funct, supportsPassive ? { passive: false } : false);\n        if (!element.mxListenerList) {\n            element.mxListenerList = [];\n        }\n        const entry = { name: eventName, f: funct };\n        element.mxListenerList.push(entry);\n    }\n    /**\n     * Removes the specified listener from the given element.\n     */\n    static removeListener(element, eventName, funct) {\n        element.removeEventListener(eventName, funct, false);\n        if (element.mxListenerList) {\n            const listenerCount = element.mxListenerList.length;\n            for (let i = 0; i < listenerCount; i += 1) {\n                const entry = element.mxListenerList[i];\n                if (entry.f === funct) {\n                    element.mxListenerList.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * Removes all listeners from the given element.\n     */\n    static removeAllListeners(element) {\n        const list = element.mxListenerList;\n        if (list) {\n            while (list.length > 0) {\n                const entry = list[0];\n                InternalEvent.removeListener(element, entry.name, entry.f);\n            }\n        }\n    }\n    /**\n     * Adds the given listeners for touch, mouse and/or pointer events. If\n     * <Client.IS_POINTER> is true then pointer events will be registered,\n     * else the respective mouse events will be registered. If <Client.IS_POINTER>\n     * is false and <Client.IS_TOUCH> is true then the respective touch events\n     * will be registered as well as the mouse events.\n     */\n    static addGestureListeners(node, startListener = null, moveListener = null, endListener = null) {\n        if (startListener) {\n            InternalEvent.addListener(node, Client.IS_POINTER ? 'pointerdown' : 'mousedown', startListener);\n        }\n        if (moveListener) {\n            InternalEvent.addListener(node, Client.IS_POINTER ? 'pointermove' : 'mousemove', moveListener);\n        }\n        if (endListener) {\n            InternalEvent.addListener(node, Client.IS_POINTER ? 'pointerup' : 'mouseup', endListener);\n        }\n        if (!Client.IS_POINTER && Client.IS_TOUCH) {\n            if (startListener) {\n                InternalEvent.addListener(node, 'touchstart', startListener);\n            }\n            if (moveListener) {\n                InternalEvent.addListener(node, 'touchmove', moveListener);\n            }\n            if (endListener) {\n                InternalEvent.addListener(node, 'touchend', endListener);\n            }\n        }\n    }\n    /**\n     * Removes the given listeners from mousedown, mousemove, mouseup and the\n     * respective touch events if <Client.IS_TOUCH> is true.\n     */\n    static removeGestureListeners(node, startListener, moveListener, endListener) {\n        if (startListener) {\n            InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointerdown' : 'mousedown', startListener);\n        }\n        if (moveListener) {\n            InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointermove' : 'mousemove', moveListener);\n        }\n        if (endListener) {\n            InternalEvent.removeListener(node, Client.IS_POINTER ? 'pointerup' : 'mouseup', endListener);\n        }\n        if (!Client.IS_POINTER && Client.IS_TOUCH) {\n            if (startListener) {\n                InternalEvent.removeListener(node, 'touchstart', startListener);\n            }\n            if (moveListener) {\n                InternalEvent.removeListener(node, 'touchmove', moveListener);\n            }\n            if (endListener) {\n                InternalEvent.removeListener(node, 'touchend', endListener);\n            }\n        }\n    }\n    /**\n     * Redirects the mouse events from the given DOM node to the graph dispatch\n     * loop using the event and given state as event arguments. State can\n     * either be an instance of <CellState> or a function that returns an\n     * <CellState>. The down, move, up and dblClick arguments are optional\n     * functions that take the trigger event as arguments and replace the\n     * default behaviour.\n     */\n    static redirectMouseEvents(node, graph, state = null, down = null, move = null, up = null, dblClick = null) {\n        const getState = (evt) => {\n            return typeof state === 'function' ? state(evt) : state;\n        };\n        InternalEvent.addGestureListeners(node, (evt) => {\n            if (down) {\n                down(evt);\n            }\n            else if (!isConsumed(evt)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_DOWN, new InternalMouseEvent(evt, getState(evt)));\n            }\n        }, (evt) => {\n            if (move) {\n                move(evt);\n            }\n            else if (!isConsumed(evt)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_MOVE, new InternalMouseEvent(evt, getState(evt)));\n            }\n        }, (evt) => {\n            if (up) {\n                up(evt);\n            }\n            else if (!isConsumed(evt)) {\n                graph.fireMouseEvent(InternalEvent.MOUSE_UP, new InternalMouseEvent(evt, getState(evt)));\n            }\n        });\n        InternalEvent.addListener(node, 'dblclick', (evt) => {\n            if (dblClick) {\n                dblClick(evt);\n            }\n            else if (!isConsumed(evt)) {\n                const tmp = getState(evt);\n                graph.dblClick(evt, tmp?.cell);\n            }\n        });\n    }\n    /**\n     * Removes the known listeners from the given DOM node and its descendants.\n     *\n     * @param element DOM node to remove the listeners from.\n     */\n    static release(element) {\n        try {\n            InternalEvent.removeAllListeners(element);\n            // @ts-ignore\n            const children = element.childNodes;\n            if (children !== undefined) {\n                const childCount = children.length;\n                for (let i = 0; i < childCount; i += 1) {\n                    InternalEvent.release(children[i]);\n                }\n            }\n        }\n        catch (e) {\n            // ignores errors as this is typically called in cleanup code\n        }\n    }\n    /**\n     * Installs the given function as a handler for mouse wheel events. The\n     * function has two arguments: the mouse event and a boolean that specifies\n     * if the wheel was moved up or down.\n     *\n     * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n     * Safari. It does currently not work on Safari for Mac.\n     *\n     * ### Example\n     *\n     * @example\n     * ```javascript\n     * mxEvent.addMouseWheelListener(function (evt, up)\n     * {\n     *   MaxLog.show();\n     *   MaxLog.debug('mouseWheel: up='+up);\n     * });\n     * ```\n     *\n     * @param funct Handler function that takes the event argument and a boolean up\n     * argument for the mousewheel direction.\n     * @param target Target for installing the listener in Google Chrome. See\n     * https://www.chromestatus.com/features/6662647093133312.\n     */\n    static addMouseWheelListener(funct, target) {\n        if (funct != null) {\n            const wheelHandler = (evt) => {\n                // To prevent window zoom on trackpad pinch\n                if (evt.ctrlKey) {\n                    evt.preventDefault();\n                }\n                // Handles the event using the given function\n                if (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5) {\n                    funct(evt, evt.deltaY == 0 ? -evt.deltaX > 0 : -evt.deltaY > 0);\n                }\n            };\n            target = target != null ? target : window;\n            if (Client.IS_SF && !Client.IS_TOUCH) {\n                let scale = 1;\n                InternalEvent.addListener(target, 'gesturestart', (evt) => {\n                    InternalEvent.consume(evt);\n                    scale = 1;\n                });\n                InternalEvent.addListener(target, 'gesturechange', ((evt) => {\n                    InternalEvent.consume(evt);\n                    if (typeof evt.scale === 'number') {\n                        const diff = scale - evt.scale;\n                        if (Math.abs(diff) > 0.2) {\n                            funct(evt, diff < 0, true);\n                            scale = evt.scale;\n                        }\n                    }\n                }));\n                InternalEvent.addListener(target, 'gestureend', (evt) => {\n                    InternalEvent.consume(evt);\n                });\n            }\n            else {\n                let evtCache = [];\n                let dx0 = 0;\n                let dy0 = 0;\n                // Adds basic listeners for graph event dispatching\n                InternalEvent.addGestureListeners(target, ((evt) => {\n                    if (!isMouseEvent(evt) && evt.pointerId != null) {\n                        evtCache.push(evt);\n                    }\n                }), ((evt) => {\n                    if (!isMouseEvent(evt) && evtCache.length == 2) {\n                        // Find this event in the cache and update its record with this event\n                        for (let i = 0; i < evtCache.length; i += 1) {\n                            if (evt.pointerId == evtCache[i].pointerId) {\n                                evtCache[i] = evt;\n                                break;\n                            }\n                        }\n                        // Calculate the distance between the two pointers\n                        const dx = Math.abs(evtCache[0].clientX - evtCache[1].clientX);\n                        const dy = Math.abs(evtCache[0].clientY - evtCache[1].clientY);\n                        const tx = Math.abs(dx - dx0);\n                        const ty = Math.abs(dy - dy0);\n                        if (tx > InternalEvent.PINCH_THRESHOLD ||\n                            ty > InternalEvent.PINCH_THRESHOLD) {\n                            const cx = evtCache[0].clientX + (evtCache[1].clientX - evtCache[0].clientX) / 2;\n                            const cy = evtCache[0].clientY + (evtCache[1].clientY - evtCache[0].clientY) / 2;\n                            funct(evtCache[0], tx > ty ? dx > dx0 : dy > dy0, true, cx, cy);\n                            // Cache the distance for the next move event\n                            dx0 = dx;\n                            dy0 = dy;\n                        }\n                    }\n                }), (evt) => {\n                    evtCache = [];\n                    dx0 = 0;\n                    dy0 = 0;\n                });\n            }\n            InternalEvent.addListener(target, 'wheel', wheelHandler);\n        }\n    }\n    /**\n     * Disables the context menu for the given element.\n     */\n    static disableContextMenu(element) {\n        InternalEvent.addListener(element, 'contextmenu', (evt) => {\n            if (evt.preventDefault) {\n                evt.preventDefault();\n            }\n            return false;\n        });\n    }\n    /**\n     * Consumes the given event.\n     *\n     * @param evt Native event to be consumed.\n     * @param {boolean} [preventDefault=true] Optional boolean to prevent the default for the event.\n     * Default is true.\n     * @param {boolean} [stopPropagation=true] Option boolean to stop event propagation. Default is\n     * true.\n     */\n    static consume(evt, preventDefault = true, stopPropagation = true) {\n        if (preventDefault) {\n            if (evt.preventDefault) {\n                if (stopPropagation) {\n                    evt.stopPropagation();\n                }\n                evt.preventDefault();\n            }\n            else if (stopPropagation) {\n                evt.cancelBubble = true;\n            }\n        }\n        // Opera\n        // @ts-ignore This is a non-standard property.\n        evt.isConsumed = true;\n        // Other browsers\n        if (!evt.preventDefault) {\n            evt.returnValue = false;\n        }\n    }\n}\n//\n// Special handles in mouse events\n//\n/**\n * Index for the label handle in an mxMouseEvent. This should be a negative\n * value that does not interfere with any possible handle indices.\n * @default -1\n */\nInternalEvent.LABEL_HANDLE = -1;\n/**\n * Index for the rotation handle in an mxMouseEvent. This should be a\n * negative value that does not interfere with any possible handle indices.\n * @default -2\n */\nInternalEvent.ROTATION_HANDLE = -2;\n/**\n * Start index for the custom handles in an mxMouseEvent. This should be a\n * negative value and is the start index which is decremented for each\n * custom handle.\n * @default -100\n */\nInternalEvent.CUSTOM_HANDLE = -100;\n/**\n * Start index for the virtual handles in an mxMouseEvent. This should be a\n * negative value and is the start index which is decremented for each\n * virtual handle.\n * This assumes that there are no more\n * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n *\n * @default -100000\n */\nInternalEvent.VIRTUAL_HANDLE = -100000;\n//\n// Event names\n//\n/**\n * Specifies the event name for mouseDown.\n */\nInternalEvent.MOUSE_DOWN = 'mouseDown';\n/**\n * Specifies the event name for mouseMove.\n */\nInternalEvent.MOUSE_MOVE = 'mouseMove';\n/**\n * Specifies the event name for mouseUp.\n */\nInternalEvent.MOUSE_UP = 'mouseUp';\n/**\n * Specifies the event name for activate.\n */\nInternalEvent.ACTIVATE = 'activate';\n/**\n * Specifies the event name for resizeStart.\n */\nInternalEvent.RESIZE_START = 'resizeStart';\n/**\n * Specifies the event name for resize.\n */\nInternalEvent.RESIZE = 'resize';\n/**\n * Specifies the event name for resizeEnd.\n */\nInternalEvent.RESIZE_END = 'resizeEnd';\n/**\n * Specifies the event name for moveStart.\n */\nInternalEvent.MOVE_START = 'moveStart';\n/**\n * Specifies the event name for move.\n */\nInternalEvent.MOVE = 'move';\n/**\n * Specifies the event name for moveEnd.\n */\nInternalEvent.MOVE_END = 'moveEnd';\n/**\n * Specifies the event name for panStart.\n */\nInternalEvent.PAN_START = 'panStart';\n/**\n * Specifies the event name for pan.\n */\nInternalEvent.PAN = 'pan';\n/**\n * Specifies the event name for panEnd.\n */\nInternalEvent.PAN_END = 'panEnd';\n/**\n * Specifies the event name for minimize.\n */\nInternalEvent.MINIMIZE = 'minimize';\n/**\n * Specifies the event name for normalize.\n */\nInternalEvent.NORMALIZE = 'normalize';\n/**\n * Specifies the event name for maximize.\n */\nInternalEvent.MAXIMIZE = 'maximize';\n/**\n * Specifies the event name for hide.\n */\nInternalEvent.HIDE = 'hide';\n/**\n * Specifies the event name for show.\n */\nInternalEvent.SHOW = 'show';\n/**\n * Specifies the event name for close.\n */\nInternalEvent.CLOSE = 'close';\n/**\n * Specifies the event name for destroy.\n */\nInternalEvent.DESTROY = 'destroy';\n/**\n * Specifies the event name for refresh.\n */\nInternalEvent.REFRESH = 'refresh';\n/**\n * Specifies the event name for size.\n */\nInternalEvent.SIZE = 'size';\n/**\n * Specifies the event name for select.\n */\nInternalEvent.SELECT = 'select';\n/**\n * Specifies the event name for fired.\n */\nInternalEvent.FIRED = 'fired';\n/**\n * Specifies the event name for fireMouseEvent.\n */\nInternalEvent.FIRE_MOUSE_EVENT = 'fireMouseEvent';\n/**\n * Specifies the event name for gesture.\n */\nInternalEvent.GESTURE = 'gesture';\n/**\n * Specifies the event name for tapAndHold.\n */\nInternalEvent.TAP_AND_HOLD = 'tapAndHold';\n/**\n * Specifies the event name for get.\n */\nInternalEvent.GET = 'get';\n/**\n * Specifies the event name for receive.\n */\nInternalEvent.RECEIVE = 'receive';\n/**\n * Specifies the event name for connect.\n */\nInternalEvent.CONNECT = 'connect';\n/**\n * Specifies the event name for disconnect.\n */\nInternalEvent.DISCONNECT = 'disconnect';\n/**\n * Specifies the event name for suspend.\n */\nInternalEvent.SUSPEND = 'suspend';\n/**\n * Specifies the event name for suspend.\n */\nInternalEvent.RESUME = 'resume';\n/**\n * Specifies the event name for mark.\n */\nInternalEvent.MARK = 'mark';\n/**\n * Specifies the event name for root.\n */\nInternalEvent.ROOT = 'root';\n/**\n * Specifies the event name for post.\n */\nInternalEvent.POST = 'post';\n/**\n * Specifies the event name for open.\n */\nInternalEvent.OPEN = 'open';\n/**\n * Specifies the event name for open.\n */\nInternalEvent.SAVE = 'save';\n/**\n * Specifies the event name for beforeAddVertex.\n */\nInternalEvent.BEFORE_ADD_VERTEX = 'beforeAddVertex';\n/**\n * Specifies the event name for addVertex.\n */\nInternalEvent.ADD_VERTEX = 'addVertex';\n/**\n * Specifies the event name for afterAddVertex.\n */\nInternalEvent.AFTER_ADD_VERTEX = 'afterAddVertex';\n/**\n * Specifies the event name for done.\n */\nInternalEvent.DONE = 'done';\n/**\n * Specifies the event name for execute.\n */\nInternalEvent.EXECUTE = 'execute';\n/**\n * Specifies the event name for executed.\n */\nInternalEvent.EXECUTED = 'executed';\n/**\n * Specifies the event name for beginUpdate.\n */\nInternalEvent.BEGIN_UPDATE = 'beginUpdate';\n/**\n * Specifies the event name for startEdit.\n */\nInternalEvent.START_EDIT = 'startEdit';\n/**\n * Specifies the event name for endUpdate.\n */\nInternalEvent.END_UPDATE = 'endUpdate';\n/**\n * Specifies the event name for endEdit.\n */\nInternalEvent.END_EDIT = 'endEdit';\n/**\n * Specifies the event name for beforeUndo.\n */\nInternalEvent.BEFORE_UNDO = 'beforeUndo';\n/**\n * Specifies the event name for undo.\n */\nInternalEvent.UNDO = 'undo';\n/**\n * Specifies the event name for redo.\n */\nInternalEvent.REDO = 'redo';\n/**\n * Specifies the event name for change.\n */\nInternalEvent.CHANGE = 'change';\n/**\n * Specifies the event name for notify.\n */\nInternalEvent.NOTIFY = 'notify';\n/**\n * Specifies the event name for layoutCells.\n */\nInternalEvent.LAYOUT_CELLS = 'layoutCells';\n/**\n * Specifies the event name for click.\n */\nInternalEvent.CLICK = 'click';\n/**\n * Specifies the event name for scale.\n */\nInternalEvent.SCALE = 'scale';\n/**\n * Specifies the event name for translate.\n */\nInternalEvent.TRANSLATE = 'translate';\n/**\n * Specifies the event name for scaleAndTranslate.\n */\nInternalEvent.SCALE_AND_TRANSLATE = 'scaleAndTranslate';\n/**\n * Specifies the event name for up.\n */\nInternalEvent.UP = 'up';\n/**\n * Specifies the event name for down.\n */\nInternalEvent.DOWN = 'down';\n/**\n * Specifies the event name for add.\n */\nInternalEvent.ADD = 'add';\n/**\n * Specifies the event name for remove.\n */\nInternalEvent.REMOVE = 'remove';\n/**\n * Specifies the event name for clear.\n */\nInternalEvent.CLEAR = 'clear';\n/**\n * Specifies the event name for addCells.\n */\nInternalEvent.ADD_CELLS = 'addCells';\n/**\n * Specifies the event name for cellsAdded.\n */\nInternalEvent.CELLS_ADDED = 'cellsAdded';\n/**\n * Specifies the event name for moveCells.\n */\nInternalEvent.MOVE_CELLS = 'moveCells';\n/**\n * Specifies the event name for cellsMoved.\n */\nInternalEvent.CELLS_MOVED = 'cellsMoved';\n/**\n * Specifies the event name for resizeCells.\n */\nInternalEvent.RESIZE_CELLS = 'resizeCells';\n/**\n * Specifies the event name for cellsResized.\n */\nInternalEvent.CELLS_RESIZED = 'cellsResized';\n/**\n * Specifies the event name for toggleCells.\n */\nInternalEvent.TOGGLE_CELLS = 'toggleCells';\n/**\n * Specifies the event name for cellsToggled.\n */\nInternalEvent.CELLS_TOGGLED = 'cellsToggled';\n/**\n * Specifies the event name for orderCells.\n */\nInternalEvent.ORDER_CELLS = 'orderCells';\n/**\n * Specifies the event name for cellsOrdered.\n */\nInternalEvent.CELLS_ORDERED = 'cellsOrdered';\n/**\n * Specifies the event name for removeCells.\n */\nInternalEvent.REMOVE_CELLS = 'removeCells';\n/**\n * Specifies the event name for cellsRemoved.\n */\nInternalEvent.CELLS_REMOVED = 'cellsRemoved';\n/**\n * Specifies the event name for groupCells.\n */\nInternalEvent.GROUP_CELLS = 'groupCells';\n/**\n * Specifies the event name for ungroupCells.\n */\nInternalEvent.UNGROUP_CELLS = 'ungroupCells';\n/**\n * Specifies the event name for removeCellsFromParent.\n */\nInternalEvent.REMOVE_CELLS_FROM_PARENT = 'removeCellsFromParent';\n/**\n * Specifies the event name for foldCells.\n */\nInternalEvent.FOLD_CELLS = 'foldCells';\n/**\n * Specifies the event name for cellsFolded.\n */\nInternalEvent.CELLS_FOLDED = 'cellsFolded';\n/**\n * Specifies the event name for alignCells.\n */\nInternalEvent.ALIGN_CELLS = 'alignCells';\n/**\n * Specifies the event name for labelChanged.\n */\nInternalEvent.LABEL_CHANGED = 'labelChanged';\n/**\n * Specifies the event name for connectCell.\n */\nInternalEvent.CONNECT_CELL = 'connectCell';\n/**\n * Specifies the event name for cellConnected.\n */\nInternalEvent.CELL_CONNECTED = 'cellConnected';\n/**\n * Specifies the event name for splitEdge.\n */\nInternalEvent.SPLIT_EDGE = 'splitEdge';\n/**\n * Specifies the event name for flipEdge.\n */\nInternalEvent.FLIP_EDGE = 'flipEdge';\n/**\n * Specifies the event name for startEditing.\n */\nInternalEvent.START_EDITING = 'startEditing';\n/**\n * Specifies the event name for editingStarted.\n */\nInternalEvent.EDITING_STARTED = 'editingStarted';\n/**\n * Specifies the event name for editingStopped.\n */\nInternalEvent.EDITING_STOPPED = 'editingStopped';\n/**\n * Specifies the event name for addOverlay.\n */\nInternalEvent.ADD_OVERLAY = 'addOverlay';\n/**\n * Specifies the event name for removeOverlay.\n */\nInternalEvent.REMOVE_OVERLAY = 'removeOverlay';\n/**\n * Specifies the event name for updateCellSize.\n */\nInternalEvent.UPDATE_CELL_SIZE = 'updateCellSize';\n/**\n * Specifies the event name for escape.\n */\nInternalEvent.ESCAPE = 'escape';\n/**\n * Specifies the event name for doubleClick.\n */\nInternalEvent.DOUBLE_CLICK = 'doubleClick';\n/**\n * Specifies the event name for start.\n */\nInternalEvent.START = 'start';\n/**\n * Specifies the event name for reset.\n */\nInternalEvent.RESET = 'reset';\n/**\n * Threshold for pinch gestures to fire a mouse wheel event.\n * Default value is 10.\n */\nInternalEvent.PINCH_THRESHOLD = 10;\nexport default InternalEvent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
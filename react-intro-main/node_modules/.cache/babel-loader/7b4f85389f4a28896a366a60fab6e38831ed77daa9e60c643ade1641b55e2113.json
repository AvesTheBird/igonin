{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transaction } from '../../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../../common/editorContextKeys.js';\nimport { showNextInlineSuggestionActionId, showPreviousInlineSuggestionActionId, inlineSuggestCommitId } from './commandIds.js';\nimport { InlineCompletionContextKeys } from './inlineCompletionContextKeys.js';\nimport { InlineCompletionsController } from './inlineCompletionsController.js';\nimport { Context as SuggestContext } from '../../../suggest/browser/suggest.js';\nimport * as nls from '../../../../../nls.js';\nimport { MenuId, Action2 } from '../../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nexport class ShowNextInlineSuggestionAction extends EditorAction {\n  static {\n    this.ID = showNextInlineSuggestionActionId;\n  }\n  constructor() {\n    super({\n      id: ShowNextInlineSuggestionAction.ID,\n      label: nls.localize('action.inlineSuggest.showNext', \"Show Next Inline Suggestion\"),\n      alias: 'Show Next Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100,\n        primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    controller?.model.get()?.next();\n  }\n}\nexport class ShowPreviousInlineSuggestionAction extends EditorAction {\n  static {\n    this.ID = showPreviousInlineSuggestionActionId;\n  }\n  constructor() {\n    super({\n      id: ShowPreviousInlineSuggestionAction.ID,\n      label: nls.localize('action.inlineSuggest.showPrevious', \"Show Previous Inline Suggestion\"),\n      alias: 'Show Previous Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100,\n        primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    controller?.model.get()?.previous();\n  }\n}\nexport class TriggerInlineSuggestionAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineSuggest.trigger',\n      label: nls.localize('action.inlineSuggest.trigger', \"Trigger Inline Suggestion\"),\n      alias: 'Trigger Inline Suggestion',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    await asyncTransaction(async tx => {\n      /** @description triggerExplicitly from command */\n      await controller?.model.get()?.triggerExplicitly(tx);\n      controller?.playAccessibilitySignal(tx);\n    });\n  }\n}\nexport class AcceptNextWordOfInlineCompletion extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineSuggest.acceptNextWord',\n      label: nls.localize('action.inlineSuggest.acceptNextWord', \"Accept Next Word Of Inline Suggestion\"),\n      alias: 'Accept Next Word Of Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible)\n      },\n      menuOpts: [{\n        menuId: MenuId.InlineSuggestionToolbar,\n        title: nls.localize('acceptWord', 'Accept Word'),\n        group: 'primary',\n        order: 2\n      }]\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    await controller?.model.get()?.acceptNextWord(controller.editor);\n  }\n}\nexport class AcceptNextLineOfInlineCompletion extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineSuggest.acceptNextLine',\n      label: nls.localize('action.inlineSuggest.acceptNextLine', \"Accept Next Line Of Inline Suggestion\"),\n      alias: 'Accept Next Line Of Inline Suggestion',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 1\n      },\n      menuOpts: [{\n        menuId: MenuId.InlineSuggestionToolbar,\n        title: nls.localize('acceptLine', 'Accept Line'),\n        group: 'secondary',\n        order: 2\n      }]\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    await controller?.model.get()?.acceptNextLine(controller.editor);\n  }\n}\nexport class AcceptInlineCompletion extends EditorAction {\n  constructor() {\n    super({\n      id: inlineSuggestCommitId,\n      label: nls.localize('action.inlineSuggest.accept', \"Accept Inline Suggestion\"),\n      alias: 'Accept Inline Suggestion',\n      precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n      menuOpts: [{\n        menuId: MenuId.InlineSuggestionToolbar,\n        title: nls.localize('accept', \"Accept\"),\n        group: 'primary',\n        order: 1\n      }],\n      kbOpts: {\n        primary: 2 /* KeyCode.Tab */,\n        weight: 200,\n        kbExpr: ContextKeyExpr.and(InlineCompletionContextKeys.inlineSuggestionVisible, EditorContextKeys.tabMovesFocus.toNegated(), InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize, SuggestContext.Visible.toNegated(), EditorContextKeys.hoverFocused.toNegated())\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    if (controller) {\n      controller.model.get()?.accept(controller.editor);\n      controller.editor.focus();\n    }\n  }\n}\nexport class HideInlineCompletion extends EditorAction {\n  static {\n    this.ID = 'editor.action.inlineSuggest.hide';\n  }\n  constructor() {\n    super({\n      id: HideInlineCompletion.ID,\n      label: nls.localize('action.inlineSuggest.hide', \"Hide Inline Suggestion\"),\n      alias: 'Hide Inline Suggestion',\n      precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n      kbOpts: {\n        weight: 100,\n        primary: 9 /* KeyCode.Escape */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineCompletionsController.get(editor);\n    transaction(tx => {\n      controller?.model.get()?.stop(tx);\n    });\n  }\n}\nexport class ToggleAlwaysShowInlineSuggestionToolbar extends Action2 {\n  static {\n    this.ID = 'editor.action.inlineSuggest.toggleAlwaysShowToolbar';\n  }\n  constructor() {\n    super({\n      id: ToggleAlwaysShowInlineSuggestionToolbar.ID,\n      title: nls.localize('action.inlineSuggest.alwaysShowToolbar', \"Always Show Toolbar\"),\n      f1: false,\n      precondition: undefined,\n      menu: [{\n        id: MenuId.InlineSuggestionToolbar,\n        group: 'secondary',\n        order: 10\n      }],\n      toggled: ContextKeyExpr.equals('config.editor.inlineSuggest.showToolbar', 'always')\n    });\n  }\n  async run(accessor, editor) {\n    const configService = accessor.get(IConfigurationService);\n    const currentValue = configService.getValue('editor.inlineSuggest.showToolbar');\n    const newValue = currentValue === 'always' ? 'onHover' : 'always';\n    configService.updateValue('editor.inlineSuggest.showToolbar', newValue);\n  }\n}","map":{"version":3,"names":["transaction","asyncTransaction","EditorAction","EditorContextKeys","showNextInlineSuggestionActionId","showPreviousInlineSuggestionActionId","inlineSuggestCommitId","InlineCompletionContextKeys","InlineCompletionsController","Context","SuggestContext","nls","MenuId","Action2","IConfigurationService","ContextKeyExpr","ShowNextInlineSuggestionAction","ID","constructor","id","label","localize","alias","precondition","and","writable","inlineSuggestionVisible","kbOpts","weight","primary","run","accessor","editor","controller","get","model","next","ShowPreviousInlineSuggestionAction","previous","TriggerInlineSuggestionAction","tx","triggerExplicitly","playAccessibilitySignal","AcceptNextWordOfInlineCompletion","kbExpr","menuOpts","menuId","InlineSuggestionToolbar","title","group","order","acceptNextWord","AcceptNextLineOfInlineCompletion","acceptNextLine","AcceptInlineCompletion","tabMovesFocus","toNegated","inlineSuggestionHasIndentationLessThanTabSize","Visible","hoverFocused","accept","focus","HideInlineCompletion","stop","ToggleAlwaysShowInlineSuggestionToolbar","f1","undefined","menu","toggled","equals","configService","currentValue","getValue","newValue","updateValue"],"sources":["D:/OSPanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/controller/commands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transaction } from '../../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../../common/editorContextKeys.js';\nimport { showNextInlineSuggestionActionId, showPreviousInlineSuggestionActionId, inlineSuggestCommitId } from './commandIds.js';\nimport { InlineCompletionContextKeys } from './inlineCompletionContextKeys.js';\nimport { InlineCompletionsController } from './inlineCompletionsController.js';\nimport { Context as SuggestContext } from '../../../suggest/browser/suggest.js';\nimport * as nls from '../../../../../nls.js';\nimport { MenuId, Action2 } from '../../../../../platform/actions/common/actions.js';\nimport { IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../../platform/contextkey/common/contextkey.js';\nexport class ShowNextInlineSuggestionAction extends EditorAction {\n    static { this.ID = showNextInlineSuggestionActionId; }\n    constructor() {\n        super({\n            id: ShowNextInlineSuggestionAction.ID,\n            label: nls.localize('action.inlineSuggest.showNext', \"Show Next Inline Suggestion\"),\n            alias: 'Show Next Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        controller?.model.get()?.next();\n    }\n}\nexport class ShowPreviousInlineSuggestionAction extends EditorAction {\n    static { this.ID = showPreviousInlineSuggestionActionId; }\n    constructor() {\n        super({\n            id: ShowPreviousInlineSuggestionAction.ID,\n            label: nls.localize('action.inlineSuggest.showPrevious', \"Show Previous Inline Suggestion\"),\n            alias: 'Show Previous Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        controller?.model.get()?.previous();\n    }\n}\nexport class TriggerInlineSuggestionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.trigger',\n            label: nls.localize('action.inlineSuggest.trigger', \"Trigger Inline Suggestion\"),\n            alias: 'Trigger Inline Suggestion',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        await asyncTransaction(async (tx) => {\n            /** @description triggerExplicitly from command */\n            await controller?.model.get()?.triggerExplicitly(tx);\n            controller?.playAccessibilitySignal(tx);\n        });\n    }\n}\nexport class AcceptNextWordOfInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.acceptNextWord',\n            label: nls.localize('action.inlineSuggest.acceptNextWord', \"Accept Next Word Of Inline Suggestion\"),\n            alias: 'Accept Next Word Of Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('acceptWord', 'Accept Word'),\n                    group: 'primary',\n                    order: 2,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        await controller?.model.get()?.acceptNextWord(controller.editor);\n    }\n}\nexport class AcceptNextLineOfInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineSuggest.acceptNextLine',\n            label: nls.localize('action.inlineSuggest.acceptNextLine', \"Accept Next Line Of Inline Suggestion\"),\n            alias: 'Accept Next Line Of Inline Suggestion',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */ + 1,\n            },\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('acceptLine', 'Accept Line'),\n                    group: 'secondary',\n                    order: 2,\n                }],\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        await controller?.model.get()?.acceptNextLine(controller.editor);\n    }\n}\nexport class AcceptInlineCompletion extends EditorAction {\n    constructor() {\n        super({\n            id: inlineSuggestCommitId,\n            label: nls.localize('action.inlineSuggest.accept', \"Accept Inline Suggestion\"),\n            alias: 'Accept Inline Suggestion',\n            precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n            menuOpts: [{\n                    menuId: MenuId.InlineSuggestionToolbar,\n                    title: nls.localize('accept', \"Accept\"),\n                    group: 'primary',\n                    order: 1,\n                }],\n            kbOpts: {\n                primary: 2 /* KeyCode.Tab */,\n                weight: 200,\n                kbExpr: ContextKeyExpr.and(InlineCompletionContextKeys.inlineSuggestionVisible, EditorContextKeys.tabMovesFocus.toNegated(), InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize, SuggestContext.Visible.toNegated(), EditorContextKeys.hoverFocused.toNegated()),\n            }\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        if (controller) {\n            controller.model.get()?.accept(controller.editor);\n            controller.editor.focus();\n        }\n    }\n}\nexport class HideInlineCompletion extends EditorAction {\n    static { this.ID = 'editor.action.inlineSuggest.hide'; }\n    constructor() {\n        super({\n            id: HideInlineCompletion.ID,\n            label: nls.localize('action.inlineSuggest.hide', \"Hide Inline Suggestion\"),\n            alias: 'Hide Inline Suggestion',\n            precondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n            kbOpts: {\n                weight: 100,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineCompletionsController.get(editor);\n        transaction(tx => {\n            controller?.model.get()?.stop(tx);\n        });\n    }\n}\nexport class ToggleAlwaysShowInlineSuggestionToolbar extends Action2 {\n    static { this.ID = 'editor.action.inlineSuggest.toggleAlwaysShowToolbar'; }\n    constructor() {\n        super({\n            id: ToggleAlwaysShowInlineSuggestionToolbar.ID,\n            title: nls.localize('action.inlineSuggest.alwaysShowToolbar', \"Always Show Toolbar\"),\n            f1: false,\n            precondition: undefined,\n            menu: [{\n                    id: MenuId.InlineSuggestionToolbar,\n                    group: 'secondary',\n                    order: 10,\n                }],\n            toggled: ContextKeyExpr.equals('config.editor.inlineSuggest.showToolbar', 'always')\n        });\n    }\n    async run(accessor, editor) {\n        const configService = accessor.get(IConfigurationService);\n        const currentValue = configService.getValue('editor.inlineSuggest.showToolbar');\n        const newValue = currentValue === 'always' ? 'onHover' : 'always';\n        configService.updateValue('editor.inlineSuggest.showToolbar', newValue);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
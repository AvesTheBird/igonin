{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from './Dictionary';\n/**\n * Removes all occurrences of the given object in the given array or\n * object. If there are multiple occurrences of the object, be they\n * associative or as an array entry, all occurrences are removed from\n * the array or deleted from the object. By removing the object from\n * the array, all elements following the removed element are shifted\n * by one step towards the beginning of the array.\n *\n * The length of arrays is not modified inside this function.\n *\n * @param obj Object to find in the given array.\n * @param array Array to check for the given obj.\n */\nexport const remove = (obj, array) => {\n  let result = null;\n  if (typeof array === 'object') {\n    let index = array.indexOf(obj);\n    while (index >= 0) {\n      array.splice(index, 1);\n      result = obj;\n      index = array.indexOf(obj);\n    }\n  }\n  for (const key in array) {\n    if (array[key] == obj) {\n      delete array[key];\n      result = obj;\n    }\n  }\n  return result;\n};\n/**\n * Compares all Point in the given lists.\n *\n * @param a Array of <Point> to be compared.\n * @param b Array of <Point> to be compared.\n */\nexport const equalPoints = (a, b) => {\n  if (!a && b || a && !b || a && b && a.length != b.length) {\n    return false;\n  }\n  if (a && b) {\n    for (let i = 0; i < a.length; i += 1) {\n      const p = a[i];\n      if (!p || p && !p.equals(b[i])) return false;\n    }\n  }\n  return true;\n};\n/**\n * Returns true if all properties of the given objects are equal. Values\n * with NaN are equal to NaN and unequal to any other value.\n *\n * @param a First object to be compared.\n * @param b Second object to be compared.\n */\nexport const equalEntries = (a, b) => {\n  // Counts keys in b to check if all values have been compared\n  let count = 0;\n  if (!a && b || a && !b || a && b && a.length != b.length) {\n    return false;\n  }\n  if (a && b) {\n    for (const key in b) {\n      count++;\n    }\n    for (const key in a) {\n      count--;\n      if ((!Number.isNaN(a[key]) || !Number.isNaN(b[key])) && a[key] !== b[key]) {\n        return false;\n      }\n    }\n  }\n  return count === 0;\n};\n/**\n * Removes all duplicates from the given array.\n */\nexport const removeDuplicates = arr => {\n  const dict = new Dictionary();\n  const result = [];\n  for (let i = 0; i < arr.length; i += 1) {\n    if (!dict.get(arr[i])) {\n      result.push(arr[i]);\n      dict.put(arr[i], true);\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["Dictionary","remove","obj","array","result","index","indexOf","splice","key","equalPoints","a","b","length","i","p","equals","equalEntries","count","Number","isNaN","removeDuplicates","arr","dict","get","push","put"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/util/arrayUtils.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from './Dictionary';\n/**\n * Removes all occurrences of the given object in the given array or\n * object. If there are multiple occurrences of the object, be they\n * associative or as an array entry, all occurrences are removed from\n * the array or deleted from the object. By removing the object from\n * the array, all elements following the removed element are shifted\n * by one step towards the beginning of the array.\n *\n * The length of arrays is not modified inside this function.\n *\n * @param obj Object to find in the given array.\n * @param array Array to check for the given obj.\n */\nexport const remove = (obj, array) => {\n    let result = null;\n    if (typeof array === 'object') {\n        let index = array.indexOf(obj);\n        while (index >= 0) {\n            array.splice(index, 1);\n            result = obj;\n            index = array.indexOf(obj);\n        }\n    }\n    for (const key in array) {\n        if (array[key] == obj) {\n            delete array[key];\n            result = obj;\n        }\n    }\n    return result;\n};\n/**\n * Compares all Point in the given lists.\n *\n * @param a Array of <Point> to be compared.\n * @param b Array of <Point> to be compared.\n */\nexport const equalPoints = (a, b) => {\n    if ((!a && b) || (a && !b) || (a && b && a.length != b.length)) {\n        return false;\n    }\n    if (a && b) {\n        for (let i = 0; i < a.length; i += 1) {\n            const p = a[i];\n            if (!p || (p && !p.equals(b[i])))\n                return false;\n        }\n    }\n    return true;\n};\n/**\n * Returns true if all properties of the given objects are equal. Values\n * with NaN are equal to NaN and unequal to any other value.\n *\n * @param a First object to be compared.\n * @param b Second object to be compared.\n */\nexport const equalEntries = (a, b) => {\n    // Counts keys in b to check if all values have been compared\n    let count = 0;\n    if ((!a && b) || (a && !b) || (a && b && a.length != b.length)) {\n        return false;\n    }\n    if (a && b) {\n        for (const key in b) {\n            count++;\n        }\n        for (const key in a) {\n            count--;\n            if ((!Number.isNaN(a[key]) || !Number.isNaN(b[key])) && a[key] !== b[key]) {\n                return false;\n            }\n        }\n    }\n    return count === 0;\n};\n/**\n * Removes all duplicates from the given array.\n */\nexport const removeDuplicates = (arr) => {\n    const dict = new Dictionary();\n    const result = [];\n    for (let i = 0; i < arr.length; i += 1) {\n        if (!dict.get(arr[i])) {\n            result.push(arr[i]);\n            dict.put(arr[i], true);\n        }\n    }\n    return result;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
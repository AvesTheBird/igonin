{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { DIRECTION } from '../../../util/Constants';\nimport { intersection } from '../../../util/mathUtils';\nexport const TrianglePerimeter = (bounds, vertex, next, orthogonal = false) => {\n  const direction = vertex != null ? vertex.style.direction : null;\n  const vertical = direction === DIRECTION.NORTH || direction === DIRECTION.SOUTH;\n  const {\n    x\n  } = bounds;\n  const {\n    y\n  } = bounds;\n  const w = bounds.width;\n  const h = bounds.height;\n  let cx = x + w / 2;\n  let cy = y + h / 2;\n  let start = new Point(x, y);\n  let corner = new Point(x + w, cy);\n  let end = new Point(x, y + h);\n  if (direction === DIRECTION.NORTH) {\n    start = end;\n    corner = new Point(cx, y);\n    end = new Point(x + w, y + h);\n  } else if (direction === DIRECTION.SOUTH) {\n    corner = new Point(cx, y + h);\n    end = new Point(x + w, y);\n  } else if (direction === DIRECTION.WEST) {\n    start = new Point(x + w, y);\n    corner = new Point(x, cy);\n    end = new Point(x + w, y + h);\n  }\n  let dx = next.x - cx;\n  let dy = next.y - cy;\n  const alpha = vertical ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n  const t = vertical ? Math.atan2(w, h) : Math.atan2(h, w);\n  let base = false;\n  if (direction === DIRECTION.NORTH || direction === DIRECTION.WEST) {\n    base = alpha > -t && alpha < t;\n  } else {\n    base = alpha < -Math.PI + t || alpha > Math.PI - t;\n  }\n  let result = null;\n  if (base) {\n    if (orthogonal && (vertical && next.x >= start.x && next.x <= end.x || !vertical && next.y >= start.y && next.y <= end.y)) {\n      if (vertical) {\n        result = new Point(next.x, start.y);\n      } else {\n        result = new Point(start.x, next.y);\n      }\n    } else if (direction === DIRECTION.NORTH) {\n      result = new Point(x + w / 2 + h * Math.tan(alpha) / 2, y + h);\n    } else if (direction === DIRECTION.SOUTH) {\n      result = new Point(x + w / 2 - h * Math.tan(alpha) / 2, y);\n    } else if (direction === DIRECTION.WEST) {\n      result = new Point(x + w, y + h / 2 + w * Math.tan(alpha) / 2);\n    } else {\n      result = new Point(x, y + h / 2 - w * Math.tan(alpha) / 2);\n    }\n  } else {\n    if (orthogonal) {\n      const pt = new Point(cx, cy);\n      if (next.y >= y && next.y <= y + h) {\n        pt.x = vertical ? cx : direction === DIRECTION.WEST ? x + w : x;\n        pt.y = next.y;\n      } else if (next.x >= x && next.x <= x + w) {\n        pt.x = next.x;\n        pt.y = !vertical ? cy : direction === DIRECTION.NORTH ? y + h : y;\n      }\n      // Compute angle\n      dx = next.x - pt.x;\n      dy = next.y - pt.y;\n      cx = pt.x;\n      cy = pt.y;\n    }\n    if (vertical && next.x <= x + w / 2 || !vertical && next.y <= y + h / 2) {\n      result = intersection(next.x, next.y, cx, cy, start.x, start.y, corner.x, corner.y);\n    } else {\n      result = intersection(next.x, next.y, cx, cy, corner.x, corner.y, end.x, end.y);\n    }\n  }\n  if (result == null) {\n    result = new Point(cx, cy);\n  }\n  return result;\n};","map":{"version":3,"names":["Point","DIRECTION","intersection","TrianglePerimeter","bounds","vertex","next","orthogonal","direction","style","vertical","NORTH","SOUTH","x","y","w","width","h","height","cx","cy","start","corner","end","WEST","dx","dy","alpha","Math","atan2","t","base","PI","result","tan","pt"],"sources":["D:/OSPanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/view/style/perimeter/TrianglePerimeter.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { DIRECTION } from '../../../util/Constants';\nimport { intersection } from '../../../util/mathUtils';\nexport const TrianglePerimeter = (bounds, vertex, next, orthogonal = false) => {\n    const direction = vertex != null ? vertex.style.direction : null;\n    const vertical = direction === DIRECTION.NORTH || direction === DIRECTION.SOUTH;\n    const { x } = bounds;\n    const { y } = bounds;\n    const w = bounds.width;\n    const h = bounds.height;\n    let cx = x + w / 2;\n    let cy = y + h / 2;\n    let start = new Point(x, y);\n    let corner = new Point(x + w, cy);\n    let end = new Point(x, y + h);\n    if (direction === DIRECTION.NORTH) {\n        start = end;\n        corner = new Point(cx, y);\n        end = new Point(x + w, y + h);\n    }\n    else if (direction === DIRECTION.SOUTH) {\n        corner = new Point(cx, y + h);\n        end = new Point(x + w, y);\n    }\n    else if (direction === DIRECTION.WEST) {\n        start = new Point(x + w, y);\n        corner = new Point(x, cy);\n        end = new Point(x + w, y + h);\n    }\n    let dx = next.x - cx;\n    let dy = next.y - cy;\n    const alpha = vertical ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n    const t = vertical ? Math.atan2(w, h) : Math.atan2(h, w);\n    let base = false;\n    if (direction === DIRECTION.NORTH || direction === DIRECTION.WEST) {\n        base = alpha > -t && alpha < t;\n    }\n    else {\n        base = alpha < -Math.PI + t || alpha > Math.PI - t;\n    }\n    let result = null;\n    if (base) {\n        if (orthogonal &&\n            ((vertical && next.x >= start.x && next.x <= end.x) ||\n                (!vertical && next.y >= start.y && next.y <= end.y))) {\n            if (vertical) {\n                result = new Point(next.x, start.y);\n            }\n            else {\n                result = new Point(start.x, next.y);\n            }\n        }\n        else if (direction === DIRECTION.NORTH) {\n            result = new Point(x + w / 2 + (h * Math.tan(alpha)) / 2, y + h);\n        }\n        else if (direction === DIRECTION.SOUTH) {\n            result = new Point(x + w / 2 - (h * Math.tan(alpha)) / 2, y);\n        }\n        else if (direction === DIRECTION.WEST) {\n            result = new Point(x + w, y + h / 2 + (w * Math.tan(alpha)) / 2);\n        }\n        else {\n            result = new Point(x, y + h / 2 - (w * Math.tan(alpha)) / 2);\n        }\n    }\n    else {\n        if (orthogonal) {\n            const pt = new Point(cx, cy);\n            if (next.y >= y && next.y <= y + h) {\n                pt.x = vertical ? cx : direction === DIRECTION.WEST ? x + w : x;\n                pt.y = next.y;\n            }\n            else if (next.x >= x && next.x <= x + w) {\n                pt.x = next.x;\n                pt.y = !vertical ? cy : direction === DIRECTION.NORTH ? y + h : y;\n            }\n            // Compute angle\n            dx = next.x - pt.x;\n            dy = next.y - pt.y;\n            cx = pt.x;\n            cy = pt.y;\n        }\n        if ((vertical && next.x <= x + w / 2) || (!vertical && next.y <= y + h / 2)) {\n            result = intersection(next.x, next.y, cx, cy, start.x, start.y, corner.x, corner.y);\n        }\n        else {\n            result = intersection(next.x, next.y, cx, cy, corner.x, corner.y, end.x, end.y);\n        }\n    }\n    if (result == null) {\n        result = new Point(cx, cy);\n    }\n    return result;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
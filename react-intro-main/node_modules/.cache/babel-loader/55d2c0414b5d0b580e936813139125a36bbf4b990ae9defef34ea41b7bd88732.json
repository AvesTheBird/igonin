{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import axios from'axios';import{popup,ModelXmlSerializer,domUtils,styleUtils,mathUtils,cloneUtils,eventUtils,Graph,InternalEvent,RubberBandHandler,ConnectionHandler,ConnectionConstraint,Point,CylinderShape,CellRenderer,DomHelpers,EdgeStyle,Rectangle,EdgeHandler,StyleRegistry,EdgeSegmentHandler,UndoManager,CellEditorHandler,ConstraintHandler,Guide,ImageBox,GraphView,SelectionHandler,PanningHandler,TooltipHandler,SelectionCellsHandler,PopupMenuHandler,xmlUtils,Codec}from'@maxgraph/core';import{contextMenuTypes,contextMenuValues,globalTypes,globalValues,rubberBandTypes,rubberBandValues}from'./shared/args.js';import{createGraphContainer}from'./shared/configure.js';// style required by RubberBand\nimport'@maxgraph/core/css/common.css';import{render}from'react-dom';// TODO Убрать этот костыль\nlet invert=false;let MyCustomCellEditorHandler;if(invert){container.style.backgroundColor='black';// White in-place editor text color\nMyCustomCellEditorHandler=class extends CellEditorHandler{startEditing(cell,trigger){super.startEditing.apply(this,arguments);if(this.textarea!=null){this.textarea.style.color='#FFFFFF';}}};}else{MyCustomCellEditorHandler=CellEditorHandler;}// Wire-mode\nlet checkbox=document.getElementById(\"wire\");class MyCustomGraph extends Graph{constructor(){super(...arguments);this.resetEdgesOnConnect=false;}createEdgeSegmentHandler(state){return new MyCustomEdgeSegmentHandler(state);}createGraphView(){return new MyCustomGraphView(this);}createEdgeHandler(state){return new MyCustomEdgeHandler(state);}createHandler(state){let result=null;if(state!=null){if(state.cell.isEdge()){let style=this.view.getEdgeStyle(state);if(style==EdgeStyle.WireConnector){return new EdgeSegmentHandler(state);}}}return super.createHandler.apply(this,arguments);}// Adds oval markers for edge-to-edge connections.\ngetCellStyle(cell){let style=super.getCellStyle.apply(this,arguments);if(style!=null&&cell!==null&&cell!==void 0&&cell.isEdge()){var _cell$getTerminal,_cell$getTerminal2;style=cloneUtils.clone(style);if((_cell$getTerminal=cell.getTerminal(true))!==null&&_cell$getTerminal!==void 0&&_cell$getTerminal.isEdge()){style.startArrow='oval';}if((_cell$getTerminal2=cell.getTerminal(false))!==null&&_cell$getTerminal2!==void 0&&_cell$getTerminal2.isEdge()){style.endArrow='oval';}}return style;}getTooltipForCell(cell){let tip='';if(cell!=null){let src=cell.getTerminal(true);if(src!=null){tip+=this.getTooltipForCell(src)+' ';}let parent=cell.getParent();if(parent.isVertex()){tip+=this.getTooltipForCell(parent)+'.';}tip+=super.getTooltipForCell.apply(this,arguments);let trg=cell.getTerminal(false);if(trg!=null){tip+=' '+this.getTooltipForCell(trg);}}return tip;}// Alternative solution for implementing connection points without child cells.\n// This can be extended as shown in portrefs.html example to allow for per-port\n// incoming/outgoing direction.\ngetAllConnectionConstraints(terminal){let geo=terminal!=null?terminal.cell.getGeometry():null;if((geo!=null?!geo.relative:false)&&terminal.cell.isVertex()&&terminal.cell.getChildCount()===0){return[new ConnectionConstraint(new Point(0,0.5),false),new ConnectionConstraint(new Point(1,0.5),false)];}return null;}}class MyCustomConstraintHandler extends ConstraintHandler{constructor(){super(...arguments);// Replaces the port image\nthis.pointImage=new ImageBox('images/dot.gif',10,10);}}class MyCustomGuide extends Guide{// Alt disables guides\nisEnabledForEvent(evt){return!eventUtils.isAltDown(evt);}}class MyCustomEdgeHandler extends EdgeHandler{constructor(){super(...arguments);// Enables snapping waypoints to terminals\nthis.snapToTerminals=true;}isConnectableCell(cell){return graph.getPlugin('ConnectionHandler').isConnectableCell(cell);}connect(edge,terminal,isSource,isClone,me){let result=null;let model=this.graph.getDataModel();let parent=model.getParent(edge);model.beginUpdate();try{result=super.connect.apply(this,arguments);let geo=model.getGeometry(result);if(geo!=null){geo=geo.clone();let pt=null;if(terminal&&terminal.isEdge){if(terminal.isEdge()){pt=this.abspoints[this.isSource?0:this.abspoints.length-1];pt.x=pt.x/this.graph.view.scale-this.graph.view.translate.x;pt.y=pt.y/this.graph.view.scale-this.graph.view.translate.y;let pstate=this.graph.getView().getState(edge.getParent());if(pstate!=null){pt.x-=pstate.origin.x;pt.y-=pstate.origin.y;}pt.x-=this.graph.panDx/this.graph.view.scale;pt.y-=this.graph.panDy/this.graph.view.scale;}}geo.setTerminalPoint(pt,isSource);model.setGeometry(edge,geo);}}finally{model.endUpdate();}return result;}createMarker(){let marker=super.createMarker.apply(this,arguments);// Adds in-place highlighting when reconnecting existing edges\nmarker.highlight.highlight=this.graph.getPlugin('ConnectionHandler').marker.highlight.highlight;return marker;}}class MyCustomSelectionHandler extends SelectionHandler{constructor(){super(...arguments);this.previewColor=invert?'white':'black';// Enables guides\nthis.guidesEnabled=true;}createGuide(){return new MyCustomGuide(this.graph,this.getGuideStates());}}class MyCustomPanningHandler extends PanningHandler{// Panning handler consumed right click so this must be\n// disabled if right click should stop connection handler.\nisPopupTrigger(){return false;}}class MyCustomConnectionHandler extends ConnectionHandler{constructor(){super(...arguments);// If connect preview is not moved away then getCellAt is used to detect the cell under\n// the mouse if the mouse is over the preview shape in IE (no event transparency), ie.\n// the built-in hit-detection of the HTML document will not be used in this case.\nthis.movePreviewAway=false;this.waypointsEnabled=true;}// Starts connections on the background in wire-mode\nisStartEvent(me){return checkbox.checked||super.isStartEvent.apply(this,arguments);}// Avoids any connections for gestures within tolerance except when in wire-mode\n// or when over a port\nmouseUp(sender,me){if(this.first!=null&&this.previous!=null){let point=styleUtils.convertPoint(this.graph.container,me.getX(),me.getY());let dx=Math.abs(point.x-this.first.x);let dy=Math.abs(point.y-this.first.y);if(dx<this.graph.tolerance&&dy<this.graph.tolerance){// Selects edges in non-wire mode for single clicks, but starts\n// connecting for non-edges regardless of wire-mode\nif(!checkbox.checked&&this.previous.cell.isEdge()){this.reset();}return;}}super.mouseUp.apply(this,arguments);}// Overrides methods to preview and create new edges.\n// Sets source terminal point for edge-to-edge connections.\ncreateEdgeState(me){let edge=this.graph.createEdge();if(this.sourceConstraint!=null&&this.previous!=null){edge.style='exitX'+'='+this.sourceConstraint.point.x+';'+'exitY'+'='+this.sourceConstraint.point.y+';';}else if(me.getCell().isEdge()){let scale=this.graph.view.scale;let tr=this.graph.view.translate;let pt=new Point(this.graph.snap(me.getGraphX()/scale)-tr.x,this.graph.snap(me.getGraphY()/scale)-tr.y);edge.geometry.setTerminalPoint(pt,true);}return this.graph.view.createState(edge);}// Uses right mouse button to create edges on background (see also: lines 67 ff)\nisStopEvent(me){return me.getState()!=null||eventUtils.isRightMouseButton(me.getEvent());}// Updates target terminal point for edge-to-edge connections.\nupdateCurrentState(me,point){super.updateCurrentState.apply(this,arguments);if(this.edgeState!=null){this.edgeState.cell.geometry.setTerminalPoint(null,false);if(this.shape!=null&&this.currentState!=null&&this.currentState.cell.isEdge()){let scale=this.graph.view.scale;let tr=this.graph.view.translate;let pt=new Point(this.graph.snap(me.getGraphX()/scale)-tr.x,this.graph.snap(me.getGraphY()/scale)-tr.y);this.edgeState.cell.geometry.setTerminalPoint(pt,false);}}}// Adds in-place highlighting for complete cell area (no hotspot).\ncreateMarker(){let marker=super.createMarker.apply(this,arguments);// Uses complete area of cell for new connections (no hotspot)\nmarker.intersects=function(state,evt){return true;};// Adds in-place highlighting\n//const mxCellHighlightHighlight = mxCellHighlight.prototype.highlight;\nmarker.highlight.highlight=function(state){// TODO: Should this be a subclass of marker rather than assigning directly?\nif(this.state!=state){if(this.state!=null){this.state.style=this.lastStyle;// Workaround for shape using current stroke width if no strokewidth defined\nthis.state.style.strokeWidth=this.state.style.strokeWidth||'1';this.state.style.strokeColor=this.state.style.strokeColor||'none';if(this.state.shape!=null){this.state.view.graph.cellRenderer.configureShape(this.state);this.state.shape.redraw();}}if(state!=null){this.lastStyle=state.style;state.style=cloneUtils.clone(state.style);state.style.strokeColor='#00ff00';state.style.strokeWidth='3';if(state.shape!=null){state.view.graph.cellRenderer.configureShape(state);state.shape.redraw();}}this.state=state;}};return marker;}// Makes sure non-relative cells can only be connected via constraints\nisConnectableCell(cell){if(cell.isEdge()){return true;}else{let geo=cell!=null?cell.getGeometry():null;return geo!=null?geo.relative:false;}}}class MyCustomGraphView extends GraphView{// Computes the position of edge to edge connection points.\nupdateFixedTerminalPoint(edge,terminal,source,constraint){let pt=null;if(constraint!=null){pt=this.graph.getConnectionPoint(terminal,constraint);}if(source){edge.sourceSegment=null;}else{edge.targetSegment=null;}if(pt==null){let s=this.scale;let tr=this.translate;let orig=edge.origin;let geo=edge.cell.getGeometry();pt=geo.getTerminalPoint(source);// Computes edge-to-edge connection point\nif(pt!=null){pt=new Point(s*(tr.x+pt.x+orig.x),s*(tr.y+pt.y+orig.y));// Finds nearest segment on edge and computes intersection\nif(terminal!=null&&terminal.absolutePoints!=null){let seg=mathUtils.findNearestSegment(terminal,pt.x,pt.y);// Finds orientation of the segment\nlet p0=terminal.absolutePoints[seg];let pe=terminal.absolutePoints[seg+1];let horizontal=p0.x-pe.x===0;// Stores the segment in the edge state\nlet key=source?'sourceConstraint':'targetConstraint';let value=horizontal?'horizontal':'vertical';edge.style[key]=value;// Keeps the coordinate within the segment bounds\nif(horizontal){pt.x=p0.x;pt.y=Math.min(pt.y,Math.max(p0.y,pe.y));pt.y=Math.max(pt.y,Math.min(p0.y,pe.y));}else{pt.y=p0.y;pt.x=Math.min(pt.x,Math.max(p0.x,pe.x));pt.x=Math.max(pt.x,Math.min(p0.x,pe.x));}}}// Computes constraint connection points on vertices and ports\nelse if(terminal!=null&&terminal.cell.geometry.relative){pt=new Point(this.getRoutingCenterX(terminal),this.getRoutingCenterY(terminal));}// Snaps point to grid\n/*if (pt != null)\n        {\n          let tr = this.graph.view.translate;\n          let s = this.graph.view.scale;\n\n          pt.x = (this.graph.snap(pt.x / s - tr.x) + tr.x) * s;\n          pt.y = (this.graph.snap(pt.y / s - tr.y) + tr.y) * s;\n        }*/}edge.setAbsoluteTerminalPoint(pt,source);}}class MyCustomEdgeSegmentHandler extends EdgeSegmentHandler{clonePreviewState(point,terminal){let clone=super.clonePreviewState.apply(this,arguments);clone.cell=clone.cell.clone();if(this.isSource||this.isTarget){clone.cell.geometry=clone.cell.geometry.clone();// Sets the terminal point of an edge if we're moving one of the endpoints\nif(clone.cell.isEdge()){// TODO: Only set this if the target or source terminal is an edge\nclone.cell.geometry.setTerminalPoint(point,this.isSource);}else{clone.cell.geometry.setTerminalPoint(null,this.isSource);}}return clone;}}export{MyCustomGraph,MyCustomEdgeSegmentHandler,MyCustomGraphView,MyCustomConnectionHandler,MyCustomPanningHandler,MyCustomSelectionHandler,MyCustomEdgeHandler,MyCustomConstraintHandler};","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","popup","ModelXmlSerializer","domUtils","styleUtils","mathUtils","cloneUtils","eventUtils","Graph","InternalEvent","RubberBandHandler","ConnectionHandler","ConnectionConstraint","Point","CylinderShape","CellRenderer","DomHelpers","EdgeStyle","Rectangle","EdgeHandler","StyleRegistry","EdgeSegmentHandler","UndoManager","CellEditorHandler","ConstraintHandler","Guide","ImageBox","GraphView","SelectionHandler","PanningHandler","TooltipHandler","SelectionCellsHandler","PopupMenuHandler","xmlUtils","Codec","contextMenuTypes","contextMenuValues","globalTypes","globalValues","rubberBandTypes","rubberBandValues","createGraphContainer","render","invert","MyCustomCellEditorHandler","container","style","backgroundColor","startEditing","cell","trigger","apply","arguments","textarea","color","checkbox","document","getElementById","MyCustomGraph","constructor","resetEdgesOnConnect","createEdgeSegmentHandler","state","MyCustomEdgeSegmentHandler","createGraphView","MyCustomGraphView","createEdgeHandler","MyCustomEdgeHandler","createHandler","result","isEdge","view","getEdgeStyle","WireConnector","getCellStyle","_cell$getTerminal","_cell$getTerminal2","clone","getTerminal","startArrow","endArrow","getTooltipForCell","tip","src","parent","getParent","isVertex","trg","getAllConnectionConstraints","terminal","geo","getGeometry","relative","getChildCount","MyCustomConstraintHandler","pointImage","MyCustomGuide","isEnabledForEvent","evt","isAltDown","snapToTerminals","isConnectableCell","graph","getPlugin","connect","edge","isSource","isClone","me","model","getDataModel","beginUpdate","pt","abspoints","length","x","scale","translate","y","pstate","getView","getState","origin","panDx","panDy","setTerminalPoint","setGeometry","endUpdate","createMarker","marker","highlight","MyCustomSelectionHandler","previewColor","guidesEnabled","createGuide","getGuideStates","MyCustomPanningHandler","isPopupTrigger","MyCustomConnectionHandler","movePreviewAway","waypointsEnabled","isStartEvent","checked","mouseUp","sender","first","previous","point","convertPoint","getX","getY","dx","Math","abs","dy","tolerance","reset","createEdgeState","createEdge","sourceConstraint","getCell","tr","snap","getGraphX","getGraphY","geometry","createState","isStopEvent","isRightMouseButton","getEvent","updateCurrentState","edgeState","shape","currentState","intersects","lastStyle","strokeWidth","strokeColor","cellRenderer","configureShape","redraw","updateFixedTerminalPoint","source","constraint","getConnectionPoint","sourceSegment","targetSegment","s","orig","getTerminalPoint","absolutePoints","seg","findNearestSegment","p0","pe","horizontal","key","value","min","max","getRoutingCenterX","getRoutingCenterY","setAbsoluteTerminalPoint","clonePreviewState","isTarget"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/src/components/MyCustomGraph.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport axios from 'axios';\nimport {\n  popup,\n  ModelXmlSerializer,\n  domUtils,\n  styleUtils,\n  mathUtils,\n  cloneUtils,\n  eventUtils,\n  Graph,\n  InternalEvent,\n  RubberBandHandler,\n  ConnectionHandler,\n  ConnectionConstraint,\n  Point,\n  CylinderShape,\n  CellRenderer,\n  DomHelpers,\n  EdgeStyle,\n  Rectangle,\n  EdgeHandler,\n  StyleRegistry,\n  EdgeSegmentHandler,\n  UndoManager,\n  CellEditorHandler,\n  ConstraintHandler,\n  Guide,\n  ImageBox,\n  GraphView,\n  SelectionHandler,\n  PanningHandler,\n  TooltipHandler,\n  SelectionCellsHandler,\n  PopupMenuHandler,\n  xmlUtils,\n  Codec,\n} from '@maxgraph/core';\n\nimport {\n  contextMenuTypes,\n  contextMenuValues,\n  globalTypes,\n  globalValues,\n  rubberBandTypes,\n  rubberBandValues,\n} from './shared/args.js';\n\nimport { createGraphContainer } from './shared/configure.js';\n\n// style required by RubberBand\nimport '@maxgraph/core/css/common.css';\n\nimport { render } from 'react-dom';\n\n  // TODO Убрать этот костыль\n  let invert = false;\n  let MyCustomCellEditorHandler;\n\n  if (invert) {\n    container.style.backgroundColor = 'black';\n\n    // White in-place editor text color\n    MyCustomCellEditorHandler = class extends CellEditorHandler {\n      startEditing(cell, trigger) {\n        super.startEditing.apply(this, arguments);\n\n        if (this.textarea != null) {\n          this.textarea.style.color = '#FFFFFF';\n        }\n      }\n    };\n  } else {\n    MyCustomCellEditorHandler = CellEditorHandler;\n  }\n  // Wire-mode\n  let checkbox = document.getElementById(\"wire\");\n  \n  class MyCustomGraph extends Graph {\n    resetEdgesOnConnect = false;\n    createEdgeSegmentHandler(state) {\n      return new MyCustomEdgeSegmentHandler(state);\n    }\n\n    createGraphView() {\n      return new MyCustomGraphView(this);\n    }\n\n    createEdgeHandler(state) {\n      return new MyCustomEdgeHandler(state);\n    }\n\n    createHandler(state) {\n      let result = null;\n\n      if (state != null) {\n        if (state.cell.isEdge()) {\n          let style = this.view.getEdgeStyle(state);\n\n          if (style == EdgeStyle.WireConnector) {\n            return new EdgeSegmentHandler(state);\n          }\n        }\n      }\n\n      return super.createHandler.apply(this, arguments);\n    }\n\n    // Adds oval markers for edge-to-edge connections.\n    getCellStyle(cell) {\n      let style = super.getCellStyle.apply(this, arguments);\n\n      if (style != null && cell?.isEdge()) {\n        style = cloneUtils.clone(style);\n\n        if (cell.getTerminal(true)?.isEdge()) {\n          style.startArrow = 'oval';\n        }\n\n        if (cell.getTerminal(false)?.isEdge()) {\n          style.endArrow = 'oval';\n        }\n      }\n      return style;\n    }\n\n    getTooltipForCell(cell) {\n      let tip = '';\n\n      if (cell != null) {\n        let src = cell.getTerminal(true);\n        if (src != null) {\n          tip += this.getTooltipForCell(src) + ' ';\n        }\n\n        let parent = cell.getParent();\n        if (parent.isVertex()) {\n          tip += this.getTooltipForCell(parent) + '.';\n        }\n\n        tip += super.getTooltipForCell.apply(this, arguments);\n\n        let trg = cell.getTerminal(false);\n        if (trg != null) {\n          tip += ' ' + this.getTooltipForCell(trg);\n        }\n      }\n      return tip;\n    }\n\n    // Alternative solution for implementing connection points without child cells.\n    // This can be extended as shown in portrefs.html example to allow for per-port\n    // incoming/outgoing direction.\n    getAllConnectionConstraints(terminal) {\n      let geo = terminal != null ? terminal.cell.getGeometry() : null;\n\n      if (\n        (geo != null ? !geo.relative : false) &&\n        terminal.cell.isVertex() &&\n        terminal.cell.getChildCount() === 0\n      ) {\n        return [\n          new ConnectionConstraint(new Point(0, 0.5), false),\n          new ConnectionConstraint(new Point(1, 0.5), false),\n        ];\n      }\n      return null;\n    }\n  }\n\n  class MyCustomConstraintHandler extends ConstraintHandler {\n    // Replaces the port image\n    pointImage = new ImageBox('images/dot.gif', 10, 10);\n  }\n\n  class MyCustomGuide extends Guide {\n    // Alt disables guides\n    isEnabledForEvent(evt) {\n      return !eventUtils.isAltDown(evt);\n    }\n  }\n\n  class MyCustomEdgeHandler extends EdgeHandler {\n    // Enables snapping waypoints to terminals\n    snapToTerminals = true;\n\n    isConnectableCell(cell) {\n      return graph.getPlugin('ConnectionHandler').isConnectableCell(cell);\n    }\n\n    connect(edge, terminal, isSource, isClone, me) {\n      let result = null;\n      let model = this.graph.getDataModel();\n      let parent = model.getParent(edge);\n\n      model.beginUpdate();\n      try {\n        result = super.connect.apply(this, arguments);\n        let geo = model.getGeometry(result);\n\n        if (geo != null) {\n          geo = geo.clone();\n          let pt = null;\n          if (terminal && terminal.isEdge) {\n            if (terminal.isEdge()) {\n              pt = this.abspoints[this.isSource ? 0 : this.abspoints.length - 1];\n              pt.x = pt.x / this.graph.view.scale - this.graph.view.translate.x;\n              pt.y = pt.y / this.graph.view.scale - this.graph.view.translate.y;\n\n              let pstate = this.graph.getView().getState(edge.getParent());\n\n              if (pstate != null) {\n                pt.x -= pstate.origin.x;\n                pt.y -= pstate.origin.y;\n              }\n\n              pt.x -= this.graph.panDx / this.graph.view.scale;\n              pt.y -= this.graph.panDy / this.graph.view.scale;\n            }\n          }\n\n          geo.setTerminalPoint(pt, isSource);\n          model.setGeometry(edge, geo);\n        }\n      } finally {\n        model.endUpdate();\n      }\n\n      return result;\n    }\n\n    createMarker() {\n      let marker = super.createMarker.apply(this, arguments);\n      // Adds in-place highlighting when reconnecting existing edges\n      marker.highlight.highlight =\n        this.graph.getPlugin('ConnectionHandler').marker.highlight.highlight;\n      return marker;\n    }\n  }\n\n  class MyCustomSelectionHandler extends SelectionHandler {\n\n    previewColor = invert ? 'white' : 'black';\n    // Enables guides\n    guidesEnabled = true;\n\n    createGuide() {\n      return new MyCustomGuide(this.graph, this.getGuideStates());\n    }\n  }\n\n  class MyCustomPanningHandler extends PanningHandler {\n    // Panning handler consumed right click so this must be\n    // disabled if right click should stop connection handler.\n    isPopupTrigger() {\n      return false;\n    }\n  }\n\n  class MyCustomConnectionHandler extends ConnectionHandler {\n    // If connect preview is not moved away then getCellAt is used to detect the cell under\n    // the mouse if the mouse is over the preview shape in IE (no event transparency), ie.\n    // the built-in hit-detection of the HTML document will not be used in this case.\n    movePreviewAway = false;\n    waypointsEnabled = true;\n\n    // Starts connections on the background in wire-mode\n    isStartEvent(me) {\n      return checkbox.checked || super.isStartEvent.apply(this, arguments);\n    }\n\n    // Avoids any connections for gestures within tolerance except when in wire-mode\n    // or when over a port\n    mouseUp(sender, me) {\n      if (this.first != null && this.previous != null) {\n        let point = styleUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n        let dx = Math.abs(point.x - this.first.x);\n        let dy = Math.abs(point.y - this.first.y);\n\n        if (dx < this.graph.tolerance && dy < this.graph.tolerance) {\n          // Selects edges in non-wire mode for single clicks, but starts\n          // connecting for non-edges regardless of wire-mode\n          if (!checkbox.checked && this.previous.cell.isEdge()) {\n            this.reset();\n          }\n          return;\n        }\n      }\n      super.mouseUp.apply(this, arguments);\n    }\n\n    // Overrides methods to preview and create new edges.\n\n    // Sets source terminal point for edge-to-edge connections.\n    createEdgeState(me) {\n      let edge = this.graph.createEdge();\n\n      if (this.sourceConstraint != null && this.previous != null) {\n        edge.style =\n          'exitX' +\n          '=' +\n          this.sourceConstraint.point.x +\n          ';' +\n          'exitY' +\n          '=' +\n          this.sourceConstraint.point.y +\n          ';';\n      } else if (me.getCell().isEdge()) {\n        let scale = this.graph.view.scale;\n        let tr = this.graph.view.translate;\n        let pt = new Point(\n          this.graph.snap(me.getGraphX() / scale) - tr.x,\n          this.graph.snap(me.getGraphY() / scale) - tr.y\n        );\n        edge.geometry.setTerminalPoint(pt, true);\n      }\n\n      return this.graph.view.createState(edge);\n    }\n\n    // Uses right mouse button to create edges on background (see also: lines 67 ff)\n    isStopEvent(me) {\n      return me.getState() != null || eventUtils.isRightMouseButton(me.getEvent());\n    }\n\n    // Updates target terminal point for edge-to-edge connections.\n    updateCurrentState(me, point) {\n      super.updateCurrentState.apply(this, arguments);\n\n      if (this.edgeState != null) {\n        this.edgeState.cell.geometry.setTerminalPoint(null, false);\n\n        if (\n          this.shape != null &&\n          this.currentState != null &&\n          this.currentState.cell.isEdge()\n        ) {\n          let scale = this.graph.view.scale;\n          let tr = this.graph.view.translate;\n          let pt = new Point(\n            this.graph.snap(me.getGraphX() / scale) - tr.x,\n            this.graph.snap(me.getGraphY() / scale) - tr.y\n          );\n          this.edgeState.cell.geometry.setTerminalPoint(pt, false);\n        }\n      }\n    }\n\n    // Adds in-place highlighting for complete cell area (no hotspot).\n    createMarker() {\n      let marker = super.createMarker.apply(this, arguments);\n\n      // Uses complete area of cell for new connections (no hotspot)\n      marker.intersects = function (state, evt) {\n        return true;\n      };\n\n      // Adds in-place highlighting\n      //const mxCellHighlightHighlight = mxCellHighlight.prototype.highlight;\n      marker.highlight.highlight = function (state) {\n        // TODO: Should this be a subclass of marker rather than assigning directly?\n        if (this.state != state) {\n          if (this.state != null) {\n            this.state.style = this.lastStyle;\n\n            // Workaround for shape using current stroke width if no strokewidth defined\n            this.state.style.strokeWidth = this.state.style.strokeWidth || '1';\n            this.state.style.strokeColor = this.state.style.strokeColor || 'none';\n\n            if (this.state.shape != null) {\n              this.state.view.graph.cellRenderer.configureShape(this.state);\n              this.state.shape.redraw();\n            }\n          }\n\n          if (state != null) {\n            this.lastStyle = state.style;\n            state.style = cloneUtils.clone(state.style);\n            state.style.strokeColor = '#00ff00';\n            state.style.strokeWidth = '3';\n\n            if (state.shape != null) {\n              state.view.graph.cellRenderer.configureShape(state);\n              state.shape.redraw();\n            }\n          }\n          this.state = state;\n        }\n      };\n\n      return marker;\n    }\n\n    // Makes sure non-relative cells can only be connected via constraints\n    isConnectableCell(cell) {\n      if (cell.isEdge()) {\n        return true;\n      } else {\n        let geo = cell != null ? cell.getGeometry() : null;\n        return geo != null ? geo.relative : false;\n      }\n    }\n  }\n\n  class MyCustomGraphView extends GraphView {\n    // Computes the position of edge to edge connection points.\n    updateFixedTerminalPoint(edge, terminal, source, constraint) {\n      let pt = null;\n\n      if (constraint != null) {\n        pt = this.graph.getConnectionPoint(terminal, constraint);\n      }\n\n      if (source) {\n        edge.sourceSegment = null;\n      } else {\n        edge.targetSegment = null;\n      }\n\n      if (pt == null) {\n        let s = this.scale;\n        let tr = this.translate;\n        let orig = edge.origin;\n        let geo = edge.cell.getGeometry();\n        pt = geo.getTerminalPoint(source);\n\n        // Computes edge-to-edge connection point\n        if (pt != null) {\n          pt = new Point(s * (tr.x + pt.x + orig.x), s * (tr.y + pt.y + orig.y));\n\n          // Finds nearest segment on edge and computes intersection\n          if (terminal != null && terminal.absolutePoints != null) {\n            let seg = mathUtils.findNearestSegment(terminal, pt.x, pt.y);\n\n            // Finds orientation of the segment\n            let p0 = terminal.absolutePoints[seg];\n            let pe = terminal.absolutePoints[seg + 1];\n            let horizontal = p0.x - pe.x === 0;\n\n            // Stores the segment in the edge state\n            let key = source ? 'sourceConstraint' : 'targetConstraint';\n            let value = horizontal ? 'horizontal' : 'vertical';\n            edge.style[key] = value;\n\n            // Keeps the coordinate within the segment bounds\n            if (horizontal) {\n              pt.x = p0.x;\n              pt.y = Math.min(pt.y, Math.max(p0.y, pe.y));\n              pt.y = Math.max(pt.y, Math.min(p0.y, pe.y));\n            } else {\n              pt.y = p0.y;\n              pt.x = Math.min(pt.x, Math.max(p0.x, pe.x));\n              pt.x = Math.max(pt.x, Math.min(p0.x, pe.x));\n            }\n          }\n        }\n        // Computes constraint connection points on vertices and ports\n        else if (terminal != null && terminal.cell.geometry.relative) {\n          pt = new Point(\n            this.getRoutingCenterX(terminal),\n            this.getRoutingCenterY(terminal)\n          );\n        }\n\n        // Snaps point to grid\n        /*if (pt != null)\n        {\n          let tr = this.graph.view.translate;\n          let s = this.graph.view.scale;\n\n          pt.x = (this.graph.snap(pt.x / s - tr.x) + tr.x) * s;\n          pt.y = (this.graph.snap(pt.y / s - tr.y) + tr.y) * s;\n        }*/\n      }\n\n      edge.setAbsoluteTerminalPoint(pt, source);\n    }\n  }\n\n  class MyCustomEdgeSegmentHandler extends EdgeSegmentHandler {\n    clonePreviewState(point, terminal) {\n      let clone = super.clonePreviewState.apply(this, arguments);\n      clone.cell = clone.cell.clone();\n\n      if (this.isSource || this.isTarget) {\n        clone.cell.geometry = clone.cell.geometry.clone();\n\n        // Sets the terminal point of an edge if we're moving one of the endpoints\n        if (clone.cell.isEdge()) {\n          // TODO: Only set this if the target or source terminal is an edge\n          clone.cell.geometry.setTerminalPoint(point, this.isSource);\n        } else {\n          clone.cell.geometry.setTerminalPoint(null, this.isSource);\n        }\n      }\n\n      return clone;\n    }\n  }\n\n\nexport {\n    MyCustomGraph, \n    MyCustomEdgeSegmentHandler, \n    MyCustomGraphView, \n    MyCustomConnectionHandler,  \n    MyCustomPanningHandler, \n    MyCustomSelectionHandler,\n    MyCustomEdgeHandler,\n    MyCustomConstraintHandler\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
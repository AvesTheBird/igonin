{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n  constructor() {\n    this.registeredConfigurationDefaults = [];\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.configurationDefaultsOverrides = new Map();\n    this.defaultLanguageConfigurationOverridesNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: true,\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.policyConfigurations = new Map();\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    this.registerOverridePropertyPatternKey();\n  }\n  registerConfiguration(configuration) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.registerConfigurations([configuration], validate);\n  }\n  registerConfigurations(configurations) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const properties = new Set();\n    this.doRegisterConfigurations(configurations, validate, properties);\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    this._onDidSchemaChange.fire();\n    this._onDidUpdateConfiguration.fire({\n      properties\n    });\n  }\n  registerDefaultConfigurations(configurationDefaults) {\n    const properties = new Set();\n    this.doRegisterDefaultConfigurations(configurationDefaults, properties);\n    this._onDidSchemaChange.fire();\n    this._onDidUpdateConfiguration.fire({\n      properties,\n      defaultsOverrides: true\n    });\n  }\n  doRegisterDefaultConfigurations(configurationDefaults, bucket) {\n    this.registeredConfigurationDefaults.push(...configurationDefaults);\n    const overrideIdentifiers = [];\n    for (const {\n      overrides,\n      source\n    } of configurationDefaults) {\n      for (const key in overrides) {\n        var _this$configurationDe;\n        bucket.add(key);\n        const configurationDefaultOverridesForKey = (_this$configurationDe = this.configurationDefaultsOverrides.get(key)) !== null && _this$configurationDe !== void 0 ? _this$configurationDe : this.configurationDefaultsOverrides.set(key, {\n          configurationDefaultOverrides: []\n        }).get(key);\n        const value = overrides[key];\n        configurationDefaultOverridesForKey.configurationDefaultOverrides.push({\n          value,\n          source\n        });\n        // Configuration defaults for Override Identifiers\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n          const newDefaultOverride = this.mergeDefaultConfigurationsForOverrideIdentifier(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n          if (!newDefaultOverride) {\n            continue;\n          }\n          configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n          this.updateDefaultOverrideProperty(key, newDefaultOverride, source);\n          overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n        }\n        // Configuration defaults for Configuration Properties\n        else {\n          const newDefaultOverride = this.mergeDefaultConfigurationsForConfigurationProperty(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n          if (!newDefaultOverride) {\n            continue;\n          }\n          configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n          const property = this.configurationProperties[key];\n          if (property) {\n            this.updatePropertyDefaultValue(key, property);\n            this.updateSchema(key, property);\n          }\n        }\n      }\n    }\n    this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n  }\n  updateDefaultOverrideProperty(key, newDefaultOverride, source) {\n    const property = {\n      type: 'object',\n      default: newDefaultOverride.value,\n      description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", getLanguageTagSettingPlainKey(key)),\n      $ref: resourceLanguageSettingsSchemaId,\n      defaultDefaultValue: newDefaultOverride.value,\n      source,\n      defaultValueSource: source\n    };\n    this.configurationProperties[key] = property;\n    this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n  }\n  mergeDefaultConfigurationsForOverrideIdentifier(overrideIdentifier, configurationValueObject, valueSource, existingDefaultOverride) {\n    var _existingDefaultOverr;\n    const defaultValue = (existingDefaultOverride === null || existingDefaultOverride === void 0 ? void 0 : existingDefaultOverride.value) || {};\n    const source = (_existingDefaultOverr = existingDefaultOverride === null || existingDefaultOverride === void 0 ? void 0 : existingDefaultOverride.source) !== null && _existingDefaultOverr !== void 0 ? _existingDefaultOverr : new Map();\n    // This should not happen\n    if (!(source instanceof Map)) {\n      console.error('objectConfigurationSources is not a Map');\n      return undefined;\n    }\n    for (const propertyKey of Object.keys(configurationValueObject)) {\n      const propertyDefaultValue = configurationValueObject[propertyKey];\n      const isObjectSetting = types.isObject(propertyDefaultValue) && (types.isUndefined(defaultValue[propertyKey]) || types.isObject(defaultValue[propertyKey]));\n      // If the default value is an object, merge the objects and store the source of each keys\n      if (isObjectSetting) {\n        var _defaultValue$propert;\n        defaultValue[propertyKey] = {\n          ...((_defaultValue$propert = defaultValue[propertyKey]) !== null && _defaultValue$propert !== void 0 ? _defaultValue$propert : {}),\n          ...propertyDefaultValue\n        };\n        // Track the source of each value in the object\n        if (valueSource) {\n          for (const objectKey in propertyDefaultValue) {\n            source.set(\"\".concat(propertyKey, \".\").concat(objectKey), valueSource);\n          }\n        }\n      }\n      // Primitive values are overridden\n      else {\n        defaultValue[propertyKey] = propertyDefaultValue;\n        if (valueSource) {\n          source.set(propertyKey, valueSource);\n        } else {\n          source.delete(propertyKey);\n        }\n      }\n    }\n    return {\n      value: defaultValue,\n      source\n    };\n  }\n  mergeDefaultConfigurationsForConfigurationProperty(propertyKey, value, valuesSource, existingDefaultOverride) {\n    var _existingDefaultOverr2;\n    const property = this.configurationProperties[propertyKey];\n    const existingDefaultValue = (_existingDefaultOverr2 = existingDefaultOverride === null || existingDefaultOverride === void 0 ? void 0 : existingDefaultOverride.value) !== null && _existingDefaultOverr2 !== void 0 ? _existingDefaultOverr2 : property === null || property === void 0 ? void 0 : property.defaultDefaultValue;\n    let source = valuesSource;\n    const isObjectSetting = types.isObject(value) && (property !== undefined && property.type === 'object' || property === undefined && (types.isUndefined(existingDefaultValue) || types.isObject(existingDefaultValue)));\n    // If the default value is an object, merge the objects and store the source of each keys\n    if (isObjectSetting) {\n      var _existingDefaultOverr3;\n      source = (_existingDefaultOverr3 = existingDefaultOverride === null || existingDefaultOverride === void 0 ? void 0 : existingDefaultOverride.source) !== null && _existingDefaultOverr3 !== void 0 ? _existingDefaultOverr3 : new Map();\n      // This should not happen\n      if (!(source instanceof Map)) {\n        console.error('defaultValueSource is not a Map');\n        return undefined;\n      }\n      for (const objectKey in value) {\n        if (valuesSource) {\n          source.set(\"\".concat(propertyKey, \".\").concat(objectKey), valuesSource);\n        }\n      }\n      value = {\n        ...(types.isObject(existingDefaultValue) ? existingDefaultValue : {}),\n        ...value\n      };\n    }\n    return {\n      value,\n      source\n    };\n  }\n  registerOverrideIdentifiers(overrideIdentifiers) {\n    this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n    this._onDidSchemaChange.fire();\n  }\n  doRegisterOverrideIdentifiers(overrideIdentifiers) {\n    for (const overrideIdentifier of overrideIdentifiers) {\n      this.overrideIdentifiers.add(overrideIdentifier);\n    }\n    this.updateOverridePropertyPatternKey();\n  }\n  doRegisterConfigurations(configurations, validate, bucket) {\n    configurations.forEach(configuration => {\n      this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n      this.configurationContributors.push(configuration);\n      this.registerJSONConfiguration(configuration);\n    });\n  }\n  validateAndRegisterProperties(configuration) {\n    let validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let extensionInfo = arguments.length > 2 ? arguments[2] : undefined;\n    let restrictedProperties = arguments.length > 3 ? arguments[3] : undefined;\n    let scope = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 3;\n    let bucket = arguments.length > 5 ? arguments[5] : undefined;\n    scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n    const properties = configuration.properties;\n    if (properties) {\n      for (const key in properties) {\n        const property = properties[key];\n        if (validate && validateProperty(key, property)) {\n          delete properties[key];\n          continue;\n        }\n        property.source = extensionInfo;\n        // update default value\n        property.defaultDefaultValue = properties[key].default;\n        this.updatePropertyDefaultValue(key, property);\n        // update scope\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n          property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n        } else {\n          property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n          property.restricted = types.isUndefinedOrNull(property.restricted) ? !!(restrictedProperties !== null && restrictedProperties !== void 0 && restrictedProperties.includes(key)) : property.restricted;\n        }\n        // Add to properties maps\n        // Property is included by default if 'included' is unspecified\n        if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n          this.excludedConfigurationProperties[key] = properties[key];\n          delete properties[key];\n          continue;\n        } else {\n          var _properties$key$polic;\n          this.configurationProperties[key] = properties[key];\n          if ((_properties$key$polic = properties[key].policy) !== null && _properties$key$polic !== void 0 && _properties$key$polic.name) {\n            this.policyConfigurations.set(properties[key].policy.name, key);\n          }\n        }\n        if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n          // If not set, default deprecationMessage to the markdown source\n          properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n        }\n        bucket.add(key);\n      }\n    }\n    const subNodes = configuration.allOf;\n    if (subNodes) {\n      for (const node of subNodes) {\n        this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n      }\n    }\n  }\n  getConfigurationProperties() {\n    return this.configurationProperties;\n  }\n  getPolicyConfigurations() {\n    return this.policyConfigurations;\n  }\n  registerJSONConfiguration(configuration) {\n    const register = configuration => {\n      const properties = configuration.properties;\n      if (properties) {\n        for (const key in properties) {\n          this.updateSchema(key, properties[key]);\n        }\n      }\n      const subNodes = configuration.allOf;\n      subNodes === null || subNodes === void 0 || subNodes.forEach(register);\n    };\n    register(configuration);\n  }\n  updateSchema(key, property) {\n    allSettings.properties[key] = property;\n    switch (property.scope) {\n      case 1 /* ConfigurationScope.APPLICATION */:\n        applicationSettings.properties[key] = property;\n        break;\n      case 2 /* ConfigurationScope.MACHINE */:\n        machineSettings.properties[key] = property;\n        break;\n      case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n        machineOverridableSettings.properties[key] = property;\n        break;\n      case 3 /* ConfigurationScope.WINDOW */:\n        windowSettings.properties[key] = property;\n        break;\n      case 4 /* ConfigurationScope.RESOURCE */:\n        resourceSettings.properties[key] = property;\n        break;\n      case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n        resourceSettings.properties[key] = property;\n        this.resourceLanguageSettingsSchema.properties[key] = property;\n        break;\n    }\n  }\n  updateOverridePropertyPatternKey() {\n    for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n      const overrideIdentifierProperty = \"[\".concat(overrideIdentifier, \"]\");\n      const resourceLanguagePropertiesSchema = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n        $ref: resourceLanguageSettingsSchemaId\n      };\n      this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n      allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n      resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n    }\n  }\n  registerOverridePropertyPatternKey() {\n    const resourceLanguagePropertiesSchema = {\n      type: 'object',\n      description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n      errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n      $ref: resourceLanguageSettingsSchemaId\n    };\n    allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n    this._onDidSchemaChange.fire();\n  }\n  updatePropertyDefaultValue(key, property) {\n    var _this$configurationDe2;\n    const configurationdefaultOverride = (_this$configurationDe2 = this.configurationDefaultsOverrides.get(key)) === null || _this$configurationDe2 === void 0 ? void 0 : _this$configurationDe2.configurationDefaultOverrideValue;\n    let defaultValue = undefined;\n    let defaultSource = undefined;\n    if (configurationdefaultOverride && (!property.disallowConfigurationDefault || !configurationdefaultOverride.source) // Prevent overriding the default value if the property is disallowed to be overridden by configuration defaults from extensions\n    ) {\n      defaultValue = configurationdefaultOverride.value;\n      defaultSource = configurationdefaultOverride.source;\n    }\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = property.defaultDefaultValue;\n      defaultSource = undefined;\n    }\n    if (types.isUndefined(defaultValue)) {\n      defaultValue = getDefaultValue(property.type);\n    }\n    property.default = defaultValue;\n    property.defaultValueSource = defaultSource;\n  }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = \"\\\\[([^\\\\]]+)\\\\]\";\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = \"^(\".concat(OVERRIDE_IDENTIFIER_PATTERN, \")+$\");\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n  const identifiers = [];\n  if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n    let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n    while ((_matches = matches) !== null && _matches !== void 0 && _matches.length) {\n      var _matches;\n      const identifier = matches[1].trim();\n      if (identifier) {\n        identifiers.push(identifier);\n      }\n      matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n    }\n  }\n  return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n  const t = Array.isArray(type) ? type[0] : type;\n  switch (t) {\n    case 'boolean':\n      return false;\n    case 'integer':\n    case 'number':\n      return 0;\n    case 'string':\n      return '';\n    case 'array':\n      return [];\n    case 'object':\n      return {};\n    default:\n      return null;\n  }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n  var _schema$policy, _schema$policy2;\n  if (!property.trim()) {\n    return nls.localize('config.property.empty', \"Cannot register an empty property\");\n  }\n  if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n  if ((_schema$policy = schema.policy) !== null && _schema$policy !== void 0 && _schema$policy.name && configurationRegistry.getPolicyConfigurations().get((_schema$policy2 = schema.policy) === null || _schema$policy2 === void 0 ? void 0 : _schema$policy2.name) !== undefined) {\n    var _schema$policy3, _schema$policy4;\n    return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, (_schema$policy3 = schema.policy) === null || _schema$policy3 === void 0 ? void 0 : _schema$policy3.name, configurationRegistry.getPolicyConfigurations().get((_schema$policy4 = schema.policy) === null || _schema$policy4 === void 0 ? void 0 : _schema$policy4.name));\n  }\n  return null;\n}","map":{"version":3,"names":["distinct","Emitter","types","nls","getLanguageTagSettingPlainKey","Extensions","JSONExtensions","Registry","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","constructor","registeredConfigurationDefaults","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","configurationDefaultsOverrides","Map","defaultLanguageConfigurationOverridesNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","allowTrailingCommas","allowComments","configurationProperties","policyConfigurations","excludedConfigurationProperties","registerSchema","registerOverridePropertyPatternKey","registerConfiguration","configuration","validate","arguments","length","undefined","registerConfigurations","configurations","doRegisterConfigurations","fire","registerDefaultConfigurations","configurationDefaults","doRegisterDefaultConfigurations","defaultsOverrides","bucket","push","overrides","source","key","_this$configurationDe","add","configurationDefaultOverridesForKey","get","set","configurationDefaultOverrides","value","OVERRIDE_PROPERTY_REGEX","test","newDefaultOverride","mergeDefaultConfigurationsForOverrideIdentifier","configurationDefaultOverrideValue","updateDefaultOverrideProperty","overrideIdentifiersFromKey","mergeDefaultConfigurationsForConfigurationProperty","property","updatePropertyDefaultValue","updateSchema","doRegisterOverrideIdentifiers","type","default","description","$ref","defaultDefaultValue","defaultValueSource","overrideIdentifier","configurationValueObject","valueSource","existingDefaultOverride","_existingDefaultOverr","defaultValue","console","error","propertyKey","Object","keys","propertyDefaultValue","isObjectSetting","isObject","isUndefined","_defaultValue$propert","objectKey","concat","delete","valuesSource","_existingDefaultOverr2","existingDefaultValue","_existingDefaultOverr3","registerOverrideIdentifiers","updateOverridePropertyPatternKey","forEach","validateAndRegisterProperties","extensionInfo","restrictedProperties","registerJSONConfiguration","scope","isUndefinedOrNull","validateProperty","restricted","includes","hasOwnProperty","included","_properties$key$polic","policy","name","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","node","getConfigurationProperties","getPolicyConfigurations","register","values","overrideIdentifierProperty","resourceLanguagePropertiesSchema","errorMessage","OVERRIDE_PROPERTY_PATTERN","_this$configurationDe2","configurationdefaultOverride","defaultSource","disallowConfigurationDefault","getDefaultValue","OVERRIDE_IDENTIFIER_PATTERN","OVERRIDE_IDENTIFIER_REGEX","RegExp","identifiers","matches","exec","_matches","identifier","trim","t","Array","isArray","configurationRegistry","schema","_schema$policy","_schema$policy2","_schema$policy3","_schema$policy4"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = { properties: {}, patternProperties: {} };\nexport const applicationSettings = { properties: {}, patternProperties: {} };\nexport const machineSettings = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\nexport const windowSettings = { properties: {}, patternProperties: {} };\nexport const resourceSettings = { properties: {}, patternProperties: {} };\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n    constructor() {\n        this.registeredConfigurationDefaults = [];\n        this.overrideIdentifiers = new Set();\n        this._onDidSchemaChange = new Emitter();\n        this._onDidUpdateConfiguration = new Emitter();\n        this.configurationDefaultsOverrides = new Map();\n        this.defaultLanguageConfigurationOverridesNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n        this.resourceLanguageSettingsSchema = {\n            properties: {},\n            patternProperties: {},\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        this.configurationProperties = {};\n        this.policyConfigurations = new Map();\n        this.excludedConfigurationProperties = {};\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this.registerOverridePropertyPatternKey();\n    }\n    registerConfiguration(configuration, validate = true) {\n        this.registerConfigurations([configuration], validate);\n    }\n    registerConfigurations(configurations, validate = true) {\n        const properties = new Set();\n        this.doRegisterConfigurations(configurations, validate, properties);\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties });\n    }\n    registerDefaultConfigurations(configurationDefaults) {\n        const properties = new Set();\n        this.doRegisterDefaultConfigurations(configurationDefaults, properties);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n    }\n    doRegisterDefaultConfigurations(configurationDefaults, bucket) {\n        this.registeredConfigurationDefaults.push(...configurationDefaults);\n        const overrideIdentifiers = [];\n        for (const { overrides, source } of configurationDefaults) {\n            for (const key in overrides) {\n                bucket.add(key);\n                const configurationDefaultOverridesForKey = this.configurationDefaultsOverrides.get(key)\n                    ?? this.configurationDefaultsOverrides.set(key, { configurationDefaultOverrides: [] }).get(key);\n                const value = overrides[key];\n                configurationDefaultOverridesForKey.configurationDefaultOverrides.push({ value, source });\n                // Configuration defaults for Override Identifiers\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const newDefaultOverride = this.mergeDefaultConfigurationsForOverrideIdentifier(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n                    if (!newDefaultOverride) {\n                        continue;\n                    }\n                    configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n                    this.updateDefaultOverrideProperty(key, newDefaultOverride, source);\n                    overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n                }\n                // Configuration defaults for Configuration Properties\n                else {\n                    const newDefaultOverride = this.mergeDefaultConfigurationsForConfigurationProperty(key, value, source, configurationDefaultOverridesForKey.configurationDefaultOverrideValue);\n                    if (!newDefaultOverride) {\n                        continue;\n                    }\n                    configurationDefaultOverridesForKey.configurationDefaultOverrideValue = newDefaultOverride;\n                    const property = this.configurationProperties[key];\n                    if (property) {\n                        this.updatePropertyDefaultValue(key, property);\n                        this.updateSchema(key, property);\n                    }\n                }\n            }\n        }\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n    }\n    updateDefaultOverrideProperty(key, newDefaultOverride, source) {\n        const property = {\n            type: 'object',\n            default: newDefaultOverride.value,\n            description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", getLanguageTagSettingPlainKey(key)),\n            $ref: resourceLanguageSettingsSchemaId,\n            defaultDefaultValue: newDefaultOverride.value,\n            source,\n            defaultValueSource: source\n        };\n        this.configurationProperties[key] = property;\n        this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n    }\n    mergeDefaultConfigurationsForOverrideIdentifier(overrideIdentifier, configurationValueObject, valueSource, existingDefaultOverride) {\n        const defaultValue = existingDefaultOverride?.value || {};\n        const source = existingDefaultOverride?.source ?? new Map();\n        // This should not happen\n        if (!(source instanceof Map)) {\n            console.error('objectConfigurationSources is not a Map');\n            return undefined;\n        }\n        for (const propertyKey of Object.keys(configurationValueObject)) {\n            const propertyDefaultValue = configurationValueObject[propertyKey];\n            const isObjectSetting = types.isObject(propertyDefaultValue) &&\n                (types.isUndefined(defaultValue[propertyKey]) || types.isObject(defaultValue[propertyKey]));\n            // If the default value is an object, merge the objects and store the source of each keys\n            if (isObjectSetting) {\n                defaultValue[propertyKey] = { ...(defaultValue[propertyKey] ?? {}), ...propertyDefaultValue };\n                // Track the source of each value in the object\n                if (valueSource) {\n                    for (const objectKey in propertyDefaultValue) {\n                        source.set(`${propertyKey}.${objectKey}`, valueSource);\n                    }\n                }\n            }\n            // Primitive values are overridden\n            else {\n                defaultValue[propertyKey] = propertyDefaultValue;\n                if (valueSource) {\n                    source.set(propertyKey, valueSource);\n                }\n                else {\n                    source.delete(propertyKey);\n                }\n            }\n        }\n        return { value: defaultValue, source };\n    }\n    mergeDefaultConfigurationsForConfigurationProperty(propertyKey, value, valuesSource, existingDefaultOverride) {\n        const property = this.configurationProperties[propertyKey];\n        const existingDefaultValue = existingDefaultOverride?.value ?? property?.defaultDefaultValue;\n        let source = valuesSource;\n        const isObjectSetting = types.isObject(value) &&\n            (property !== undefined && property.type === 'object' ||\n                property === undefined && (types.isUndefined(existingDefaultValue) || types.isObject(existingDefaultValue)));\n        // If the default value is an object, merge the objects and store the source of each keys\n        if (isObjectSetting) {\n            source = existingDefaultOverride?.source ?? new Map();\n            // This should not happen\n            if (!(source instanceof Map)) {\n                console.error('defaultValueSource is not a Map');\n                return undefined;\n            }\n            for (const objectKey in value) {\n                if (valuesSource) {\n                    source.set(`${propertyKey}.${objectKey}`, valuesSource);\n                }\n            }\n            value = { ...(types.isObject(existingDefaultValue) ? existingDefaultValue : {}), ...value };\n        }\n        return { value, source };\n    }\n    registerOverrideIdentifiers(overrideIdentifiers) {\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n        this._onDidSchemaChange.fire();\n    }\n    doRegisterOverrideIdentifiers(overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        this.updateOverridePropertyPatternKey();\n    }\n    doRegisterConfigurations(configurations, validate, bucket) {\n        configurations.forEach(configuration => {\n            this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n            this.configurationContributors.push(configuration);\n            this.registerJSONConfiguration(configuration);\n        });\n    }\n    validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = 3 /* ConfigurationScope.WINDOW */, bucket) {\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        const properties = configuration.properties;\n        if (properties) {\n            for (const key in properties) {\n                const property = properties[key];\n                if (validate && validateProperty(key, property)) {\n                    delete properties[key];\n                    continue;\n                }\n                property.source = extensionInfo;\n                // update default value\n                property.defaultDefaultValue = properties[key].default;\n                this.updatePropertyDefaultValue(key, property);\n                // update scope\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    property.restricted = types.isUndefinedOrNull(property.restricted) ? !!restrictedProperties?.includes(key) : property.restricted;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                    if (properties[key].policy?.name) {\n                        this.policyConfigurations.set(properties[key].policy.name, key);\n                    }\n                }\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n                    // If not set, default deprecationMessage to the markdown source\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n                }\n                bucket.add(key);\n            }\n        }\n        const subNodes = configuration.allOf;\n        if (subNodes) {\n            for (const node of subNodes) {\n                this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n            }\n        }\n    }\n    getConfigurationProperties() {\n        return this.configurationProperties;\n    }\n    getPolicyConfigurations() {\n        return this.policyConfigurations;\n    }\n    registerJSONConfiguration(configuration) {\n        const register = (configuration) => {\n            const properties = configuration.properties;\n            if (properties) {\n                for (const key in properties) {\n                    this.updateSchema(key, properties[key]);\n                }\n            }\n            const subNodes = configuration.allOf;\n            subNodes?.forEach(register);\n        };\n        register(configuration);\n    }\n    updateSchema(key, property) {\n        allSettings.properties[key] = property;\n        switch (property.scope) {\n            case 1 /* ConfigurationScope.APPLICATION */:\n                applicationSettings.properties[key] = property;\n                break;\n            case 2 /* ConfigurationScope.MACHINE */:\n                machineSettings.properties[key] = property;\n                break;\n            case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n                machineOverridableSettings.properties[key] = property;\n                break;\n            case 3 /* ConfigurationScope.WINDOW */:\n                windowSettings.properties[key] = property;\n                break;\n            case 4 /* ConfigurationScope.RESOURCE */:\n                resourceSettings.properties[key] = property;\n                break;\n            case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n                resourceSettings.properties[key] = property;\n                this.resourceLanguageSettingsSchema.properties[key] = property;\n                break;\n        }\n    }\n    updateOverridePropertyPatternKey() {\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n            const resourceLanguagePropertiesSchema = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n                $ref: resourceLanguageSettingsSchemaId,\n            };\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n    }\n    registerOverridePropertyPatternKey() {\n        const resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId,\n        };\n        allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        this._onDidSchemaChange.fire();\n    }\n    updatePropertyDefaultValue(key, property) {\n        const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key)?.configurationDefaultOverrideValue;\n        let defaultValue = undefined;\n        let defaultSource = undefined;\n        if (configurationdefaultOverride\n            && (!property.disallowConfigurationDefault || !configurationdefaultOverride.source) // Prevent overriding the default value if the property is disallowed to be overridden by configuration defaults from extensions\n        ) {\n            defaultValue = configurationdefaultOverride.value;\n            defaultSource = configurationdefaultOverride.source;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = property.defaultDefaultValue;\n            defaultSource = undefined;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = getDefaultValue(property.type);\n        }\n        property.default = defaultValue;\n        property.defaultValueSource = defaultSource;\n    }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n    const identifiers = [];\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        while (matches?.length) {\n            const identifier = matches[1].trim();\n            if (identifier) {\n                identifiers.push(identifier);\n            }\n            matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        }\n    }\n    return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n    const t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n    if (!property.trim()) {\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    if (schema.policy?.name && configurationRegistry.getPolicyConfigurations().get(schema.policy?.name) !== undefined) {\n        return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, schema.policy?.name, configurationRegistry.getPolicyConfigurations().get(schema.policy?.name));\n    }\n    return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
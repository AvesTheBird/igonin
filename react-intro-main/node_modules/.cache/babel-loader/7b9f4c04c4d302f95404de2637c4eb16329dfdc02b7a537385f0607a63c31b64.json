{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { createStyleSheet, isActiveElement, isKeyboardEvent } from '../../../base/browser/dom.js';\nimport { PagedList } from '../../../base/browser/ui/list/listPaging.js';\nimport { DefaultStyleController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List, TypeNavigationMode } from '../../../base/browser/ui/list/listWidget.js';\nimport { Table } from '../../../base/browser/ui/table/tableWidget.js';\nimport { TreeFindMode, TreeFindMatchType } from '../../../base/browser/ui/tree/abstractTree.js';\nimport { AsyncDataTree, CompressibleAsyncDataTree } from '../../../base/browser/ui/tree/asyncDataTree.js';\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\nimport { CompressibleObjectTree, ObjectTree } from '../../../base/browser/ui/tree/objectTree.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable, DisposableStore, dispose, toDisposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { Extensions as ConfigurationExtensions } from '../../configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\nimport { InputFocusedContextKey } from '../../contextkey/common/contextkeys.js';\nimport { IContextViewService } from '../../contextview/browser/contextView.js';\nimport { createDecorator, IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport { defaultFindWidgetStyles, defaultListStyles, getListStyles } from '../../theme/browser/defaultStyles.js';\nexport const IListService = createDecorator('listService');\nexport class ListService {\n  get lastFocusedList() {\n    return this._lastFocusedWidget;\n  }\n  constructor() {\n    this.disposables = new DisposableStore();\n    this.lists = [];\n    this._lastFocusedWidget = undefined;\n    this._hasCreatedStyleController = false;\n  }\n  setLastFocusedList(widget) {\n    var _this$_lastFocusedWid, _this$_lastFocusedWid2;\n    if (widget === this._lastFocusedWidget) {\n      return;\n    }\n    (_this$_lastFocusedWid = this._lastFocusedWidget) === null || _this$_lastFocusedWid === void 0 || _this$_lastFocusedWid.getHTMLElement().classList.remove('last-focused');\n    this._lastFocusedWidget = widget;\n    (_this$_lastFocusedWid2 = this._lastFocusedWidget) === null || _this$_lastFocusedWid2 === void 0 || _this$_lastFocusedWid2.getHTMLElement().classList.add('last-focused');\n  }\n  register(widget, extraContextKeys) {\n    if (!this._hasCreatedStyleController) {\n      this._hasCreatedStyleController = true;\n      // create a shared default tree style sheet for performance reasons\n      const styleController = new DefaultStyleController(createStyleSheet(), '');\n      styleController.style(defaultListStyles);\n    }\n    if (this.lists.some(l => l.widget === widget)) {\n      throw new Error('Cannot register the same widget multiple times');\n    }\n    // Keep in our lists list\n    const registeredList = {\n      widget,\n      extraContextKeys\n    };\n    this.lists.push(registeredList);\n    // Check for currently being focused\n    if (isActiveElement(widget.getHTMLElement())) {\n      this.setLastFocusedList(widget);\n    }\n    return combinedDisposable(widget.onDidFocus(() => this.setLastFocusedList(widget)), toDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)), widget.onDidDispose(() => {\n      this.lists = this.lists.filter(l => l !== registeredList);\n      if (this._lastFocusedWidget === widget) {\n        this.setLastFocusedList(undefined);\n      }\n    }));\n  }\n  dispose() {\n    this.disposables.dispose();\n  }\n}\nexport const RawWorkbenchListScrollAtBoundaryContextKey = new RawContextKey('listScrollAtBoundary', 'none');\nexport const WorkbenchListScrollAtTopContextKey = ContextKeyExpr.or(RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('top'), RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('both'));\nexport const WorkbenchListScrollAtBottomContextKey = ContextKeyExpr.or(RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('bottom'), RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('both'));\nexport const RawWorkbenchListFocusContextKey = new RawContextKey('listFocus', true);\nexport const WorkbenchTreeStickyScrollFocused = new RawContextKey('treestickyScrollFocused', false);\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey('listSupportsMultiselect', true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey), WorkbenchTreeStickyScrollFocused.negate());\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey('listHasSelectionOrFocus', false);\nexport const WorkbenchListDoubleSelection = new RawContextKey('listDoubleSelection', false);\nexport const WorkbenchListMultiSelection = new RawContextKey('listMultiSelection', false);\nexport const WorkbenchListSelectionNavigation = new RawContextKey('listSelectionNavigation', false);\nexport const WorkbenchListSupportsFind = new RawContextKey('listSupportsFind', true);\nexport const WorkbenchTreeElementCanCollapse = new RawContextKey('treeElementCanCollapse', false);\nexport const WorkbenchTreeElementHasParent = new RawContextKey('treeElementHasParent', false);\nexport const WorkbenchTreeElementCanExpand = new RawContextKey('treeElementCanExpand', false);\nexport const WorkbenchTreeElementHasChild = new RawContextKey('treeElementHasChild', false);\nexport const WorkbenchTreeFindOpen = new RawContextKey('treeFindOpen', false);\nconst WorkbenchListTypeNavigationModeKey = 'listTypeNavigationMode';\n/**\n * @deprecated in favor of WorkbenchListTypeNavigationModeKey\n */\nconst WorkbenchListAutomaticKeyboardNavigationLegacyKey = 'listAutomaticKeyboardNavigation';\nfunction createScopedContextKeyService(contextKeyService, widget) {\n  const result = contextKeyService.createScoped(widget.getHTMLElement());\n  RawWorkbenchListFocusContextKey.bindTo(result);\n  return result;\n}\nfunction createScrollObserver(contextKeyService, widget) {\n  const listScrollAt = RawWorkbenchListScrollAtBoundaryContextKey.bindTo(contextKeyService);\n  const update = () => {\n    const atTop = widget.scrollTop === 0;\n    // We need a threshold `1` since scrollHeight is rounded.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#determine_if_an_element_has_been_totally_scrolled\n    const atBottom = widget.scrollHeight - widget.renderHeight - widget.scrollTop < 1;\n    if (atTop && atBottom) {\n      listScrollAt.set('both');\n    } else if (atTop) {\n      listScrollAt.set('top');\n    } else if (atBottom) {\n      listScrollAt.set('bottom');\n    } else {\n      listScrollAt.set('none');\n    }\n  };\n  update();\n  return widget.onDidScroll(update);\n}\nconst multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nconst openModeSettingKey = 'workbench.list.openMode';\nconst horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nconst defaultFindModeSettingKey = 'workbench.list.defaultFindMode';\nconst typeNavigationModeSettingKey = 'workbench.list.typeNavigationMode';\n/** @deprecated in favor of `workbench.list.defaultFindMode` and `workbench.list.typeNavigationMode` */\nconst keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nconst scrollByPageKey = 'workbench.list.scrollByPage';\nconst defaultFindMatchTypeSettingKey = 'workbench.list.defaultFindMatchType';\nconst treeIndentKey = 'workbench.tree.indent';\nconst treeRenderIndentGuidesKey = 'workbench.tree.renderIndentGuides';\nconst listSmoothScrolling = 'workbench.list.smoothScrolling';\nconst mouseWheelScrollSensitivityKey = 'workbench.list.mouseWheelScrollSensitivity';\nconst fastScrollSensitivityKey = 'workbench.list.fastScrollSensitivity';\nconst treeExpandMode = 'workbench.tree.expandMode';\nconst treeStickyScroll = 'workbench.tree.enableStickyScroll';\nconst treeStickyScrollMaxElements = 'workbench.tree.stickyScrollMaxItemCount';\nfunction useAltAsMultipleSelectionModifier(configurationService) {\n  return configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\n}\nclass MultipleSelectionController extends Disposable {\n  constructor(configurationService) {\n    super();\n    this.configurationService = configurationService;\n    this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.registerListeners();\n  }\n  registerListeners() {\n    this._register(this.configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n      }\n    }));\n  }\n  isSelectionSingleChangeEvent(event) {\n    if (this.useAltAsMultipleSelectionModifier) {\n      return event.browserEvent.altKey;\n    }\n    return isSelectionSingleChangeEvent(event);\n  }\n  isSelectionRangeChangeEvent(event) {\n    return isSelectionRangeChangeEvent(event);\n  }\n}\nfunction toWorkbenchListOptions(accessor, options) {\n  var _options$multipleSele;\n  const configurationService = accessor.get(IConfigurationService);\n  const keybindingService = accessor.get(IKeybindingService);\n  const disposables = new DisposableStore();\n  const result = {\n    ...options,\n    keyboardNavigationDelegate: {\n      mightProducePrintableCharacter(e) {\n        return keybindingService.mightProducePrintableCharacter(e);\n      }\n    },\n    smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)),\n    mouseWheelScrollSensitivity: configurationService.getValue(mouseWheelScrollSensitivityKey),\n    fastScrollSensitivity: configurationService.getValue(fastScrollSensitivityKey),\n    multipleSelectionController: (_options$multipleSele = options.multipleSelectionController) !== null && _options$multipleSele !== void 0 ? _options$multipleSele : disposables.add(new MultipleSelectionController(configurationService)),\n    keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(keybindingService),\n    scrollByPage: Boolean(configurationService.getValue(scrollByPageKey))\n  };\n  return [result, disposables];\n}\nlet WorkbenchList = class WorkbenchList extends List {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n    const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n    super(user, container, delegate, renderers, {\n      keyboardSupport: false,\n      ...workbenchListOptions,\n      horizontalScrolling\n    });\n    this.disposables.add(workbenchListOptionsDisposable);\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n    this.disposables.add(createScrollObserver(this.contextKeyService, this));\n    this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n    const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n    listSelectionNavigation.set(Boolean(options.selectionNavigation));\n    this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n    this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n    this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n    this.horizontalScrolling = options.horizontalScrolling;\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.disposables.add(this.contextKeyService);\n    this.disposables.add(listService.register(this));\n    this.updateStyles(options.overrideStyles);\n    this.disposables.add(this.onDidChangeSelection(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.contextKeyService.bufferChangeEvents(() => {\n        this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        this.listMultiSelection.set(selection.length > 1);\n        this.listDoubleSelection.set(selection.length === 2);\n      });\n    }));\n    this.disposables.add(this.onDidChangeFocus(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n    }));\n    this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n      let options = {};\n      if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n        const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n        options = {\n          ...options,\n          horizontalScrolling\n        };\n      }\n      if (e.affectsConfiguration(scrollByPageKey)) {\n        const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n        options = {\n          ...options,\n          scrollByPage\n        };\n      }\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n        options = {\n          ...options,\n          smoothScrolling\n        };\n      }\n      if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n        const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n        options = {\n          ...options,\n          mouseWheelScrollSensitivity\n        };\n      }\n      if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n        const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n        options = {\n          ...options,\n          fastScrollSensitivity\n        };\n      }\n      if (Object.keys(options).length > 0) {\n        this.updateOptions(options);\n      }\n    }));\n    this.navigator = new ListResourceNavigator(this, {\n      configurationService,\n      ...options\n    });\n    this.disposables.add(this.navigator);\n  }\n  updateOptions(options) {\n    super.updateOptions(options);\n    if (options.overrideStyles !== undefined) {\n      this.updateStyles(options.overrideStyles);\n    }\n    if (options.multipleSelectionSupport !== undefined) {\n      this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n    }\n  }\n  updateStyles(styles) {\n    this.style(styles ? getListStyles(styles) : defaultListStyles);\n  }\n};\nWorkbenchList = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IConfigurationService), __param(8, IInstantiationService)], WorkbenchList);\nexport { WorkbenchList };\nlet WorkbenchPagedList = class WorkbenchPagedList extends PagedList {\n  constructor(user, container, delegate, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n    const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n    super(user, container, delegate, renderers, {\n      keyboardSupport: false,\n      ...workbenchListOptions,\n      horizontalScrolling\n    });\n    this.disposables = new DisposableStore();\n    this.disposables.add(workbenchListOptionsDisposable);\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n    this.disposables.add(createScrollObserver(this.contextKeyService, this.widget));\n    this.horizontalScrolling = options.horizontalScrolling;\n    this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n    const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n    listSelectionNavigation.set(Boolean(options.selectionNavigation));\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.disposables.add(this.contextKeyService);\n    this.disposables.add(listService.register(this));\n    this.updateStyles(options.overrideStyles);\n    this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n      let options = {};\n      if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n        const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n        options = {\n          ...options,\n          horizontalScrolling\n        };\n      }\n      if (e.affectsConfiguration(scrollByPageKey)) {\n        const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n        options = {\n          ...options,\n          scrollByPage\n        };\n      }\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n        options = {\n          ...options,\n          smoothScrolling\n        };\n      }\n      if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n        const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n        options = {\n          ...options,\n          mouseWheelScrollSensitivity\n        };\n      }\n      if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n        const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n        options = {\n          ...options,\n          fastScrollSensitivity\n        };\n      }\n      if (Object.keys(options).length > 0) {\n        this.updateOptions(options);\n      }\n    }));\n    this.navigator = new ListResourceNavigator(this, {\n      configurationService,\n      ...options\n    });\n    this.disposables.add(this.navigator);\n  }\n  updateOptions(options) {\n    super.updateOptions(options);\n    if (options.overrideStyles !== undefined) {\n      this.updateStyles(options.overrideStyles);\n    }\n    if (options.multipleSelectionSupport !== undefined) {\n      this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n    }\n  }\n  updateStyles(styles) {\n    this.style(styles ? getListStyles(styles) : defaultListStyles);\n  }\n  dispose() {\n    this.disposables.dispose();\n    super.dispose();\n  }\n};\nWorkbenchPagedList = __decorate([__param(5, IContextKeyService), __param(6, IListService), __param(7, IConfigurationService), __param(8, IInstantiationService)], WorkbenchPagedList);\nexport { WorkbenchPagedList };\nlet WorkbenchTable = class WorkbenchTable extends Table {\n  constructor(user, container, delegate, columns, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n    const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n    super(user, container, delegate, columns, renderers, {\n      keyboardSupport: false,\n      ...workbenchListOptions,\n      horizontalScrolling\n    });\n    this.disposables.add(workbenchListOptionsDisposable);\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n    this.disposables.add(createScrollObserver(this.contextKeyService, this));\n    this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n    const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n    listSelectionNavigation.set(Boolean(options.selectionNavigation));\n    this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n    this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n    this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n    this.horizontalScrolling = options.horizontalScrolling;\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.disposables.add(this.contextKeyService);\n    this.disposables.add(listService.register(this));\n    this.updateStyles(options.overrideStyles);\n    this.disposables.add(this.onDidChangeSelection(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.contextKeyService.bufferChangeEvents(() => {\n        this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        this.listMultiSelection.set(selection.length > 1);\n        this.listDoubleSelection.set(selection.length === 2);\n      });\n    }));\n    this.disposables.add(this.onDidChangeFocus(() => {\n      const selection = this.getSelection();\n      const focus = this.getFocus();\n      this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n    }));\n    this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n      let options = {};\n      if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n        const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n        options = {\n          ...options,\n          horizontalScrolling\n        };\n      }\n      if (e.affectsConfiguration(scrollByPageKey)) {\n        const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n        options = {\n          ...options,\n          scrollByPage\n        };\n      }\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n        options = {\n          ...options,\n          smoothScrolling\n        };\n      }\n      if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n        const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n        options = {\n          ...options,\n          mouseWheelScrollSensitivity\n        };\n      }\n      if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n        const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n        options = {\n          ...options,\n          fastScrollSensitivity\n        };\n      }\n      if (Object.keys(options).length > 0) {\n        this.updateOptions(options);\n      }\n    }));\n    this.navigator = new TableResourceNavigator(this, {\n      configurationService,\n      ...options\n    });\n    this.disposables.add(this.navigator);\n  }\n  updateOptions(options) {\n    super.updateOptions(options);\n    if (options.overrideStyles !== undefined) {\n      this.updateStyles(options.overrideStyles);\n    }\n    if (options.multipleSelectionSupport !== undefined) {\n      this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n    }\n  }\n  updateStyles(styles) {\n    this.style(styles ? getListStyles(styles) : defaultListStyles);\n  }\n  dispose() {\n    this.disposables.dispose();\n    super.dispose();\n  }\n};\nWorkbenchTable = __decorate([__param(6, IContextKeyService), __param(7, IListService), __param(8, IConfigurationService), __param(9, IInstantiationService)], WorkbenchTable);\nexport { WorkbenchTable };\nclass ResourceNavigator extends Disposable {\n  constructor(widget, options) {\n    super();\n    this.widget = widget;\n    this._onDidOpen = this._register(new Emitter());\n    this.onDidOpen = this._onDidOpen.event;\n    this._register(Event.filter(this.widget.onDidChangeSelection, e => isKeyboardEvent(e.browserEvent))(e => this.onSelectionFromKeyboard(e)));\n    this._register(this.widget.onPointer(e => this.onPointer(e.element, e.browserEvent)));\n    this._register(this.widget.onMouseDblClick(e => this.onMouseDblClick(e.element, e.browserEvent)));\n    if (typeof (options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== 'boolean' && options !== null && options !== void 0 && options.configurationService) {\n      this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n      this._register(options === null || options === void 0 ? void 0 : options.configurationService.onDidChangeConfiguration(e => {\n        if (e.affectsConfiguration(openModeSettingKey)) {\n          this.openOnSingleClick = (options === null || options === void 0 ? void 0 : options.configurationService.getValue(openModeSettingKey)) !== 'doubleClick';\n        }\n      }));\n    } else {\n      var _options$openOnSingle;\n      this.openOnSingleClick = (_options$openOnSingle = options === null || options === void 0 ? void 0 : options.openOnSingleClick) !== null && _options$openOnSingle !== void 0 ? _options$openOnSingle : true;\n    }\n  }\n  onSelectionFromKeyboard(event) {\n    if (event.elements.length !== 1) {\n      return;\n    }\n    const selectionKeyboardEvent = event.browserEvent;\n    const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\n    const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\n    const sideBySide = false;\n    this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\n  }\n  onPointer(element, browserEvent) {\n    if (!this.openOnSingleClick) {\n      return;\n    }\n    const isDoubleClick = browserEvent.detail === 2;\n    if (isDoubleClick) {\n      return;\n    }\n    const isMiddleClick = browserEvent.button === 1;\n    const preserveFocus = true;\n    const pinned = isMiddleClick;\n    const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n    this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n  }\n  onMouseDblClick(element, browserEvent) {\n    if (!browserEvent) {\n      return;\n    }\n    // copied from AbstractTree\n    const target = browserEvent.target;\n    const onTwistie = target.classList.contains('monaco-tl-twistie') || target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && browserEvent.offsetX < 16;\n    if (onTwistie) {\n      return;\n    }\n    const preserveFocus = false;\n    const pinned = true;\n    const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n    this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n  }\n  _open(element, preserveFocus, pinned, sideBySide, browserEvent) {\n    if (!element) {\n      return;\n    }\n    this._onDidOpen.fire({\n      editorOptions: {\n        preserveFocus,\n        pinned,\n        revealIfVisible: true\n      },\n      sideBySide,\n      element,\n      browserEvent\n    });\n  }\n}\nclass ListResourceNavigator extends ResourceNavigator {\n  constructor(widget, options) {\n    super(widget, options);\n    this.widget = widget;\n  }\n  getSelectedElement() {\n    return this.widget.getSelectedElements()[0];\n  }\n}\nclass TableResourceNavigator extends ResourceNavigator {\n  constructor(widget, options) {\n    super(widget, options);\n  }\n  getSelectedElement() {\n    return this.widget.getSelectedElements()[0];\n  }\n}\nclass TreeResourceNavigator extends ResourceNavigator {\n  constructor(widget, options) {\n    super(widget, options);\n  }\n  getSelectedElement() {\n    var _this$widget$getSelec;\n    return (_this$widget$getSelec = this.widget.getSelection()[0]) !== null && _this$widget$getSelec !== void 0 ? _this$widget$getSelec : undefined;\n  }\n}\nfunction createKeyboardNavigationEventFilter(keybindingService) {\n  let inMultiChord = false;\n  return event => {\n    if (event.toKeyCodeChord().isModifierKey()) {\n      return false;\n    }\n    if (inMultiChord) {\n      inMultiChord = false;\n      return false;\n    }\n    const result = keybindingService.softDispatch(event, event.target);\n    if (result.kind === 1 /* ResultKind.MoreChordsNeeded */) {\n      inMultiChord = true;\n      return false;\n    }\n    inMultiChord = false;\n    return result.kind === 0 /* ResultKind.NoMatchingKb */;\n  };\n}\nlet WorkbenchObjectTree = class WorkbenchObjectTree extends ObjectTree {\n  constructor(user, container, delegate, renderers, options, instantiationService, contextKeyService, listService, configurationService) {\n    const {\n      options: treeOptions,\n      getTypeNavigationMode,\n      disposable\n    } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n    super(user, container, delegate, renderers, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n    this.disposables.add(this.internals);\n  }\n  updateOptions(options) {\n    super.updateOptions(options);\n    this.internals.updateOptions(options);\n  }\n};\nWorkbenchObjectTree = __decorate([__param(5, IInstantiationService), __param(6, IContextKeyService), __param(7, IListService), __param(8, IConfigurationService)], WorkbenchObjectTree);\nexport { WorkbenchObjectTree };\nlet WorkbenchCompressibleObjectTree = class WorkbenchCompressibleObjectTree extends CompressibleObjectTree {\n  constructor(user, container, delegate, renderers, options, instantiationService, contextKeyService, listService, configurationService) {\n    const {\n      options: treeOptions,\n      getTypeNavigationMode,\n      disposable\n    } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n    super(user, container, delegate, renderers, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n    this.disposables.add(this.internals);\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super.updateOptions(options);\n    if (options.overrideStyles) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n    this.internals.updateOptions(options);\n  }\n};\nWorkbenchCompressibleObjectTree = __decorate([__param(5, IInstantiationService), __param(6, IContextKeyService), __param(7, IListService), __param(8, IConfigurationService)], WorkbenchCompressibleObjectTree);\nexport { WorkbenchCompressibleObjectTree };\nlet WorkbenchDataTree = class WorkbenchDataTree extends DataTree {\n  constructor(user, container, delegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n    const {\n      options: treeOptions,\n      getTypeNavigationMode,\n      disposable\n    } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n    super(user, container, delegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n    this.disposables.add(this.internals);\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super.updateOptions(options);\n    if (options.overrideStyles !== undefined) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n    this.internals.updateOptions(options);\n  }\n};\nWorkbenchDataTree = __decorate([__param(6, IInstantiationService), __param(7, IContextKeyService), __param(8, IListService), __param(9, IConfigurationService)], WorkbenchDataTree);\nexport { WorkbenchDataTree };\nlet WorkbenchAsyncDataTree = class WorkbenchAsyncDataTree extends AsyncDataTree {\n  get onDidOpen() {\n    return this.internals.onDidOpen;\n  }\n  constructor(user, container, delegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n    const {\n      options: treeOptions,\n      getTypeNavigationMode,\n      disposable\n    } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n    super(user, container, delegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n    this.disposables.add(this.internals);\n  }\n  updateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super.updateOptions(options);\n    if (options.overrideStyles) {\n      this.internals.updateStyleOverrides(options.overrideStyles);\n    }\n    this.internals.updateOptions(options);\n  }\n};\nWorkbenchAsyncDataTree = __decorate([__param(6, IInstantiationService), __param(7, IContextKeyService), __param(8, IListService), __param(9, IConfigurationService)], WorkbenchAsyncDataTree);\nexport { WorkbenchAsyncDataTree };\nlet WorkbenchCompressibleAsyncDataTree = class WorkbenchCompressibleAsyncDataTree extends CompressibleAsyncDataTree {\n  constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n    const {\n      options: treeOptions,\n      getTypeNavigationMode,\n      disposable\n    } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n    super(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, treeOptions);\n    this.disposables.add(disposable);\n    this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n    this.disposables.add(this.internals);\n  }\n  updateOptions(options) {\n    super.updateOptions(options);\n    this.internals.updateOptions(options);\n  }\n};\nWorkbenchCompressibleAsyncDataTree = __decorate([__param(7, IInstantiationService), __param(8, IContextKeyService), __param(9, IListService), __param(10, IConfigurationService)], WorkbenchCompressibleAsyncDataTree);\nexport { WorkbenchCompressibleAsyncDataTree };\nfunction getDefaultTreeFindMode(configurationService) {\n  const value = configurationService.getValue(defaultFindModeSettingKey);\n  if (value === 'highlight') {\n    return TreeFindMode.Highlight;\n  } else if (value === 'filter') {\n    return TreeFindMode.Filter;\n  }\n  const deprecatedValue = configurationService.getValue(keyboardNavigationSettingKey);\n  if (deprecatedValue === 'simple' || deprecatedValue === 'highlight') {\n    return TreeFindMode.Highlight;\n  } else if (deprecatedValue === 'filter') {\n    return TreeFindMode.Filter;\n  }\n  return undefined;\n}\nfunction getDefaultTreeFindMatchType(configurationService) {\n  const value = configurationService.getValue(defaultFindMatchTypeSettingKey);\n  if (value === 'fuzzy') {\n    return TreeFindMatchType.Fuzzy;\n  } else if (value === 'contiguous') {\n    return TreeFindMatchType.Contiguous;\n  }\n  return undefined;\n}\nfunction workbenchTreeDataPreamble(accessor, options) {\n  var _options$expandOnlyOn;\n  const configurationService = accessor.get(IConfigurationService);\n  const contextViewService = accessor.get(IContextViewService);\n  const contextKeyService = accessor.get(IContextKeyService);\n  const instantiationService = accessor.get(IInstantiationService);\n  const getTypeNavigationMode = () => {\n    // give priority to the context key value to specify a value\n    const modeString = contextKeyService.getContextKeyValue(WorkbenchListTypeNavigationModeKey);\n    if (modeString === 'automatic') {\n      return TypeNavigationMode.Automatic;\n    } else if (modeString === 'trigger') {\n      return TypeNavigationMode.Trigger;\n    }\n    // also check the deprecated context key to set the mode to 'trigger'\n    const modeBoolean = contextKeyService.getContextKeyValue(WorkbenchListAutomaticKeyboardNavigationLegacyKey);\n    if (modeBoolean === false) {\n      return TypeNavigationMode.Trigger;\n    }\n    // finally, check the setting\n    const configString = configurationService.getValue(typeNavigationModeSettingKey);\n    if (configString === 'automatic') {\n      return TypeNavigationMode.Automatic;\n    } else if (configString === 'trigger') {\n      return TypeNavigationMode.Trigger;\n    }\n    return undefined;\n  };\n  const horizontalScrolling = options.horizontalScrolling !== undefined ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n  const [workbenchListOptions, disposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n  const paddingBottom = options.paddingBottom;\n  const renderIndentGuides = options.renderIndentGuides !== undefined ? options.renderIndentGuides : configurationService.getValue(treeRenderIndentGuidesKey);\n  return {\n    getTypeNavigationMode,\n    disposable,\n    options: {\n      // ...options, // TODO@Joao why is this not splatted here?\n      keyboardSupport: false,\n      ...workbenchListOptions,\n      indent: typeof configurationService.getValue(treeIndentKey) === 'number' ? configurationService.getValue(treeIndentKey) : undefined,\n      renderIndentGuides,\n      smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)),\n      defaultFindMode: getDefaultTreeFindMode(configurationService),\n      defaultFindMatchType: getDefaultTreeFindMatchType(configurationService),\n      horizontalScrolling,\n      scrollByPage: Boolean(configurationService.getValue(scrollByPageKey)),\n      paddingBottom: paddingBottom,\n      hideTwistiesOfChildlessElements: options.hideTwistiesOfChildlessElements,\n      expandOnlyOnTwistieClick: (_options$expandOnlyOn = options.expandOnlyOnTwistieClick) !== null && _options$expandOnlyOn !== void 0 ? _options$expandOnlyOn : configurationService.getValue(treeExpandMode) === 'doubleClick',\n      contextViewProvider: contextViewService,\n      findWidgetStyles: defaultFindWidgetStyles,\n      enableStickyScroll: Boolean(configurationService.getValue(treeStickyScroll)),\n      stickyScrollMaxItemCount: Number(configurationService.getValue(treeStickyScrollMaxElements))\n    }\n  };\n}\nlet WorkbenchTreeInternals = class WorkbenchTreeInternals {\n  get onDidOpen() {\n    return this.navigator.onDidOpen;\n  }\n  constructor(tree, options, getTypeNavigationMode, overrideStyles, contextKeyService, listService, configurationService) {\n    var _options$findWidgetEn;\n    this.tree = tree;\n    this.disposables = [];\n    this.contextKeyService = createScopedContextKeyService(contextKeyService, tree);\n    this.disposables.push(createScrollObserver(this.contextKeyService, tree));\n    this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n    this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n    const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n    listSelectionNavigation.set(Boolean(options.selectionNavigation));\n    this.listSupportFindWidget = WorkbenchListSupportsFind.bindTo(this.contextKeyService);\n    this.listSupportFindWidget.set((_options$findWidgetEn = options.findWidgetEnabled) !== null && _options$findWidgetEn !== void 0 ? _options$findWidgetEn : true);\n    this.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n    this.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n    this.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n    this.treeElementCanCollapse = WorkbenchTreeElementCanCollapse.bindTo(this.contextKeyService);\n    this.treeElementHasParent = WorkbenchTreeElementHasParent.bindTo(this.contextKeyService);\n    this.treeElementCanExpand = WorkbenchTreeElementCanExpand.bindTo(this.contextKeyService);\n    this.treeElementHasChild = WorkbenchTreeElementHasChild.bindTo(this.contextKeyService);\n    this.treeFindOpen = WorkbenchTreeFindOpen.bindTo(this.contextKeyService);\n    this.treeStickyScrollFocused = WorkbenchTreeStickyScrollFocused.bindTo(this.contextKeyService);\n    this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n    this.updateStyleOverrides(overrideStyles);\n    const updateCollapseContextKeys = () => {\n      const focus = tree.getFocus()[0];\n      if (!focus) {\n        return;\n      }\n      const node = tree.getNode(focus);\n      this.treeElementCanCollapse.set(node.collapsible && !node.collapsed);\n      this.treeElementHasParent.set(!!tree.getParentElement(focus));\n      this.treeElementCanExpand.set(node.collapsible && node.collapsed);\n      this.treeElementHasChild.set(!!tree.getFirstElementChild(focus));\n    };\n    const interestingContextKeys = new Set();\n    interestingContextKeys.add(WorkbenchListTypeNavigationModeKey);\n    interestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationLegacyKey);\n    this.disposables.push(this.contextKeyService, listService.register(tree), tree.onDidChangeSelection(() => {\n      const selection = tree.getSelection();\n      const focus = tree.getFocus();\n      this.contextKeyService.bufferChangeEvents(() => {\n        this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        this.hasMultiSelection.set(selection.length > 1);\n        this.hasDoubleSelection.set(selection.length === 2);\n      });\n    }), tree.onDidChangeFocus(() => {\n      const selection = tree.getSelection();\n      const focus = tree.getFocus();\n      this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n      updateCollapseContextKeys();\n    }), tree.onDidChangeCollapseState(updateCollapseContextKeys), tree.onDidChangeModel(updateCollapseContextKeys), tree.onDidChangeFindOpenState(enabled => this.treeFindOpen.set(enabled)), tree.onDidChangeStickyScrollFocused(focused => this.treeStickyScrollFocused.set(focused)), configurationService.onDidChangeConfiguration(e => {\n      let newOptions = {};\n      if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n      }\n      if (e.affectsConfiguration(treeIndentKey)) {\n        const indent = configurationService.getValue(treeIndentKey);\n        newOptions = {\n          ...newOptions,\n          indent\n        };\n      }\n      if (e.affectsConfiguration(treeRenderIndentGuidesKey) && options.renderIndentGuides === undefined) {\n        const renderIndentGuides = configurationService.getValue(treeRenderIndentGuidesKey);\n        newOptions = {\n          ...newOptions,\n          renderIndentGuides\n        };\n      }\n      if (e.affectsConfiguration(listSmoothScrolling)) {\n        const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n        newOptions = {\n          ...newOptions,\n          smoothScrolling\n        };\n      }\n      if (e.affectsConfiguration(defaultFindModeSettingKey) || e.affectsConfiguration(keyboardNavigationSettingKey)) {\n        const defaultFindMode = getDefaultTreeFindMode(configurationService);\n        newOptions = {\n          ...newOptions,\n          defaultFindMode\n        };\n      }\n      if (e.affectsConfiguration(typeNavigationModeSettingKey) || e.affectsConfiguration(keyboardNavigationSettingKey)) {\n        const typeNavigationMode = getTypeNavigationMode();\n        newOptions = {\n          ...newOptions,\n          typeNavigationMode\n        };\n      }\n      if (e.affectsConfiguration(defaultFindMatchTypeSettingKey)) {\n        const defaultFindMatchType = getDefaultTreeFindMatchType(configurationService);\n        newOptions = {\n          ...newOptions,\n          defaultFindMatchType\n        };\n      }\n      if (e.affectsConfiguration(horizontalScrollingKey) && options.horizontalScrolling === undefined) {\n        const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n        newOptions = {\n          ...newOptions,\n          horizontalScrolling\n        };\n      }\n      if (e.affectsConfiguration(scrollByPageKey)) {\n        const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n        newOptions = {\n          ...newOptions,\n          scrollByPage\n        };\n      }\n      if (e.affectsConfiguration(treeExpandMode) && options.expandOnlyOnTwistieClick === undefined) {\n        newOptions = {\n          ...newOptions,\n          expandOnlyOnTwistieClick: configurationService.getValue(treeExpandMode) === 'doubleClick'\n        };\n      }\n      if (e.affectsConfiguration(treeStickyScroll)) {\n        const enableStickyScroll = configurationService.getValue(treeStickyScroll);\n        newOptions = {\n          ...newOptions,\n          enableStickyScroll\n        };\n      }\n      if (e.affectsConfiguration(treeStickyScrollMaxElements)) {\n        const stickyScrollMaxItemCount = Math.max(1, configurationService.getValue(treeStickyScrollMaxElements));\n        newOptions = {\n          ...newOptions,\n          stickyScrollMaxItemCount\n        };\n      }\n      if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n        const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n        newOptions = {\n          ...newOptions,\n          mouseWheelScrollSensitivity\n        };\n      }\n      if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n        const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n        newOptions = {\n          ...newOptions,\n          fastScrollSensitivity\n        };\n      }\n      if (Object.keys(newOptions).length > 0) {\n        tree.updateOptions(newOptions);\n      }\n    }), this.contextKeyService.onDidChangeContext(e => {\n      if (e.affectsSome(interestingContextKeys)) {\n        tree.updateOptions({\n          typeNavigationMode: getTypeNavigationMode()\n        });\n      }\n    }));\n    this.navigator = new TreeResourceNavigator(tree, {\n      configurationService,\n      ...options\n    });\n    this.disposables.push(this.navigator);\n  }\n  updateOptions(options) {\n    if (options.multipleSelectionSupport !== undefined) {\n      this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n    }\n  }\n  updateStyleOverrides(overrideStyles) {\n    this.tree.style(overrideStyles ? getListStyles(overrideStyles) : defaultListStyles);\n  }\n  dispose() {\n    this.disposables = dispose(this.disposables);\n  }\n};\nWorkbenchTreeInternals = __decorate([__param(4, IContextKeyService), __param(5, IListService), __param(6, IConfigurationService)], WorkbenchTreeInternals);\nconst configurationRegistry = Registry.as(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n  id: 'workbench',\n  order: 7,\n  title: localize('workbenchConfigurationTitle', \"Workbench\"),\n  type: 'object',\n  properties: {\n    [multiSelectModifierSettingKey]: {\n      type: 'string',\n      enum: ['ctrlCmd', 'alt'],\n      markdownEnumDescriptions: [localize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"), localize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")],\n      default: 'ctrlCmd',\n      description: localize({\n        key: 'multiSelectModifier',\n        comment: ['- `ctrlCmd` refers to a value the setting can take and should not be localized.', '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.']\n      }, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n    },\n    [openModeSettingKey]: {\n      type: 'string',\n      enum: ['singleClick', 'doubleClick'],\n      default: 'singleClick',\n      description: localize({\n        key: 'openModeModifier',\n        comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n      }, \"Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.\")\n    },\n    [horizontalScrollingKey]: {\n      type: 'boolean',\n      default: false,\n      description: localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\")\n    },\n    [scrollByPageKey]: {\n      type: 'boolean',\n      default: false,\n      description: localize('list.scrollByPage', \"Controls whether clicks in the scrollbar scroll page by page.\")\n    },\n    [treeIndentKey]: {\n      type: 'number',\n      default: 8,\n      minimum: 4,\n      maximum: 40,\n      description: localize('tree indent setting', \"Controls tree indentation in pixels.\")\n    },\n    [treeRenderIndentGuidesKey]: {\n      type: 'string',\n      enum: ['none', 'onHover', 'always'],\n      default: 'onHover',\n      description: localize('render tree indent guides', \"Controls whether the tree should render indent guides.\")\n    },\n    [listSmoothScrolling]: {\n      type: 'boolean',\n      default: false,\n      description: localize('list smoothScrolling setting', \"Controls whether lists and trees have smooth scrolling.\")\n    },\n    [mouseWheelScrollSensitivityKey]: {\n      type: 'number',\n      default: 1,\n      markdownDescription: localize('Mouse Wheel Scroll Sensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\")\n    },\n    [fastScrollSensitivityKey]: {\n      type: 'number',\n      default: 5,\n      markdownDescription: localize('Fast Scroll Sensitivity', \"Scrolling speed multiplier when pressing `Alt`.\")\n    },\n    [defaultFindModeSettingKey]: {\n      type: 'string',\n      enum: ['highlight', 'filter'],\n      enumDescriptions: [localize('defaultFindModeSettingKey.highlight', \"Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.\"), localize('defaultFindModeSettingKey.filter', \"Filter elements when searching.\")],\n      default: 'highlight',\n      description: localize('defaultFindModeSettingKey', \"Controls the default find mode for lists and trees in the workbench.\")\n    },\n    [keyboardNavigationSettingKey]: {\n      type: 'string',\n      enum: ['simple', 'highlight', 'filter'],\n      enumDescriptions: [localize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"), localize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"), localize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")],\n      default: 'highlight',\n      description: localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\"),\n      deprecated: true,\n      deprecationMessage: localize('keyboardNavigationSettingKeyDeprecated', \"Please use 'workbench.list.defaultFindMode' and\t'workbench.list.typeNavigationMode' instead.\")\n    },\n    [defaultFindMatchTypeSettingKey]: {\n      type: 'string',\n      enum: ['fuzzy', 'contiguous'],\n      enumDescriptions: [localize('defaultFindMatchTypeSettingKey.fuzzy', \"Use fuzzy matching when searching.\"), localize('defaultFindMatchTypeSettingKey.contiguous', \"Use contiguous matching when searching.\")],\n      default: 'fuzzy',\n      description: localize('defaultFindMatchTypeSettingKey', \"Controls the type of matching used when searching lists and trees in the workbench.\")\n    },\n    [treeExpandMode]: {\n      type: 'string',\n      enum: ['singleClick', 'doubleClick'],\n      default: 'singleClick',\n      description: localize('expand mode', \"Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.\")\n    },\n    [treeStickyScroll]: {\n      type: 'boolean',\n      default: true,\n      description: localize('sticky scroll', \"Controls whether sticky scrolling is enabled in trees.\")\n    },\n    [treeStickyScrollMaxElements]: {\n      type: 'number',\n      minimum: 1,\n      default: 7,\n      markdownDescription: localize('sticky scroll maximum items', \"Controls the number of sticky elements displayed in the tree when {0} is enabled.\", '`#workbench.tree.enableStickyScroll#`')\n    },\n    [typeNavigationModeSettingKey]: {\n      type: 'string',\n      enum: ['automatic', 'trigger'],\n      default: 'automatic',\n      markdownDescription: localize('typeNavigationMode2', \"Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.\")\n    }\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","createStyleSheet","isActiveElement","isKeyboardEvent","PagedList","DefaultStyleController","isSelectionRangeChangeEvent","isSelectionSingleChangeEvent","List","TypeNavigationMode","Table","TreeFindMode","TreeFindMatchType","AsyncDataTree","CompressibleAsyncDataTree","DataTree","CompressibleObjectTree","ObjectTree","Emitter","Event","combinedDisposable","Disposable","DisposableStore","dispose","toDisposable","localize","IConfigurationService","Extensions","ConfigurationExtensions","ContextKeyExpr","IContextKeyService","RawContextKey","InputFocusedContextKey","IContextViewService","createDecorator","IInstantiationService","IKeybindingService","Registry","defaultFindWidgetStyles","defaultListStyles","getListStyles","IListService","ListService","lastFocusedList","_lastFocusedWidget","constructor","disposables","lists","undefined","_hasCreatedStyleController","setLastFocusedList","widget","_this$_lastFocusedWid","_this$_lastFocusedWid2","getHTMLElement","classList","remove","add","register","extraContextKeys","styleController","style","some","l","Error","registeredList","push","onDidFocus","splice","indexOf","onDidDispose","filter","RawWorkbenchListScrollAtBoundaryContextKey","WorkbenchListScrollAtTopContextKey","or","isEqualTo","WorkbenchListScrollAtBottomContextKey","RawWorkbenchListFocusContextKey","WorkbenchTreeStickyScrollFocused","WorkbenchListSupportsMultiSelectContextKey","WorkbenchListFocusContextKey","and","not","negate","WorkbenchListHasSelectionOrFocus","WorkbenchListDoubleSelection","WorkbenchListMultiSelection","WorkbenchListSelectionNavigation","WorkbenchListSupportsFind","WorkbenchTreeElementCanCollapse","WorkbenchTreeElementHasParent","WorkbenchTreeElementCanExpand","WorkbenchTreeElementHasChild","WorkbenchTreeFindOpen","WorkbenchListTypeNavigationModeKey","WorkbenchListAutomaticKeyboardNavigationLegacyKey","createScopedContextKeyService","contextKeyService","result","createScoped","bindTo","createScrollObserver","listScrollAt","update","atTop","scrollTop","atBottom","scrollHeight","renderHeight","set","onDidScroll","multiSelectModifierSettingKey","openModeSettingKey","horizontalScrollingKey","defaultFindModeSettingKey","typeNavigationModeSettingKey","keyboardNavigationSettingKey","scrollByPageKey","defaultFindMatchTypeSettingKey","treeIndentKey","treeRenderIndentGuidesKey","listSmoothScrolling","mouseWheelScrollSensitivityKey","fastScrollSensitivityKey","treeExpandMode","treeStickyScroll","treeStickyScrollMaxElements","useAltAsMultipleSelectionModifier","configurationService","getValue","MultipleSelectionController","registerListeners","_register","onDidChangeConfiguration","e","affectsConfiguration","event","browserEvent","altKey","toWorkbenchListOptions","accessor","options","_options$multipleSele","get","keybindingService","keyboardNavigationDelegate","mightProducePrintableCharacter","smoothScrolling","Boolean","mouseWheelScrollSensitivity","fastScrollSensitivity","multipleSelectionController","keyboardNavigationEventFilter","createKeyboardNavigationEventFilter","scrollByPage","WorkbenchList","user","container","delegate","renderers","listService","instantiationService","horizontalScrolling","workbenchListOptions","workbenchListOptionsDisposable","invokeFunction","keyboardSupport","listSupportsMultiSelect","multipleSelectionSupport","listSelectionNavigation","selectionNavigation","listHasSelectionOrFocus","listDoubleSelection","listMultiSelection","_useAltAsMultipleSelectionModifier","updateStyles","overrideStyles","onDidChangeSelection","selection","getSelection","focus","getFocus","bufferChangeEvents","onDidChangeFocus","keys","updateOptions","navigator","ListResourceNavigator","styles","WorkbenchPagedList","WorkbenchTable","columns","TableResourceNavigator","ResourceNavigator","_onDidOpen","onDidOpen","onSelectionFromKeyboard","onPointer","element","onMouseDblClick","openOnSingleClick","_options$openOnSingle","elements","selectionKeyboardEvent","preserveFocus","pinned","sideBySide","_open","getSelectedElement","isDoubleClick","detail","isMiddleClick","button","ctrlKey","metaKey","onTwistie","contains","offsetX","fire","editorOptions","revealIfVisible","getSelectedElements","TreeResourceNavigator","_this$widget$getSelec","inMultiChord","toKeyCodeChord","isModifierKey","softDispatch","kind","WorkbenchObjectTree","treeOptions","getTypeNavigationMode","disposable","workbenchTreeDataPreamble","internals","WorkbenchTreeInternals","WorkbenchCompressibleObjectTree","updateStyleOverrides","WorkbenchDataTree","dataSource","WorkbenchAsyncDataTree","WorkbenchCompressibleAsyncDataTree","virtualDelegate","compressionDelegate","getDefaultTreeFindMode","value","Highlight","Filter","deprecatedValue","getDefaultTreeFindMatchType","Fuzzy","Contiguous","_options$expandOnlyOn","contextViewService","modeString","getContextKeyValue","Automatic","Trigger","modeBoolean","configString","paddingBottom","renderIndentGuides","indent","defaultFindMode","defaultFindMatchType","hideTwistiesOfChildlessElements","expandOnlyOnTwistieClick","contextViewProvider","findWidgetStyles","enableStickyScroll","stickyScrollMaxItemCount","Number","tree","_options$findWidgetEn","listSupportFindWidget","findWidgetEnabled","hasSelectionOrFocus","hasDoubleSelection","hasMultiSelection","treeElementCanCollapse","treeElementHasParent","treeElementCanExpand","treeElementHasChild","treeFindOpen","treeStickyScrollFocused","updateCollapseContextKeys","node","getNode","collapsible","collapsed","getParentElement","getFirstElementChild","interestingContextKeys","Set","onDidChangeCollapseState","onDidChangeModel","onDidChangeFindOpenState","enabled","onDidChangeStickyScrollFocused","focused","newOptions","typeNavigationMode","Math","max","onDidChangeContext","affectsSome","configurationRegistry","as","Configuration","registerConfiguration","id","order","title","type","properties","enum","markdownEnumDescriptions","default","description","comment","minimum","maximum","markdownDescription","enumDescriptions","deprecated","deprecationMessage"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/platform/list/browser/listService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { createStyleSheet, isActiveElement, isKeyboardEvent } from '../../../base/browser/dom.js';\nimport { PagedList } from '../../../base/browser/ui/list/listPaging.js';\nimport { DefaultStyleController, isSelectionRangeChangeEvent, isSelectionSingleChangeEvent, List, TypeNavigationMode } from '../../../base/browser/ui/list/listWidget.js';\nimport { Table } from '../../../base/browser/ui/table/tableWidget.js';\nimport { TreeFindMode, TreeFindMatchType } from '../../../base/browser/ui/tree/abstractTree.js';\nimport { AsyncDataTree, CompressibleAsyncDataTree } from '../../../base/browser/ui/tree/asyncDataTree.js';\nimport { DataTree } from '../../../base/browser/ui/tree/dataTree.js';\nimport { CompressibleObjectTree, ObjectTree } from '../../../base/browser/ui/tree/objectTree.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { combinedDisposable, Disposable, DisposableStore, dispose, toDisposable } from '../../../base/common/lifecycle.js';\nimport { localize } from '../../../nls.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { Extensions as ConfigurationExtensions } from '../../configuration/common/configurationRegistry.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../contextkey/common/contextkey.js';\nimport { InputFocusedContextKey } from '../../contextkey/common/contextkeys.js';\nimport { IContextViewService } from '../../contextview/browser/contextView.js';\nimport { createDecorator, IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport { defaultFindWidgetStyles, defaultListStyles, getListStyles } from '../../theme/browser/defaultStyles.js';\nexport const IListService = createDecorator('listService');\nexport class ListService {\n    get lastFocusedList() {\n        return this._lastFocusedWidget;\n    }\n    constructor() {\n        this.disposables = new DisposableStore();\n        this.lists = [];\n        this._lastFocusedWidget = undefined;\n        this._hasCreatedStyleController = false;\n    }\n    setLastFocusedList(widget) {\n        if (widget === this._lastFocusedWidget) {\n            return;\n        }\n        this._lastFocusedWidget?.getHTMLElement().classList.remove('last-focused');\n        this._lastFocusedWidget = widget;\n        this._lastFocusedWidget?.getHTMLElement().classList.add('last-focused');\n    }\n    register(widget, extraContextKeys) {\n        if (!this._hasCreatedStyleController) {\n            this._hasCreatedStyleController = true;\n            // create a shared default tree style sheet for performance reasons\n            const styleController = new DefaultStyleController(createStyleSheet(), '');\n            styleController.style(defaultListStyles);\n        }\n        if (this.lists.some(l => l.widget === widget)) {\n            throw new Error('Cannot register the same widget multiple times');\n        }\n        // Keep in our lists list\n        const registeredList = { widget, extraContextKeys };\n        this.lists.push(registeredList);\n        // Check for currently being focused\n        if (isActiveElement(widget.getHTMLElement())) {\n            this.setLastFocusedList(widget);\n        }\n        return combinedDisposable(widget.onDidFocus(() => this.setLastFocusedList(widget)), toDisposable(() => this.lists.splice(this.lists.indexOf(registeredList), 1)), widget.onDidDispose(() => {\n            this.lists = this.lists.filter(l => l !== registeredList);\n            if (this._lastFocusedWidget === widget) {\n                this.setLastFocusedList(undefined);\n            }\n        }));\n    }\n    dispose() {\n        this.disposables.dispose();\n    }\n}\nexport const RawWorkbenchListScrollAtBoundaryContextKey = new RawContextKey('listScrollAtBoundary', 'none');\nexport const WorkbenchListScrollAtTopContextKey = ContextKeyExpr.or(RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('top'), RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('both'));\nexport const WorkbenchListScrollAtBottomContextKey = ContextKeyExpr.or(RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('bottom'), RawWorkbenchListScrollAtBoundaryContextKey.isEqualTo('both'));\nexport const RawWorkbenchListFocusContextKey = new RawContextKey('listFocus', true);\nexport const WorkbenchTreeStickyScrollFocused = new RawContextKey('treestickyScrollFocused', false);\nexport const WorkbenchListSupportsMultiSelectContextKey = new RawContextKey('listSupportsMultiselect', true);\nexport const WorkbenchListFocusContextKey = ContextKeyExpr.and(RawWorkbenchListFocusContextKey, ContextKeyExpr.not(InputFocusedContextKey), WorkbenchTreeStickyScrollFocused.negate());\nexport const WorkbenchListHasSelectionOrFocus = new RawContextKey('listHasSelectionOrFocus', false);\nexport const WorkbenchListDoubleSelection = new RawContextKey('listDoubleSelection', false);\nexport const WorkbenchListMultiSelection = new RawContextKey('listMultiSelection', false);\nexport const WorkbenchListSelectionNavigation = new RawContextKey('listSelectionNavigation', false);\nexport const WorkbenchListSupportsFind = new RawContextKey('listSupportsFind', true);\nexport const WorkbenchTreeElementCanCollapse = new RawContextKey('treeElementCanCollapse', false);\nexport const WorkbenchTreeElementHasParent = new RawContextKey('treeElementHasParent', false);\nexport const WorkbenchTreeElementCanExpand = new RawContextKey('treeElementCanExpand', false);\nexport const WorkbenchTreeElementHasChild = new RawContextKey('treeElementHasChild', false);\nexport const WorkbenchTreeFindOpen = new RawContextKey('treeFindOpen', false);\nconst WorkbenchListTypeNavigationModeKey = 'listTypeNavigationMode';\n/**\n * @deprecated in favor of WorkbenchListTypeNavigationModeKey\n */\nconst WorkbenchListAutomaticKeyboardNavigationLegacyKey = 'listAutomaticKeyboardNavigation';\nfunction createScopedContextKeyService(contextKeyService, widget) {\n    const result = contextKeyService.createScoped(widget.getHTMLElement());\n    RawWorkbenchListFocusContextKey.bindTo(result);\n    return result;\n}\nfunction createScrollObserver(contextKeyService, widget) {\n    const listScrollAt = RawWorkbenchListScrollAtBoundaryContextKey.bindTo(contextKeyService);\n    const update = () => {\n        const atTop = widget.scrollTop === 0;\n        // We need a threshold `1` since scrollHeight is rounded.\n        // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#determine_if_an_element_has_been_totally_scrolled\n        const atBottom = widget.scrollHeight - widget.renderHeight - widget.scrollTop < 1;\n        if (atTop && atBottom) {\n            listScrollAt.set('both');\n        }\n        else if (atTop) {\n            listScrollAt.set('top');\n        }\n        else if (atBottom) {\n            listScrollAt.set('bottom');\n        }\n        else {\n            listScrollAt.set('none');\n        }\n    };\n    update();\n    return widget.onDidScroll(update);\n}\nconst multiSelectModifierSettingKey = 'workbench.list.multiSelectModifier';\nconst openModeSettingKey = 'workbench.list.openMode';\nconst horizontalScrollingKey = 'workbench.list.horizontalScrolling';\nconst defaultFindModeSettingKey = 'workbench.list.defaultFindMode';\nconst typeNavigationModeSettingKey = 'workbench.list.typeNavigationMode';\n/** @deprecated in favor of `workbench.list.defaultFindMode` and `workbench.list.typeNavigationMode` */\nconst keyboardNavigationSettingKey = 'workbench.list.keyboardNavigation';\nconst scrollByPageKey = 'workbench.list.scrollByPage';\nconst defaultFindMatchTypeSettingKey = 'workbench.list.defaultFindMatchType';\nconst treeIndentKey = 'workbench.tree.indent';\nconst treeRenderIndentGuidesKey = 'workbench.tree.renderIndentGuides';\nconst listSmoothScrolling = 'workbench.list.smoothScrolling';\nconst mouseWheelScrollSensitivityKey = 'workbench.list.mouseWheelScrollSensitivity';\nconst fastScrollSensitivityKey = 'workbench.list.fastScrollSensitivity';\nconst treeExpandMode = 'workbench.tree.expandMode';\nconst treeStickyScroll = 'workbench.tree.enableStickyScroll';\nconst treeStickyScrollMaxElements = 'workbench.tree.stickyScrollMaxItemCount';\nfunction useAltAsMultipleSelectionModifier(configurationService) {\n    return configurationService.getValue(multiSelectModifierSettingKey) === 'alt';\n}\nclass MultipleSelectionController extends Disposable {\n    constructor(configurationService) {\n        super();\n        this.configurationService = configurationService;\n        this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this.useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(this.configurationService);\n            }\n        }));\n    }\n    isSelectionSingleChangeEvent(event) {\n        if (this.useAltAsMultipleSelectionModifier) {\n            return event.browserEvent.altKey;\n        }\n        return isSelectionSingleChangeEvent(event);\n    }\n    isSelectionRangeChangeEvent(event) {\n        return isSelectionRangeChangeEvent(event);\n    }\n}\nfunction toWorkbenchListOptions(accessor, options) {\n    const configurationService = accessor.get(IConfigurationService);\n    const keybindingService = accessor.get(IKeybindingService);\n    const disposables = new DisposableStore();\n    const result = {\n        ...options,\n        keyboardNavigationDelegate: { mightProducePrintableCharacter(e) { return keybindingService.mightProducePrintableCharacter(e); } },\n        smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)),\n        mouseWheelScrollSensitivity: configurationService.getValue(mouseWheelScrollSensitivityKey),\n        fastScrollSensitivity: configurationService.getValue(fastScrollSensitivityKey),\n        multipleSelectionController: options.multipleSelectionController ?? disposables.add(new MultipleSelectionController(configurationService)),\n        keyboardNavigationEventFilter: createKeyboardNavigationEventFilter(keybindingService),\n        scrollByPage: Boolean(configurationService.getValue(scrollByPageKey))\n    };\n    return [result, disposables];\n}\nlet WorkbenchList = class WorkbenchList extends List {\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n        super(user, container, delegate, renderers, {\n            keyboardSupport: false,\n            ...workbenchListOptions,\n            horizontalScrolling,\n        });\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.disposables.add(createScrollObserver(this.contextKeyService, this));\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.horizontalScrolling = options.horizontalScrolling;\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        this.updateStyles(options.overrideStyles);\n        this.disposables.add(this.onDidChangeSelection(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.listMultiSelection.set(selection.length > 1);\n                this.listDoubleSelection.set(selection.length === 2);\n            });\n        }));\n        this.disposables.add(this.onDidChangeFocus(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }));\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = { ...options, horizontalScrolling };\n            }\n            if (e.affectsConfiguration(scrollByPageKey)) {\n                const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n                options = { ...options, scrollByPage };\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = { ...options, smoothScrolling };\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = { ...options, mouseWheelScrollSensitivity };\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = { ...options, fastScrollSensitivity };\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new ListResourceNavigator(this, { configurationService, ...options });\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles !== undefined) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        this.style(styles ? getListStyles(styles) : defaultListStyles);\n    }\n};\nWorkbenchList = __decorate([\n    __param(5, IContextKeyService),\n    __param(6, IListService),\n    __param(7, IConfigurationService),\n    __param(8, IInstantiationService)\n], WorkbenchList);\nexport { WorkbenchList };\nlet WorkbenchPagedList = class WorkbenchPagedList extends PagedList {\n    constructor(user, container, delegate, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n        super(user, container, delegate, renderers, {\n            keyboardSupport: false,\n            ...workbenchListOptions,\n            horizontalScrolling,\n        });\n        this.disposables = new DisposableStore();\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.disposables.add(createScrollObserver(this.contextKeyService, this.widget));\n        this.horizontalScrolling = options.horizontalScrolling;\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        this.updateStyles(options.overrideStyles);\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = { ...options, horizontalScrolling };\n            }\n            if (e.affectsConfiguration(scrollByPageKey)) {\n                const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n                options = { ...options, scrollByPage };\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = { ...options, smoothScrolling };\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = { ...options, mouseWheelScrollSensitivity };\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = { ...options, fastScrollSensitivity };\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new ListResourceNavigator(this, { configurationService, ...options });\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles !== undefined) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        this.style(styles ? getListStyles(styles) : defaultListStyles);\n    }\n    dispose() {\n        this.disposables.dispose();\n        super.dispose();\n    }\n};\nWorkbenchPagedList = __decorate([\n    __param(5, IContextKeyService),\n    __param(6, IListService),\n    __param(7, IConfigurationService),\n    __param(8, IInstantiationService)\n], WorkbenchPagedList);\nexport { WorkbenchPagedList };\nlet WorkbenchTable = class WorkbenchTable extends Table {\n    constructor(user, container, delegate, columns, renderers, options, contextKeyService, listService, configurationService, instantiationService) {\n        const horizontalScrolling = typeof options.horizontalScrolling !== 'undefined' ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n        const [workbenchListOptions, workbenchListOptionsDisposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n        super(user, container, delegate, columns, renderers, {\n            keyboardSupport: false,\n            ...workbenchListOptions,\n            horizontalScrolling,\n        });\n        this.disposables.add(workbenchListOptionsDisposable);\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, this);\n        this.disposables.add(createScrollObserver(this.contextKeyService, this));\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.listHasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.listDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.listMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.horizontalScrolling = options.horizontalScrolling;\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.disposables.add(this.contextKeyService);\n        this.disposables.add(listService.register(this));\n        this.updateStyles(options.overrideStyles);\n        this.disposables.add(this.onDidChangeSelection(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.listMultiSelection.set(selection.length > 1);\n                this.listDoubleSelection.set(selection.length === 2);\n            });\n        }));\n        this.disposables.add(this.onDidChangeFocus(() => {\n            const selection = this.getSelection();\n            const focus = this.getFocus();\n            this.listHasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n        }));\n        this.disposables.add(configurationService.onDidChangeConfiguration(e => {\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            let options = {};\n            if (e.affectsConfiguration(horizontalScrollingKey) && this.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                options = { ...options, horizontalScrolling };\n            }\n            if (e.affectsConfiguration(scrollByPageKey)) {\n                const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n                options = { ...options, scrollByPage };\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                options = { ...options, smoothScrolling };\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                options = { ...options, mouseWheelScrollSensitivity };\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                options = { ...options, fastScrollSensitivity };\n            }\n            if (Object.keys(options).length > 0) {\n                this.updateOptions(options);\n            }\n        }));\n        this.navigator = new TableResourceNavigator(this, { configurationService, ...options });\n        this.disposables.add(this.navigator);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        if (options.overrideStyles !== undefined) {\n            this.updateStyles(options.overrideStyles);\n        }\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyles(styles) {\n        this.style(styles ? getListStyles(styles) : defaultListStyles);\n    }\n    dispose() {\n        this.disposables.dispose();\n        super.dispose();\n    }\n};\nWorkbenchTable = __decorate([\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IConfigurationService),\n    __param(9, IInstantiationService)\n], WorkbenchTable);\nexport { WorkbenchTable };\nclass ResourceNavigator extends Disposable {\n    constructor(widget, options) {\n        super();\n        this.widget = widget;\n        this._onDidOpen = this._register(new Emitter());\n        this.onDidOpen = this._onDidOpen.event;\n        this._register(Event.filter(this.widget.onDidChangeSelection, e => isKeyboardEvent(e.browserEvent))(e => this.onSelectionFromKeyboard(e)));\n        this._register(this.widget.onPointer((e) => this.onPointer(e.element, e.browserEvent)));\n        this._register(this.widget.onMouseDblClick((e) => this.onMouseDblClick(e.element, e.browserEvent)));\n        if (typeof options?.openOnSingleClick !== 'boolean' && options?.configurationService) {\n            this.openOnSingleClick = options?.configurationService.getValue(openModeSettingKey) !== 'doubleClick';\n            this._register(options?.configurationService.onDidChangeConfiguration(e => {\n                if (e.affectsConfiguration(openModeSettingKey)) {\n                    this.openOnSingleClick = options?.configurationService.getValue(openModeSettingKey) !== 'doubleClick';\n                }\n            }));\n        }\n        else {\n            this.openOnSingleClick = options?.openOnSingleClick ?? true;\n        }\n    }\n    onSelectionFromKeyboard(event) {\n        if (event.elements.length !== 1) {\n            return;\n        }\n        const selectionKeyboardEvent = event.browserEvent;\n        const preserveFocus = typeof selectionKeyboardEvent.preserveFocus === 'boolean' ? selectionKeyboardEvent.preserveFocus : true;\n        const pinned = typeof selectionKeyboardEvent.pinned === 'boolean' ? selectionKeyboardEvent.pinned : !preserveFocus;\n        const sideBySide = false;\n        this._open(this.getSelectedElement(), preserveFocus, pinned, sideBySide, event.browserEvent);\n    }\n    onPointer(element, browserEvent) {\n        if (!this.openOnSingleClick) {\n            return;\n        }\n        const isDoubleClick = browserEvent.detail === 2;\n        if (isDoubleClick) {\n            return;\n        }\n        const isMiddleClick = browserEvent.button === 1;\n        const preserveFocus = true;\n        const pinned = isMiddleClick;\n        const sideBySide = browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey;\n        this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n    }\n    onMouseDblClick(element, browserEvent) {\n        if (!browserEvent) {\n            return;\n        }\n        // copied from AbstractTree\n        const target = browserEvent.target;\n        const onTwistie = target.classList.contains('monaco-tl-twistie')\n            || (target.classList.contains('monaco-icon-label') && target.classList.contains('folder-icon') && browserEvent.offsetX < 16);\n        if (onTwistie) {\n            return;\n        }\n        const preserveFocus = false;\n        const pinned = true;\n        const sideBySide = (browserEvent.ctrlKey || browserEvent.metaKey || browserEvent.altKey);\n        this._open(element, preserveFocus, pinned, sideBySide, browserEvent);\n    }\n    _open(element, preserveFocus, pinned, sideBySide, browserEvent) {\n        if (!element) {\n            return;\n        }\n        this._onDidOpen.fire({\n            editorOptions: {\n                preserveFocus,\n                pinned,\n                revealIfVisible: true\n            },\n            sideBySide,\n            element,\n            browserEvent\n        });\n    }\n}\nclass ListResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n        this.widget = widget;\n    }\n    getSelectedElement() {\n        return this.widget.getSelectedElements()[0];\n    }\n}\nclass TableResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n    }\n    getSelectedElement() {\n        return this.widget.getSelectedElements()[0];\n    }\n}\nclass TreeResourceNavigator extends ResourceNavigator {\n    constructor(widget, options) {\n        super(widget, options);\n    }\n    getSelectedElement() {\n        return this.widget.getSelection()[0] ?? undefined;\n    }\n}\nfunction createKeyboardNavigationEventFilter(keybindingService) {\n    let inMultiChord = false;\n    return event => {\n        if (event.toKeyCodeChord().isModifierKey()) {\n            return false;\n        }\n        if (inMultiChord) {\n            inMultiChord = false;\n            return false;\n        }\n        const result = keybindingService.softDispatch(event, event.target);\n        if (result.kind === 1 /* ResultKind.MoreChordsNeeded */) {\n            inMultiChord = true;\n            return false;\n        }\n        inMultiChord = false;\n        return result.kind === 0 /* ResultKind.NoMatchingKb */;\n    };\n}\nlet WorkbenchObjectTree = class WorkbenchObjectTree extends ObjectTree {\n    constructor(user, container, delegate, renderers, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, delegate, renderers, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchObjectTree = __decorate([\n    __param(5, IInstantiationService),\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IConfigurationService)\n], WorkbenchObjectTree);\nexport { WorkbenchObjectTree };\nlet WorkbenchCompressibleObjectTree = class WorkbenchCompressibleObjectTree extends CompressibleObjectTree {\n    constructor(user, container, delegate, renderers, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, delegate, renderers, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchCompressibleObjectTree = __decorate([\n    __param(5, IInstantiationService),\n    __param(6, IContextKeyService),\n    __param(7, IListService),\n    __param(8, IConfigurationService)\n], WorkbenchCompressibleObjectTree);\nexport { WorkbenchCompressibleObjectTree };\nlet WorkbenchDataTree = class WorkbenchDataTree extends DataTree {\n    constructor(user, container, delegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, delegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles !== undefined) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchDataTree = __decorate([\n    __param(6, IInstantiationService),\n    __param(7, IContextKeyService),\n    __param(8, IListService),\n    __param(9, IConfigurationService)\n], WorkbenchDataTree);\nexport { WorkbenchDataTree };\nlet WorkbenchAsyncDataTree = class WorkbenchAsyncDataTree extends AsyncDataTree {\n    get onDidOpen() { return this.internals.onDidOpen; }\n    constructor(user, container, delegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, delegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options = {}) {\n        super.updateOptions(options);\n        if (options.overrideStyles) {\n            this.internals.updateStyleOverrides(options.overrideStyles);\n        }\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchAsyncDataTree = __decorate([\n    __param(6, IInstantiationService),\n    __param(7, IContextKeyService),\n    __param(8, IListService),\n    __param(9, IConfigurationService)\n], WorkbenchAsyncDataTree);\nexport { WorkbenchAsyncDataTree };\nlet WorkbenchCompressibleAsyncDataTree = class WorkbenchCompressibleAsyncDataTree extends CompressibleAsyncDataTree {\n    constructor(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, options, instantiationService, contextKeyService, listService, configurationService) {\n        const { options: treeOptions, getTypeNavigationMode, disposable } = instantiationService.invokeFunction(workbenchTreeDataPreamble, options);\n        super(user, container, virtualDelegate, compressionDelegate, renderers, dataSource, treeOptions);\n        this.disposables.add(disposable);\n        this.internals = new WorkbenchTreeInternals(this, options, getTypeNavigationMode, options.overrideStyles, contextKeyService, listService, configurationService);\n        this.disposables.add(this.internals);\n    }\n    updateOptions(options) {\n        super.updateOptions(options);\n        this.internals.updateOptions(options);\n    }\n};\nWorkbenchCompressibleAsyncDataTree = __decorate([\n    __param(7, IInstantiationService),\n    __param(8, IContextKeyService),\n    __param(9, IListService),\n    __param(10, IConfigurationService)\n], WorkbenchCompressibleAsyncDataTree);\nexport { WorkbenchCompressibleAsyncDataTree };\nfunction getDefaultTreeFindMode(configurationService) {\n    const value = configurationService.getValue(defaultFindModeSettingKey);\n    if (value === 'highlight') {\n        return TreeFindMode.Highlight;\n    }\n    else if (value === 'filter') {\n        return TreeFindMode.Filter;\n    }\n    const deprecatedValue = configurationService.getValue(keyboardNavigationSettingKey);\n    if (deprecatedValue === 'simple' || deprecatedValue === 'highlight') {\n        return TreeFindMode.Highlight;\n    }\n    else if (deprecatedValue === 'filter') {\n        return TreeFindMode.Filter;\n    }\n    return undefined;\n}\nfunction getDefaultTreeFindMatchType(configurationService) {\n    const value = configurationService.getValue(defaultFindMatchTypeSettingKey);\n    if (value === 'fuzzy') {\n        return TreeFindMatchType.Fuzzy;\n    }\n    else if (value === 'contiguous') {\n        return TreeFindMatchType.Contiguous;\n    }\n    return undefined;\n}\nfunction workbenchTreeDataPreamble(accessor, options) {\n    const configurationService = accessor.get(IConfigurationService);\n    const contextViewService = accessor.get(IContextViewService);\n    const contextKeyService = accessor.get(IContextKeyService);\n    const instantiationService = accessor.get(IInstantiationService);\n    const getTypeNavigationMode = () => {\n        // give priority to the context key value to specify a value\n        const modeString = contextKeyService.getContextKeyValue(WorkbenchListTypeNavigationModeKey);\n        if (modeString === 'automatic') {\n            return TypeNavigationMode.Automatic;\n        }\n        else if (modeString === 'trigger') {\n            return TypeNavigationMode.Trigger;\n        }\n        // also check the deprecated context key to set the mode to 'trigger'\n        const modeBoolean = contextKeyService.getContextKeyValue(WorkbenchListAutomaticKeyboardNavigationLegacyKey);\n        if (modeBoolean === false) {\n            return TypeNavigationMode.Trigger;\n        }\n        // finally, check the setting\n        const configString = configurationService.getValue(typeNavigationModeSettingKey);\n        if (configString === 'automatic') {\n            return TypeNavigationMode.Automatic;\n        }\n        else if (configString === 'trigger') {\n            return TypeNavigationMode.Trigger;\n        }\n        return undefined;\n    };\n    const horizontalScrolling = options.horizontalScrolling !== undefined ? options.horizontalScrolling : Boolean(configurationService.getValue(horizontalScrollingKey));\n    const [workbenchListOptions, disposable] = instantiationService.invokeFunction(toWorkbenchListOptions, options);\n    const paddingBottom = options.paddingBottom;\n    const renderIndentGuides = options.renderIndentGuides !== undefined ? options.renderIndentGuides : configurationService.getValue(treeRenderIndentGuidesKey);\n    return {\n        getTypeNavigationMode,\n        disposable,\n        options: {\n            // ...options, // TODO@Joao why is this not splatted here?\n            keyboardSupport: false,\n            ...workbenchListOptions,\n            indent: typeof configurationService.getValue(treeIndentKey) === 'number' ? configurationService.getValue(treeIndentKey) : undefined,\n            renderIndentGuides,\n            smoothScrolling: Boolean(configurationService.getValue(listSmoothScrolling)),\n            defaultFindMode: getDefaultTreeFindMode(configurationService),\n            defaultFindMatchType: getDefaultTreeFindMatchType(configurationService),\n            horizontalScrolling,\n            scrollByPage: Boolean(configurationService.getValue(scrollByPageKey)),\n            paddingBottom: paddingBottom,\n            hideTwistiesOfChildlessElements: options.hideTwistiesOfChildlessElements,\n            expandOnlyOnTwistieClick: options.expandOnlyOnTwistieClick ?? (configurationService.getValue(treeExpandMode) === 'doubleClick'),\n            contextViewProvider: contextViewService,\n            findWidgetStyles: defaultFindWidgetStyles,\n            enableStickyScroll: Boolean(configurationService.getValue(treeStickyScroll)),\n            stickyScrollMaxItemCount: Number(configurationService.getValue(treeStickyScrollMaxElements)),\n        }\n    };\n}\nlet WorkbenchTreeInternals = class WorkbenchTreeInternals {\n    get onDidOpen() { return this.navigator.onDidOpen; }\n    constructor(tree, options, getTypeNavigationMode, overrideStyles, contextKeyService, listService, configurationService) {\n        this.tree = tree;\n        this.disposables = [];\n        this.contextKeyService = createScopedContextKeyService(contextKeyService, tree);\n        this.disposables.push(createScrollObserver(this.contextKeyService, tree));\n        this.listSupportsMultiSelect = WorkbenchListSupportsMultiSelectContextKey.bindTo(this.contextKeyService);\n        this.listSupportsMultiSelect.set(options.multipleSelectionSupport !== false);\n        const listSelectionNavigation = WorkbenchListSelectionNavigation.bindTo(this.contextKeyService);\n        listSelectionNavigation.set(Boolean(options.selectionNavigation));\n        this.listSupportFindWidget = WorkbenchListSupportsFind.bindTo(this.contextKeyService);\n        this.listSupportFindWidget.set(options.findWidgetEnabled ?? true);\n        this.hasSelectionOrFocus = WorkbenchListHasSelectionOrFocus.bindTo(this.contextKeyService);\n        this.hasDoubleSelection = WorkbenchListDoubleSelection.bindTo(this.contextKeyService);\n        this.hasMultiSelection = WorkbenchListMultiSelection.bindTo(this.contextKeyService);\n        this.treeElementCanCollapse = WorkbenchTreeElementCanCollapse.bindTo(this.contextKeyService);\n        this.treeElementHasParent = WorkbenchTreeElementHasParent.bindTo(this.contextKeyService);\n        this.treeElementCanExpand = WorkbenchTreeElementCanExpand.bindTo(this.contextKeyService);\n        this.treeElementHasChild = WorkbenchTreeElementHasChild.bindTo(this.contextKeyService);\n        this.treeFindOpen = WorkbenchTreeFindOpen.bindTo(this.contextKeyService);\n        this.treeStickyScrollFocused = WorkbenchTreeStickyScrollFocused.bindTo(this.contextKeyService);\n        this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n        this.updateStyleOverrides(overrideStyles);\n        const updateCollapseContextKeys = () => {\n            const focus = tree.getFocus()[0];\n            if (!focus) {\n                return;\n            }\n            const node = tree.getNode(focus);\n            this.treeElementCanCollapse.set(node.collapsible && !node.collapsed);\n            this.treeElementHasParent.set(!!tree.getParentElement(focus));\n            this.treeElementCanExpand.set(node.collapsible && node.collapsed);\n            this.treeElementHasChild.set(!!tree.getFirstElementChild(focus));\n        };\n        const interestingContextKeys = new Set();\n        interestingContextKeys.add(WorkbenchListTypeNavigationModeKey);\n        interestingContextKeys.add(WorkbenchListAutomaticKeyboardNavigationLegacyKey);\n        this.disposables.push(this.contextKeyService, listService.register(tree), tree.onDidChangeSelection(() => {\n            const selection = tree.getSelection();\n            const focus = tree.getFocus();\n            this.contextKeyService.bufferChangeEvents(() => {\n                this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n                this.hasMultiSelection.set(selection.length > 1);\n                this.hasDoubleSelection.set(selection.length === 2);\n            });\n        }), tree.onDidChangeFocus(() => {\n            const selection = tree.getSelection();\n            const focus = tree.getFocus();\n            this.hasSelectionOrFocus.set(selection.length > 0 || focus.length > 0);\n            updateCollapseContextKeys();\n        }), tree.onDidChangeCollapseState(updateCollapseContextKeys), tree.onDidChangeModel(updateCollapseContextKeys), tree.onDidChangeFindOpenState(enabled => this.treeFindOpen.set(enabled)), tree.onDidChangeStickyScrollFocused(focused => this.treeStickyScrollFocused.set(focused)), configurationService.onDidChangeConfiguration(e => {\n            let newOptions = {};\n            if (e.affectsConfiguration(multiSelectModifierSettingKey)) {\n                this._useAltAsMultipleSelectionModifier = useAltAsMultipleSelectionModifier(configurationService);\n            }\n            if (e.affectsConfiguration(treeIndentKey)) {\n                const indent = configurationService.getValue(treeIndentKey);\n                newOptions = { ...newOptions, indent };\n            }\n            if (e.affectsConfiguration(treeRenderIndentGuidesKey) && options.renderIndentGuides === undefined) {\n                const renderIndentGuides = configurationService.getValue(treeRenderIndentGuidesKey);\n                newOptions = { ...newOptions, renderIndentGuides };\n            }\n            if (e.affectsConfiguration(listSmoothScrolling)) {\n                const smoothScrolling = Boolean(configurationService.getValue(listSmoothScrolling));\n                newOptions = { ...newOptions, smoothScrolling };\n            }\n            if (e.affectsConfiguration(defaultFindModeSettingKey) || e.affectsConfiguration(keyboardNavigationSettingKey)) {\n                const defaultFindMode = getDefaultTreeFindMode(configurationService);\n                newOptions = { ...newOptions, defaultFindMode };\n            }\n            if (e.affectsConfiguration(typeNavigationModeSettingKey) || e.affectsConfiguration(keyboardNavigationSettingKey)) {\n                const typeNavigationMode = getTypeNavigationMode();\n                newOptions = { ...newOptions, typeNavigationMode };\n            }\n            if (e.affectsConfiguration(defaultFindMatchTypeSettingKey)) {\n                const defaultFindMatchType = getDefaultTreeFindMatchType(configurationService);\n                newOptions = { ...newOptions, defaultFindMatchType };\n            }\n            if (e.affectsConfiguration(horizontalScrollingKey) && options.horizontalScrolling === undefined) {\n                const horizontalScrolling = Boolean(configurationService.getValue(horizontalScrollingKey));\n                newOptions = { ...newOptions, horizontalScrolling };\n            }\n            if (e.affectsConfiguration(scrollByPageKey)) {\n                const scrollByPage = Boolean(configurationService.getValue(scrollByPageKey));\n                newOptions = { ...newOptions, scrollByPage };\n            }\n            if (e.affectsConfiguration(treeExpandMode) && options.expandOnlyOnTwistieClick === undefined) {\n                newOptions = { ...newOptions, expandOnlyOnTwistieClick: configurationService.getValue(treeExpandMode) === 'doubleClick' };\n            }\n            if (e.affectsConfiguration(treeStickyScroll)) {\n                const enableStickyScroll = configurationService.getValue(treeStickyScroll);\n                newOptions = { ...newOptions, enableStickyScroll };\n            }\n            if (e.affectsConfiguration(treeStickyScrollMaxElements)) {\n                const stickyScrollMaxItemCount = Math.max(1, configurationService.getValue(treeStickyScrollMaxElements));\n                newOptions = { ...newOptions, stickyScrollMaxItemCount };\n            }\n            if (e.affectsConfiguration(mouseWheelScrollSensitivityKey)) {\n                const mouseWheelScrollSensitivity = configurationService.getValue(mouseWheelScrollSensitivityKey);\n                newOptions = { ...newOptions, mouseWheelScrollSensitivity };\n            }\n            if (e.affectsConfiguration(fastScrollSensitivityKey)) {\n                const fastScrollSensitivity = configurationService.getValue(fastScrollSensitivityKey);\n                newOptions = { ...newOptions, fastScrollSensitivity };\n            }\n            if (Object.keys(newOptions).length > 0) {\n                tree.updateOptions(newOptions);\n            }\n        }), this.contextKeyService.onDidChangeContext(e => {\n            if (e.affectsSome(interestingContextKeys)) {\n                tree.updateOptions({ typeNavigationMode: getTypeNavigationMode() });\n            }\n        }));\n        this.navigator = new TreeResourceNavigator(tree, { configurationService, ...options });\n        this.disposables.push(this.navigator);\n    }\n    updateOptions(options) {\n        if (options.multipleSelectionSupport !== undefined) {\n            this.listSupportsMultiSelect.set(!!options.multipleSelectionSupport);\n        }\n    }\n    updateStyleOverrides(overrideStyles) {\n        this.tree.style(overrideStyles ? getListStyles(overrideStyles) : defaultListStyles);\n    }\n    dispose() {\n        this.disposables = dispose(this.disposables);\n    }\n};\nWorkbenchTreeInternals = __decorate([\n    __param(4, IContextKeyService),\n    __param(5, IListService),\n    __param(6, IConfigurationService)\n], WorkbenchTreeInternals);\nconst configurationRegistry = Registry.as(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n    id: 'workbench',\n    order: 7,\n    title: localize('workbenchConfigurationTitle', \"Workbench\"),\n    type: 'object',\n    properties: {\n        [multiSelectModifierSettingKey]: {\n            type: 'string',\n            enum: ['ctrlCmd', 'alt'],\n            markdownEnumDescriptions: [\n                localize('multiSelectModifier.ctrlCmd', \"Maps to `Control` on Windows and Linux and to `Command` on macOS.\"),\n                localize('multiSelectModifier.alt', \"Maps to `Alt` on Windows and Linux and to `Option` on macOS.\")\n            ],\n            default: 'ctrlCmd',\n            description: localize({\n                key: 'multiSelectModifier',\n                comment: [\n                    '- `ctrlCmd` refers to a value the setting can take and should not be localized.',\n                    '- `Control` and `Command` refer to the modifier keys Ctrl or Cmd on the keyboard and can be localized.'\n                ]\n            }, \"The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.\")\n        },\n        [openModeSettingKey]: {\n            type: 'string',\n            enum: ['singleClick', 'doubleClick'],\n            default: 'singleClick',\n            description: localize({\n                key: 'openModeModifier',\n                comment: ['`singleClick` and `doubleClick` refers to a value the setting can take and should not be localized.']\n            }, \"Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.\")\n        },\n        [horizontalScrollingKey]: {\n            type: 'boolean',\n            default: false,\n            description: localize('horizontalScrolling setting', \"Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.\")\n        },\n        [scrollByPageKey]: {\n            type: 'boolean',\n            default: false,\n            description: localize('list.scrollByPage', \"Controls whether clicks in the scrollbar scroll page by page.\")\n        },\n        [treeIndentKey]: {\n            type: 'number',\n            default: 8,\n            minimum: 4,\n            maximum: 40,\n            description: localize('tree indent setting', \"Controls tree indentation in pixels.\")\n        },\n        [treeRenderIndentGuidesKey]: {\n            type: 'string',\n            enum: ['none', 'onHover', 'always'],\n            default: 'onHover',\n            description: localize('render tree indent guides', \"Controls whether the tree should render indent guides.\")\n        },\n        [listSmoothScrolling]: {\n            type: 'boolean',\n            default: false,\n            description: localize('list smoothScrolling setting', \"Controls whether lists and trees have smooth scrolling.\"),\n        },\n        [mouseWheelScrollSensitivityKey]: {\n            type: 'number',\n            default: 1,\n            markdownDescription: localize('Mouse Wheel Scroll Sensitivity', \"A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\")\n        },\n        [fastScrollSensitivityKey]: {\n            type: 'number',\n            default: 5,\n            markdownDescription: localize('Fast Scroll Sensitivity', \"Scrolling speed multiplier when pressing `Alt`.\")\n        },\n        [defaultFindModeSettingKey]: {\n            type: 'string',\n            enum: ['highlight', 'filter'],\n            enumDescriptions: [\n                localize('defaultFindModeSettingKey.highlight', \"Highlight elements when searching. Further up and down navigation will traverse only the highlighted elements.\"),\n                localize('defaultFindModeSettingKey.filter', \"Filter elements when searching.\")\n            ],\n            default: 'highlight',\n            description: localize('defaultFindModeSettingKey', \"Controls the default find mode for lists and trees in the workbench.\")\n        },\n        [keyboardNavigationSettingKey]: {\n            type: 'string',\n            enum: ['simple', 'highlight', 'filter'],\n            enumDescriptions: [\n                localize('keyboardNavigationSettingKey.simple', \"Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.\"),\n                localize('keyboardNavigationSettingKey.highlight', \"Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.\"),\n                localize('keyboardNavigationSettingKey.filter', \"Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.\")\n            ],\n            default: 'highlight',\n            description: localize('keyboardNavigationSettingKey', \"Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.\"),\n            deprecated: true,\n            deprecationMessage: localize('keyboardNavigationSettingKeyDeprecated', \"Please use 'workbench.list.defaultFindMode' and\t'workbench.list.typeNavigationMode' instead.\")\n        },\n        [defaultFindMatchTypeSettingKey]: {\n            type: 'string',\n            enum: ['fuzzy', 'contiguous'],\n            enumDescriptions: [\n                localize('defaultFindMatchTypeSettingKey.fuzzy', \"Use fuzzy matching when searching.\"),\n                localize('defaultFindMatchTypeSettingKey.contiguous', \"Use contiguous matching when searching.\")\n            ],\n            default: 'fuzzy',\n            description: localize('defaultFindMatchTypeSettingKey', \"Controls the type of matching used when searching lists and trees in the workbench.\")\n        },\n        [treeExpandMode]: {\n            type: 'string',\n            enum: ['singleClick', 'doubleClick'],\n            default: 'singleClick',\n            description: localize('expand mode', \"Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.\"),\n        },\n        [treeStickyScroll]: {\n            type: 'boolean',\n            default: true,\n            description: localize('sticky scroll', \"Controls whether sticky scrolling is enabled in trees.\"),\n        },\n        [treeStickyScrollMaxElements]: {\n            type: 'number',\n            minimum: 1,\n            default: 7,\n            markdownDescription: localize('sticky scroll maximum items', \"Controls the number of sticky elements displayed in the tree when {0} is enabled.\", '`#workbench.tree.enableStickyScroll#`'),\n        },\n        [typeNavigationModeSettingKey]: {\n            type: 'string',\n            enum: ['automatic', 'trigger'],\n            default: 'automatic',\n            markdownDescription: localize('typeNavigationMode2', \"Controls how type navigation works in lists and trees in the workbench. When set to `trigger`, type navigation begins once the `list.triggerTypeNavigation` command is run.\"),\n        }\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
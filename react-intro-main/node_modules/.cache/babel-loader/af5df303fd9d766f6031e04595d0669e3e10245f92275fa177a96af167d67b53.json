{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B open server\\\\old\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as monaco from 'monaco-editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditor = ({\n  id,\n  onCodeChange,\n  initialCode\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  useEffect(() => {\n    if (editorRef.current) {\n      const editorInstance = monaco.editor.create(editorRef.current, {\n        value: initialCode,\n        language: 'vhdl',\n        theme: 'vs-dark',\n        automaticLayout: true\n      });\n\n      // Отслеживаем изменения в редакторе\n      const debounceChangeHandler = debounce(() => {\n        const code = editorInstance.getValue();\n        onCodeChange(code);\n      }, 300);\n      editorInstance.onDidChangeModelContent(debounceChangeHandler);\n      return () => {\n        editorInstance.dispose(); // Очистка редактора\n      };\n    }\n  }, [initialCode, onCodeChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    ref: editorRef,\n    style: {\n      height: '200px',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n\n// Функция debounce, которая задерживает вызов\n_s(VHDLEditor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = VHDLEditor;\nfunction debounce(func, wait) {\n  let timeout;\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), wait);\n  };\n}\nconst CompilerConsole = ({\n  output\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"compiler-console\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u041A\\u043E\\u043D\\u0441\\u043E\\u043B\\u044C:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c2 = CompilerConsole;\nconst VHDLEditorWithCompiler = () => {\n  _s2();\n  const [architectureCode, setArchitectureCode] = useState(`library IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity AND_Gate is\n    Port (\n        A : in STD_LOGIC;  -- Входной сигнал A\n        B : in STD_LOGIC;  -- Входной сигнал B\n        Y : out STD_LOGIC  -- Выходной сигнал Y\n    );\nend AND_Gate;\n\narchitecture Behavioral of AND_Gate is\nbegin\n    Y <= A and B;  -- Логическое И между A и B\nend Behavioral;\n`);\n  const [testbenchCode, setTestbenchCode] = useState(`library IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity AND_Gate_TB is\n-- Тестовый стенд не требует портов\nend AND_Gate_TB;\n\narchitecture Behavioral of AND_Gate_TB is\n    -- Компонент для тестирования\n    component AND_Gate\n        Port (\n            A : in STD_LOGIC;\n            B : in STD_LOGIC;\n            Y : out STD_LOGIC\n        );\n    end component;\n\n    -- Сигналы для соединения с тестируемым модулем\n    signal A : STD_LOGIC := '0';\n    signal B : STD_LOGIC := '0';\n    signal Y : STD_LOGIC;\nbegin\n    -- Подключение тестируемого компонента\n    UUT: AND_Gate\n        Port map (\n            A => A,\n            B => B,\n            Y => Y\n        );\n\n    -- Стимулы для проверки\n    stimulus: process\n    begin\n        -- Первый случай: A = 0, B = 0\n        A <= '0'; B <= '0';\n        wait for 10 ns;\n\n        -- Второй случай: A = 0, B = 1\n        A <= '0'; B <= '1';\n        wait for 10 ns;\n\n        -- Третий случай: A = 1, B = 0\n        A <= '1'; B <= '0';\n        wait for 10 ns;\n\n        -- Четвёртый случай: A = 1, B = 1\n        A <= '1'; B <= '1';\n        wait for 10 ns;\n\n        -- Завершение симуляции\n        wait;\n    end process;\nend Behavioral;\n`);\n  const [output, setOutput] = useState('');\n  const compileCode = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          architectureCode,\n          testbenchCode\n        })\n      });\n      const result = await response.text();\n      setOutput(result);\n    } catch (error) {\n      setOutput('Ошибка компиляции: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"vhdl-editor\",\n      onCodeChange: code => setArchitectureCode(code),\n      initialCode: architectureCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"testbench-textarea\",\n      value: testbenchCode,\n      onChange: e => setTestbenchCode(e.target.value),\n      placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043A\\u043E\\u0434 \\u0442\\u0435\\u0441\\u0442\\u0430...\",\n      style: {\n        width: '100%',\n        height: '50%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"compile-button\",\n      onClick: compileCode,\n      children: \"\\u041A\\u043E\\u043C\\u043F\\u0438\\u043B\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompilerConsole, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s2(VHDLEditorWithCompiler, \"1LmQwqG6HcPIIY3Cf1h8MfB+T7o=\");\n_c3 = VHDLEditorWithCompiler;\nexport default VHDLEditorWithCompiler;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"VHDLEditor\");\n$RefreshReg$(_c2, \"CompilerConsole\");\n$RefreshReg$(_c3, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["React","useState","useEffect","useRef","monaco","jsxDEV","_jsxDEV","VHDLEditor","id","onCodeChange","initialCode","_s","editorRef","current","editorInstance","editor","create","value","language","theme","automaticLayout","debounceChangeHandler","debounce","code","getValue","onDidChangeModelContent","dispose","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","func","wait","timeout","context","args","arguments","clearTimeout","setTimeout","apply","CompilerConsole","output","className","children","_c2","VHDLEditorWithCompiler","_s2","architectureCode","setArchitectureCode","testbenchCode","setTestbenchCode","setOutput","compileCode","response","fetch","method","headers","body","JSON","stringify","result","text","error","message","onChange","e","target","placeholder","onClick","_c3","$RefreshReg$"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as monaco from 'monaco-editor';\r\n\r\nconst VHDLEditor = ({ id, onCodeChange, initialCode }) => {\r\n  const editorRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (editorRef.current) {\r\n      const editorInstance = monaco.editor.create(editorRef.current, {\r\n        value: initialCode,\r\n        language: 'vhdl',\r\n        theme: 'vs-dark',\r\n        automaticLayout: true,\r\n      });\r\n\r\n      // Отслеживаем изменения в редакторе\r\n      const debounceChangeHandler = debounce(() => {\r\n        const code = editorInstance.getValue();\r\n        onCodeChange(code);\r\n      }, 300);\r\n\r\n      editorInstance.onDidChangeModelContent(debounceChangeHandler);\r\n\r\n      return () => {\r\n        editorInstance.dispose(); // Очистка редактора\r\n      };\r\n    }\r\n  }, [initialCode, onCodeChange]);\r\n\r\n  return <div id={id} ref={editorRef} style={{ height: '200px', width: '100%' }}></div>;\r\n};\r\n\r\n// Функция debounce, которая задерживает вызов\r\nfunction debounce(func, wait) {\r\n  let timeout;\r\n  return function () {\r\n    const context = this;\r\n    const args = arguments;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(context, args), wait);\r\n  };\r\n}\r\n\r\nconst CompilerConsole = ({ output }) => {\r\n  return (\r\n    <div className=\"compiler-console\">\r\n      <h3>Консоль:</h3>\r\n      <pre>{output}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = useState(`library IEEE;\r\nuse IEEE.STD_LOGIC_1164.ALL;\r\n\r\nentity AND_Gate is\r\n    Port (\r\n        A : in STD_LOGIC;  -- Входной сигнал A\r\n        B : in STD_LOGIC;  -- Входной сигнал B\r\n        Y : out STD_LOGIC  -- Выходной сигнал Y\r\n    );\r\nend AND_Gate;\r\n\r\narchitecture Behavioral of AND_Gate is\r\nbegin\r\n    Y <= A and B;  -- Логическое И между A и B\r\nend Behavioral;\r\n`);\r\n  const [testbenchCode, setTestbenchCode] = useState(`library IEEE;\r\nuse IEEE.STD_LOGIC_1164.ALL;\r\n\r\nentity AND_Gate_TB is\r\n-- Тестовый стенд не требует портов\r\nend AND_Gate_TB;\r\n\r\narchitecture Behavioral of AND_Gate_TB is\r\n    -- Компонент для тестирования\r\n    component AND_Gate\r\n        Port (\r\n            A : in STD_LOGIC;\r\n            B : in STD_LOGIC;\r\n            Y : out STD_LOGIC\r\n        );\r\n    end component;\r\n\r\n    -- Сигналы для соединения с тестируемым модулем\r\n    signal A : STD_LOGIC := '0';\r\n    signal B : STD_LOGIC := '0';\r\n    signal Y : STD_LOGIC;\r\nbegin\r\n    -- Подключение тестируемого компонента\r\n    UUT: AND_Gate\r\n        Port map (\r\n            A => A,\r\n            B => B,\r\n            Y => Y\r\n        );\r\n\r\n    -- Стимулы для проверки\r\n    stimulus: process\r\n    begin\r\n        -- Первый случай: A = 0, B = 0\r\n        A <= '0'; B <= '0';\r\n        wait for 10 ns;\r\n\r\n        -- Второй случай: A = 0, B = 1\r\n        A <= '0'; B <= '1';\r\n        wait for 10 ns;\r\n\r\n        -- Третий случай: A = 1, B = 0\r\n        A <= '1'; B <= '0';\r\n        wait for 10 ns;\r\n\r\n        -- Четвёртый случай: A = 1, B = 1\r\n        A <= '1'; B <= '1';\r\n        wait for 10 ns;\r\n\r\n        -- Завершение симуляции\r\n        wait;\r\n    end process;\r\nend Behavioral;\r\n`);\r\n  const [output, setOutput] = useState('');\r\n\r\n  const compileCode = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ architectureCode, testbenchCode }),\r\n      });\r\n\r\n      const result = await response.text();\r\n      setOutput(result);\r\n    } catch (error) {\r\n      setOutput('Ошибка компиляции: ' + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"content-container\">\r\n      <h3>Архитектура:</h3>\r\n      <VHDLEditor\r\n        id=\"vhdl-editor\"\r\n        onCodeChange={(code) => setArchitectureCode(code)}\r\n        initialCode={architectureCode}\r\n      />\r\n\r\n      <h3>Тестовый стенд:</h3>\r\n      <textarea\r\n        id=\"testbench-textarea\"\r\n        value={testbenchCode}\r\n        onChange={(e) => setTestbenchCode(e.target.value)}\r\n        placeholder=\"Введите код теста...\"\r\n        style={{ width: '100%', height: '50%' }}\r\n      />\r\n\r\n      <button id=\"compile-button\" onClick={compileCode}>\r\n        Компилировать\r\n      </button>\r\n\r\n      <CompilerConsole output={output} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VHDLEditorWithCompiler;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
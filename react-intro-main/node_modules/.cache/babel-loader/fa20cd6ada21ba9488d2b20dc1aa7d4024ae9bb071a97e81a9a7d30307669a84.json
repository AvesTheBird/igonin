{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport { mixInto } from '../../util/Utils';\nimport { hasScrollbars } from '../../util/styleUtils';\nimport { Graph } from '../Graph';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst ZoomMixin = {\n  /**\n   * Specifies the factor used for {@link zoomIn} and {@link zoomOut}.\n   * @default 1.2 (120%)\n   */\n  zoomFactor: 1.2,\n  /**\n   * Specifies if the viewport should automatically contain the selection cells after a zoom operation.\n   * @default false\n   */\n  keepSelectionVisibleOnZoom: false,\n  /**\n   * Specifies if the zoom operations should go into the center of the actual\n   * diagram rather than going from top, left.\n   * @default true\n   */\n  centerZoom: true,\n  /*****************************************************************************\n   * Group: Graph display\n   *****************************************************************************/\n  /**\n   * Zooms into the graph by {@link zoomFactor}.\n   */\n  zoomIn() {\n    this.zoom(this.zoomFactor);\n  },\n  /**\n   * Zooms out of the graph by {@link zoomFactor}.\n   */\n  zoomOut() {\n    this.zoom(1 / this.zoomFactor);\n  },\n  /**\n   * Resets the zoom and panning in the view.\n   */\n  zoomActual() {\n    if (this.getView().scale === 1) {\n      this.getView().setTranslate(0, 0);\n    } else {\n      this.getView().translate.x = 0;\n      this.getView().translate.y = 0;\n      this.getView().setScale(1);\n    }\n  },\n  /**\n   * Zooms the graph to the given scale with an optional boolean center\n   * argument, which is passd to {@link zoom}.\n   */\n  zoomTo(scale, center = false) {\n    this.zoom(scale / this.getView().scale, center);\n  },\n  /**\n   * Zooms the graph using the given factor. Center is an optional boolean\n   * argument that keeps the graph scrolled to the center. If the center argument\n   * is omitted, then {@link centerZoom} will be used as its value.\n   */\n  zoom(factor, center) {\n    center = center ?? this.centerZoom;\n    const scale = Math.round(this.getView().scale * factor * 100) / 100;\n    const state = this.getView().getState(this.getSelectionCell());\n    const container = this.getContainer();\n    factor = scale / this.getView().scale;\n    if (this.keepSelectionVisibleOnZoom && state != null) {\n      const rect = new Rectangle(state.x * factor, state.y * factor, state.width * factor, state.height * factor);\n      // Refreshes the display only once if a scroll is carried out\n      this.getView().scale = scale;\n      if (!this.scrollRectToVisible(rect)) {\n        this.getView().revalidate();\n        // Forces an event to be fired but does not revalidate again\n        this.getView().setScale(scale);\n      }\n    } else {\n      const _hasScrollbars = hasScrollbars(this.getContainer());\n      if (center && !_hasScrollbars) {\n        let dx = container.offsetWidth;\n        let dy = container.offsetHeight;\n        if (factor > 1) {\n          const f = (factor - 1) / (scale * 2);\n          dx *= -f;\n          dy *= -f;\n        } else {\n          const f = (1 / factor - 1) / (this.getView().scale * 2);\n          dx *= f;\n          dy *= f;\n        }\n        this.getView().scaleAndTranslate(scale, this.getView().translate.x + dx, this.getView().translate.y + dy);\n      } else {\n        // Allows for changes of translate and scrollbars during setscale\n        const tx = this.getView().translate.x;\n        const ty = this.getView().translate.y;\n        const sl = container.scrollLeft;\n        const st = container.scrollTop;\n        this.getView().setScale(scale);\n        if (_hasScrollbars) {\n          let dx = 0;\n          let dy = 0;\n          if (center) {\n            dx = container.offsetWidth * (factor - 1) / 2;\n            dy = container.offsetHeight * (factor - 1) / 2;\n          }\n          container.scrollLeft = (this.getView().translate.x - tx) * this.getView().scale + Math.round(sl * factor + dx);\n          container.scrollTop = (this.getView().translate.y - ty) * this.getView().scale + Math.round(st * factor + dy);\n        }\n      }\n    }\n  },\n  /**\n   * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n   * ratio as the display container, it is increased in the smaller relative dimension only\n   * until the aspect match. The original rectangle is centralised within this expanded one.\n   *\n   * Note that the input rectangular must be un-scaled and un-translated.\n   *\n   * @param rect The un-scaled and un-translated rectangluar region that should be just visible\n   * after the operation\n   */\n  zoomToRect(rect) {\n    const container = this.getContainer();\n    const scaleX = container.clientWidth / rect.width;\n    const scaleY = container.clientHeight / rect.height;\n    const aspectFactor = scaleX / scaleY;\n    // Remove any overlap of the rect outside the client area\n    rect.x = Math.max(0, rect.x);\n    rect.y = Math.max(0, rect.y);\n    let rectRight = Math.min(container.scrollWidth, rect.x + rect.width);\n    let rectBottom = Math.min(container.scrollHeight, rect.y + rect.height);\n    rect.width = rectRight - rect.x;\n    rect.height = rectBottom - rect.y;\n    // The selection area has to be increased to the same aspect\n    // ratio as the container, centred around the centre point of the\n    // original rect passed in.\n    if (aspectFactor < 1.0) {\n      // Height needs increasing\n      const newHeight = rect.height / aspectFactor;\n      const deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n      rect.height = newHeight;\n      // Assign up to half the buffer to the upper part of the rect, not crossing 0\n      // put the rest on the bottom\n      const upperBuffer = Math.min(rect.y, deltaHeightBuffer);\n      rect.y -= upperBuffer;\n      // Check if the bottom has extended too far\n      rectBottom = Math.min(container.scrollHeight, rect.y + rect.height);\n      rect.height = rectBottom - rect.y;\n    } else {\n      // Width needs increasing\n      const newWidth = rect.width * aspectFactor;\n      const deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n      rect.width = newWidth;\n      // Assign up to half the buffer to the upper part of the rect, not crossing 0\n      // put the rest on the bottom\n      const leftBuffer = Math.min(rect.x, deltaWidthBuffer);\n      rect.x -= leftBuffer;\n      // Check if the right hand side has extended too far\n      rectRight = Math.min(container.scrollWidth, rect.x + rect.width);\n      rect.width = rectRight - rect.x;\n    }\n    const scale = container.clientWidth / rect.width;\n    const newScale = this.getView().scale * scale;\n    if (!hasScrollbars(this.getContainer())) {\n      this.getView().scaleAndTranslate(newScale, this.getView().translate.x - rect.x / this.getView().scale, this.getView().translate.y - rect.y / this.getView().scale);\n    } else {\n      this.getView().setScale(newScale);\n      container.scrollLeft = Math.round(rect.x * scale);\n      container.scrollTop = Math.round(rect.y * scale);\n    }\n  }\n};\nmixInto(Graph)(ZoomMixin);","map":{"version":3,"names":["Rectangle","mixInto","hasScrollbars","Graph","ZoomMixin","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","zoomIn","zoom","zoomOut","zoomActual","getView","scale","setTranslate","translate","x","y","setScale","zoomTo","center","factor","Math","round","state","getState","getSelectionCell","container","getContainer","rect","width","height","scrollRectToVisible","revalidate","_hasScrollbars","dx","offsetWidth","dy","offsetHeight","f","scaleAndTranslate","tx","ty","sl","scrollLeft","st","scrollTop","zoomToRect","scaleX","clientWidth","scaleY","clientHeight","aspectFactor","max","rectRight","min","scrollWidth","rectBottom","scrollHeight","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","leftBuffer","newScale"],"sources":["D:/ospanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/mixins/ZoomMixin.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../geometry/Rectangle';\nimport { mixInto } from '../../util/Utils';\nimport { hasScrollbars } from '../../util/styleUtils';\nimport { Graph } from '../Graph';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst ZoomMixin = {\n    /**\n     * Specifies the factor used for {@link zoomIn} and {@link zoomOut}.\n     * @default 1.2 (120%)\n     */\n    zoomFactor: 1.2,\n    /**\n     * Specifies if the viewport should automatically contain the selection cells after a zoom operation.\n     * @default false\n     */\n    keepSelectionVisibleOnZoom: false,\n    /**\n     * Specifies if the zoom operations should go into the center of the actual\n     * diagram rather than going from top, left.\n     * @default true\n     */\n    centerZoom: true,\n    /*****************************************************************************\n     * Group: Graph display\n     *****************************************************************************/\n    /**\n     * Zooms into the graph by {@link zoomFactor}.\n     */\n    zoomIn() {\n        this.zoom(this.zoomFactor);\n    },\n    /**\n     * Zooms out of the graph by {@link zoomFactor}.\n     */\n    zoomOut() {\n        this.zoom(1 / this.zoomFactor);\n    },\n    /**\n     * Resets the zoom and panning in the view.\n     */\n    zoomActual() {\n        if (this.getView().scale === 1) {\n            this.getView().setTranslate(0, 0);\n        }\n        else {\n            this.getView().translate.x = 0;\n            this.getView().translate.y = 0;\n            this.getView().setScale(1);\n        }\n    },\n    /**\n     * Zooms the graph to the given scale with an optional boolean center\n     * argument, which is passd to {@link zoom}.\n     */\n    zoomTo(scale, center = false) {\n        this.zoom(scale / this.getView().scale, center);\n    },\n    /**\n     * Zooms the graph using the given factor. Center is an optional boolean\n     * argument that keeps the graph scrolled to the center. If the center argument\n     * is omitted, then {@link centerZoom} will be used as its value.\n     */\n    zoom(factor, center) {\n        center = center ?? this.centerZoom;\n        const scale = Math.round(this.getView().scale * factor * 100) / 100;\n        const state = this.getView().getState(this.getSelectionCell());\n        const container = this.getContainer();\n        factor = scale / this.getView().scale;\n        if (this.keepSelectionVisibleOnZoom && state != null) {\n            const rect = new Rectangle(state.x * factor, state.y * factor, state.width * factor, state.height * factor);\n            // Refreshes the display only once if a scroll is carried out\n            this.getView().scale = scale;\n            if (!this.scrollRectToVisible(rect)) {\n                this.getView().revalidate();\n                // Forces an event to be fired but does not revalidate again\n                this.getView().setScale(scale);\n            }\n        }\n        else {\n            const _hasScrollbars = hasScrollbars(this.getContainer());\n            if (center && !_hasScrollbars) {\n                let dx = container.offsetWidth;\n                let dy = container.offsetHeight;\n                if (factor > 1) {\n                    const f = (factor - 1) / (scale * 2);\n                    dx *= -f;\n                    dy *= -f;\n                }\n                else {\n                    const f = (1 / factor - 1) / (this.getView().scale * 2);\n                    dx *= f;\n                    dy *= f;\n                }\n                this.getView().scaleAndTranslate(scale, this.getView().translate.x + dx, this.getView().translate.y + dy);\n            }\n            else {\n                // Allows for changes of translate and scrollbars during setscale\n                const tx = this.getView().translate.x;\n                const ty = this.getView().translate.y;\n                const sl = container.scrollLeft;\n                const st = container.scrollTop;\n                this.getView().setScale(scale);\n                if (_hasScrollbars) {\n                    let dx = 0;\n                    let dy = 0;\n                    if (center) {\n                        dx = (container.offsetWidth * (factor - 1)) / 2;\n                        dy = (container.offsetHeight * (factor - 1)) / 2;\n                    }\n                    container.scrollLeft =\n                        (this.getView().translate.x - tx) * this.getView().scale +\n                            Math.round(sl * factor + dx);\n                    container.scrollTop =\n                        (this.getView().translate.y - ty) * this.getView().scale +\n                            Math.round(st * factor + dy);\n                }\n            }\n        }\n    },\n    /**\n     * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n     * ratio as the display container, it is increased in the smaller relative dimension only\n     * until the aspect match. The original rectangle is centralised within this expanded one.\n     *\n     * Note that the input rectangular must be un-scaled and un-translated.\n     *\n     * @param rect The un-scaled and un-translated rectangluar region that should be just visible\n     * after the operation\n     */\n    zoomToRect(rect) {\n        const container = this.getContainer();\n        const scaleX = container.clientWidth / rect.width;\n        const scaleY = container.clientHeight / rect.height;\n        const aspectFactor = scaleX / scaleY;\n        // Remove any overlap of the rect outside the client area\n        rect.x = Math.max(0, rect.x);\n        rect.y = Math.max(0, rect.y);\n        let rectRight = Math.min(container.scrollWidth, rect.x + rect.width);\n        let rectBottom = Math.min(container.scrollHeight, rect.y + rect.height);\n        rect.width = rectRight - rect.x;\n        rect.height = rectBottom - rect.y;\n        // The selection area has to be increased to the same aspect\n        // ratio as the container, centred around the centre point of the\n        // original rect passed in.\n        if (aspectFactor < 1.0) {\n            // Height needs increasing\n            const newHeight = rect.height / aspectFactor;\n            const deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n            rect.height = newHeight;\n            // Assign up to half the buffer to the upper part of the rect, not crossing 0\n            // put the rest on the bottom\n            const upperBuffer = Math.min(rect.y, deltaHeightBuffer);\n            rect.y -= upperBuffer;\n            // Check if the bottom has extended too far\n            rectBottom = Math.min(container.scrollHeight, rect.y + rect.height);\n            rect.height = rectBottom - rect.y;\n        }\n        else {\n            // Width needs increasing\n            const newWidth = rect.width * aspectFactor;\n            const deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n            rect.width = newWidth;\n            // Assign up to half the buffer to the upper part of the rect, not crossing 0\n            // put the rest on the bottom\n            const leftBuffer = Math.min(rect.x, deltaWidthBuffer);\n            rect.x -= leftBuffer;\n            // Check if the right hand side has extended too far\n            rectRight = Math.min(container.scrollWidth, rect.x + rect.width);\n            rect.width = rectRight - rect.x;\n        }\n        const scale = container.clientWidth / rect.width;\n        const newScale = this.getView().scale * scale;\n        if (!hasScrollbars(this.getContainer())) {\n            this.getView().scaleAndTranslate(newScale, this.getView().translate.x - rect.x / this.getView().scale, this.getView().translate.y - rect.y / this.getView().scale);\n        }\n        else {\n            this.getView().setScale(newScale);\n            container.scrollLeft = Math.round(rect.x * scale);\n            container.scrollTop = Math.round(rect.y * scale);\n        }\n    },\n};\nmixInto(Graph)(ZoomMixin);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
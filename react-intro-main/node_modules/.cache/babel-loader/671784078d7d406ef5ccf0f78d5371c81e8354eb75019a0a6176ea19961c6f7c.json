{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport Point from '../Point';\nimport { LINE_ARCSIZE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement a rhombus (aka diamond) shape.\n * This shape is registered under {@link mxConstants.SHAPE_RHOMBUS} in {@link cellRenderer}.\n * @class RhombusShape\n * @extends {Shape}\n */\nclass RhombusShape extends Shape {\n  constructor(bounds, fill, stroke, strokewidth = 1) {\n    super();\n    this.bounds = bounds;\n    this.fill = fill;\n    this.stroke = stroke;\n    this.strokeWidth = strokewidth;\n  }\n  /**\n   * Adds roundable support.\n   */\n  // isRoundable(): boolean;\n  isRoundable() {\n    return true;\n  }\n  /**\n   * Generic painting implementation.\n   * @param {mxAbstractCanvas2D} c\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   */\n  paintVertexShape(c, x, y, w, h) {\n    const hw = w / 2;\n    const hh = h / 2;\n    const arcSize = (this.style?.arcSize ?? LINE_ARCSIZE) / 2;\n    c.begin();\n    this.addPoints(c, [new Point(x + hw, y), new Point(x + w, y + hh), new Point(x + hw, y + h), new Point(x, y + hh)], this.isRounded, arcSize, true);\n    c.fillAndStroke();\n  }\n}\nexport default RhombusShape;","map":{"version":3,"names":["Shape","Point","LINE_ARCSIZE","RhombusShape","constructor","bounds","fill","stroke","strokewidth","strokeWidth","isRoundable","paintVertexShape","c","x","y","w","h","hw","hh","arcSize","style","begin","addPoints","isRounded","fillAndStroke"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/geometry/node/RhombusShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport Point from '../Point';\nimport { LINE_ARCSIZE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement a rhombus (aka diamond) shape.\n * This shape is registered under {@link mxConstants.SHAPE_RHOMBUS} in {@link cellRenderer}.\n * @class RhombusShape\n * @extends {Shape}\n */\nclass RhombusShape extends Shape {\n    constructor(bounds, fill, stroke, strokewidth = 1) {\n        super();\n        this.bounds = bounds;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokewidth;\n    }\n    /**\n     * Adds roundable support.\n     */\n    // isRoundable(): boolean;\n    isRoundable() {\n        return true;\n    }\n    /**\n     * Generic painting implementation.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintVertexShape(c, x, y, w, h) {\n        const hw = w / 2;\n        const hh = h / 2;\n        const arcSize = (this.style?.arcSize ?? LINE_ARCSIZE) / 2;\n        c.begin();\n        this.addPoints(c, [\n            new Point(x + hw, y),\n            new Point(x + w, y + hh),\n            new Point(x + hw, y + h),\n            new Point(x, y + hh),\n        ], this.isRounded, arcSize, true);\n        c.fillAndStroke();\n    }\n}\nexport default RhombusShape;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,UAAU;AAC5B,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,YAAY,QAAQ,yBAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASH,KAAK,CAAC;EAC7BI,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,WAAW,GAAG,CAAC,EAAE;IAC/C,KAAK,CAAC,CAAC;IACP,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,WAAW,GAAGD,WAAW;EAClC;EACA;AACJ;AACA;EACI;EACAE,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,gBAAgBA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC5B,MAAMC,EAAE,GAAGF,CAAC,GAAG,CAAC;IAChB,MAAMG,EAAE,GAAGF,CAAC,GAAG,CAAC;IAChB,MAAMG,OAAO,GAAG,CAAC,IAAI,CAACC,KAAK,EAAED,OAAO,IAAIjB,YAAY,IAAI,CAAC;IACzDU,CAAC,CAACS,KAAK,CAAC,CAAC;IACT,IAAI,CAACC,SAAS,CAACV,CAAC,EAAE,CACd,IAAIX,KAAK,CAACY,CAAC,GAAGI,EAAE,EAAEH,CAAC,CAAC,EACpB,IAAIb,KAAK,CAACY,CAAC,GAAGE,CAAC,EAAED,CAAC,GAAGI,EAAE,CAAC,EACxB,IAAIjB,KAAK,CAACY,CAAC,GAAGI,EAAE,EAAEH,CAAC,GAAGE,CAAC,CAAC,EACxB,IAAIf,KAAK,CAACY,CAAC,EAAEC,CAAC,GAAGI,EAAE,CAAC,CACvB,EAAE,IAAI,CAACK,SAAS,EAAEJ,OAAO,EAAE,IAAI,CAAC;IACjCP,CAAC,CAACY,aAAa,CAAC,CAAC;EACrB;AACJ;AACA,eAAerB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _InlayHintsController;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar InlayHintsController_1;\nimport { isHTMLElement, ModifierKeyEmitter } from '../../../../base/browser/dom.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DynamicCssRules } from '../../../browser/editorDom.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n// --- hint caching service (per session)\nclass InlayHintsCache {\n  constructor() {\n    this._entries = new LRUCache(50);\n  }\n  get(model) {\n    const key = InlayHintsCache._key(model);\n    return this._entries.get(key);\n  }\n  set(model, value) {\n    const key = InlayHintsCache._key(model);\n    this._entries.set(key, value);\n  }\n  static _key(model) {\n    return \"\".concat(model.uri.toString(), \"/\").concat(model.getVersionId());\n  }\n}\nconst IInlayHintsCache = createDecorator('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, 1 /* InstantiationType.Delayed */);\n// --- rendered label\nexport class RenderedInlayHintLabelPart {\n  constructor(item, index) {\n    this.item = item;\n    this.index = index;\n  }\n  get part() {\n    const label = this.item.hint.label;\n    if (typeof label === 'string') {\n      return {\n        label\n      };\n    } else {\n      return label[this.index];\n    }\n  }\n}\nclass ActiveInlayHintInfo {\n  constructor(part, hasTriggerModifier) {\n    this.part = part;\n    this.hasTriggerModifier = hasTriggerModifier;\n  }\n}\n// --- controller\nlet InlayHintsController = (_InlayHintsController = class InlayHintsController {\n  static get(editor) {\n    var _editor$getContributi;\n    return (_editor$getContributi = editor.getContribution(InlayHintsController_1.ID)) !== null && _editor$getContributi !== void 0 ? _editor$getContributi : undefined;\n  }\n  constructor(_editor, _languageFeaturesService, _featureDebounce, _inlayHintsCache, _commandService, _notificationService, _instaService) {\n    this._editor = _editor;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._inlayHintsCache = _inlayHintsCache;\n    this._commandService = _commandService;\n    this._notificationService = _notificationService;\n    this._instaService = _instaService;\n    this._disposables = new DisposableStore();\n    this._sessionDisposables = new DisposableStore();\n    this._decorationsMetadata = new Map();\n    this._ruleFactory = new DynamicCssRules(this._editor);\n    this._activeRenderMode = 0 /* RenderMode.Normal */;\n    this._debounceInfo = _featureDebounce.for(_languageFeaturesService.inlayHintsProvider, 'InlayHint', {\n      min: 25\n    });\n    this._disposables.add(_languageFeaturesService.inlayHintsProvider.onDidChange(() => this._update()));\n    this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n    this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n    this._disposables.add(_editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(142 /* EditorOption.inlayHints */)) {\n        this._update();\n      }\n    }));\n    this._update();\n  }\n  dispose() {\n    this._sessionDisposables.dispose();\n    this._removeAllDecorations();\n    this._disposables.dispose();\n  }\n  _update() {\n    this._sessionDisposables.clear();\n    this._removeAllDecorations();\n    const options = this._editor.getOption(142 /* EditorOption.inlayHints */);\n    if (options.enabled === 'off') {\n      return;\n    }\n    const model = this._editor.getModel();\n    if (!model || !this._languageFeaturesService.inlayHintsProvider.has(model)) {\n      return;\n    }\n    if (options.enabled === 'on') {\n      // different \"on\" modes: always\n      this._activeRenderMode = 0 /* RenderMode.Normal */;\n    } else {\n      // different \"on\" modes: offUnlessPressed, or onUnlessPressed\n      let defaultMode;\n      let altMode;\n      if (options.enabled === 'onUnlessPressed') {\n        defaultMode = 0 /* RenderMode.Normal */;\n        altMode = 1 /* RenderMode.Invisible */;\n      } else {\n        defaultMode = 1 /* RenderMode.Invisible */;\n        altMode = 0 /* RenderMode.Normal */;\n      }\n      this._activeRenderMode = defaultMode;\n      this._sessionDisposables.add(ModifierKeyEmitter.getInstance().event(e => {\n        if (!this._editor.hasModel()) {\n          return;\n        }\n        const newRenderMode = e.altKey && e.ctrlKey && !(e.shiftKey || e.metaKey) ? altMode : defaultMode;\n        if (newRenderMode !== this._activeRenderMode) {\n          this._activeRenderMode = newRenderMode;\n          const model = this._editor.getModel();\n          const copies = this._copyInlayHintsWithCurrentAnchor(model);\n          this._updateHintsDecorators([model.getFullModelRange()], copies);\n          scheduler.schedule(0);\n        }\n      }));\n    }\n    // iff possible, quickly update from cache\n    const cached = this._inlayHintsCache.get(model);\n    if (cached) {\n      this._updateHintsDecorators([model.getFullModelRange()], cached);\n    }\n    this._sessionDisposables.add(toDisposable(() => {\n      // cache items when switching files etc\n      if (!model.isDisposed()) {\n        this._cacheHintsForFastRestore(model);\n      }\n    }));\n    let cts;\n    const watchedProviders = new Set();\n    const scheduler = new RunOnceScheduler(async () => {\n      var _cts;\n      const t1 = Date.now();\n      (_cts = cts) === null || _cts === void 0 || _cts.dispose(true);\n      cts = new CancellationTokenSource();\n      const listener = model.onWillDispose(() => {\n        var _cts2;\n        return (_cts2 = cts) === null || _cts2 === void 0 ? void 0 : _cts2.cancel();\n      });\n      try {\n        const myToken = cts.token;\n        const inlayHints = await InlayHintsFragments.create(this._languageFeaturesService.inlayHintsProvider, model, this._getHintsRanges(), myToken);\n        scheduler.delay = this._debounceInfo.update(model, Date.now() - t1);\n        if (myToken.isCancellationRequested) {\n          inlayHints.dispose();\n          return;\n        }\n        // listen to provider changes\n        for (const provider of inlayHints.provider) {\n          if (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n            watchedProviders.add(provider);\n            this._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n              if (!scheduler.isScheduled()) {\n                // ignore event when request is already scheduled\n                scheduler.schedule();\n              }\n            }));\n          }\n        }\n        this._sessionDisposables.add(inlayHints);\n        this._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n        this._cacheHintsForFastRestore(model);\n      } catch (err) {\n        onUnexpectedError(err);\n      } finally {\n        cts.dispose();\n        listener.dispose();\n      }\n    }, this._debounceInfo.get(model));\n    this._sessionDisposables.add(scheduler);\n    this._sessionDisposables.add(toDisposable(() => {\n      var _cts3;\n      return (_cts3 = cts) === null || _cts3 === void 0 ? void 0 : _cts3.dispose(true);\n    }));\n    scheduler.schedule(0);\n    this._sessionDisposables.add(this._editor.onDidScrollChange(e => {\n      // update when scroll position changes\n      // uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n      // typing or due to \"actual\" scrolling\n      if (e.scrollTopChanged || !scheduler.isScheduled()) {\n        scheduler.schedule();\n      }\n    }));\n    this._sessionDisposables.add(this._editor.onDidChangeModelContent(e => {\n      var _cts4;\n      (_cts4 = cts) === null || _cts4 === void 0 || _cts4.cancel();\n      // update less aggressive when typing\n      const delay = Math.max(scheduler.delay, 1250);\n      scheduler.schedule(delay);\n    }));\n    // mouse gestures\n    this._sessionDisposables.add(this._installDblClickGesture(() => scheduler.schedule(0)));\n    this._sessionDisposables.add(this._installLinkGesture());\n    this._sessionDisposables.add(this._installContextMenu());\n  }\n  _installLinkGesture() {\n    const store = new DisposableStore();\n    const gesture = store.add(new ClickLinkGesture(this._editor));\n    // let removeHighlight = () => { };\n    const sessionStore = new DisposableStore();\n    store.add(sessionStore);\n    store.add(gesture.onMouseMoveOrRelevantKeyDown(e => {\n      const [mouseEvent] = e;\n      const labelPart = this._getInlayHintLabelPart(mouseEvent);\n      const model = this._editor.getModel();\n      if (!labelPart || !model) {\n        sessionStore.clear();\n        return;\n      }\n      // resolve the item\n      const cts = new CancellationTokenSource();\n      sessionStore.add(toDisposable(() => cts.dispose(true)));\n      labelPart.item.resolve(cts.token);\n      // render link => when the modifier is pressed and when there is a command or location\n      this._activeInlayHintPart = labelPart.part.command || labelPart.part.location ? new ActiveInlayHintInfo(labelPart, mouseEvent.hasTriggerModifier) : undefined;\n      const lineNumber = model.validatePosition(labelPart.item.hint.position).lineNumber;\n      const range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n      const lineHints = this._getInlineHintsForRange(range);\n      this._updateHintsDecorators([range], lineHints);\n      sessionStore.add(toDisposable(() => {\n        this._activeInlayHintPart = undefined;\n        this._updateHintsDecorators([range], lineHints);\n      }));\n    }));\n    store.add(gesture.onCancel(() => sessionStore.clear()));\n    store.add(gesture.onExecute(async e => {\n      const label = this._getInlayHintLabelPart(e);\n      if (label) {\n        const part = label.part;\n        if (part.location) {\n          // location -> execute go to def\n          this._instaService.invokeFunction(goToDefinitionWithLocation, e, this._editor, part.location);\n        } else if (languages.Command.is(part.command)) {\n          // command -> execute it\n          await this._invokeCommand(part.command, label.item);\n        }\n      }\n    }));\n    return store;\n  }\n  _getInlineHintsForRange(range) {\n    const lineHints = new Set();\n    for (const data of this._decorationsMetadata.values()) {\n      if (range.containsRange(data.item.anchor.range)) {\n        lineHints.add(data.item);\n      }\n    }\n    return Array.from(lineHints);\n  }\n  _installDblClickGesture(updateInlayHints) {\n    return this._editor.onMouseUp(async e => {\n      if (e.event.detail !== 2) {\n        return;\n      }\n      const part = this._getInlayHintLabelPart(e);\n      if (!part) {\n        return;\n      }\n      e.event.preventDefault();\n      await part.item.resolve(CancellationToken.None);\n      if (isNonEmptyArray(part.item.hint.textEdits)) {\n        const edits = part.item.hint.textEdits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text));\n        this._editor.executeEdits('inlayHint.default', edits);\n        updateInlayHints();\n      }\n    });\n  }\n  _installContextMenu() {\n    return this._editor.onContextMenu(async e => {\n      if (!isHTMLElement(e.event.target)) {\n        return;\n      }\n      const part = this._getInlayHintLabelPart(e);\n      if (part) {\n        await this._instaService.invokeFunction(showGoToContextMenu, this._editor, e.event.target, part);\n      }\n    });\n  }\n  _getInlayHintLabelPart(e) {\n    var _e$target$detail$inje;\n    if (e.target.type !== 6 /* MouseTargetType.CONTENT_TEXT */) {\n      return undefined;\n    }\n    const options = (_e$target$detail$inje = e.target.detail.injectedText) === null || _e$target$detail$inje === void 0 ? void 0 : _e$target$detail$inje.options;\n    if (options instanceof ModelDecorationInjectedTextOptions && (options === null || options === void 0 ? void 0 : options.attachedData) instanceof RenderedInlayHintLabelPart) {\n      return options.attachedData;\n    }\n    return undefined;\n  }\n  async _invokeCommand(command, item) {\n    try {\n      var _command$arguments;\n      await this._commandService.executeCommand(command.id, ...((_command$arguments = command.arguments) !== null && _command$arguments !== void 0 ? _command$arguments : []));\n    } catch (err) {\n      this._notificationService.notify({\n        severity: Severity.Error,\n        source: item.provider.displayName,\n        message: err\n      });\n    }\n  }\n  _cacheHintsForFastRestore(model) {\n    const hints = this._copyInlayHintsWithCurrentAnchor(model);\n    this._inlayHintsCache.set(model, hints);\n  }\n  // return inlay hints but with an anchor that reflects \"updates\"\n  // that happened after receiving them, e.g adding new lines before a hint\n  _copyInlayHintsWithCurrentAnchor(model) {\n    const items = new Map();\n    for (const [id, obj] of this._decorationsMetadata) {\n      if (items.has(obj.item)) {\n        // an inlay item can be rendered as multiple decorations\n        // but they will all uses the same range\n        continue;\n      }\n      const range = model.getDecorationRange(id);\n      if (range) {\n        // update range with whatever the editor has tweaked it to\n        const anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n        const copy = obj.item.with({\n          anchor\n        });\n        items.set(obj.item, copy);\n      }\n    }\n    return Array.from(items.values());\n  }\n  _getHintsRanges() {\n    const extra = 30;\n    const model = this._editor.getModel();\n    const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n    const result = [];\n    for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n      const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n      if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n        result.push(extendedRange);\n      } else {\n        result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n      }\n    }\n    return result;\n  }\n  _updateHintsDecorators(ranges, items) {\n    // utils to collect/create injected text decorations\n    const newDecorationsData = [];\n    const addInjectedText = (item, ref, content, cursorStops, attachedData) => {\n      const opts = {\n        content,\n        inlineClassNameAffectsLetterSpacing: true,\n        inlineClassName: ref.className,\n        cursorStops,\n        attachedData\n      };\n      newDecorationsData.push({\n        item,\n        classNameRef: ref,\n        decoration: {\n          range: item.anchor.range,\n          options: {\n            // className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n            description: 'InlayHint',\n            showIfCollapsed: item.anchor.range.isEmpty(),\n            // \"original\" range is empty\n            collapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n            stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */,\n            [item.anchor.direction]: this._activeRenderMode === 0 /* RenderMode.Normal */ ? opts : undefined\n          }\n        }\n      });\n    };\n    const addInjectedWhitespace = (item, isLast) => {\n      const marginRule = this._ruleFactory.createClassNameRef({\n        width: \"\".concat(fontSize / 3 | 0, \"px\"),\n        display: 'inline-block'\n      });\n      addInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None);\n    };\n    //\n    const {\n      fontSize,\n      fontFamily,\n      padding,\n      isUniform\n    } = this._getLayoutInfo();\n    const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n    this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n    let currentLineInfo = {\n      line: 0,\n      totalLen: 0\n    };\n    for (const item of items) {\n      if (currentLineInfo.line !== item.anchor.range.startLineNumber) {\n        currentLineInfo = {\n          line: item.anchor.range.startLineNumber,\n          totalLen: 0\n        };\n      }\n      if (currentLineInfo.totalLen > InlayHintsController_1._MAX_LABEL_LEN) {\n        continue;\n      }\n      // whitespace leading the actual label\n      if (item.hint.paddingLeft) {\n        addInjectedWhitespace(item, false);\n      }\n      // the label with its parts\n      const parts = typeof item.hint.label === 'string' ? [{\n        label: item.hint.label\n      }] : item.hint.label;\n      for (let i = 0; i < parts.length; i++) {\n        var _this$_activeInlayHin;\n        const part = parts[i];\n        const isFirst = i === 0;\n        const isLast = i === parts.length - 1;\n        const cssProperties = {\n          fontSize: \"\".concat(fontSize, \"px\"),\n          fontFamily: \"var(\".concat(fontFamilyVar, \"), \").concat(EDITOR_FONT_DEFAULTS.fontFamily),\n          verticalAlign: isUniform ? 'baseline' : 'middle',\n          unicodeBidi: 'isolate'\n        };\n        if (isNonEmptyArray(item.hint.textEdits)) {\n          cssProperties.cursor = 'default';\n        }\n        this._fillInColors(cssProperties, item.hint);\n        if ((part.command || part.location) && ((_this$_activeInlayHin = this._activeInlayHintPart) === null || _this$_activeInlayHin === void 0 ? void 0 : _this$_activeInlayHin.part.item) === item && this._activeInlayHintPart.part.index === i) {\n          // active link!\n          cssProperties.textDecoration = 'underline';\n          if (this._activeInlayHintPart.hasTriggerModifier) {\n            cssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n            cssProperties.cursor = 'pointer';\n          }\n        }\n        if (padding) {\n          if (isFirst && isLast) {\n            // only element\n            cssProperties.padding = \"1px \".concat(Math.max(1, fontSize / 4) | 0, \"px\");\n            cssProperties.borderRadius = \"\".concat(fontSize / 4 | 0, \"px\");\n          } else if (isFirst) {\n            // first element\n            cssProperties.padding = \"1px 0 1px \".concat(Math.max(1, fontSize / 4) | 0, \"px\");\n            cssProperties.borderRadius = \"\".concat(fontSize / 4 | 0, \"px 0 0 \").concat(fontSize / 4 | 0, \"px\");\n          } else if (isLast) {\n            // last element\n            cssProperties.padding = \"1px \".concat(Math.max(1, fontSize / 4) | 0, \"px 1px 0\");\n            cssProperties.borderRadius = \"0 \".concat(fontSize / 4 | 0, \"px \").concat(fontSize / 4 | 0, \"px 0\");\n          } else {\n            cssProperties.padding = \"1px 0 1px 0\";\n          }\n        }\n        let textlabel = part.label;\n        currentLineInfo.totalLen += textlabel.length;\n        let tooLong = false;\n        const over = currentLineInfo.totalLen - InlayHintsController_1._MAX_LABEL_LEN;\n        if (over > 0) {\n          textlabel = textlabel.slice(0, -over) + '…';\n          tooLong = true;\n        }\n        addInjectedText(item, this._ruleFactory.createClassNameRef(cssProperties), fixSpace(textlabel), isLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, new RenderedInlayHintLabelPart(item, i));\n        if (tooLong) {\n          break;\n        }\n      }\n      // whitespace trailing the actual label\n      if (item.hint.paddingRight) {\n        addInjectedWhitespace(item, true);\n      }\n      if (newDecorationsData.length > InlayHintsController_1._MAX_DECORATORS) {\n        break;\n      }\n    }\n    // collect all decoration ids that are affected by the ranges\n    // and only update those decorations\n    const decorationIdsToReplace = [];\n    for (const [id, metadata] of this._decorationsMetadata) {\n      var _this$_editor$getMode;\n      const range = (_this$_editor$getMode = this._editor.getModel()) === null || _this$_editor$getMode === void 0 ? void 0 : _this$_editor$getMode.getDecorationRange(id);\n      if (range && ranges.some(r => r.containsRange(range))) {\n        decorationIdsToReplace.push(id);\n        metadata.classNameRef.dispose();\n        this._decorationsMetadata.delete(id);\n      }\n    }\n    const scrollState = StableEditorScrollState.capture(this._editor);\n    this._editor.changeDecorations(accessor => {\n      const newDecorationIds = accessor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n      for (let i = 0; i < newDecorationIds.length; i++) {\n        const data = newDecorationsData[i];\n        this._decorationsMetadata.set(newDecorationIds[i], data);\n      }\n    });\n    scrollState.restore(this._editor);\n  }\n  _fillInColors(props, hint) {\n    if (hint.kind === languages.InlayHintKind.Parameter) {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n      props.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n    } else if (hint.kind === languages.InlayHintKind.Type) {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n      props.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n    } else {\n      props.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n      props.color = themeColorFromId(colors.editorInlayHintForeground);\n    }\n  }\n  _getLayoutInfo() {\n    const options = this._editor.getOption(142 /* EditorOption.inlayHints */);\n    const padding = options.padding;\n    const editorFontSize = this._editor.getOption(52 /* EditorOption.fontSize */);\n    const editorFontFamily = this._editor.getOption(49 /* EditorOption.fontFamily */);\n    let fontSize = options.fontSize;\n    if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n      fontSize = editorFontSize;\n    }\n    const fontFamily = options.fontFamily || editorFontFamily;\n    const isUniform = !padding && fontFamily === editorFontFamily && fontSize === editorFontSize;\n    return {\n      fontSize,\n      fontFamily,\n      padding,\n      isUniform\n    };\n  }\n  _removeAllDecorations() {\n    this._editor.removeDecorations(Array.from(this._decorationsMetadata.keys()));\n    for (const obj of this._decorationsMetadata.values()) {\n      obj.classNameRef.dispose();\n    }\n    this._decorationsMetadata.clear();\n  }\n}, InlayHintsController_1 = _InlayHintsController, _InlayHintsController.ID = 'editor.contrib.InlayHints', _InlayHintsController._MAX_DECORATORS = 1500, _InlayHintsController._MAX_LABEL_LEN = 43, _InlayHintsController);\nInlayHintsController = InlayHintsController_1 = __decorate([__param(1, ILanguageFeaturesService), __param(2, ILanguageFeatureDebounceService), __param(3, IInlayHintsCache), __param(4, ICommandService), __param(5, INotificationService), __param(6, IInstantiationService)], InlayHintsController);\nexport { InlayHintsController };\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str) {\n  const noBreakWhitespace = '\\xa0';\n  return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\nCommandsRegistry.registerCommand('_executeInlayHintProvider', async function (accessor) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  const [uri, range] = args;\n  assertType(URI.isUri(uri));\n  assertType(Range.isIRange(range));\n  const {\n    inlayHintsProvider\n  } = accessor.get(ILanguageFeaturesService);\n  const ref = await accessor.get(ITextModelService).createModelReference(uri);\n  try {\n    const model = await InlayHintsFragments.create(inlayHintsProvider, ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n    const result = model.items.map(i => i.hint);\n    setTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n    return result;\n  } finally {\n    ref.dispose();\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","InlayHintsController_1","isHTMLElement","ModifierKeyEmitter","isNonEmptyArray","RunOnceScheduler","CancellationToken","CancellationTokenSource","onUnexpectedError","DisposableStore","toDisposable","LRUCache","assertType","URI","DynamicCssRules","StableEditorScrollState","EDITOR_FONT_DEFAULTS","EditOperation","Range","languages","InjectedTextCursorStops","ModelDecorationInjectedTextOptions","ILanguageFeatureDebounceService","ILanguageFeaturesService","ITextModelService","ClickLinkGesture","InlayHintAnchor","InlayHintsFragments","goToDefinitionWithLocation","showGoToContextMenu","CommandsRegistry","ICommandService","registerSingleton","createDecorator","IInstantiationService","INotificationService","Severity","colors","themeColorFromId","InlayHintsCache","constructor","_entries","get","model","_key","set","value","concat","uri","toString","getVersionId","IInlayHintsCache","RenderedInlayHintLabelPart","item","index","part","label","hint","ActiveInlayHintInfo","hasTriggerModifier","InlayHintsController","_InlayHintsController","editor","_editor$getContributi","getContribution","ID","undefined","_editor","_languageFeaturesService","_featureDebounce","_inlayHintsCache","_commandService","_notificationService","_instaService","_disposables","_sessionDisposables","_decorationsMetadata","Map","_ruleFactory","_activeRenderMode","_debounceInfo","for","inlayHintsProvider","min","add","onDidChange","_update","onDidChangeModel","onDidChangeModelLanguage","onDidChangeConfiguration","e","hasChanged","dispose","_removeAllDecorations","clear","options","getOption","enabled","getModel","has","defaultMode","altMode","getInstance","event","hasModel","newRenderMode","altKey","ctrlKey","shiftKey","metaKey","copies","_copyInlayHintsWithCurrentAnchor","_updateHintsDecorators","getFullModelRange","scheduler","schedule","cached","isDisposed","_cacheHintsForFastRestore","cts","watchedProviders","Set","_cts","t1","Date","now","listener","onWillDispose","_cts2","cancel","myToken","token","inlayHints","create","_getHintsRanges","delay","update","isCancellationRequested","provider","onDidChangeInlayHints","isScheduled","ranges","items","err","_cts3","onDidScrollChange","scrollTopChanged","onDidChangeModelContent","_cts4","Math","max","_installDblClickGesture","_installLinkGesture","_installContextMenu","store","gesture","sessionStore","onMouseMoveOrRelevantKeyDown","mouseEvent","labelPart","_getInlayHintLabelPart","resolve","_activeInlayHintPart","command","location","lineNumber","validatePosition","position","range","getLineMaxColumn","lineHints","_getInlineHintsForRange","onCancel","onExecute","invokeFunction","Command","is","_invokeCommand","data","values","containsRange","anchor","Array","from","updateInlayHints","onMouseUp","detail","preventDefault","None","textEdits","edits","map","edit","replace","lift","text","executeEdits","onContextMenu","_e$target$detail$inje","type","injectedText","attachedData","_command$arguments","executeCommand","id","notify","severity","Error","source","displayName","message","hints","obj","getDecorationRange","direction","copy","with","extra","visibleRanges","getVisibleRangesPlusViewportAboveBelow","result","sort","compareRangesUsingStarts","extendedRange","validateRange","startLineNumber","startColumn","endLineNumber","endColumn","areIntersectingOrTouching","push","plusRange","newDecorationsData","addInjectedText","ref","content","cursorStops","opts","inlineClassNameAffectsLetterSpacing","inlineClassName","className","classNameRef","decoration","description","showIfCollapsed","isEmpty","collapseOnReplaceEdit","stickiness","addInjectedWhitespace","isLast","marginRule","createClassNameRef","width","fontSize","display","Right","fontFamily","padding","isUniform","_getLayoutInfo","fontFamilyVar","getContainerDomNode","style","setProperty","currentLineInfo","line","totalLen","_MAX_LABEL_LEN","paddingLeft","parts","_this$_activeInlayHin","isFirst","cssProperties","verticalAlign","unicodeBidi","cursor","_fillInColors","textDecoration","color","editorActiveLinkForeground","borderRadius","textlabel","tooLong","over","slice","fixSpace","paddingRight","_MAX_DECORATORS","decorationIdsToReplace","metadata","_this$_editor$getMode","some","delete","scrollState","capture","changeDecorations","accessor","newDecorationIds","deltaDecorations","restore","props","kind","InlayHintKind","Parameter","backgroundColor","editorInlayHintParameterBackground","editorInlayHintParameterForeground","Type","editorInlayHintTypeBackground","editorInlayHintTypeForeground","editorInlayHintBackground","editorInlayHintForeground","editorFontSize","editorFontFamily","removeDecorations","keys","str","noBreakWhitespace","registerCommand","_len","args","isUri","isIRange","createModelReference","object","textEditorModel","setTimeout"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/inlayHints/browser/inlayHintsController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlayHintsController_1;\nimport { isHTMLElement, ModifierKeyEmitter } from '../../../../base/browser/dom.js';\nimport { isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../../base/common/map.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { DynamicCssRules } from '../../../browser/editorDom.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as languages from '../../../common/languages.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ModelDecorationInjectedTextOptions } from '../../../common/model/textModel.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { ClickLinkGesture } from '../../gotoSymbol/browser/link/clickLinkGesture.js';\nimport { InlayHintAnchor, InlayHintsFragments } from './inlayHints.js';\nimport { goToDefinitionWithLocation, showGoToContextMenu } from './inlayHintsLocations.js';\nimport { CommandsRegistry, ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { registerSingleton } from '../../../../platform/instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { INotificationService, Severity } from '../../../../platform/notification/common/notification.js';\nimport * as colors from '../../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\n// --- hint caching service (per session)\nclass InlayHintsCache {\n    constructor() {\n        this._entries = new LRUCache(50);\n    }\n    get(model) {\n        const key = InlayHintsCache._key(model);\n        return this._entries.get(key);\n    }\n    set(model, value) {\n        const key = InlayHintsCache._key(model);\n        this._entries.set(key, value);\n    }\n    static _key(model) {\n        return `${model.uri.toString()}/${model.getVersionId()}`;\n    }\n}\nconst IInlayHintsCache = createDecorator('IInlayHintsCache');\nregisterSingleton(IInlayHintsCache, InlayHintsCache, 1 /* InstantiationType.Delayed */);\n// --- rendered label\nexport class RenderedInlayHintLabelPart {\n    constructor(item, index) {\n        this.item = item;\n        this.index = index;\n    }\n    get part() {\n        const label = this.item.hint.label;\n        if (typeof label === 'string') {\n            return { label };\n        }\n        else {\n            return label[this.index];\n        }\n    }\n}\nclass ActiveInlayHintInfo {\n    constructor(part, hasTriggerModifier) {\n        this.part = part;\n        this.hasTriggerModifier = hasTriggerModifier;\n    }\n}\n// --- controller\nlet InlayHintsController = class InlayHintsController {\n    static { InlayHintsController_1 = this; }\n    static { this.ID = 'editor.contrib.InlayHints'; }\n    static { this._MAX_DECORATORS = 1500; }\n    static { this._MAX_LABEL_LEN = 43; }\n    static get(editor) {\n        return editor.getContribution(InlayHintsController_1.ID) ?? undefined;\n    }\n    constructor(_editor, _languageFeaturesService, _featureDebounce, _inlayHintsCache, _commandService, _notificationService, _instaService) {\n        this._editor = _editor;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._inlayHintsCache = _inlayHintsCache;\n        this._commandService = _commandService;\n        this._notificationService = _notificationService;\n        this._instaService = _instaService;\n        this._disposables = new DisposableStore();\n        this._sessionDisposables = new DisposableStore();\n        this._decorationsMetadata = new Map();\n        this._ruleFactory = new DynamicCssRules(this._editor);\n        this._activeRenderMode = 0 /* RenderMode.Normal */;\n        this._debounceInfo = _featureDebounce.for(_languageFeaturesService.inlayHintsProvider, 'InlayHint', { min: 25 });\n        this._disposables.add(_languageFeaturesService.inlayHintsProvider.onDidChange(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModel(() => this._update()));\n        this._disposables.add(_editor.onDidChangeModelLanguage(() => this._update()));\n        this._disposables.add(_editor.onDidChangeConfiguration(e => {\n            if (e.hasChanged(142 /* EditorOption.inlayHints */)) {\n                this._update();\n            }\n        }));\n        this._update();\n    }\n    dispose() {\n        this._sessionDisposables.dispose();\n        this._removeAllDecorations();\n        this._disposables.dispose();\n    }\n    _update() {\n        this._sessionDisposables.clear();\n        this._removeAllDecorations();\n        const options = this._editor.getOption(142 /* EditorOption.inlayHints */);\n        if (options.enabled === 'off') {\n            return;\n        }\n        const model = this._editor.getModel();\n        if (!model || !this._languageFeaturesService.inlayHintsProvider.has(model)) {\n            return;\n        }\n        if (options.enabled === 'on') {\n            // different \"on\" modes: always\n            this._activeRenderMode = 0 /* RenderMode.Normal */;\n        }\n        else {\n            // different \"on\" modes: offUnlessPressed, or onUnlessPressed\n            let defaultMode;\n            let altMode;\n            if (options.enabled === 'onUnlessPressed') {\n                defaultMode = 0 /* RenderMode.Normal */;\n                altMode = 1 /* RenderMode.Invisible */;\n            }\n            else {\n                defaultMode = 1 /* RenderMode.Invisible */;\n                altMode = 0 /* RenderMode.Normal */;\n            }\n            this._activeRenderMode = defaultMode;\n            this._sessionDisposables.add(ModifierKeyEmitter.getInstance().event(e => {\n                if (!this._editor.hasModel()) {\n                    return;\n                }\n                const newRenderMode = e.altKey && e.ctrlKey && !(e.shiftKey || e.metaKey) ? altMode : defaultMode;\n                if (newRenderMode !== this._activeRenderMode) {\n                    this._activeRenderMode = newRenderMode;\n                    const model = this._editor.getModel();\n                    const copies = this._copyInlayHintsWithCurrentAnchor(model);\n                    this._updateHintsDecorators([model.getFullModelRange()], copies);\n                    scheduler.schedule(0);\n                }\n            }));\n        }\n        // iff possible, quickly update from cache\n        const cached = this._inlayHintsCache.get(model);\n        if (cached) {\n            this._updateHintsDecorators([model.getFullModelRange()], cached);\n        }\n        this._sessionDisposables.add(toDisposable(() => {\n            // cache items when switching files etc\n            if (!model.isDisposed()) {\n                this._cacheHintsForFastRestore(model);\n            }\n        }));\n        let cts;\n        const watchedProviders = new Set();\n        const scheduler = new RunOnceScheduler(async () => {\n            const t1 = Date.now();\n            cts?.dispose(true);\n            cts = new CancellationTokenSource();\n            const listener = model.onWillDispose(() => cts?.cancel());\n            try {\n                const myToken = cts.token;\n                const inlayHints = await InlayHintsFragments.create(this._languageFeaturesService.inlayHintsProvider, model, this._getHintsRanges(), myToken);\n                scheduler.delay = this._debounceInfo.update(model, Date.now() - t1);\n                if (myToken.isCancellationRequested) {\n                    inlayHints.dispose();\n                    return;\n                }\n                // listen to provider changes\n                for (const provider of inlayHints.provider) {\n                    if (typeof provider.onDidChangeInlayHints === 'function' && !watchedProviders.has(provider)) {\n                        watchedProviders.add(provider);\n                        this._sessionDisposables.add(provider.onDidChangeInlayHints(() => {\n                            if (!scheduler.isScheduled()) { // ignore event when request is already scheduled\n                                scheduler.schedule();\n                            }\n                        }));\n                    }\n                }\n                this._sessionDisposables.add(inlayHints);\n                this._updateHintsDecorators(inlayHints.ranges, inlayHints.items);\n                this._cacheHintsForFastRestore(model);\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n            finally {\n                cts.dispose();\n                listener.dispose();\n            }\n        }, this._debounceInfo.get(model));\n        this._sessionDisposables.add(scheduler);\n        this._sessionDisposables.add(toDisposable(() => cts?.dispose(true)));\n        scheduler.schedule(0);\n        this._sessionDisposables.add(this._editor.onDidScrollChange((e) => {\n            // update when scroll position changes\n            // uses scrollTopChanged has weak heuristic to differenatiate between scrolling due to\n            // typing or due to \"actual\" scrolling\n            if (e.scrollTopChanged || !scheduler.isScheduled()) {\n                scheduler.schedule();\n            }\n        }));\n        this._sessionDisposables.add(this._editor.onDidChangeModelContent((e) => {\n            cts?.cancel();\n            // update less aggressive when typing\n            const delay = Math.max(scheduler.delay, 1250);\n            scheduler.schedule(delay);\n        }));\n        // mouse gestures\n        this._sessionDisposables.add(this._installDblClickGesture(() => scheduler.schedule(0)));\n        this._sessionDisposables.add(this._installLinkGesture());\n        this._sessionDisposables.add(this._installContextMenu());\n    }\n    _installLinkGesture() {\n        const store = new DisposableStore();\n        const gesture = store.add(new ClickLinkGesture(this._editor));\n        // let removeHighlight = () => { };\n        const sessionStore = new DisposableStore();\n        store.add(sessionStore);\n        store.add(gesture.onMouseMoveOrRelevantKeyDown(e => {\n            const [mouseEvent] = e;\n            const labelPart = this._getInlayHintLabelPart(mouseEvent);\n            const model = this._editor.getModel();\n            if (!labelPart || !model) {\n                sessionStore.clear();\n                return;\n            }\n            // resolve the item\n            const cts = new CancellationTokenSource();\n            sessionStore.add(toDisposable(() => cts.dispose(true)));\n            labelPart.item.resolve(cts.token);\n            // render link => when the modifier is pressed and when there is a command or location\n            this._activeInlayHintPart = labelPart.part.command || labelPart.part.location\n                ? new ActiveInlayHintInfo(labelPart, mouseEvent.hasTriggerModifier)\n                : undefined;\n            const lineNumber = model.validatePosition(labelPart.item.hint.position).lineNumber;\n            const range = new Range(lineNumber, 1, lineNumber, model.getLineMaxColumn(lineNumber));\n            const lineHints = this._getInlineHintsForRange(range);\n            this._updateHintsDecorators([range], lineHints);\n            sessionStore.add(toDisposable(() => {\n                this._activeInlayHintPart = undefined;\n                this._updateHintsDecorators([range], lineHints);\n            }));\n        }));\n        store.add(gesture.onCancel(() => sessionStore.clear()));\n        store.add(gesture.onExecute(async (e) => {\n            const label = this._getInlayHintLabelPart(e);\n            if (label) {\n                const part = label.part;\n                if (part.location) {\n                    // location -> execute go to def\n                    this._instaService.invokeFunction(goToDefinitionWithLocation, e, this._editor, part.location);\n                }\n                else if (languages.Command.is(part.command)) {\n                    // command -> execute it\n                    await this._invokeCommand(part.command, label.item);\n                }\n            }\n        }));\n        return store;\n    }\n    _getInlineHintsForRange(range) {\n        const lineHints = new Set();\n        for (const data of this._decorationsMetadata.values()) {\n            if (range.containsRange(data.item.anchor.range)) {\n                lineHints.add(data.item);\n            }\n        }\n        return Array.from(lineHints);\n    }\n    _installDblClickGesture(updateInlayHints) {\n        return this._editor.onMouseUp(async (e) => {\n            if (e.event.detail !== 2) {\n                return;\n            }\n            const part = this._getInlayHintLabelPart(e);\n            if (!part) {\n                return;\n            }\n            e.event.preventDefault();\n            await part.item.resolve(CancellationToken.None);\n            if (isNonEmptyArray(part.item.hint.textEdits)) {\n                const edits = part.item.hint.textEdits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text));\n                this._editor.executeEdits('inlayHint.default', edits);\n                updateInlayHints();\n            }\n        });\n    }\n    _installContextMenu() {\n        return this._editor.onContextMenu(async (e) => {\n            if (!(isHTMLElement(e.event.target))) {\n                return;\n            }\n            const part = this._getInlayHintLabelPart(e);\n            if (part) {\n                await this._instaService.invokeFunction(showGoToContextMenu, this._editor, e.event.target, part);\n            }\n        });\n    }\n    _getInlayHintLabelPart(e) {\n        if (e.target.type !== 6 /* MouseTargetType.CONTENT_TEXT */) {\n            return undefined;\n        }\n        const options = e.target.detail.injectedText?.options;\n        if (options instanceof ModelDecorationInjectedTextOptions && options?.attachedData instanceof RenderedInlayHintLabelPart) {\n            return options.attachedData;\n        }\n        return undefined;\n    }\n    async _invokeCommand(command, item) {\n        try {\n            await this._commandService.executeCommand(command.id, ...(command.arguments ?? []));\n        }\n        catch (err) {\n            this._notificationService.notify({\n                severity: Severity.Error,\n                source: item.provider.displayName,\n                message: err\n            });\n        }\n    }\n    _cacheHintsForFastRestore(model) {\n        const hints = this._copyInlayHintsWithCurrentAnchor(model);\n        this._inlayHintsCache.set(model, hints);\n    }\n    // return inlay hints but with an anchor that reflects \"updates\"\n    // that happened after receiving them, e.g adding new lines before a hint\n    _copyInlayHintsWithCurrentAnchor(model) {\n        const items = new Map();\n        for (const [id, obj] of this._decorationsMetadata) {\n            if (items.has(obj.item)) {\n                // an inlay item can be rendered as multiple decorations\n                // but they will all uses the same range\n                continue;\n            }\n            const range = model.getDecorationRange(id);\n            if (range) {\n                // update range with whatever the editor has tweaked it to\n                const anchor = new InlayHintAnchor(range, obj.item.anchor.direction);\n                const copy = obj.item.with({ anchor });\n                items.set(obj.item, copy);\n            }\n        }\n        return Array.from(items.values());\n    }\n    _getHintsRanges() {\n        const extra = 30;\n        const model = this._editor.getModel();\n        const visibleRanges = this._editor.getVisibleRangesPlusViewportAboveBelow();\n        const result = [];\n        for (const range of visibleRanges.sort(Range.compareRangesUsingStarts)) {\n            const extendedRange = model.validateRange(new Range(range.startLineNumber - extra, range.startColumn, range.endLineNumber + extra, range.endColumn));\n            if (result.length === 0 || !Range.areIntersectingOrTouching(result[result.length - 1], extendedRange)) {\n                result.push(extendedRange);\n            }\n            else {\n                result[result.length - 1] = Range.plusRange(result[result.length - 1], extendedRange);\n            }\n        }\n        return result;\n    }\n    _updateHintsDecorators(ranges, items) {\n        // utils to collect/create injected text decorations\n        const newDecorationsData = [];\n        const addInjectedText = (item, ref, content, cursorStops, attachedData) => {\n            const opts = {\n                content,\n                inlineClassNameAffectsLetterSpacing: true,\n                inlineClassName: ref.className,\n                cursorStops,\n                attachedData\n            };\n            newDecorationsData.push({\n                item,\n                classNameRef: ref,\n                decoration: {\n                    range: item.anchor.range,\n                    options: {\n                        // className: \"rangeHighlight\", // DEBUG highlight to see to what range a hint is attached\n                        description: 'InlayHint',\n                        showIfCollapsed: item.anchor.range.isEmpty(), // \"original\" range is empty\n                        collapseOnReplaceEdit: !item.anchor.range.isEmpty(),\n                        stickiness: 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */,\n                        [item.anchor.direction]: this._activeRenderMode === 0 /* RenderMode.Normal */ ? opts : undefined\n                    }\n                }\n            });\n        };\n        const addInjectedWhitespace = (item, isLast) => {\n            const marginRule = this._ruleFactory.createClassNameRef({\n                width: `${(fontSize / 3) | 0}px`,\n                display: 'inline-block'\n            });\n            addInjectedText(item, marginRule, '\\u200a', isLast ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None);\n        };\n        //\n        const { fontSize, fontFamily, padding, isUniform } = this._getLayoutInfo();\n        const fontFamilyVar = '--code-editorInlayHintsFontFamily';\n        this._editor.getContainerDomNode().style.setProperty(fontFamilyVar, fontFamily);\n        let currentLineInfo = { line: 0, totalLen: 0 };\n        for (const item of items) {\n            if (currentLineInfo.line !== item.anchor.range.startLineNumber) {\n                currentLineInfo = { line: item.anchor.range.startLineNumber, totalLen: 0 };\n            }\n            if (currentLineInfo.totalLen > InlayHintsController_1._MAX_LABEL_LEN) {\n                continue;\n            }\n            // whitespace leading the actual label\n            if (item.hint.paddingLeft) {\n                addInjectedWhitespace(item, false);\n            }\n            // the label with its parts\n            const parts = typeof item.hint.label === 'string'\n                ? [{ label: item.hint.label }]\n                : item.hint.label;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const isFirst = i === 0;\n                const isLast = i === parts.length - 1;\n                const cssProperties = {\n                    fontSize: `${fontSize}px`,\n                    fontFamily: `var(${fontFamilyVar}), ${EDITOR_FONT_DEFAULTS.fontFamily}`,\n                    verticalAlign: isUniform ? 'baseline' : 'middle',\n                    unicodeBidi: 'isolate'\n                };\n                if (isNonEmptyArray(item.hint.textEdits)) {\n                    cssProperties.cursor = 'default';\n                }\n                this._fillInColors(cssProperties, item.hint);\n                if ((part.command || part.location) && this._activeInlayHintPart?.part.item === item && this._activeInlayHintPart.part.index === i) {\n                    // active link!\n                    cssProperties.textDecoration = 'underline';\n                    if (this._activeInlayHintPart.hasTriggerModifier) {\n                        cssProperties.color = themeColorFromId(colors.editorActiveLinkForeground);\n                        cssProperties.cursor = 'pointer';\n                    }\n                }\n                if (padding) {\n                    if (isFirst && isLast) {\n                        // only element\n                        cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px`;\n                        cssProperties.borderRadius = `${(fontSize / 4) | 0}px`;\n                    }\n                    else if (isFirst) {\n                        // first element\n                        cssProperties.padding = `1px 0 1px ${Math.max(1, fontSize / 4) | 0}px`;\n                        cssProperties.borderRadius = `${(fontSize / 4) | 0}px 0 0 ${(fontSize / 4) | 0}px`;\n                    }\n                    else if (isLast) {\n                        // last element\n                        cssProperties.padding = `1px ${Math.max(1, fontSize / 4) | 0}px 1px 0`;\n                        cssProperties.borderRadius = `0 ${(fontSize / 4) | 0}px ${(fontSize / 4) | 0}px 0`;\n                    }\n                    else {\n                        cssProperties.padding = `1px 0 1px 0`;\n                    }\n                }\n                let textlabel = part.label;\n                currentLineInfo.totalLen += textlabel.length;\n                let tooLong = false;\n                const over = currentLineInfo.totalLen - InlayHintsController_1._MAX_LABEL_LEN;\n                if (over > 0) {\n                    textlabel = textlabel.slice(0, -over) + '…';\n                    tooLong = true;\n                }\n                addInjectedText(item, this._ruleFactory.createClassNameRef(cssProperties), fixSpace(textlabel), isLast && !item.hint.paddingRight ? InjectedTextCursorStops.Right : InjectedTextCursorStops.None, new RenderedInlayHintLabelPart(item, i));\n                if (tooLong) {\n                    break;\n                }\n            }\n            // whitespace trailing the actual label\n            if (item.hint.paddingRight) {\n                addInjectedWhitespace(item, true);\n            }\n            if (newDecorationsData.length > InlayHintsController_1._MAX_DECORATORS) {\n                break;\n            }\n        }\n        // collect all decoration ids that are affected by the ranges\n        // and only update those decorations\n        const decorationIdsToReplace = [];\n        for (const [id, metadata] of this._decorationsMetadata) {\n            const range = this._editor.getModel()?.getDecorationRange(id);\n            if (range && ranges.some(r => r.containsRange(range))) {\n                decorationIdsToReplace.push(id);\n                metadata.classNameRef.dispose();\n                this._decorationsMetadata.delete(id);\n            }\n        }\n        const scrollState = StableEditorScrollState.capture(this._editor);\n        this._editor.changeDecorations(accessor => {\n            const newDecorationIds = accessor.deltaDecorations(decorationIdsToReplace, newDecorationsData.map(d => d.decoration));\n            for (let i = 0; i < newDecorationIds.length; i++) {\n                const data = newDecorationsData[i];\n                this._decorationsMetadata.set(newDecorationIds[i], data);\n            }\n        });\n        scrollState.restore(this._editor);\n    }\n    _fillInColors(props, hint) {\n        if (hint.kind === languages.InlayHintKind.Parameter) {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintParameterBackground);\n            props.color = themeColorFromId(colors.editorInlayHintParameterForeground);\n        }\n        else if (hint.kind === languages.InlayHintKind.Type) {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintTypeBackground);\n            props.color = themeColorFromId(colors.editorInlayHintTypeForeground);\n        }\n        else {\n            props.backgroundColor = themeColorFromId(colors.editorInlayHintBackground);\n            props.color = themeColorFromId(colors.editorInlayHintForeground);\n        }\n    }\n    _getLayoutInfo() {\n        const options = this._editor.getOption(142 /* EditorOption.inlayHints */);\n        const padding = options.padding;\n        const editorFontSize = this._editor.getOption(52 /* EditorOption.fontSize */);\n        const editorFontFamily = this._editor.getOption(49 /* EditorOption.fontFamily */);\n        let fontSize = options.fontSize;\n        if (!fontSize || fontSize < 5 || fontSize > editorFontSize) {\n            fontSize = editorFontSize;\n        }\n        const fontFamily = options.fontFamily || editorFontFamily;\n        const isUniform = !padding\n            && fontFamily === editorFontFamily\n            && fontSize === editorFontSize;\n        return { fontSize, fontFamily, padding, isUniform };\n    }\n    _removeAllDecorations() {\n        this._editor.removeDecorations(Array.from(this._decorationsMetadata.keys()));\n        for (const obj of this._decorationsMetadata.values()) {\n            obj.classNameRef.dispose();\n        }\n        this._decorationsMetadata.clear();\n    }\n};\nInlayHintsController = InlayHintsController_1 = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, ILanguageFeatureDebounceService),\n    __param(3, IInlayHintsCache),\n    __param(4, ICommandService),\n    __param(5, INotificationService),\n    __param(6, IInstantiationService)\n], InlayHintsController);\nexport { InlayHintsController };\n// Prevents the view from potentially visible whitespace\nfunction fixSpace(str) {\n    const noBreakWhitespace = '\\xa0';\n    return str.replace(/[ \\t]/g, noBreakWhitespace);\n}\nCommandsRegistry.registerCommand('_executeInlayHintProvider', async (accessor, ...args) => {\n    const [uri, range] = args;\n    assertType(URI.isUri(uri));\n    assertType(Range.isIRange(range));\n    const { inlayHintsProvider } = accessor.get(ILanguageFeaturesService);\n    const ref = await accessor.get(ITextModelService).createModelReference(uri);\n    try {\n        const model = await InlayHintsFragments.create(inlayHintsProvider, ref.object.textEditorModel, [Range.lift(range)], CancellationToken.None);\n        const result = model.items.map(i => i.hint);\n        setTimeout(() => model.dispose(), 0); // dispose after sending to ext host\n        return result;\n    }\n    finally {\n        ref.dispose();\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as monaco from 'monaco-editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditor = ({\n  id,\n  onCodeChange,\n  initialCode\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const editorInstanceRef = useRef(null);\n  const scrollPositionRef = useRef({\n    top: 0,\n    left: 0\n  });\n  useEffect(() => {\n    if (editorRef.current) {\n      editorInstanceRef.current = monaco.editor.create(editorRef.current, {\n        value: initialCode,\n        language: 'vhdl',\n        theme: 'vs-dark',\n        automaticLayout: true\n      });\n      const editorInstance = editorInstanceRef.current;\n      const debounceChangeHandler = debounce(() => {\n        const code = editorInstance.getValue();\n        onCodeChange(code);\n      }, 300);\n      editorInstance.onDidChangeModelContent(debounceChangeHandler);\n      return () => {\n        editorInstance.dispose();\n      };\n    }\n  }, [initialCode, onCodeChange]);\n  const saveScrollPosition = () => {\n    if (editorInstanceRef.current) {\n      const editor = editorInstanceRef.current;\n      scrollPositionRef.current.top = editor.getScrollTop();\n      scrollPositionRef.current.left = editor.getScrollLeft();\n    }\n  };\n  const restoreScrollPosition = () => {\n    if (editorInstanceRef.current) {\n      const editor = editorInstanceRef.current;\n      editor.setScrollTop(scrollPositionRef.current.top);\n      editor.setScrollLeft(scrollPositionRef.current.left);\n    }\n  };\n  useEffect(() => {\n    const editor = editorInstanceRef.current;\n    if (editor) {\n      editor.onDidScrollChange(() => {\n        saveScrollPosition();\n      });\n    }\n    return () => {\n      if (editor) {\n        editor.onDidScrollChange(null);\n      }\n    };\n  }, []);\n\n  // Восстанавливаем позицию прокрутки при изменении кода\n  useEffect(() => {\n    restoreScrollPosition();\n  }, [initialCode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    ref: editorRef,\n    className: \"vhdl-editor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n};\n_s(VHDLEditor, \"6BmZUZoYoQ3rxBys8SF8eWB7Jiw=\");\n_c = VHDLEditor;\nfunction debounce(func, wait) {\n  let timeout;\n  return function () {\n    clearTimeout(timeout);\n    timeout = setTimeout(func, wait);\n  };\n}\nconst CompilerConsole = ({\n  output\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"compiler-console\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"\\u041A\\u043E\\u043D\\u0441\\u043E\\u043B\\u044C:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n    children: output\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 83,\n  columnNumber: 3\n}, this);\n_c2 = CompilerConsole;\nconst VHDLEditorWithCompiler = () => {\n  _s2();\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity adder is\n\tgeneric (\n\t\toperand_width_g: natural\n\t);\n\t\n\tport (\n\t\tclk\t: in\tstd_logic;\n\t\trst_n\t: in\tstd_logic;\n\t\n\t\t-- a_in, b_in and sum_out are signed numbers (2's complement)\n\t\ta_in\t: in\tstd_logic_vector(operand_width_g - 1 downto 0);\n\t\tb_in\t: in\tstd_logic_vector(operand_width_g - 1 downto 0);\n\t\tsum_out\t: out\tstd_logic_vector(operand_width_g downto 0)\n\t);\nend entity;\n\n------------------------------------------------------------------------------\n\narchitecture rtl of adder is\n\tconstant outw: natural := operand_width_g + 1; -- Output width\n\tsignal result_r: signed(operand_width_g downto 0);\nbegin\n\t-- Internal signal result_r goes to output port\n\tsum_out <= std_logic_vector(result_r);\n\n\t-- Synchronous process performs addition on clock edge\n\tsync: process(rst_n, clk)\n\tbegin\n\t\tif (rst_n = '0') then\n\t\t\tresult_r <= to_signed(0, outw);\n\t\telsif rising_edge(clk) then\n\t\t\tresult_r <= resize(signed(a_in), outw)\n\t\t\t            + resize(signed(b_in), outw);\n\t\tend if;\n\tend process;\nend architecture;`);\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity tb_adder is\nend tb_adder;\n\n\narchitecture testbench of tb_adder is\n\n  -- Define constants: bit widths and duration of clk period\n  constant input_w_c    : integer := 8;\n  constant output_w_c   : integer := 9;\n  constant clk_period_c : time    := 100 ns;\n\n  -- Calculate minimum and maximum values of input values\n  -- Note the asymmetrical value range\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\n\n  \n  -- Component declaration of DUV\n  component adder\n    generic (\n      operand_width_g :     integer\n      );\n    port (\n      clk             : in  std_logic;\n      rst_n           : in  std_logic;\n      a_in            : in  std_logic_vector(operand_width_g-1 downto 0);\n      b_in            : in  std_logic_vector(operand_width_g-1 downto 0);\n      sum_out         : out std_logic_vector(operand_width_g downto 0));\n  end component;\n\n  \n  -- Define the needed signals\n  signal clk   : std_logic := '0';\n  signal rst_n : std_logic := '0';\n  -- Note: Init values are not supported in synthesis\n\n  signal term1_r : signed(input_w_c-1 downto 0);\n  signal term2_r : signed(input_w_c-1 downto 0);\n\n  signal sum              : std_logic_vector(output_w_c-1 downto 0);\n  signal expected_sum_r   : signed(output_w_c-1 downto 0);\n  signal end_simulation_r : std_logic;\n\n\n  \nbegin  -- testbench\n\n  -- Instantiate DUV and connect the ports to testbench's signals\n  adder_1 : adder\n    generic map (\n      operand_width_g => input_w_c)\n    port map (\n      clk             => clk,\n      rst_n           => rst_n,\n      a_in            => std_logic_vector(term1_r),\n      b_in            => std_logic_vector(term2_r),\n      sum_out         => sum);\n\n\n  -- Reset the DUV\n  rst_n <= '1' after clk_period_c*2;\n\n  -- purpose: Generate clock signal for DUV\n  -- type   : combinational\n  -- inputs : clk  (this is a special case for test purposes!)\n  -- outputs: clk  (this is a special case for test purposes!)\n  clk_gen : process (clk)\n  begin  -- process clk_gen\n    clk <= not clk after clk_period_c/2;\n  end process clk_gen;\n\n\n\n  -- purpose: Generate all possible inputs values and check the result\n  -- type   : sequential\n  -- inputs : clk, rst_n\n  -- outputs: term1_r, term2_r  \n  input_gen_output_check : process (clk, rst_n)\n  begin  -- process input_gen_output_check\n    if rst_n = '0' then                 -- asynchronous reset (active low)\n\n      term1_r          <= min_value_c;\n      term2_r          <= min_value_c;\n      expected_sum_r   <= (others => '0');\n      end_simulation_r <= '0';\n      \n    elsif clk'event and clk = '1' then  -- rising clock edge\n      -- Similar behavior as in tb_ripple_carry_adder but more elegant\n\n      -- Generate input values\n      if ( term1_r = max_value_c ) then\n        term1_r            <= min_value_c;\n        if ( term2_r = max_value_c ) then\n          term2_r          <= min_value_c;\n          end_simulation_r <= '1';\n        else\n          term2_r <= term2_r + to_signed(1, input_w_c);\n        end if;\n      else\n          term1_r <= term1_r + to_signed(1, input_w_c);\n      end if;\n\n      \n      -- Check the result\n      expected_sum_r <= resize(term1_r, output_w_c) +\n                        resize(term2_r, output_w_c);\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\n        report \"output signal is not equal to the sum of the inputs\"\n        severity failure;\n\n      \n      -- Stop the simulator\n      assert end_simulation_r = '0'\n        report \"Simulation ended!\" severity failure;\n\n    end if;\n  end process input_gen_output_check;\n\n\n\nend testbench;\n`);\n  const [output, setOutput] = useState('');\n  const compileCode = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          architectureCode,\n          testbenchCode\n        })\n      });\n      const text = await response.text(); // Получаем текст, даже если JSON невалиден\n      try {\n        const result = JSON.parse(text); // Пробуем распарсить JSON\n        if (result.success) {\n          setOutput(`Компиляция успешна:\\n${result.stdout}`);\n        } else {\n          setOutput(`Ошибка компиляции:\\n${result.stderr}`);\n        }\n      } catch {\n        throw new Error(`Некорректный JSON-ответ: ${text}`);\n      }\n    } catch (error) {\n      setOutput(`Ошибка запроса: ${error.message}`);\n    }\n  };\n  const downloadVCD = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/download-vcd', {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`Ошибка: ${response.statusText}`);\n      }\n      const blob = await response.blob();\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = 'out.vcd';\n      link.click();\n    } catch (error) {\n      setOutput('Ошибка скачивания VCD: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content-container\",\n    className: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"architecture-editor\",\n      onCodeChange: setArchitectureCode,\n      initialCode: architectureCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"testbench-editor\",\n      onCodeChange: setTestbenchCode,\n      initialCode: testbenchCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompilerConsole, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: compileCode,\n      children: \"\\u041A\\u043E\\u043C\\u043F\\u0438\\u043B\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadVCD,\n      children: \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C VCD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this);\n};\n_s2(VHDLEditorWithCompiler, \"Hi5WFWv0czvRx6p8JaJJML9bzYI=\");\n_c3 = VHDLEditorWithCompiler;\nexport default VHDLEditorWithCompiler;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"VHDLEditor\");\n$RefreshReg$(_c2, \"CompilerConsole\");\n$RefreshReg$(_c3, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["React","useState","useEffect","useRef","monaco","jsxDEV","_jsxDEV","VHDLEditor","id","onCodeChange","initialCode","_s","editorRef","editorInstanceRef","scrollPositionRef","top","left","current","editor","create","value","language","theme","automaticLayout","editorInstance","debounceChangeHandler","debounce","code","getValue","onDidChangeModelContent","dispose","saveScrollPosition","getScrollTop","getScrollLeft","restoreScrollPosition","setScrollTop","setScrollLeft","onDidScrollChange","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","func","wait","timeout","clearTimeout","setTimeout","CompilerConsole","output","children","_c2","VHDLEditorWithCompiler","_s2","architectureCode","setArchitectureCode","testbenchCode","setTestbenchCode","setOutput","compileCode","response","fetch","method","headers","body","JSON","stringify","text","result","parse","success","stdout","stderr","Error","error","message","downloadVCD","ok","statusText","blob","link","document","createElement","href","URL","createObjectURL","download","click","onClick","_c3","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as monaco from 'monaco-editor';\r\n\r\nconst VHDLEditor = ({ id, onCodeChange, initialCode }) => {\r\n  const editorRef = useRef(null);\r\n  const editorInstanceRef = useRef(null);\r\n  const scrollPositionRef = useRef({ top: 0, left: 0 });\r\n\r\n  useEffect(() => {\r\n    if (editorRef.current) {\r\n      editorInstanceRef.current = monaco.editor.create(editorRef.current, {\r\n        value: initialCode,\r\n        language: 'vhdl',\r\n        theme: 'vs-dark',\r\n        automaticLayout: true,\r\n      });\r\n\r\n      const editorInstance = editorInstanceRef.current;\r\n\r\n\r\n      const debounceChangeHandler = debounce(() => {\r\n        const code = editorInstance.getValue();\r\n        onCodeChange(code);\r\n      }, 300);\r\n\r\n      editorInstance.onDidChangeModelContent(debounceChangeHandler);\r\n\r\n      return () => {\r\n        editorInstance.dispose();\r\n      };\r\n    }\r\n  }, [initialCode, onCodeChange]);\r\n\r\n  const saveScrollPosition = () => {\r\n    if (editorInstanceRef.current) {\r\n      const editor = editorInstanceRef.current;\r\n      scrollPositionRef.current.top = editor.getScrollTop();\r\n      scrollPositionRef.current.left = editor.getScrollLeft();\r\n    }\r\n  };\r\n\r\n  const restoreScrollPosition = () => {\r\n    if (editorInstanceRef.current) {\r\n      const editor = editorInstanceRef.current;\r\n      editor.setScrollTop(scrollPositionRef.current.top);\r\n      editor.setScrollLeft(scrollPositionRef.current.left);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const editor = editorInstanceRef.current;\r\n\r\n    if (editor) {\r\n      editor.onDidScrollChange(() => {\r\n        saveScrollPosition();\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (editor) {\r\n        editor.onDidScrollChange(null);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Восстанавливаем позицию прокрутки при изменении кода\r\n  useEffect(() => {\r\n    restoreScrollPosition();\r\n  }, [initialCode]);\r\n\r\n  return <div id={id} ref={editorRef} className=\"vhdl-editor\"></div>;\r\n};\r\n\r\nfunction debounce(func, wait) {\r\n  let timeout;\r\n  return function () {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(func, wait);\r\n  };\r\n}\r\n\r\nconst CompilerConsole = ({ output }) => (\r\n  <div className=\"compiler-console\">\r\n    <h3>Консоль:</h3>\r\n    <pre>{output}</pre>\r\n  </div>\r\n);\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity adder is\r\n\tgeneric (\r\n\t\toperand_width_g: natural\r\n\t);\r\n\t\r\n\tport (\r\n\t\tclk\t: in\tstd_logic;\r\n\t\trst_n\t: in\tstd_logic;\r\n\t\r\n\t\t-- a_in, b_in and sum_out are signed numbers (2's complement)\r\n\t\ta_in\t: in\tstd_logic_vector(operand_width_g - 1 downto 0);\r\n\t\tb_in\t: in\tstd_logic_vector(operand_width_g - 1 downto 0);\r\n\t\tsum_out\t: out\tstd_logic_vector(operand_width_g downto 0)\r\n\t);\r\nend entity;\r\n\r\n------------------------------------------------------------------------------\r\n\r\narchitecture rtl of adder is\r\n\tconstant outw: natural := operand_width_g + 1; -- Output width\r\n\tsignal result_r: signed(operand_width_g downto 0);\r\nbegin\r\n\t-- Internal signal result_r goes to output port\r\n\tsum_out <= std_logic_vector(result_r);\r\n\r\n\t-- Synchronous process performs addition on clock edge\r\n\tsync: process(rst_n, clk)\r\n\tbegin\r\n\t\tif (rst_n = '0') then\r\n\t\t\tresult_r <= to_signed(0, outw);\r\n\t\telsif rising_edge(clk) then\r\n\t\t\tresult_r <= resize(signed(a_in), outw)\r\n\t\t\t            + resize(signed(b_in), outw);\r\n\t\tend if;\r\n\tend process;\r\nend architecture;`);\r\n  \r\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity tb_adder is\r\nend tb_adder;\r\n\r\n\r\narchitecture testbench of tb_adder is\r\n\r\n  -- Define constants: bit widths and duration of clk period\r\n  constant input_w_c    : integer := 8;\r\n  constant output_w_c   : integer := 9;\r\n  constant clk_period_c : time    := 100 ns;\r\n\r\n  -- Calculate minimum and maximum values of input values\r\n  -- Note the asymmetrical value range\r\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\r\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\r\n\r\n  \r\n  -- Component declaration of DUV\r\n  component adder\r\n    generic (\r\n      operand_width_g :     integer\r\n      );\r\n    port (\r\n      clk             : in  std_logic;\r\n      rst_n           : in  std_logic;\r\n      a_in            : in  std_logic_vector(operand_width_g-1 downto 0);\r\n      b_in            : in  std_logic_vector(operand_width_g-1 downto 0);\r\n      sum_out         : out std_logic_vector(operand_width_g downto 0));\r\n  end component;\r\n\r\n  \r\n  -- Define the needed signals\r\n  signal clk   : std_logic := '0';\r\n  signal rst_n : std_logic := '0';\r\n  -- Note: Init values are not supported in synthesis\r\n\r\n  signal term1_r : signed(input_w_c-1 downto 0);\r\n  signal term2_r : signed(input_w_c-1 downto 0);\r\n\r\n  signal sum              : std_logic_vector(output_w_c-1 downto 0);\r\n  signal expected_sum_r   : signed(output_w_c-1 downto 0);\r\n  signal end_simulation_r : std_logic;\r\n\r\n\r\n  \r\nbegin  -- testbench\r\n\r\n  -- Instantiate DUV and connect the ports to testbench's signals\r\n  adder_1 : adder\r\n    generic map (\r\n      operand_width_g => input_w_c)\r\n    port map (\r\n      clk             => clk,\r\n      rst_n           => rst_n,\r\n      a_in            => std_logic_vector(term1_r),\r\n      b_in            => std_logic_vector(term2_r),\r\n      sum_out         => sum);\r\n\r\n\r\n  -- Reset the DUV\r\n  rst_n <= '1' after clk_period_c*2;\r\n\r\n  -- purpose: Generate clock signal for DUV\r\n  -- type   : combinational\r\n  -- inputs : clk  (this is a special case for test purposes!)\r\n  -- outputs: clk  (this is a special case for test purposes!)\r\n  clk_gen : process (clk)\r\n  begin  -- process clk_gen\r\n    clk <= not clk after clk_period_c/2;\r\n  end process clk_gen;\r\n\r\n\r\n\r\n  -- purpose: Generate all possible inputs values and check the result\r\n  -- type   : sequential\r\n  -- inputs : clk, rst_n\r\n  -- outputs: term1_r, term2_r  \r\n  input_gen_output_check : process (clk, rst_n)\r\n  begin  -- process input_gen_output_check\r\n    if rst_n = '0' then                 -- asynchronous reset (active low)\r\n\r\n      term1_r          <= min_value_c;\r\n      term2_r          <= min_value_c;\r\n      expected_sum_r   <= (others => '0');\r\n      end_simulation_r <= '0';\r\n      \r\n    elsif clk'event and clk = '1' then  -- rising clock edge\r\n      -- Similar behavior as in tb_ripple_carry_adder but more elegant\r\n\r\n      -- Generate input values\r\n      if ( term1_r = max_value_c ) then\r\n        term1_r            <= min_value_c;\r\n        if ( term2_r = max_value_c ) then\r\n          term2_r          <= min_value_c;\r\n          end_simulation_r <= '1';\r\n        else\r\n          term2_r <= term2_r + to_signed(1, input_w_c);\r\n        end if;\r\n      else\r\n          term1_r <= term1_r + to_signed(1, input_w_c);\r\n      end if;\r\n\r\n      \r\n      -- Check the result\r\n      expected_sum_r <= resize(term1_r, output_w_c) +\r\n                        resize(term2_r, output_w_c);\r\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\r\n        report \"output signal is not equal to the sum of the inputs\"\r\n        severity failure;\r\n\r\n      \r\n      -- Stop the simulator\r\n      assert end_simulation_r = '0'\r\n        report \"Simulation ended!\" severity failure;\r\n\r\n    end if;\r\n  end process input_gen_output_check;\r\n\r\n\r\n\r\nend testbench;\r\n`);\r\n  \r\n  const [output, setOutput] = useState('');\r\n\r\n  const compileCode = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ architectureCode, testbenchCode }),\r\n      });\r\n  \r\n      const text = await response.text(); // Получаем текст, даже если JSON невалиден\r\n      try {\r\n        const result = JSON.parse(text); // Пробуем распарсить JSON\r\n        if (result.success) {\r\n          setOutput(`Компиляция успешна:\\n${result.stdout}`);\r\n        } else {\r\n          setOutput(`Ошибка компиляции:\\n${result.stderr}`);\r\n        }\r\n      } catch {\r\n        throw new Error(`Некорректный JSON-ответ: ${text}`);\r\n      }\r\n    } catch (error) {\r\n      setOutput(`Ошибка запроса: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  \r\n  const downloadVCD = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/download-vcd', {\r\n        method: 'GET',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Ошибка: ${response.statusText}`);\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const link = document.createElement('a');\r\n      link.href = URL.createObjectURL(blob);\r\n      link.download = 'out.vcd';\r\n      link.click();\r\n    } catch (error) {\r\n      setOutput('Ошибка скачивания VCD: ' + error.message);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div id=\"content-container\" className=\"content-container\">\r\n      <h3>Архитектура:</h3>\r\n      <VHDLEditor\r\n        id=\"architecture-editor\"\r\n        onCodeChange={setArchitectureCode}\r\n        initialCode={architectureCode}\r\n      />\r\n\r\n      <h3>Тестовый стенд:</h3>\r\n      <VHDLEditor\r\n        id=\"testbench-editor\"\r\n        onCodeChange={setTestbenchCode}\r\n        initialCode={testbenchCode}\r\n      />\r\n\r\n      <CompilerConsole output={output} />\r\n\r\n      <button onClick={compileCode}>Компилировать</button>\r\n      <button onClick={downloadVCD}>Скачать VCD</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VHDLEditorWithCompiler;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
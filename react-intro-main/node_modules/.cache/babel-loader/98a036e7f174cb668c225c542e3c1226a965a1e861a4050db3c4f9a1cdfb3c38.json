{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { $, addDisposableListener } from '../../../../../../base/browser/dom.js';\nimport { ArrayQueue } from '../../../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../../../base/common/async.js';\nimport { Codicon } from '../../../../../../base/common/codicons.js';\nimport { Disposable, DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedWithStore, observableFromEvent, observableValue } from '../../../../../../base/common/observable.js';\nimport { ThemeIcon } from '../../../../../../base/common/themables.js';\nimport { assertIsDefined } from '../../../../../../base/common/types.js';\nimport { applyFontInfo } from '../../../../config/domFontInfo.js';\nimport { diffDeleteDecoration, diffRemoveIcon } from '../../registrations.contribution.js';\nimport { DiffMapping } from '../../diffEditorViewModel.js';\nimport { InlineDiffDeletedCodeMargin } from './inlineDiffDeletedCodeMargin.js';\nimport { LineSource, RenderOptions, renderLines } from './renderLines.js';\nimport { animatedObservable, joinCombine } from '../../utils.js';\nimport { LineRange } from '../../../../../common/core/lineRange.js';\nimport { Position } from '../../../../../common/core/position.js';\nimport { InlineDecoration } from '../../../../../common/viewModel.js';\nimport { IClipboardService } from '../../../../../../platform/clipboard/common/clipboardService.js';\nimport { IContextMenuService } from '../../../../../../platform/contextview/browser/contextView.js';\nimport { Range } from '../../../../../common/core/range.js';\n/**\n * Ensures both editors have the same height by aligning unchanged lines.\n * In inline view mode, inserts viewzones to show deleted code from the original text model in the modified code editor.\n * Synchronizes scrolling.\n *\n * Make sure to add the view zones!\n */\nlet DiffEditorViewZones = class DiffEditorViewZones extends Disposable {\n  constructor(_targetWindow, _editors, _diffModel, _options, _diffEditorWidget, _canIgnoreViewZoneUpdateEvent, _origViewZonesToIgnore, _modViewZonesToIgnore, _clipboardService, _contextMenuService) {\n    super();\n    this._targetWindow = _targetWindow;\n    this._editors = _editors;\n    this._diffModel = _diffModel;\n    this._options = _options;\n    this._diffEditorWidget = _diffEditorWidget;\n    this._canIgnoreViewZoneUpdateEvent = _canIgnoreViewZoneUpdateEvent;\n    this._origViewZonesToIgnore = _origViewZonesToIgnore;\n    this._modViewZonesToIgnore = _modViewZonesToIgnore;\n    this._clipboardService = _clipboardService;\n    this._contextMenuService = _contextMenuService;\n    this._originalTopPadding = observableValue(this, 0);\n    this._originalScrollOffset = observableValue(this, 0);\n    this._originalScrollOffsetAnimated = animatedObservable(this._targetWindow, this._originalScrollOffset, this._store);\n    this._modifiedTopPadding = observableValue(this, 0);\n    this._modifiedScrollOffset = observableValue(this, 0);\n    this._modifiedScrollOffsetAnimated = animatedObservable(this._targetWindow, this._modifiedScrollOffset, this._store);\n    const state = observableValue('invalidateAlignmentsState', 0);\n    const updateImmediately = this._register(new RunOnceScheduler(() => {\n      state.set(state.get() + 1, undefined);\n    }, 0));\n    this._register(this._editors.original.onDidChangeViewZones(_args => {\n      if (!this._canIgnoreViewZoneUpdateEvent()) {\n        updateImmediately.schedule();\n      }\n    }));\n    this._register(this._editors.modified.onDidChangeViewZones(_args => {\n      if (!this._canIgnoreViewZoneUpdateEvent()) {\n        updateImmediately.schedule();\n      }\n    }));\n    this._register(this._editors.original.onDidChangeConfiguration(args => {\n      if (args.hasChanged(147 /* EditorOption.wrappingInfo */) || args.hasChanged(67 /* EditorOption.lineHeight */)) {\n        updateImmediately.schedule();\n      }\n    }));\n    this._register(this._editors.modified.onDidChangeConfiguration(args => {\n      if (args.hasChanged(147 /* EditorOption.wrappingInfo */) || args.hasChanged(67 /* EditorOption.lineHeight */)) {\n        updateImmediately.schedule();\n      }\n    }));\n    const originalModelTokenizationCompleted = this._diffModel.map(m => m ? observableFromEvent(this, m.model.original.onDidChangeTokens, () => m.model.original.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) : undefined).map((m, reader) => m === null || m === void 0 ? void 0 : m.read(reader));\n    const alignments = derived(reader => {\n      /** @description alignments */\n      const diffModel = this._diffModel.read(reader);\n      const diff = diffModel === null || diffModel === void 0 ? void 0 : diffModel.diff.read(reader);\n      if (!diffModel || !diff) {\n        return null;\n      }\n      state.read(reader);\n      const renderSideBySide = this._options.renderSideBySide.read(reader);\n      const innerHunkAlignment = renderSideBySide;\n      return computeRangeAlignment(this._editors.original, this._editors.modified, diff.mappings, this._origViewZonesToIgnore, this._modViewZonesToIgnore, innerHunkAlignment);\n    });\n    const alignmentsSyncedMovedText = derived(reader => {\n      var _this$_diffModel$read;\n      /** @description alignmentsSyncedMovedText */\n      const syncedMovedText = (_this$_diffModel$read = this._diffModel.read(reader)) === null || _this$_diffModel$read === void 0 ? void 0 : _this$_diffModel$read.movedTextToCompare.read(reader);\n      if (!syncedMovedText) {\n        return null;\n      }\n      state.read(reader);\n      const mappings = syncedMovedText.changes.map(c => new DiffMapping(c));\n      // TODO dont include alignments outside syncedMovedText\n      return computeRangeAlignment(this._editors.original, this._editors.modified, mappings, this._origViewZonesToIgnore, this._modViewZonesToIgnore, true);\n    });\n    function createFakeLinesDiv() {\n      const r = document.createElement('div');\n      r.className = 'diagonal-fill';\n      return r;\n    }\n    const alignmentViewZonesDisposables = this._register(new DisposableStore());\n    this.viewZones = derivedWithStore(this, (reader, store) => {\n      var _this$_editors$modifi, _deletedCodeLineBreak, _this$_diffModel$read2, _this$_editors$origin, _this$_editors$origin2, _this$_editors$origin3, _this$_editors$origin4;\n      alignmentViewZonesDisposables.clear();\n      const alignmentsVal = alignments.read(reader) || [];\n      const origViewZones = [];\n      const modViewZones = [];\n      const modifiedTopPaddingVal = this._modifiedTopPadding.read(reader);\n      if (modifiedTopPaddingVal > 0) {\n        modViewZones.push({\n          afterLineNumber: 0,\n          domNode: document.createElement('div'),\n          heightInPx: modifiedTopPaddingVal,\n          showInHiddenAreas: true,\n          suppressMouseDown: true\n        });\n      }\n      const originalTopPaddingVal = this._originalTopPadding.read(reader);\n      if (originalTopPaddingVal > 0) {\n        origViewZones.push({\n          afterLineNumber: 0,\n          domNode: document.createElement('div'),\n          heightInPx: originalTopPaddingVal,\n          showInHiddenAreas: true,\n          suppressMouseDown: true\n        });\n      }\n      const renderSideBySide = this._options.renderSideBySide.read(reader);\n      const deletedCodeLineBreaksComputer = !renderSideBySide ? (_this$_editors$modifi = this._editors.modified._getViewModel()) === null || _this$_editors$modifi === void 0 ? void 0 : _this$_editors$modifi.createLineBreaksComputer() : undefined;\n      if (deletedCodeLineBreaksComputer) {\n        const originalModel = this._editors.original.getModel();\n        for (const a of alignmentsVal) {\n          if (a.diff) {\n            for (let i = a.originalRange.startLineNumber; i < a.originalRange.endLineNumberExclusive; i++) {\n              // `i` can be out of bound when the diff has not been updated yet.\n              // In this case, we do an early return.\n              // TODO@hediet: Fix this by applying the edit directly to the diff model, so that the diff is always valid.\n              if (i > originalModel.getLineCount()) {\n                return {\n                  orig: origViewZones,\n                  mod: modViewZones\n                };\n              }\n              deletedCodeLineBreaksComputer === null || deletedCodeLineBreaksComputer === void 0 || deletedCodeLineBreaksComputer.addRequest(originalModel.getLineContent(i), null, null);\n            }\n          }\n        }\n      }\n      const lineBreakData = (_deletedCodeLineBreak = deletedCodeLineBreaksComputer === null || deletedCodeLineBreaksComputer === void 0 ? void 0 : deletedCodeLineBreaksComputer.finalize()) !== null && _deletedCodeLineBreak !== void 0 ? _deletedCodeLineBreak : [];\n      let lineBreakDataIdx = 0;\n      const modLineHeight = this._editors.modified.getOption(67 /* EditorOption.lineHeight */);\n      const syncedMovedText = (_this$_diffModel$read2 = this._diffModel.read(reader)) === null || _this$_diffModel$read2 === void 0 ? void 0 : _this$_diffModel$read2.movedTextToCompare.read(reader);\n      const mightContainNonBasicASCII = (_this$_editors$origin = (_this$_editors$origin2 = this._editors.original.getModel()) === null || _this$_editors$origin2 === void 0 ? void 0 : _this$_editors$origin2.mightContainNonBasicASCII()) !== null && _this$_editors$origin !== void 0 ? _this$_editors$origin : false;\n      const mightContainRTL = (_this$_editors$origin3 = (_this$_editors$origin4 = this._editors.original.getModel()) === null || _this$_editors$origin4 === void 0 ? void 0 : _this$_editors$origin4.mightContainRTL()) !== null && _this$_editors$origin3 !== void 0 ? _this$_editors$origin3 : false;\n      const renderOptions = RenderOptions.fromEditor(this._editors.modified);\n      for (const a of alignmentsVal) {\n        if (a.diff && !renderSideBySide && (!this._options.useTrueInlineDiffRendering.read(reader) || !allowsTrueInlineDiffRendering(a.diff))) {\n          if (!a.originalRange.isEmpty) {\n            originalModelTokenizationCompleted.read(reader); // Update view-zones once tokenization completes\n            const deletedCodeDomNode = document.createElement('div');\n            deletedCodeDomNode.classList.add('view-lines', 'line-delete', 'monaco-mouse-cursor-text');\n            const originalModel = this._editors.original.getModel();\n            // `a.originalRange` can be out of bound when the diff has not been updated yet.\n            // In this case, we do an early return.\n            // TODO@hediet: Fix this by applying the edit directly to the diff model, so that the diff is always valid.\n            if (a.originalRange.endLineNumberExclusive - 1 > originalModel.getLineCount()) {\n              return {\n                orig: origViewZones,\n                mod: modViewZones\n              };\n            }\n            const source = new LineSource(a.originalRange.mapToLineArray(l => originalModel.tokenization.getLineTokens(l)), a.originalRange.mapToLineArray(_ => lineBreakData[lineBreakDataIdx++]), mightContainNonBasicASCII, mightContainRTL);\n            const decorations = [];\n            for (const i of a.diff.innerChanges || []) {\n              decorations.push(new InlineDecoration(i.originalRange.delta(-(a.diff.original.startLineNumber - 1)), diffDeleteDecoration.className, 0 /* InlineDecorationType.Regular */));\n            }\n            const result = renderLines(source, renderOptions, decorations, deletedCodeDomNode);\n            const marginDomNode = document.createElement('div');\n            marginDomNode.className = 'inline-deleted-margin-view-zone';\n            applyFontInfo(marginDomNode, renderOptions.fontInfo);\n            if (this._options.renderIndicators.read(reader)) {\n              for (let i = 0; i < result.heightInLines; i++) {\n                const marginElement = document.createElement('div');\n                marginElement.className = \"delete-sign \".concat(ThemeIcon.asClassName(diffRemoveIcon));\n                marginElement.setAttribute('style', \"position:absolute;top:\".concat(i * modLineHeight, \"px;width:\").concat(renderOptions.lineDecorationsWidth, \"px;height:\").concat(modLineHeight, \"px;right:0;\"));\n                marginDomNode.appendChild(marginElement);\n              }\n            }\n            let zoneId = undefined;\n            alignmentViewZonesDisposables.add(new InlineDiffDeletedCodeMargin(() => assertIsDefined(zoneId), marginDomNode, this._editors.modified, a.diff, this._diffEditorWidget, result.viewLineCounts, this._editors.original.getModel(), this._contextMenuService, this._clipboardService));\n            for (let i = 0; i < result.viewLineCounts.length; i++) {\n              const count = result.viewLineCounts[i];\n              // Account for wrapped lines in the (collapsed) original editor (which doesn't wrap lines).\n              if (count > 1) {\n                origViewZones.push({\n                  afterLineNumber: a.originalRange.startLineNumber + i,\n                  domNode: createFakeLinesDiv(),\n                  heightInPx: (count - 1) * modLineHeight,\n                  showInHiddenAreas: true,\n                  suppressMouseDown: true\n                });\n              }\n            }\n            modViewZones.push({\n              afterLineNumber: a.modifiedRange.startLineNumber - 1,\n              domNode: deletedCodeDomNode,\n              heightInPx: result.heightInLines * modLineHeight,\n              minWidthInPx: result.minWidthInPx,\n              marginDomNode,\n              setZoneId(id) {\n                zoneId = id;\n              },\n              showInHiddenAreas: true,\n              suppressMouseDown: true\n            });\n          }\n          const marginDomNode = document.createElement('div');\n          marginDomNode.className = 'gutter-delete';\n          origViewZones.push({\n            afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n            domNode: createFakeLinesDiv(),\n            heightInPx: a.modifiedHeightInPx,\n            marginDomNode,\n            showInHiddenAreas: true,\n            suppressMouseDown: true\n          });\n        } else {\n          const delta = a.modifiedHeightInPx - a.originalHeightInPx;\n          if (delta > 0) {\n            if (syncedMovedText !== null && syncedMovedText !== void 0 && syncedMovedText.lineRangeMapping.original.delta(-1).deltaLength(2).contains(a.originalRange.endLineNumberExclusive - 1)) {\n              continue;\n            }\n            origViewZones.push({\n              afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n              domNode: createFakeLinesDiv(),\n              heightInPx: delta,\n              showInHiddenAreas: true,\n              suppressMouseDown: true\n            });\n          } else {\n            if (syncedMovedText !== null && syncedMovedText !== void 0 && syncedMovedText.lineRangeMapping.modified.delta(-1).deltaLength(2).contains(a.modifiedRange.endLineNumberExclusive - 1)) {\n              continue;\n            }\n            function createViewZoneMarginArrow() {\n              const arrow = document.createElement('div');\n              arrow.className = 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight);\n              store.add(addDisposableListener(arrow, 'mousedown', e => e.stopPropagation()));\n              store.add(addDisposableListener(arrow, 'click', e => {\n                e.stopPropagation();\n                _diffEditorWidget.revert(a.diff);\n              }));\n              return $('div', {}, arrow);\n            }\n            let marginDomNode = undefined;\n            if (a.diff && a.diff.modified.isEmpty && this._options.shouldRenderOldRevertArrows.read(reader)) {\n              marginDomNode = createViewZoneMarginArrow();\n            }\n            modViewZones.push({\n              afterLineNumber: a.modifiedRange.endLineNumberExclusive - 1,\n              domNode: createFakeLinesDiv(),\n              heightInPx: -delta,\n              marginDomNode,\n              showInHiddenAreas: true,\n              suppressMouseDown: true\n            });\n          }\n        }\n      }\n      for (const a of (_alignmentsSyncedMove = alignmentsSyncedMovedText.read(reader)) !== null && _alignmentsSyncedMove !== void 0 ? _alignmentsSyncedMove : []) {\n        var _alignmentsSyncedMove;\n        if (!(syncedMovedText !== null && syncedMovedText !== void 0 && syncedMovedText.lineRangeMapping.original.intersect(a.originalRange)) || !(syncedMovedText !== null && syncedMovedText !== void 0 && syncedMovedText.lineRangeMapping.modified.intersect(a.modifiedRange))) {\n          // ignore unrelated alignments outside the synced moved text\n          continue;\n        }\n        const delta = a.modifiedHeightInPx - a.originalHeightInPx;\n        if (delta > 0) {\n          origViewZones.push({\n            afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n            domNode: createFakeLinesDiv(),\n            heightInPx: delta,\n            showInHiddenAreas: true,\n            suppressMouseDown: true\n          });\n        } else {\n          modViewZones.push({\n            afterLineNumber: a.modifiedRange.endLineNumberExclusive - 1,\n            domNode: createFakeLinesDiv(),\n            heightInPx: -delta,\n            showInHiddenAreas: true,\n            suppressMouseDown: true\n          });\n        }\n      }\n      return {\n        orig: origViewZones,\n        mod: modViewZones\n      };\n    });\n    let ignoreChange = false;\n    this._register(this._editors.original.onDidScrollChange(e => {\n      if (e.scrollLeftChanged && !ignoreChange) {\n        ignoreChange = true;\n        this._editors.modified.setScrollLeft(e.scrollLeft);\n        ignoreChange = false;\n      }\n    }));\n    this._register(this._editors.modified.onDidScrollChange(e => {\n      if (e.scrollLeftChanged && !ignoreChange) {\n        ignoreChange = true;\n        this._editors.original.setScrollLeft(e.scrollLeft);\n        ignoreChange = false;\n      }\n    }));\n    this._originalScrollTop = observableFromEvent(this._editors.original.onDidScrollChange, () => /** @description original.getScrollTop */this._editors.original.getScrollTop());\n    this._modifiedScrollTop = observableFromEvent(this._editors.modified.onDidScrollChange, () => /** @description modified.getScrollTop */this._editors.modified.getScrollTop());\n    // origExtraHeight + origOffset - origScrollTop = modExtraHeight + modOffset - modScrollTop\n    // origScrollTop = origExtraHeight + origOffset - modExtraHeight - modOffset + modScrollTop\n    // modScrollTop = modExtraHeight + modOffset - origExtraHeight - origOffset + origScrollTop\n    // origOffset - modOffset = heightOfLines(1..Y) - heightOfLines(1..X)\n    // origScrollTop >= 0, modScrollTop >= 0\n    this._register(autorun(reader => {\n      /** @description update scroll modified */\n      const newScrollTopModified = this._originalScrollTop.read(reader) - (this._originalScrollOffsetAnimated.get() - this._modifiedScrollOffsetAnimated.read(reader)) - (this._originalTopPadding.get() - this._modifiedTopPadding.read(reader));\n      if (newScrollTopModified !== this._editors.modified.getScrollTop()) {\n        this._editors.modified.setScrollTop(newScrollTopModified, 1 /* ScrollType.Immediate */);\n      }\n    }));\n    this._register(autorun(reader => {\n      /** @description update scroll original */\n      const newScrollTopOriginal = this._modifiedScrollTop.read(reader) - (this._modifiedScrollOffsetAnimated.get() - this._originalScrollOffsetAnimated.read(reader)) - (this._modifiedTopPadding.get() - this._originalTopPadding.read(reader));\n      if (newScrollTopOriginal !== this._editors.original.getScrollTop()) {\n        this._editors.original.setScrollTop(newScrollTopOriginal, 1 /* ScrollType.Immediate */);\n      }\n    }));\n    this._register(autorun(reader => {\n      var _this$_diffModel$read3;\n      /** @description update editor top offsets */\n      const m = (_this$_diffModel$read3 = this._diffModel.read(reader)) === null || _this$_diffModel$read3 === void 0 ? void 0 : _this$_diffModel$read3.movedTextToCompare.read(reader);\n      let deltaOrigToMod = 0;\n      if (m) {\n        const trueTopOriginal = this._editors.original.getTopForLineNumber(m.lineRangeMapping.original.startLineNumber, true) - this._originalTopPadding.get();\n        const trueTopModified = this._editors.modified.getTopForLineNumber(m.lineRangeMapping.modified.startLineNumber, true) - this._modifiedTopPadding.get();\n        deltaOrigToMod = trueTopModified - trueTopOriginal;\n      }\n      if (deltaOrigToMod > 0) {\n        this._modifiedTopPadding.set(0, undefined);\n        this._originalTopPadding.set(deltaOrigToMod, undefined);\n      } else if (deltaOrigToMod < 0) {\n        this._modifiedTopPadding.set(-deltaOrigToMod, undefined);\n        this._originalTopPadding.set(0, undefined);\n      } else {\n        setTimeout(() => {\n          this._modifiedTopPadding.set(0, undefined);\n          this._originalTopPadding.set(0, undefined);\n        }, 400);\n      }\n      if (this._editors.modified.hasTextFocus()) {\n        this._originalScrollOffset.set(this._modifiedScrollOffset.get() - deltaOrigToMod, undefined, true);\n      } else {\n        this._modifiedScrollOffset.set(this._originalScrollOffset.get() + deltaOrigToMod, undefined, true);\n      }\n    }));\n  }\n};\nDiffEditorViewZones = __decorate([__param(8, IClipboardService), __param(9, IContextMenuService)], DiffEditorViewZones);\nexport { DiffEditorViewZones };\nfunction computeRangeAlignment(originalEditor, modifiedEditor, diffs, originalEditorAlignmentViewZones, modifiedEditorAlignmentViewZones, innerHunkAlignment) {\n  const originalLineHeightOverrides = new ArrayQueue(getAdditionalLineHeights(originalEditor, originalEditorAlignmentViewZones));\n  const modifiedLineHeightOverrides = new ArrayQueue(getAdditionalLineHeights(modifiedEditor, modifiedEditorAlignmentViewZones));\n  const origLineHeight = originalEditor.getOption(67 /* EditorOption.lineHeight */);\n  const modLineHeight = modifiedEditor.getOption(67 /* EditorOption.lineHeight */);\n  const result = [];\n  let lastOriginalLineNumber = 0;\n  let lastModifiedLineNumber = 0;\n  function handleAlignmentsOutsideOfDiffs(untilOriginalLineNumberExclusive, untilModifiedLineNumberExclusive) {\n    while (true) {\n      let origNext = originalLineHeightOverrides.peek();\n      let modNext = modifiedLineHeightOverrides.peek();\n      if (origNext && origNext.lineNumber >= untilOriginalLineNumberExclusive) {\n        origNext = undefined;\n      }\n      if (modNext && modNext.lineNumber >= untilModifiedLineNumberExclusive) {\n        modNext = undefined;\n      }\n      if (!origNext && !modNext) {\n        break;\n      }\n      const distOrig = origNext ? origNext.lineNumber - lastOriginalLineNumber : Number.MAX_VALUE;\n      const distNext = modNext ? modNext.lineNumber - lastModifiedLineNumber : Number.MAX_VALUE;\n      if (distOrig < distNext) {\n        originalLineHeightOverrides.dequeue();\n        modNext = {\n          lineNumber: origNext.lineNumber - lastOriginalLineNumber + lastModifiedLineNumber,\n          heightInPx: 0\n        };\n      } else if (distOrig > distNext) {\n        modifiedLineHeightOverrides.dequeue();\n        origNext = {\n          lineNumber: modNext.lineNumber - lastModifiedLineNumber + lastOriginalLineNumber,\n          heightInPx: 0\n        };\n      } else {\n        originalLineHeightOverrides.dequeue();\n        modifiedLineHeightOverrides.dequeue();\n      }\n      result.push({\n        originalRange: LineRange.ofLength(origNext.lineNumber, 1),\n        modifiedRange: LineRange.ofLength(modNext.lineNumber, 1),\n        originalHeightInPx: origLineHeight + origNext.heightInPx,\n        modifiedHeightInPx: modLineHeight + modNext.heightInPx,\n        diff: undefined\n      });\n    }\n  }\n  for (const m of diffs) {\n    const c = m.lineRangeMapping;\n    handleAlignmentsOutsideOfDiffs(c.original.startLineNumber, c.modified.startLineNumber);\n    let first = true;\n    let lastModLineNumber = c.modified.startLineNumber;\n    let lastOrigLineNumber = c.original.startLineNumber;\n    function emitAlignment(origLineNumberExclusive, modLineNumberExclusive) {\n      var _originalLineHeightOv, _originalLineHeightOv2, _modifiedLineHeightOv, _modifiedLineHeightOv2;\n      let forceAlignment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (origLineNumberExclusive < lastOrigLineNumber || modLineNumberExclusive < lastModLineNumber) {\n        return;\n      }\n      if (first) {\n        first = false;\n      } else if (!forceAlignment && (origLineNumberExclusive === lastOrigLineNumber || modLineNumberExclusive === lastModLineNumber)) {\n        // This causes a re-alignment of an already aligned line.\n        // However, we don't care for the final alignment.\n        return;\n      }\n      const originalRange = new LineRange(lastOrigLineNumber, origLineNumberExclusive);\n      const modifiedRange = new LineRange(lastModLineNumber, modLineNumberExclusive);\n      if (originalRange.isEmpty && modifiedRange.isEmpty) {\n        return;\n      }\n      const originalAdditionalHeight = (_originalLineHeightOv = (_originalLineHeightOv2 = originalLineHeightOverrides.takeWhile(v => v.lineNumber < origLineNumberExclusive)) === null || _originalLineHeightOv2 === void 0 ? void 0 : _originalLineHeightOv2.reduce((p, c) => p + c.heightInPx, 0)) !== null && _originalLineHeightOv !== void 0 ? _originalLineHeightOv : 0;\n      const modifiedAdditionalHeight = (_modifiedLineHeightOv = (_modifiedLineHeightOv2 = modifiedLineHeightOverrides.takeWhile(v => v.lineNumber < modLineNumberExclusive)) === null || _modifiedLineHeightOv2 === void 0 ? void 0 : _modifiedLineHeightOv2.reduce((p, c) => p + c.heightInPx, 0)) !== null && _modifiedLineHeightOv !== void 0 ? _modifiedLineHeightOv : 0;\n      result.push({\n        originalRange,\n        modifiedRange,\n        originalHeightInPx: originalRange.length * origLineHeight + originalAdditionalHeight,\n        modifiedHeightInPx: modifiedRange.length * modLineHeight + modifiedAdditionalHeight,\n        diff: m.lineRangeMapping\n      });\n      lastOrigLineNumber = origLineNumberExclusive;\n      lastModLineNumber = modLineNumberExclusive;\n    }\n    if (innerHunkAlignment) {\n      for (const i of c.innerChanges || []) {\n        if (i.originalRange.startColumn > 1 && i.modifiedRange.startColumn > 1) {\n          // There is some unmodified text on this line before the diff\n          emitAlignment(i.originalRange.startLineNumber, i.modifiedRange.startLineNumber);\n        }\n        const originalModel = originalEditor.getModel();\n        // When the diff is invalid, the ranges might be out of bounds (this should be fixed in the diff model by applying edits directly).\n        const maxColumn = i.originalRange.endLineNumber <= originalModel.getLineCount() ? originalModel.getLineMaxColumn(i.originalRange.endLineNumber) : Number.MAX_SAFE_INTEGER;\n        if (i.originalRange.endColumn < maxColumn) {\n          // // There is some unmodified text on this line after the diff\n          emitAlignment(i.originalRange.endLineNumber, i.modifiedRange.endLineNumber);\n        }\n      }\n    }\n    emitAlignment(c.original.endLineNumberExclusive, c.modified.endLineNumberExclusive, true);\n    lastOriginalLineNumber = c.original.endLineNumberExclusive;\n    lastModifiedLineNumber = c.modified.endLineNumberExclusive;\n  }\n  handleAlignmentsOutsideOfDiffs(Number.MAX_VALUE, Number.MAX_VALUE);\n  return result;\n}\nfunction getAdditionalLineHeights(editor, viewZonesToIgnore) {\n  const viewZoneHeights = [];\n  const wrappingZoneHeights = [];\n  const hasWrapping = editor.getOption(147 /* EditorOption.wrappingInfo */).wrappingColumn !== -1;\n  const coordinatesConverter = editor._getViewModel().coordinatesConverter;\n  const editorLineHeight = editor.getOption(67 /* EditorOption.lineHeight */);\n  if (hasWrapping) {\n    for (let i = 1; i <= editor.getModel().getLineCount(); i++) {\n      const lineCount = coordinatesConverter.getModelLineViewLineCount(i);\n      if (lineCount > 1) {\n        wrappingZoneHeights.push({\n          lineNumber: i,\n          heightInPx: editorLineHeight * (lineCount - 1)\n        });\n      }\n    }\n  }\n  for (const w of editor.getWhitespaces()) {\n    if (viewZonesToIgnore.has(w.id)) {\n      continue;\n    }\n    const modelLineNumber = w.afterLineNumber === 0 ? 0 : coordinatesConverter.convertViewPositionToModelPosition(new Position(w.afterLineNumber, 1)).lineNumber;\n    viewZoneHeights.push({\n      lineNumber: modelLineNumber,\n      heightInPx: w.height\n    });\n  }\n  const result = joinCombine(viewZoneHeights, wrappingZoneHeights, v => v.lineNumber, (v1, v2) => ({\n    lineNumber: v1.lineNumber,\n    heightInPx: v1.heightInPx + v2.heightInPx\n  }));\n  return result;\n}\nexport function allowsTrueInlineDiffRendering(mapping) {\n  if (!mapping.innerChanges) {\n    return false;\n  }\n  return mapping.innerChanges.every(c => rangeIsSingleLine(c.modifiedRange) && rangeIsSingleLine(c.originalRange) || c.originalRange.equalsRange(new Range(1, 1, 1, 1)));\n}\nfunction rangeIsSingleLine(range) {\n  return range.startLineNumber === range.endLineNumber;\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","$","addDisposableListener","ArrayQueue","RunOnceScheduler","Codicon","Disposable","DisposableStore","autorun","derived","derivedWithStore","observableFromEvent","observableValue","ThemeIcon","assertIsDefined","applyFontInfo","diffDeleteDecoration","diffRemoveIcon","DiffMapping","InlineDiffDeletedCodeMargin","LineSource","RenderOptions","renderLines","animatedObservable","joinCombine","LineRange","Position","InlineDecoration","IClipboardService","IContextMenuService","Range","DiffEditorViewZones","constructor","_targetWindow","_editors","_diffModel","_options","_diffEditorWidget","_canIgnoreViewZoneUpdateEvent","_origViewZonesToIgnore","_modViewZonesToIgnore","_clipboardService","_contextMenuService","_originalTopPadding","_originalScrollOffset","_originalScrollOffsetAnimated","_store","_modifiedTopPadding","_modifiedScrollOffset","_modifiedScrollOffsetAnimated","state","updateImmediately","_register","set","get","undefined","original","onDidChangeViewZones","_args","schedule","modified","onDidChangeConfiguration","args","hasChanged","originalModelTokenizationCompleted","map","m","model","onDidChangeTokens","tokenization","backgroundTokenizationState","reader","read","alignments","diffModel","diff","renderSideBySide","innerHunkAlignment","computeRangeAlignment","mappings","alignmentsSyncedMovedText","_this$_diffModel$read","syncedMovedText","movedTextToCompare","changes","createFakeLinesDiv","document","createElement","className","alignmentViewZonesDisposables","viewZones","store","_this$_editors$modifi","_deletedCodeLineBreak","_this$_diffModel$read2","_this$_editors$origin","_this$_editors$origin2","_this$_editors$origin3","_this$_editors$origin4","clear","alignmentsVal","origViewZones","modViewZones","modifiedTopPaddingVal","push","afterLineNumber","domNode","heightInPx","showInHiddenAreas","suppressMouseDown","originalTopPaddingVal","deletedCodeLineBreaksComputer","_getViewModel","createLineBreaksComputer","originalModel","getModel","a","originalRange","startLineNumber","endLineNumberExclusive","getLineCount","orig","mod","addRequest","getLineContent","lineBreakData","finalize","lineBreakDataIdx","modLineHeight","getOption","mightContainNonBasicASCII","mightContainRTL","renderOptions","fromEditor","useTrueInlineDiffRendering","allowsTrueInlineDiffRendering","isEmpty","deletedCodeDomNode","classList","add","source","mapToLineArray","l","getLineTokens","_","decorations","innerChanges","delta","result","marginDomNode","fontInfo","renderIndicators","heightInLines","marginElement","concat","asClassName","setAttribute","lineDecorationsWidth","appendChild","zoneId","viewLineCounts","count","modifiedRange","minWidthInPx","setZoneId","id","modifiedHeightInPx","originalHeightInPx","lineRangeMapping","deltaLength","contains","createViewZoneMarginArrow","arrow","arrowRight","e","stopPropagation","revert","shouldRenderOldRevertArrows","_alignmentsSyncedMove","intersect","ignoreChange","onDidScrollChange","scrollLeftChanged","setScrollLeft","scrollLeft","_originalScrollTop","getScrollTop","_modifiedScrollTop","newScrollTopModified","setScrollTop","newScrollTopOriginal","_this$_diffModel$read3","deltaOrigToMod","trueTopOriginal","getTopForLineNumber","trueTopModified","setTimeout","hasTextFocus","originalEditor","modifiedEditor","diffs","originalEditorAlignmentViewZones","modifiedEditorAlignmentViewZones","originalLineHeightOverrides","getAdditionalLineHeights","modifiedLineHeightOverrides","origLineHeight","lastOriginalLineNumber","lastModifiedLineNumber","handleAlignmentsOutsideOfDiffs","untilOriginalLineNumberExclusive","untilModifiedLineNumberExclusive","origNext","peek","modNext","lineNumber","distOrig","Number","MAX_VALUE","distNext","dequeue","ofLength","first","lastModLineNumber","lastOrigLineNumber","emitAlignment","origLineNumberExclusive","modLineNumberExclusive","_originalLineHeightOv","_originalLineHeightOv2","_modifiedLineHeightOv","_modifiedLineHeightOv2","forceAlignment","originalAdditionalHeight","takeWhile","v","reduce","p","modifiedAdditionalHeight","startColumn","maxColumn","endLineNumber","getLineMaxColumn","MAX_SAFE_INTEGER","endColumn","editor","viewZonesToIgnore","viewZoneHeights","wrappingZoneHeights","hasWrapping","wrappingColumn","coordinatesConverter","editorLineHeight","lineCount","getModelLineViewLineCount","w","getWhitespaces","has","modelLineNumber","convertViewPositionToModelPosition","height","v1","v2","mapping","every","rangeIsSingleLine","equalsRange","range"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/diffEditorViewZones.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { $, addDisposableListener } from '../../../../../../base/browser/dom.js';\nimport { ArrayQueue } from '../../../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../../../base/common/async.js';\nimport { Codicon } from '../../../../../../base/common/codicons.js';\nimport { Disposable, DisposableStore } from '../../../../../../base/common/lifecycle.js';\nimport { autorun, derived, derivedWithStore, observableFromEvent, observableValue } from '../../../../../../base/common/observable.js';\nimport { ThemeIcon } from '../../../../../../base/common/themables.js';\nimport { assertIsDefined } from '../../../../../../base/common/types.js';\nimport { applyFontInfo } from '../../../../config/domFontInfo.js';\nimport { diffDeleteDecoration, diffRemoveIcon } from '../../registrations.contribution.js';\nimport { DiffMapping } from '../../diffEditorViewModel.js';\nimport { InlineDiffDeletedCodeMargin } from './inlineDiffDeletedCodeMargin.js';\nimport { LineSource, RenderOptions, renderLines } from './renderLines.js';\nimport { animatedObservable, joinCombine } from '../../utils.js';\nimport { LineRange } from '../../../../../common/core/lineRange.js';\nimport { Position } from '../../../../../common/core/position.js';\nimport { InlineDecoration } from '../../../../../common/viewModel.js';\nimport { IClipboardService } from '../../../../../../platform/clipboard/common/clipboardService.js';\nimport { IContextMenuService } from '../../../../../../platform/contextview/browser/contextView.js';\nimport { Range } from '../../../../../common/core/range.js';\n/**\n * Ensures both editors have the same height by aligning unchanged lines.\n * In inline view mode, inserts viewzones to show deleted code from the original text model in the modified code editor.\n * Synchronizes scrolling.\n *\n * Make sure to add the view zones!\n */\nlet DiffEditorViewZones = class DiffEditorViewZones extends Disposable {\n    constructor(_targetWindow, _editors, _diffModel, _options, _diffEditorWidget, _canIgnoreViewZoneUpdateEvent, _origViewZonesToIgnore, _modViewZonesToIgnore, _clipboardService, _contextMenuService) {\n        super();\n        this._targetWindow = _targetWindow;\n        this._editors = _editors;\n        this._diffModel = _diffModel;\n        this._options = _options;\n        this._diffEditorWidget = _diffEditorWidget;\n        this._canIgnoreViewZoneUpdateEvent = _canIgnoreViewZoneUpdateEvent;\n        this._origViewZonesToIgnore = _origViewZonesToIgnore;\n        this._modViewZonesToIgnore = _modViewZonesToIgnore;\n        this._clipboardService = _clipboardService;\n        this._contextMenuService = _contextMenuService;\n        this._originalTopPadding = observableValue(this, 0);\n        this._originalScrollOffset = observableValue(this, 0);\n        this._originalScrollOffsetAnimated = animatedObservable(this._targetWindow, this._originalScrollOffset, this._store);\n        this._modifiedTopPadding = observableValue(this, 0);\n        this._modifiedScrollOffset = observableValue(this, 0);\n        this._modifiedScrollOffsetAnimated = animatedObservable(this._targetWindow, this._modifiedScrollOffset, this._store);\n        const state = observableValue('invalidateAlignmentsState', 0);\n        const updateImmediately = this._register(new RunOnceScheduler(() => {\n            state.set(state.get() + 1, undefined);\n        }, 0));\n        this._register(this._editors.original.onDidChangeViewZones((_args) => { if (!this._canIgnoreViewZoneUpdateEvent()) {\n            updateImmediately.schedule();\n        } }));\n        this._register(this._editors.modified.onDidChangeViewZones((_args) => { if (!this._canIgnoreViewZoneUpdateEvent()) {\n            updateImmediately.schedule();\n        } }));\n        this._register(this._editors.original.onDidChangeConfiguration((args) => {\n            if (args.hasChanged(147 /* EditorOption.wrappingInfo */) || args.hasChanged(67 /* EditorOption.lineHeight */)) {\n                updateImmediately.schedule();\n            }\n        }));\n        this._register(this._editors.modified.onDidChangeConfiguration((args) => {\n            if (args.hasChanged(147 /* EditorOption.wrappingInfo */) || args.hasChanged(67 /* EditorOption.lineHeight */)) {\n                updateImmediately.schedule();\n            }\n        }));\n        const originalModelTokenizationCompleted = this._diffModel.map(m => m ? observableFromEvent(this, m.model.original.onDidChangeTokens, () => m.model.original.tokenization.backgroundTokenizationState === 2 /* BackgroundTokenizationState.Completed */) : undefined).map((m, reader) => m?.read(reader));\n        const alignments = derived((reader) => {\n            /** @description alignments */\n            const diffModel = this._diffModel.read(reader);\n            const diff = diffModel?.diff.read(reader);\n            if (!diffModel || !diff) {\n                return null;\n            }\n            state.read(reader);\n            const renderSideBySide = this._options.renderSideBySide.read(reader);\n            const innerHunkAlignment = renderSideBySide;\n            return computeRangeAlignment(this._editors.original, this._editors.modified, diff.mappings, this._origViewZonesToIgnore, this._modViewZonesToIgnore, innerHunkAlignment);\n        });\n        const alignmentsSyncedMovedText = derived((reader) => {\n            /** @description alignmentsSyncedMovedText */\n            const syncedMovedText = this._diffModel.read(reader)?.movedTextToCompare.read(reader);\n            if (!syncedMovedText) {\n                return null;\n            }\n            state.read(reader);\n            const mappings = syncedMovedText.changes.map(c => new DiffMapping(c));\n            // TODO dont include alignments outside syncedMovedText\n            return computeRangeAlignment(this._editors.original, this._editors.modified, mappings, this._origViewZonesToIgnore, this._modViewZonesToIgnore, true);\n        });\n        function createFakeLinesDiv() {\n            const r = document.createElement('div');\n            r.className = 'diagonal-fill';\n            return r;\n        }\n        const alignmentViewZonesDisposables = this._register(new DisposableStore());\n        this.viewZones = derivedWithStore(this, (reader, store) => {\n            alignmentViewZonesDisposables.clear();\n            const alignmentsVal = alignments.read(reader) || [];\n            const origViewZones = [];\n            const modViewZones = [];\n            const modifiedTopPaddingVal = this._modifiedTopPadding.read(reader);\n            if (modifiedTopPaddingVal > 0) {\n                modViewZones.push({\n                    afterLineNumber: 0,\n                    domNode: document.createElement('div'),\n                    heightInPx: modifiedTopPaddingVal,\n                    showInHiddenAreas: true,\n                    suppressMouseDown: true,\n                });\n            }\n            const originalTopPaddingVal = this._originalTopPadding.read(reader);\n            if (originalTopPaddingVal > 0) {\n                origViewZones.push({\n                    afterLineNumber: 0,\n                    domNode: document.createElement('div'),\n                    heightInPx: originalTopPaddingVal,\n                    showInHiddenAreas: true,\n                    suppressMouseDown: true,\n                });\n            }\n            const renderSideBySide = this._options.renderSideBySide.read(reader);\n            const deletedCodeLineBreaksComputer = !renderSideBySide ? this._editors.modified._getViewModel()?.createLineBreaksComputer() : undefined;\n            if (deletedCodeLineBreaksComputer) {\n                const originalModel = this._editors.original.getModel();\n                for (const a of alignmentsVal) {\n                    if (a.diff) {\n                        for (let i = a.originalRange.startLineNumber; i < a.originalRange.endLineNumberExclusive; i++) {\n                            // `i` can be out of bound when the diff has not been updated yet.\n                            // In this case, we do an early return.\n                            // TODO@hediet: Fix this by applying the edit directly to the diff model, so that the diff is always valid.\n                            if (i > originalModel.getLineCount()) {\n                                return { orig: origViewZones, mod: modViewZones };\n                            }\n                            deletedCodeLineBreaksComputer?.addRequest(originalModel.getLineContent(i), null, null);\n                        }\n                    }\n                }\n            }\n            const lineBreakData = deletedCodeLineBreaksComputer?.finalize() ?? [];\n            let lineBreakDataIdx = 0;\n            const modLineHeight = this._editors.modified.getOption(67 /* EditorOption.lineHeight */);\n            const syncedMovedText = this._diffModel.read(reader)?.movedTextToCompare.read(reader);\n            const mightContainNonBasicASCII = this._editors.original.getModel()?.mightContainNonBasicASCII() ?? false;\n            const mightContainRTL = this._editors.original.getModel()?.mightContainRTL() ?? false;\n            const renderOptions = RenderOptions.fromEditor(this._editors.modified);\n            for (const a of alignmentsVal) {\n                if (a.diff && !renderSideBySide && (!this._options.useTrueInlineDiffRendering.read(reader) || !allowsTrueInlineDiffRendering(a.diff))) {\n                    if (!a.originalRange.isEmpty) {\n                        originalModelTokenizationCompleted.read(reader); // Update view-zones once tokenization completes\n                        const deletedCodeDomNode = document.createElement('div');\n                        deletedCodeDomNode.classList.add('view-lines', 'line-delete', 'monaco-mouse-cursor-text');\n                        const originalModel = this._editors.original.getModel();\n                        // `a.originalRange` can be out of bound when the diff has not been updated yet.\n                        // In this case, we do an early return.\n                        // TODO@hediet: Fix this by applying the edit directly to the diff model, so that the diff is always valid.\n                        if (a.originalRange.endLineNumberExclusive - 1 > originalModel.getLineCount()) {\n                            return { orig: origViewZones, mod: modViewZones };\n                        }\n                        const source = new LineSource(a.originalRange.mapToLineArray(l => originalModel.tokenization.getLineTokens(l)), a.originalRange.mapToLineArray(_ => lineBreakData[lineBreakDataIdx++]), mightContainNonBasicASCII, mightContainRTL);\n                        const decorations = [];\n                        for (const i of a.diff.innerChanges || []) {\n                            decorations.push(new InlineDecoration(i.originalRange.delta(-(a.diff.original.startLineNumber - 1)), diffDeleteDecoration.className, 0 /* InlineDecorationType.Regular */));\n                        }\n                        const result = renderLines(source, renderOptions, decorations, deletedCodeDomNode);\n                        const marginDomNode = document.createElement('div');\n                        marginDomNode.className = 'inline-deleted-margin-view-zone';\n                        applyFontInfo(marginDomNode, renderOptions.fontInfo);\n                        if (this._options.renderIndicators.read(reader)) {\n                            for (let i = 0; i < result.heightInLines; i++) {\n                                const marginElement = document.createElement('div');\n                                marginElement.className = `delete-sign ${ThemeIcon.asClassName(diffRemoveIcon)}`;\n                                marginElement.setAttribute('style', `position:absolute;top:${i * modLineHeight}px;width:${renderOptions.lineDecorationsWidth}px;height:${modLineHeight}px;right:0;`);\n                                marginDomNode.appendChild(marginElement);\n                            }\n                        }\n                        let zoneId = undefined;\n                        alignmentViewZonesDisposables.add(new InlineDiffDeletedCodeMargin(() => assertIsDefined(zoneId), marginDomNode, this._editors.modified, a.diff, this._diffEditorWidget, result.viewLineCounts, this._editors.original.getModel(), this._contextMenuService, this._clipboardService));\n                        for (let i = 0; i < result.viewLineCounts.length; i++) {\n                            const count = result.viewLineCounts[i];\n                            // Account for wrapped lines in the (collapsed) original editor (which doesn't wrap lines).\n                            if (count > 1) {\n                                origViewZones.push({\n                                    afterLineNumber: a.originalRange.startLineNumber + i,\n                                    domNode: createFakeLinesDiv(),\n                                    heightInPx: (count - 1) * modLineHeight,\n                                    showInHiddenAreas: true,\n                                    suppressMouseDown: true,\n                                });\n                            }\n                        }\n                        modViewZones.push({\n                            afterLineNumber: a.modifiedRange.startLineNumber - 1,\n                            domNode: deletedCodeDomNode,\n                            heightInPx: result.heightInLines * modLineHeight,\n                            minWidthInPx: result.minWidthInPx,\n                            marginDomNode,\n                            setZoneId(id) { zoneId = id; },\n                            showInHiddenAreas: true,\n                            suppressMouseDown: true,\n                        });\n                    }\n                    const marginDomNode = document.createElement('div');\n                    marginDomNode.className = 'gutter-delete';\n                    origViewZones.push({\n                        afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n                        domNode: createFakeLinesDiv(),\n                        heightInPx: a.modifiedHeightInPx,\n                        marginDomNode,\n                        showInHiddenAreas: true,\n                        suppressMouseDown: true,\n                    });\n                }\n                else {\n                    const delta = a.modifiedHeightInPx - a.originalHeightInPx;\n                    if (delta > 0) {\n                        if (syncedMovedText?.lineRangeMapping.original.delta(-1).deltaLength(2).contains(a.originalRange.endLineNumberExclusive - 1)) {\n                            continue;\n                        }\n                        origViewZones.push({\n                            afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n                            domNode: createFakeLinesDiv(),\n                            heightInPx: delta,\n                            showInHiddenAreas: true,\n                            suppressMouseDown: true,\n                        });\n                    }\n                    else {\n                        if (syncedMovedText?.lineRangeMapping.modified.delta(-1).deltaLength(2).contains(a.modifiedRange.endLineNumberExclusive - 1)) {\n                            continue;\n                        }\n                        function createViewZoneMarginArrow() {\n                            const arrow = document.createElement('div');\n                            arrow.className = 'arrow-revert-change ' + ThemeIcon.asClassName(Codicon.arrowRight);\n                            store.add(addDisposableListener(arrow, 'mousedown', e => e.stopPropagation()));\n                            store.add(addDisposableListener(arrow, 'click', e => {\n                                e.stopPropagation();\n                                _diffEditorWidget.revert(a.diff);\n                            }));\n                            return $('div', {}, arrow);\n                        }\n                        let marginDomNode = undefined;\n                        if (a.diff && a.diff.modified.isEmpty && this._options.shouldRenderOldRevertArrows.read(reader)) {\n                            marginDomNode = createViewZoneMarginArrow();\n                        }\n                        modViewZones.push({\n                            afterLineNumber: a.modifiedRange.endLineNumberExclusive - 1,\n                            domNode: createFakeLinesDiv(),\n                            heightInPx: -delta,\n                            marginDomNode,\n                            showInHiddenAreas: true,\n                            suppressMouseDown: true,\n                        });\n                    }\n                }\n            }\n            for (const a of alignmentsSyncedMovedText.read(reader) ?? []) {\n                if (!syncedMovedText?.lineRangeMapping.original.intersect(a.originalRange)\n                    || !syncedMovedText?.lineRangeMapping.modified.intersect(a.modifiedRange)) {\n                    // ignore unrelated alignments outside the synced moved text\n                    continue;\n                }\n                const delta = a.modifiedHeightInPx - a.originalHeightInPx;\n                if (delta > 0) {\n                    origViewZones.push({\n                        afterLineNumber: a.originalRange.endLineNumberExclusive - 1,\n                        domNode: createFakeLinesDiv(),\n                        heightInPx: delta,\n                        showInHiddenAreas: true,\n                        suppressMouseDown: true,\n                    });\n                }\n                else {\n                    modViewZones.push({\n                        afterLineNumber: a.modifiedRange.endLineNumberExclusive - 1,\n                        domNode: createFakeLinesDiv(),\n                        heightInPx: -delta,\n                        showInHiddenAreas: true,\n                        suppressMouseDown: true,\n                    });\n                }\n            }\n            return { orig: origViewZones, mod: modViewZones };\n        });\n        let ignoreChange = false;\n        this._register(this._editors.original.onDidScrollChange(e => {\n            if (e.scrollLeftChanged && !ignoreChange) {\n                ignoreChange = true;\n                this._editors.modified.setScrollLeft(e.scrollLeft);\n                ignoreChange = false;\n            }\n        }));\n        this._register(this._editors.modified.onDidScrollChange(e => {\n            if (e.scrollLeftChanged && !ignoreChange) {\n                ignoreChange = true;\n                this._editors.original.setScrollLeft(e.scrollLeft);\n                ignoreChange = false;\n            }\n        }));\n        this._originalScrollTop = observableFromEvent(this._editors.original.onDidScrollChange, () => /** @description original.getScrollTop */ this._editors.original.getScrollTop());\n        this._modifiedScrollTop = observableFromEvent(this._editors.modified.onDidScrollChange, () => /** @description modified.getScrollTop */ this._editors.modified.getScrollTop());\n        // origExtraHeight + origOffset - origScrollTop = modExtraHeight + modOffset - modScrollTop\n        // origScrollTop = origExtraHeight + origOffset - modExtraHeight - modOffset + modScrollTop\n        // modScrollTop = modExtraHeight + modOffset - origExtraHeight - origOffset + origScrollTop\n        // origOffset - modOffset = heightOfLines(1..Y) - heightOfLines(1..X)\n        // origScrollTop >= 0, modScrollTop >= 0\n        this._register(autorun(reader => {\n            /** @description update scroll modified */\n            const newScrollTopModified = this._originalScrollTop.read(reader)\n                - (this._originalScrollOffsetAnimated.get() - this._modifiedScrollOffsetAnimated.read(reader))\n                - (this._originalTopPadding.get() - this._modifiedTopPadding.read(reader));\n            if (newScrollTopModified !== this._editors.modified.getScrollTop()) {\n                this._editors.modified.setScrollTop(newScrollTopModified, 1 /* ScrollType.Immediate */);\n            }\n        }));\n        this._register(autorun(reader => {\n            /** @description update scroll original */\n            const newScrollTopOriginal = this._modifiedScrollTop.read(reader)\n                - (this._modifiedScrollOffsetAnimated.get() - this._originalScrollOffsetAnimated.read(reader))\n                - (this._modifiedTopPadding.get() - this._originalTopPadding.read(reader));\n            if (newScrollTopOriginal !== this._editors.original.getScrollTop()) {\n                this._editors.original.setScrollTop(newScrollTopOriginal, 1 /* ScrollType.Immediate */);\n            }\n        }));\n        this._register(autorun(reader => {\n            /** @description update editor top offsets */\n            const m = this._diffModel.read(reader)?.movedTextToCompare.read(reader);\n            let deltaOrigToMod = 0;\n            if (m) {\n                const trueTopOriginal = this._editors.original.getTopForLineNumber(m.lineRangeMapping.original.startLineNumber, true) - this._originalTopPadding.get();\n                const trueTopModified = this._editors.modified.getTopForLineNumber(m.lineRangeMapping.modified.startLineNumber, true) - this._modifiedTopPadding.get();\n                deltaOrigToMod = trueTopModified - trueTopOriginal;\n            }\n            if (deltaOrigToMod > 0) {\n                this._modifiedTopPadding.set(0, undefined);\n                this._originalTopPadding.set(deltaOrigToMod, undefined);\n            }\n            else if (deltaOrigToMod < 0) {\n                this._modifiedTopPadding.set(-deltaOrigToMod, undefined);\n                this._originalTopPadding.set(0, undefined);\n            }\n            else {\n                setTimeout(() => {\n                    this._modifiedTopPadding.set(0, undefined);\n                    this._originalTopPadding.set(0, undefined);\n                }, 400);\n            }\n            if (this._editors.modified.hasTextFocus()) {\n                this._originalScrollOffset.set(this._modifiedScrollOffset.get() - deltaOrigToMod, undefined, true);\n            }\n            else {\n                this._modifiedScrollOffset.set(this._originalScrollOffset.get() + deltaOrigToMod, undefined, true);\n            }\n        }));\n    }\n};\nDiffEditorViewZones = __decorate([\n    __param(8, IClipboardService),\n    __param(9, IContextMenuService)\n], DiffEditorViewZones);\nexport { DiffEditorViewZones };\nfunction computeRangeAlignment(originalEditor, modifiedEditor, diffs, originalEditorAlignmentViewZones, modifiedEditorAlignmentViewZones, innerHunkAlignment) {\n    const originalLineHeightOverrides = new ArrayQueue(getAdditionalLineHeights(originalEditor, originalEditorAlignmentViewZones));\n    const modifiedLineHeightOverrides = new ArrayQueue(getAdditionalLineHeights(modifiedEditor, modifiedEditorAlignmentViewZones));\n    const origLineHeight = originalEditor.getOption(67 /* EditorOption.lineHeight */);\n    const modLineHeight = modifiedEditor.getOption(67 /* EditorOption.lineHeight */);\n    const result = [];\n    let lastOriginalLineNumber = 0;\n    let lastModifiedLineNumber = 0;\n    function handleAlignmentsOutsideOfDiffs(untilOriginalLineNumberExclusive, untilModifiedLineNumberExclusive) {\n        while (true) {\n            let origNext = originalLineHeightOverrides.peek();\n            let modNext = modifiedLineHeightOverrides.peek();\n            if (origNext && origNext.lineNumber >= untilOriginalLineNumberExclusive) {\n                origNext = undefined;\n            }\n            if (modNext && modNext.lineNumber >= untilModifiedLineNumberExclusive) {\n                modNext = undefined;\n            }\n            if (!origNext && !modNext) {\n                break;\n            }\n            const distOrig = origNext ? origNext.lineNumber - lastOriginalLineNumber : Number.MAX_VALUE;\n            const distNext = modNext ? modNext.lineNumber - lastModifiedLineNumber : Number.MAX_VALUE;\n            if (distOrig < distNext) {\n                originalLineHeightOverrides.dequeue();\n                modNext = {\n                    lineNumber: origNext.lineNumber - lastOriginalLineNumber + lastModifiedLineNumber,\n                    heightInPx: 0,\n                };\n            }\n            else if (distOrig > distNext) {\n                modifiedLineHeightOverrides.dequeue();\n                origNext = {\n                    lineNumber: modNext.lineNumber - lastModifiedLineNumber + lastOriginalLineNumber,\n                    heightInPx: 0,\n                };\n            }\n            else {\n                originalLineHeightOverrides.dequeue();\n                modifiedLineHeightOverrides.dequeue();\n            }\n            result.push({\n                originalRange: LineRange.ofLength(origNext.lineNumber, 1),\n                modifiedRange: LineRange.ofLength(modNext.lineNumber, 1),\n                originalHeightInPx: origLineHeight + origNext.heightInPx,\n                modifiedHeightInPx: modLineHeight + modNext.heightInPx,\n                diff: undefined,\n            });\n        }\n    }\n    for (const m of diffs) {\n        const c = m.lineRangeMapping;\n        handleAlignmentsOutsideOfDiffs(c.original.startLineNumber, c.modified.startLineNumber);\n        let first = true;\n        let lastModLineNumber = c.modified.startLineNumber;\n        let lastOrigLineNumber = c.original.startLineNumber;\n        function emitAlignment(origLineNumberExclusive, modLineNumberExclusive, forceAlignment = false) {\n            if (origLineNumberExclusive < lastOrigLineNumber || modLineNumberExclusive < lastModLineNumber) {\n                return;\n            }\n            if (first) {\n                first = false;\n            }\n            else if (!forceAlignment && (origLineNumberExclusive === lastOrigLineNumber || modLineNumberExclusive === lastModLineNumber)) {\n                // This causes a re-alignment of an already aligned line.\n                // However, we don't care for the final alignment.\n                return;\n            }\n            const originalRange = new LineRange(lastOrigLineNumber, origLineNumberExclusive);\n            const modifiedRange = new LineRange(lastModLineNumber, modLineNumberExclusive);\n            if (originalRange.isEmpty && modifiedRange.isEmpty) {\n                return;\n            }\n            const originalAdditionalHeight = originalLineHeightOverrides\n                .takeWhile(v => v.lineNumber < origLineNumberExclusive)\n                ?.reduce((p, c) => p + c.heightInPx, 0) ?? 0;\n            const modifiedAdditionalHeight = modifiedLineHeightOverrides\n                .takeWhile(v => v.lineNumber < modLineNumberExclusive)\n                ?.reduce((p, c) => p + c.heightInPx, 0) ?? 0;\n            result.push({\n                originalRange,\n                modifiedRange,\n                originalHeightInPx: originalRange.length * origLineHeight + originalAdditionalHeight,\n                modifiedHeightInPx: modifiedRange.length * modLineHeight + modifiedAdditionalHeight,\n                diff: m.lineRangeMapping,\n            });\n            lastOrigLineNumber = origLineNumberExclusive;\n            lastModLineNumber = modLineNumberExclusive;\n        }\n        if (innerHunkAlignment) {\n            for (const i of c.innerChanges || []) {\n                if (i.originalRange.startColumn > 1 && i.modifiedRange.startColumn > 1) {\n                    // There is some unmodified text on this line before the diff\n                    emitAlignment(i.originalRange.startLineNumber, i.modifiedRange.startLineNumber);\n                }\n                const originalModel = originalEditor.getModel();\n                // When the diff is invalid, the ranges might be out of bounds (this should be fixed in the diff model by applying edits directly).\n                const maxColumn = i.originalRange.endLineNumber <= originalModel.getLineCount() ? originalModel.getLineMaxColumn(i.originalRange.endLineNumber) : Number.MAX_SAFE_INTEGER;\n                if (i.originalRange.endColumn < maxColumn) {\n                    // // There is some unmodified text on this line after the diff\n                    emitAlignment(i.originalRange.endLineNumber, i.modifiedRange.endLineNumber);\n                }\n            }\n        }\n        emitAlignment(c.original.endLineNumberExclusive, c.modified.endLineNumberExclusive, true);\n        lastOriginalLineNumber = c.original.endLineNumberExclusive;\n        lastModifiedLineNumber = c.modified.endLineNumberExclusive;\n    }\n    handleAlignmentsOutsideOfDiffs(Number.MAX_VALUE, Number.MAX_VALUE);\n    return result;\n}\nfunction getAdditionalLineHeights(editor, viewZonesToIgnore) {\n    const viewZoneHeights = [];\n    const wrappingZoneHeights = [];\n    const hasWrapping = editor.getOption(147 /* EditorOption.wrappingInfo */).wrappingColumn !== -1;\n    const coordinatesConverter = editor._getViewModel().coordinatesConverter;\n    const editorLineHeight = editor.getOption(67 /* EditorOption.lineHeight */);\n    if (hasWrapping) {\n        for (let i = 1; i <= editor.getModel().getLineCount(); i++) {\n            const lineCount = coordinatesConverter.getModelLineViewLineCount(i);\n            if (lineCount > 1) {\n                wrappingZoneHeights.push({ lineNumber: i, heightInPx: editorLineHeight * (lineCount - 1) });\n            }\n        }\n    }\n    for (const w of editor.getWhitespaces()) {\n        if (viewZonesToIgnore.has(w.id)) {\n            continue;\n        }\n        const modelLineNumber = w.afterLineNumber === 0 ? 0 : coordinatesConverter.convertViewPositionToModelPosition(new Position(w.afterLineNumber, 1)).lineNumber;\n        viewZoneHeights.push({ lineNumber: modelLineNumber, heightInPx: w.height });\n    }\n    const result = joinCombine(viewZoneHeights, wrappingZoneHeights, v => v.lineNumber, (v1, v2) => ({ lineNumber: v1.lineNumber, heightInPx: v1.heightInPx + v2.heightInPx }));\n    return result;\n}\nexport function allowsTrueInlineDiffRendering(mapping) {\n    if (!mapping.innerChanges) {\n        return false;\n    }\n    return mapping.innerChanges.every(c => (rangeIsSingleLine(c.modifiedRange) && rangeIsSingleLine(c.originalRange))\n        || c.originalRange.equalsRange(new Range(1, 1, 1, 1)));\n}\nfunction rangeIsSingleLine(range) {\n    return range.startLineNumber === range.endLineNumber;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEL,CAAC,GAAGI,OAAO,CAACC,QAAQ,CAACZ,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAC,CAAC,EAAEN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACM,cAAc,CAACb,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD,IAAIQ,OAAO,GAAI,IAAI,IAAI,IAAI,CAACA,OAAO,IAAK,UAAUC,UAAU,EAAEC,SAAS,EAAE;EACrE,OAAO,UAAUhB,MAAM,EAAEC,GAAG,EAAE;IAAEe,SAAS,CAAChB,MAAM,EAAEC,GAAG,EAAEc,UAAU,CAAC;EAAE,CAAC;AACzE,CAAC;AACD,SAASE,CAAC,EAAEC,qBAAqB,QAAQ,uCAAuC;AAChF,SAASC,UAAU,QAAQ,yCAAyC;AACpE,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,SAASC,OAAO,QAAQ,2CAA2C;AACnE,SAASC,UAAU,EAAEC,eAAe,QAAQ,4CAA4C;AACxF,SAASC,OAAO,EAAEC,OAAO,EAAEC,gBAAgB,EAAEC,mBAAmB,EAAEC,eAAe,QAAQ,6CAA6C;AACtI,SAASC,SAAS,QAAQ,4CAA4C;AACtE,SAASC,eAAe,QAAQ,wCAAwC;AACxE,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,qCAAqC;AAC1F,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,2BAA2B,QAAQ,kCAAkC;AAC9E,SAASC,UAAU,EAAEC,aAAa,EAAEC,WAAW,QAAQ,kBAAkB;AACzE,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,gBAAgB;AAChE,SAASC,SAAS,QAAQ,yCAAyC;AACnE,SAASC,QAAQ,QAAQ,wCAAwC;AACjE,SAASC,gBAAgB,QAAQ,oCAAoC;AACrE,SAASC,iBAAiB,QAAQ,iEAAiE;AACnG,SAASC,mBAAmB,QAAQ,+DAA+D;AACnG,SAASC,KAAK,QAAQ,qCAAqC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,MAAMA,mBAAmB,SAASzB,UAAU,CAAC;EACnE0B,WAAWA,CAACC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,iBAAiB,EAAEC,6BAA6B,EAAEC,sBAAsB,EAAEC,qBAAqB,EAAEC,iBAAiB,EAAEC,mBAAmB,EAAE;IAChM,KAAK,CAAC,CAAC;IACP,IAAI,CAACT,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,6BAA6B,GAAGA,6BAA6B;IAClE,IAAI,CAACC,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAACC,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,mBAAmB,GAAG/B,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;IACnD,IAAI,CAACgC,qBAAqB,GAAGhC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;IACrD,IAAI,CAACiC,6BAA6B,GAAGtB,kBAAkB,CAAC,IAAI,CAACU,aAAa,EAAE,IAAI,CAACW,qBAAqB,EAAE,IAAI,CAACE,MAAM,CAAC;IACpH,IAAI,CAACC,mBAAmB,GAAGnC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;IACnD,IAAI,CAACoC,qBAAqB,GAAGpC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;IACrD,IAAI,CAACqC,6BAA6B,GAAG1B,kBAAkB,CAAC,IAAI,CAACU,aAAa,EAAE,IAAI,CAACe,qBAAqB,EAAE,IAAI,CAACF,MAAM,CAAC;IACpH,MAAMI,KAAK,GAAGtC,eAAe,CAAC,2BAA2B,EAAE,CAAC,CAAC;IAC7D,MAAMuC,iBAAiB,GAAG,IAAI,CAACC,SAAS,CAAC,IAAIhD,gBAAgB,CAAC,MAAM;MAChE8C,KAAK,CAACG,GAAG,CAACH,KAAK,CAACI,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEC,SAAS,CAAC;IACzC,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,IAAI,CAACH,SAAS,CAAC,IAAI,CAAClB,QAAQ,CAACsB,QAAQ,CAACC,oBAAoB,CAAEC,KAAK,IAAK;MAAE,IAAI,CAAC,IAAI,CAACpB,6BAA6B,CAAC,CAAC,EAAE;QAC/Ga,iBAAiB,CAACQ,QAAQ,CAAC,CAAC;MAChC;IAAE,CAAC,CAAC,CAAC;IACL,IAAI,CAACP,SAAS,CAAC,IAAI,CAAClB,QAAQ,CAAC0B,QAAQ,CAACH,oBAAoB,CAAEC,KAAK,IAAK;MAAE,IAAI,CAAC,IAAI,CAACpB,6BAA6B,CAAC,CAAC,EAAE;QAC/Ga,iBAAiB,CAACQ,QAAQ,CAAC,CAAC;MAChC;IAAE,CAAC,CAAC,CAAC;IACL,IAAI,CAACP,SAAS,CAAC,IAAI,CAAClB,QAAQ,CAACsB,QAAQ,CAACK,wBAAwB,CAAEC,IAAI,IAAK;MACrE,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,+BAA+B,CAAC,IAAID,IAAI,CAACC,UAAU,CAAC,EAAE,CAAC,6BAA6B,CAAC,EAAE;QAC3GZ,iBAAiB,CAACQ,QAAQ,CAAC,CAAC;MAChC;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,CAACP,SAAS,CAAC,IAAI,CAAClB,QAAQ,CAAC0B,QAAQ,CAACC,wBAAwB,CAAEC,IAAI,IAAK;MACrE,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,+BAA+B,CAAC,IAAID,IAAI,CAACC,UAAU,CAAC,EAAE,CAAC,6BAA6B,CAAC,EAAE;QAC3GZ,iBAAiB,CAACQ,QAAQ,CAAC,CAAC;MAChC;IACJ,CAAC,CAAC,CAAC;IACH,MAAMK,kCAAkC,GAAG,IAAI,CAAC7B,UAAU,CAAC8B,GAAG,CAACC,CAAC,IAAIA,CAAC,GAAGvD,mBAAmB,CAAC,IAAI,EAAEuD,CAAC,CAACC,KAAK,CAACX,QAAQ,CAACY,iBAAiB,EAAE,MAAMF,CAAC,CAACC,KAAK,CAACX,QAAQ,CAACa,YAAY,CAACC,2BAA2B,KAAK,CAAC,CAAC,2CAA2C,CAAC,GAAGf,SAAS,CAAC,CAACU,GAAG,CAAC,CAACC,CAAC,EAAEK,MAAM,KAAKL,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEM,IAAI,CAACD,MAAM,CAAC,CAAC;IACzS,MAAME,UAAU,GAAGhE,OAAO,CAAE8D,MAAM,IAAK;MACnC;MACA,MAAMG,SAAS,GAAG,IAAI,CAACvC,UAAU,CAACqC,IAAI,CAACD,MAAM,CAAC;MAC9C,MAAMI,IAAI,GAAGD,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEC,IAAI,CAACH,IAAI,CAACD,MAAM,CAAC;MACzC,IAAI,CAACG,SAAS,IAAI,CAACC,IAAI,EAAE;QACrB,OAAO,IAAI;MACf;MACAzB,KAAK,CAACsB,IAAI,CAACD,MAAM,CAAC;MAClB,MAAMK,gBAAgB,GAAG,IAAI,CAACxC,QAAQ,CAACwC,gBAAgB,CAACJ,IAAI,CAACD,MAAM,CAAC;MACpE,MAAMM,kBAAkB,GAAGD,gBAAgB;MAC3C,OAAOE,qBAAqB,CAAC,IAAI,CAAC5C,QAAQ,CAACsB,QAAQ,EAAE,IAAI,CAACtB,QAAQ,CAAC0B,QAAQ,EAAEe,IAAI,CAACI,QAAQ,EAAE,IAAI,CAACxC,sBAAsB,EAAE,IAAI,CAACC,qBAAqB,EAAEqC,kBAAkB,CAAC;IAC5K,CAAC,CAAC;IACF,MAAMG,yBAAyB,GAAGvE,OAAO,CAAE8D,MAAM,IAAK;MAAA,IAAAU,qBAAA;MAClD;MACA,MAAMC,eAAe,IAAAD,qBAAA,GAAG,IAAI,CAAC9C,UAAU,CAACqC,IAAI,CAACD,MAAM,CAAC,cAAAU,qBAAA,uBAA5BA,qBAAA,CAA8BE,kBAAkB,CAACX,IAAI,CAACD,MAAM,CAAC;MACrF,IAAI,CAACW,eAAe,EAAE;QAClB,OAAO,IAAI;MACf;MACAhC,KAAK,CAACsB,IAAI,CAACD,MAAM,CAAC;MAClB,MAAMQ,QAAQ,GAAGG,eAAe,CAACE,OAAO,CAACnB,GAAG,CAAC9E,CAAC,IAAI,IAAI+B,WAAW,CAAC/B,CAAC,CAAC,CAAC;MACrE;MACA,OAAO2F,qBAAqB,CAAC,IAAI,CAAC5C,QAAQ,CAACsB,QAAQ,EAAE,IAAI,CAACtB,QAAQ,CAAC0B,QAAQ,EAAEmB,QAAQ,EAAE,IAAI,CAACxC,sBAAsB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;IACzJ,CAAC,CAAC;IACF,SAAS6C,kBAAkBA,CAAA,EAAG;MAC1B,MAAM/F,CAAC,GAAGgG,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACvCjG,CAAC,CAACkG,SAAS,GAAG,eAAe;MAC7B,OAAOlG,CAAC;IACZ;IACA,MAAMmG,6BAA6B,GAAG,IAAI,CAACrC,SAAS,CAAC,IAAI7C,eAAe,CAAC,CAAC,CAAC;IAC3E,IAAI,CAACmF,SAAS,GAAGhF,gBAAgB,CAAC,IAAI,EAAE,CAAC6D,MAAM,EAAEoB,KAAK,KAAK;MAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACvDT,6BAA6B,CAACU,KAAK,CAAC,CAAC;MACrC,MAAMC,aAAa,GAAG3B,UAAU,CAACD,IAAI,CAACD,MAAM,CAAC,IAAI,EAAE;MACnD,MAAM8B,aAAa,GAAG,EAAE;MACxB,MAAMC,YAAY,GAAG,EAAE;MACvB,MAAMC,qBAAqB,GAAG,IAAI,CAACxD,mBAAmB,CAACyB,IAAI,CAACD,MAAM,CAAC;MACnE,IAAIgC,qBAAqB,GAAG,CAAC,EAAE;QAC3BD,YAAY,CAACE,IAAI,CAAC;UACdC,eAAe,EAAE,CAAC;UAClBC,OAAO,EAAEpB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;UACtCoB,UAAU,EAAEJ,qBAAqB;UACjCK,iBAAiB,EAAE,IAAI;UACvBC,iBAAiB,EAAE;QACvB,CAAC,CAAC;MACN;MACA,MAAMC,qBAAqB,GAAG,IAAI,CAACnE,mBAAmB,CAAC6B,IAAI,CAACD,MAAM,CAAC;MACnE,IAAIuC,qBAAqB,GAAG,CAAC,EAAE;QAC3BT,aAAa,CAACG,IAAI,CAAC;UACfC,eAAe,EAAE,CAAC;UAClBC,OAAO,EAAEpB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;UACtCoB,UAAU,EAAEG,qBAAqB;UACjCF,iBAAiB,EAAE,IAAI;UACvBC,iBAAiB,EAAE;QACvB,CAAC,CAAC;MACN;MACA,MAAMjC,gBAAgB,GAAG,IAAI,CAACxC,QAAQ,CAACwC,gBAAgB,CAACJ,IAAI,CAACD,MAAM,CAAC;MACpE,MAAMwC,6BAA6B,GAAG,CAACnC,gBAAgB,IAAAgB,qBAAA,GAAG,IAAI,CAAC1D,QAAQ,CAAC0B,QAAQ,CAACoD,aAAa,CAAC,CAAC,cAAApB,qBAAA,uBAAtCA,qBAAA,CAAwCqB,wBAAwB,CAAC,CAAC,GAAG1D,SAAS;MACxI,IAAIwD,6BAA6B,EAAE;QAC/B,MAAMG,aAAa,GAAG,IAAI,CAAChF,QAAQ,CAACsB,QAAQ,CAAC2D,QAAQ,CAAC,CAAC;QACvD,KAAK,MAAMC,CAAC,IAAIhB,aAAa,EAAE;UAC3B,IAAIgB,CAAC,CAACzC,IAAI,EAAE;YACR,KAAK,IAAI/E,CAAC,GAAGwH,CAAC,CAACC,aAAa,CAACC,eAAe,EAAE1H,CAAC,GAAGwH,CAAC,CAACC,aAAa,CAACE,sBAAsB,EAAE3H,CAAC,EAAE,EAAE;cAC3F;cACA;cACA;cACA,IAAIA,CAAC,GAAGsH,aAAa,CAACM,YAAY,CAAC,CAAC,EAAE;gBAClC,OAAO;kBAAEC,IAAI,EAAEpB,aAAa;kBAAEqB,GAAG,EAAEpB;gBAAa,CAAC;cACrD;cACAS,6BAA6B,aAA7BA,6BAA6B,eAA7BA,6BAA6B,CAAEY,UAAU,CAACT,aAAa,CAACU,cAAc,CAAChI,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;YAC1F;UACJ;QACJ;MACJ;MACA,MAAMiI,aAAa,IAAAhC,qBAAA,GAAGkB,6BAA6B,aAA7BA,6BAA6B,uBAA7BA,6BAA6B,CAAEe,QAAQ,CAAC,CAAC,cAAAjC,qBAAA,cAAAA,qBAAA,GAAI,EAAE;MACrE,IAAIkC,gBAAgB,GAAG,CAAC;MACxB,MAAMC,aAAa,GAAG,IAAI,CAAC9F,QAAQ,CAAC0B,QAAQ,CAACqE,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC;MACxF,MAAM/C,eAAe,IAAAY,sBAAA,GAAG,IAAI,CAAC3D,UAAU,CAACqC,IAAI,CAACD,MAAM,CAAC,cAAAuB,sBAAA,uBAA5BA,sBAAA,CAA8BX,kBAAkB,CAACX,IAAI,CAACD,MAAM,CAAC;MACrF,MAAM2D,yBAAyB,IAAAnC,qBAAA,IAAAC,sBAAA,GAAG,IAAI,CAAC9D,QAAQ,CAACsB,QAAQ,CAAC2D,QAAQ,CAAC,CAAC,cAAAnB,sBAAA,uBAAjCA,sBAAA,CAAmCkC,yBAAyB,CAAC,CAAC,cAAAnC,qBAAA,cAAAA,qBAAA,GAAI,KAAK;MACzG,MAAMoC,eAAe,IAAAlC,sBAAA,IAAAC,sBAAA,GAAG,IAAI,CAAChE,QAAQ,CAACsB,QAAQ,CAAC2D,QAAQ,CAAC,CAAC,cAAAjB,sBAAA,uBAAjCA,sBAAA,CAAmCiC,eAAe,CAAC,CAAC,cAAAlC,sBAAA,cAAAA,sBAAA,GAAI,KAAK;MACrF,MAAMmC,aAAa,GAAG/G,aAAa,CAACgH,UAAU,CAAC,IAAI,CAACnG,QAAQ,CAAC0B,QAAQ,CAAC;MACtE,KAAK,MAAMwD,CAAC,IAAIhB,aAAa,EAAE;QAC3B,IAAIgB,CAAC,CAACzC,IAAI,IAAI,CAACC,gBAAgB,KAAK,CAAC,IAAI,CAACxC,QAAQ,CAACkG,0BAA0B,CAAC9D,IAAI,CAACD,MAAM,CAAC,IAAI,CAACgE,6BAA6B,CAACnB,CAAC,CAACzC,IAAI,CAAC,CAAC,EAAE;UACnI,IAAI,CAACyC,CAAC,CAACC,aAAa,CAACmB,OAAO,EAAE;YAC1BxE,kCAAkC,CAACQ,IAAI,CAACD,MAAM,CAAC,CAAC,CAAC;YACjD,MAAMkE,kBAAkB,GAAGnD,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;YACxDkD,kBAAkB,CAACC,SAAS,CAACC,GAAG,CAAC,YAAY,EAAE,aAAa,EAAE,0BAA0B,CAAC;YACzF,MAAMzB,aAAa,GAAG,IAAI,CAAChF,QAAQ,CAACsB,QAAQ,CAAC2D,QAAQ,CAAC,CAAC;YACvD;YACA;YACA;YACA,IAAIC,CAAC,CAACC,aAAa,CAACE,sBAAsB,GAAG,CAAC,GAAGL,aAAa,CAACM,YAAY,CAAC,CAAC,EAAE;cAC3E,OAAO;gBAAEC,IAAI,EAAEpB,aAAa;gBAAEqB,GAAG,EAAEpB;cAAa,CAAC;YACrD;YACA,MAAMsC,MAAM,GAAG,IAAIxH,UAAU,CAACgG,CAAC,CAACC,aAAa,CAACwB,cAAc,CAACC,CAAC,IAAI5B,aAAa,CAAC7C,YAAY,CAAC0E,aAAa,CAACD,CAAC,CAAC,CAAC,EAAE1B,CAAC,CAACC,aAAa,CAACwB,cAAc,CAACG,CAAC,IAAInB,aAAa,CAACE,gBAAgB,EAAE,CAAC,CAAC,EAAEG,yBAAyB,EAAEC,eAAe,CAAC;YACnO,MAAMc,WAAW,GAAG,EAAE;YACtB,KAAK,MAAMrJ,CAAC,IAAIwH,CAAC,CAACzC,IAAI,CAACuE,YAAY,IAAI,EAAE,EAAE;cACvCD,WAAW,CAACzC,IAAI,CAAC,IAAI7E,gBAAgB,CAAC/B,CAAC,CAACyH,aAAa,CAAC8B,KAAK,CAAC,EAAE/B,CAAC,CAACzC,IAAI,CAACnB,QAAQ,CAAC8D,eAAe,GAAG,CAAC,CAAC,CAAC,EAAEtG,oBAAoB,CAACwE,SAAS,EAAE,CAAC,CAAC,kCAAkC,CAAC,CAAC;YAC/K;YACA,MAAM4D,MAAM,GAAG9H,WAAW,CAACsH,MAAM,EAAER,aAAa,EAAEa,WAAW,EAAER,kBAAkB,CAAC;YAClF,MAAMY,aAAa,GAAG/D,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;YACnD8D,aAAa,CAAC7D,SAAS,GAAG,iCAAiC;YAC3DzE,aAAa,CAACsI,aAAa,EAAEjB,aAAa,CAACkB,QAAQ,CAAC;YACpD,IAAI,IAAI,CAAClH,QAAQ,CAACmH,gBAAgB,CAAC/E,IAAI,CAACD,MAAM,CAAC,EAAE;cAC7C,KAAK,IAAI3E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwJ,MAAM,CAACI,aAAa,EAAE5J,CAAC,EAAE,EAAE;gBAC3C,MAAM6J,aAAa,GAAGnE,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;gBACnDkE,aAAa,CAACjE,SAAS,kBAAAkE,MAAA,CAAkB7I,SAAS,CAAC8I,WAAW,CAAC1I,cAAc,CAAC,CAAE;gBAChFwI,aAAa,CAACG,YAAY,CAAC,OAAO,2BAAAF,MAAA,CAA2B9J,CAAC,GAAGoI,aAAa,eAAA0B,MAAA,CAAYtB,aAAa,CAACyB,oBAAoB,gBAAAH,MAAA,CAAa1B,aAAa,gBAAa,CAAC;gBACpKqB,aAAa,CAACS,WAAW,CAACL,aAAa,CAAC;cAC5C;YACJ;YACA,IAAIM,MAAM,GAAGxG,SAAS;YACtBkC,6BAA6B,CAACkD,GAAG,CAAC,IAAIxH,2BAA2B,CAAC,MAAML,eAAe,CAACiJ,MAAM,CAAC,EAAEV,aAAa,EAAE,IAAI,CAACnH,QAAQ,CAAC0B,QAAQ,EAAEwD,CAAC,CAACzC,IAAI,EAAE,IAAI,CAACtC,iBAAiB,EAAE+G,MAAM,CAACY,cAAc,EAAE,IAAI,CAAC9H,QAAQ,CAACsB,QAAQ,CAAC2D,QAAQ,CAAC,CAAC,EAAE,IAAI,CAACzE,mBAAmB,EAAE,IAAI,CAACD,iBAAiB,CAAC,CAAC;YACpR,KAAK,IAAI7C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwJ,MAAM,CAACY,cAAc,CAAC3K,MAAM,EAAEO,CAAC,EAAE,EAAE;cACnD,MAAMqK,KAAK,GAAGb,MAAM,CAACY,cAAc,CAACpK,CAAC,CAAC;cACtC;cACA,IAAIqK,KAAK,GAAG,CAAC,EAAE;gBACX5D,aAAa,CAACG,IAAI,CAAC;kBACfC,eAAe,EAAEW,CAAC,CAACC,aAAa,CAACC,eAAe,GAAG1H,CAAC;kBACpD8G,OAAO,EAAErB,kBAAkB,CAAC,CAAC;kBAC7BsB,UAAU,EAAE,CAACsD,KAAK,GAAG,CAAC,IAAIjC,aAAa;kBACvCpB,iBAAiB,EAAE,IAAI;kBACvBC,iBAAiB,EAAE;gBACvB,CAAC,CAAC;cACN;YACJ;YACAP,YAAY,CAACE,IAAI,CAAC;cACdC,eAAe,EAAEW,CAAC,CAAC8C,aAAa,CAAC5C,eAAe,GAAG,CAAC;cACpDZ,OAAO,EAAE+B,kBAAkB;cAC3B9B,UAAU,EAAEyC,MAAM,CAACI,aAAa,GAAGxB,aAAa;cAChDmC,YAAY,EAAEf,MAAM,CAACe,YAAY;cACjCd,aAAa;cACbe,SAASA,CAACC,EAAE,EAAE;gBAAEN,MAAM,GAAGM,EAAE;cAAE,CAAC;cAC9BzD,iBAAiB,EAAE,IAAI;cACvBC,iBAAiB,EAAE;YACvB,CAAC,CAAC;UACN;UACA,MAAMwC,aAAa,GAAG/D,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;UACnD8D,aAAa,CAAC7D,SAAS,GAAG,eAAe;UACzCa,aAAa,CAACG,IAAI,CAAC;YACfC,eAAe,EAAEW,CAAC,CAACC,aAAa,CAACE,sBAAsB,GAAG,CAAC;YAC3Db,OAAO,EAAErB,kBAAkB,CAAC,CAAC;YAC7BsB,UAAU,EAAES,CAAC,CAACkD,kBAAkB;YAChCjB,aAAa;YACbzC,iBAAiB,EAAE,IAAI;YACvBC,iBAAiB,EAAE;UACvB,CAAC,CAAC;QACN,CAAC,MACI;UACD,MAAMsC,KAAK,GAAG/B,CAAC,CAACkD,kBAAkB,GAAGlD,CAAC,CAACmD,kBAAkB;UACzD,IAAIpB,KAAK,GAAG,CAAC,EAAE;YACX,IAAIjE,eAAe,aAAfA,eAAe,eAAfA,eAAe,CAAEsF,gBAAgB,CAAChH,QAAQ,CAAC2F,KAAK,CAAC,CAAC,CAAC,CAAC,CAACsB,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACtD,CAAC,CAACC,aAAa,CAACE,sBAAsB,GAAG,CAAC,CAAC,EAAE;cAC1H;YACJ;YACAlB,aAAa,CAACG,IAAI,CAAC;cACfC,eAAe,EAAEW,CAAC,CAACC,aAAa,CAACE,sBAAsB,GAAG,CAAC;cAC3Db,OAAO,EAAErB,kBAAkB,CAAC,CAAC;cAC7BsB,UAAU,EAAEwC,KAAK;cACjBvC,iBAAiB,EAAE,IAAI;cACvBC,iBAAiB,EAAE;YACvB,CAAC,CAAC;UACN,CAAC,MACI;YACD,IAAI3B,eAAe,aAAfA,eAAe,eAAfA,eAAe,CAAEsF,gBAAgB,CAAC5G,QAAQ,CAACuF,KAAK,CAAC,CAAC,CAAC,CAAC,CAACsB,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAACtD,CAAC,CAAC8C,aAAa,CAAC3C,sBAAsB,GAAG,CAAC,CAAC,EAAE;cAC1H;YACJ;YACA,SAASoD,yBAAyBA,CAAA,EAAG;cACjC,MAAMC,KAAK,GAAGtF,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;cAC3CqF,KAAK,CAACpF,SAAS,GAAG,sBAAsB,GAAG3E,SAAS,CAAC8I,WAAW,CAACtJ,OAAO,CAACwK,UAAU,CAAC;cACpFlF,KAAK,CAACgD,GAAG,CAACzI,qBAAqB,CAAC0K,KAAK,EAAE,WAAW,EAAEE,CAAC,IAAIA,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC,CAAC;cAC9EpF,KAAK,CAACgD,GAAG,CAACzI,qBAAqB,CAAC0K,KAAK,EAAE,OAAO,EAAEE,CAAC,IAAI;gBACjDA,CAAC,CAACC,eAAe,CAAC,CAAC;gBACnB1I,iBAAiB,CAAC2I,MAAM,CAAC5D,CAAC,CAACzC,IAAI,CAAC;cACpC,CAAC,CAAC,CAAC;cACH,OAAO1E,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE2K,KAAK,CAAC;YAC9B;YACA,IAAIvB,aAAa,GAAG9F,SAAS;YAC7B,IAAI6D,CAAC,CAACzC,IAAI,IAAIyC,CAAC,CAACzC,IAAI,CAACf,QAAQ,CAAC4E,OAAO,IAAI,IAAI,CAACpG,QAAQ,CAAC6I,2BAA2B,CAACzG,IAAI,CAACD,MAAM,CAAC,EAAE;cAC7F8E,aAAa,GAAGsB,yBAAyB,CAAC,CAAC;YAC/C;YACArE,YAAY,CAACE,IAAI,CAAC;cACdC,eAAe,EAAEW,CAAC,CAAC8C,aAAa,CAAC3C,sBAAsB,GAAG,CAAC;cAC3Db,OAAO,EAAErB,kBAAkB,CAAC,CAAC;cAC7BsB,UAAU,EAAE,CAACwC,KAAK;cAClBE,aAAa;cACbzC,iBAAiB,EAAE,IAAI;cACvBC,iBAAiB,EAAE;YACvB,CAAC,CAAC;UACN;QACJ;MACJ;MACA,KAAK,MAAMO,CAAC,KAAA8D,qBAAA,GAAIlG,yBAAyB,CAACR,IAAI,CAACD,MAAM,CAAC,cAAA2G,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EAAE;QAAA,IAAAA,qBAAA;QAC1D,IAAI,EAAChG,eAAe,aAAfA,eAAe,eAAfA,eAAe,CAAEsF,gBAAgB,CAAChH,QAAQ,CAAC2H,SAAS,CAAC/D,CAAC,CAACC,aAAa,CAAC,KACnE,EAACnC,eAAe,aAAfA,eAAe,eAAfA,eAAe,CAAEsF,gBAAgB,CAAC5G,QAAQ,CAACuH,SAAS,CAAC/D,CAAC,CAAC8C,aAAa,CAAC,GAAE;UAC3E;UACA;QACJ;QACA,MAAMf,KAAK,GAAG/B,CAAC,CAACkD,kBAAkB,GAAGlD,CAAC,CAACmD,kBAAkB;QACzD,IAAIpB,KAAK,GAAG,CAAC,EAAE;UACX9C,aAAa,CAACG,IAAI,CAAC;YACfC,eAAe,EAAEW,CAAC,CAACC,aAAa,CAACE,sBAAsB,GAAG,CAAC;YAC3Db,OAAO,EAAErB,kBAAkB,CAAC,CAAC;YAC7BsB,UAAU,EAAEwC,KAAK;YACjBvC,iBAAiB,EAAE,IAAI;YACvBC,iBAAiB,EAAE;UACvB,CAAC,CAAC;QACN,CAAC,MACI;UACDP,YAAY,CAACE,IAAI,CAAC;YACdC,eAAe,EAAEW,CAAC,CAAC8C,aAAa,CAAC3C,sBAAsB,GAAG,CAAC;YAC3Db,OAAO,EAAErB,kBAAkB,CAAC,CAAC;YAC7BsB,UAAU,EAAE,CAACwC,KAAK;YAClBvC,iBAAiB,EAAE,IAAI;YACvBC,iBAAiB,EAAE;UACvB,CAAC,CAAC;QACN;MACJ;MACA,OAAO;QAAEY,IAAI,EAAEpB,aAAa;QAAEqB,GAAG,EAAEpB;MAAa,CAAC;IACrD,CAAC,CAAC;IACF,IAAI8E,YAAY,GAAG,KAAK;IACxB,IAAI,CAAChI,SAAS,CAAC,IAAI,CAAClB,QAAQ,CAACsB,QAAQ,CAAC6H,iBAAiB,CAACP,CAAC,IAAI;MACzD,IAAIA,CAAC,CAACQ,iBAAiB,IAAI,CAACF,YAAY,EAAE;QACtCA,YAAY,GAAG,IAAI;QACnB,IAAI,CAAClJ,QAAQ,CAAC0B,QAAQ,CAAC2H,aAAa,CAACT,CAAC,CAACU,UAAU,CAAC;QAClDJ,YAAY,GAAG,KAAK;MACxB;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,CAAChI,SAAS,CAAC,IAAI,CAAClB,QAAQ,CAAC0B,QAAQ,CAACyH,iBAAiB,CAACP,CAAC,IAAI;MACzD,IAAIA,CAAC,CAACQ,iBAAiB,IAAI,CAACF,YAAY,EAAE;QACtCA,YAAY,GAAG,IAAI;QACnB,IAAI,CAAClJ,QAAQ,CAACsB,QAAQ,CAAC+H,aAAa,CAACT,CAAC,CAACU,UAAU,CAAC;QAClDJ,YAAY,GAAG,KAAK;MACxB;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,CAACK,kBAAkB,GAAG9K,mBAAmB,CAAC,IAAI,CAACuB,QAAQ,CAACsB,QAAQ,CAAC6H,iBAAiB,EAAE,MAAM,yCAA0C,IAAI,CAACnJ,QAAQ,CAACsB,QAAQ,CAACkI,YAAY,CAAC,CAAC,CAAC;IAC9K,IAAI,CAACC,kBAAkB,GAAGhL,mBAAmB,CAAC,IAAI,CAACuB,QAAQ,CAAC0B,QAAQ,CAACyH,iBAAiB,EAAE,MAAM,yCAA0C,IAAI,CAACnJ,QAAQ,CAAC0B,QAAQ,CAAC8H,YAAY,CAAC,CAAC,CAAC;IAC9K;IACA;IACA;IACA;IACA;IACA,IAAI,CAACtI,SAAS,CAAC5C,OAAO,CAAC+D,MAAM,IAAI;MAC7B;MACA,MAAMqH,oBAAoB,GAAG,IAAI,CAACH,kBAAkB,CAACjH,IAAI,CAACD,MAAM,CAAC,IAC1D,IAAI,CAAC1B,6BAA6B,CAACS,GAAG,CAAC,CAAC,GAAG,IAAI,CAACL,6BAA6B,CAACuB,IAAI,CAACD,MAAM,CAAC,CAAC,IAC3F,IAAI,CAAC5B,mBAAmB,CAACW,GAAG,CAAC,CAAC,GAAG,IAAI,CAACP,mBAAmB,CAACyB,IAAI,CAACD,MAAM,CAAC,CAAC;MAC9E,IAAIqH,oBAAoB,KAAK,IAAI,CAAC1J,QAAQ,CAAC0B,QAAQ,CAAC8H,YAAY,CAAC,CAAC,EAAE;QAChE,IAAI,CAACxJ,QAAQ,CAAC0B,QAAQ,CAACiI,YAAY,CAACD,oBAAoB,EAAE,CAAC,CAAC,0BAA0B,CAAC;MAC3F;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,CAACxI,SAAS,CAAC5C,OAAO,CAAC+D,MAAM,IAAI;MAC7B;MACA,MAAMuH,oBAAoB,GAAG,IAAI,CAACH,kBAAkB,CAACnH,IAAI,CAACD,MAAM,CAAC,IAC1D,IAAI,CAACtB,6BAA6B,CAACK,GAAG,CAAC,CAAC,GAAG,IAAI,CAACT,6BAA6B,CAAC2B,IAAI,CAACD,MAAM,CAAC,CAAC,IAC3F,IAAI,CAACxB,mBAAmB,CAACO,GAAG,CAAC,CAAC,GAAG,IAAI,CAACX,mBAAmB,CAAC6B,IAAI,CAACD,MAAM,CAAC,CAAC;MAC9E,IAAIuH,oBAAoB,KAAK,IAAI,CAAC5J,QAAQ,CAACsB,QAAQ,CAACkI,YAAY,CAAC,CAAC,EAAE;QAChE,IAAI,CAACxJ,QAAQ,CAACsB,QAAQ,CAACqI,YAAY,CAACC,oBAAoB,EAAE,CAAC,CAAC,0BAA0B,CAAC;MAC3F;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,CAAC1I,SAAS,CAAC5C,OAAO,CAAC+D,MAAM,IAAI;MAAA,IAAAwH,sBAAA;MAC7B;MACA,MAAM7H,CAAC,IAAA6H,sBAAA,GAAG,IAAI,CAAC5J,UAAU,CAACqC,IAAI,CAACD,MAAM,CAAC,cAAAwH,sBAAA,uBAA5BA,sBAAA,CAA8B5G,kBAAkB,CAACX,IAAI,CAACD,MAAM,CAAC;MACvE,IAAIyH,cAAc,GAAG,CAAC;MACtB,IAAI9H,CAAC,EAAE;QACH,MAAM+H,eAAe,GAAG,IAAI,CAAC/J,QAAQ,CAACsB,QAAQ,CAAC0I,mBAAmB,CAAChI,CAAC,CAACsG,gBAAgB,CAAChH,QAAQ,CAAC8D,eAAe,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC3E,mBAAmB,CAACW,GAAG,CAAC,CAAC;QACtJ,MAAM6I,eAAe,GAAG,IAAI,CAACjK,QAAQ,CAAC0B,QAAQ,CAACsI,mBAAmB,CAAChI,CAAC,CAACsG,gBAAgB,CAAC5G,QAAQ,CAAC0D,eAAe,EAAE,IAAI,CAAC,GAAG,IAAI,CAACvE,mBAAmB,CAACO,GAAG,CAAC,CAAC;QACtJ0I,cAAc,GAAGG,eAAe,GAAGF,eAAe;MACtD;MACA,IAAID,cAAc,GAAG,CAAC,EAAE;QACpB,IAAI,CAACjJ,mBAAmB,CAACM,GAAG,CAAC,CAAC,EAAEE,SAAS,CAAC;QAC1C,IAAI,CAACZ,mBAAmB,CAACU,GAAG,CAAC2I,cAAc,EAAEzI,SAAS,CAAC;MAC3D,CAAC,MACI,IAAIyI,cAAc,GAAG,CAAC,EAAE;QACzB,IAAI,CAACjJ,mBAAmB,CAACM,GAAG,CAAC,CAAC2I,cAAc,EAAEzI,SAAS,CAAC;QACxD,IAAI,CAACZ,mBAAmB,CAACU,GAAG,CAAC,CAAC,EAAEE,SAAS,CAAC;MAC9C,CAAC,MACI;QACD6I,UAAU,CAAC,MAAM;UACb,IAAI,CAACrJ,mBAAmB,CAACM,GAAG,CAAC,CAAC,EAAEE,SAAS,CAAC;UAC1C,IAAI,CAACZ,mBAAmB,CAACU,GAAG,CAAC,CAAC,EAAEE,SAAS,CAAC;QAC9C,CAAC,EAAE,GAAG,CAAC;MACX;MACA,IAAI,IAAI,CAACrB,QAAQ,CAAC0B,QAAQ,CAACyI,YAAY,CAAC,CAAC,EAAE;QACvC,IAAI,CAACzJ,qBAAqB,CAACS,GAAG,CAAC,IAAI,CAACL,qBAAqB,CAACM,GAAG,CAAC,CAAC,GAAG0I,cAAc,EAAEzI,SAAS,EAAE,IAAI,CAAC;MACtG,CAAC,MACI;QACD,IAAI,CAACP,qBAAqB,CAACK,GAAG,CAAC,IAAI,CAACT,qBAAqB,CAACU,GAAG,CAAC,CAAC,GAAG0I,cAAc,EAAEzI,SAAS,EAAE,IAAI,CAAC;MACtG;IACJ,CAAC,CAAC,CAAC;EACP;AACJ,CAAC;AACDxB,mBAAmB,GAAGjD,UAAU,CAAC,CAC7BgB,OAAO,CAAC,CAAC,EAAE8B,iBAAiB,CAAC,EAC7B9B,OAAO,CAAC,CAAC,EAAE+B,mBAAmB,CAAC,CAClC,EAAEE,mBAAmB,CAAC;AACvB,SAASA,mBAAmB;AAC5B,SAAS+C,qBAAqBA,CAACwH,cAAc,EAAEC,cAAc,EAAEC,KAAK,EAAEC,gCAAgC,EAAEC,gCAAgC,EAAE7H,kBAAkB,EAAE;EAC1J,MAAM8H,2BAA2B,GAAG,IAAIxM,UAAU,CAACyM,wBAAwB,CAACN,cAAc,EAAEG,gCAAgC,CAAC,CAAC;EAC9H,MAAMI,2BAA2B,GAAG,IAAI1M,UAAU,CAACyM,wBAAwB,CAACL,cAAc,EAAEG,gCAAgC,CAAC,CAAC;EAC9H,MAAMI,cAAc,GAAGR,cAAc,CAACrE,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC;EACjF,MAAMD,aAAa,GAAGuE,cAAc,CAACtE,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC;EAChF,MAAMmB,MAAM,GAAG,EAAE;EACjB,IAAI2D,sBAAsB,GAAG,CAAC;EAC9B,IAAIC,sBAAsB,GAAG,CAAC;EAC9B,SAASC,8BAA8BA,CAACC,gCAAgC,EAAEC,gCAAgC,EAAE;IACxG,OAAO,IAAI,EAAE;MACT,IAAIC,QAAQ,GAAGT,2BAA2B,CAACU,IAAI,CAAC,CAAC;MACjD,IAAIC,OAAO,GAAGT,2BAA2B,CAACQ,IAAI,CAAC,CAAC;MAChD,IAAID,QAAQ,IAAIA,QAAQ,CAACG,UAAU,IAAIL,gCAAgC,EAAE;QACrEE,QAAQ,GAAG7J,SAAS;MACxB;MACA,IAAI+J,OAAO,IAAIA,OAAO,CAACC,UAAU,IAAIJ,gCAAgC,EAAE;QACnEG,OAAO,GAAG/J,SAAS;MACvB;MACA,IAAI,CAAC6J,QAAQ,IAAI,CAACE,OAAO,EAAE;QACvB;MACJ;MACA,MAAME,QAAQ,GAAGJ,QAAQ,GAAGA,QAAQ,CAACG,UAAU,GAAGR,sBAAsB,GAAGU,MAAM,CAACC,SAAS;MAC3F,MAAMC,QAAQ,GAAGL,OAAO,GAAGA,OAAO,CAACC,UAAU,GAAGP,sBAAsB,GAAGS,MAAM,CAACC,SAAS;MACzF,IAAIF,QAAQ,GAAGG,QAAQ,EAAE;QACrBhB,2BAA2B,CAACiB,OAAO,CAAC,CAAC;QACrCN,OAAO,GAAG;UACNC,UAAU,EAAEH,QAAQ,CAACG,UAAU,GAAGR,sBAAsB,GAAGC,sBAAsB;UACjFrG,UAAU,EAAE;QAChB,CAAC;MACL,CAAC,MACI,IAAI6G,QAAQ,GAAGG,QAAQ,EAAE;QAC1Bd,2BAA2B,CAACe,OAAO,CAAC,CAAC;QACrCR,QAAQ,GAAG;UACPG,UAAU,EAAED,OAAO,CAACC,UAAU,GAAGP,sBAAsB,GAAGD,sBAAsB;UAChFpG,UAAU,EAAE;QAChB,CAAC;MACL,CAAC,MACI;QACDgG,2BAA2B,CAACiB,OAAO,CAAC,CAAC;QACrCf,2BAA2B,CAACe,OAAO,CAAC,CAAC;MACzC;MACAxE,MAAM,CAAC5C,IAAI,CAAC;QACRa,aAAa,EAAE5F,SAAS,CAACoM,QAAQ,CAACT,QAAQ,CAACG,UAAU,EAAE,CAAC,CAAC;QACzDrD,aAAa,EAAEzI,SAAS,CAACoM,QAAQ,CAACP,OAAO,CAACC,UAAU,EAAE,CAAC,CAAC;QACxDhD,kBAAkB,EAAEuC,cAAc,GAAGM,QAAQ,CAACzG,UAAU;QACxD2D,kBAAkB,EAAEtC,aAAa,GAAGsF,OAAO,CAAC3G,UAAU;QACtDhC,IAAI,EAAEpB;MACV,CAAC,CAAC;IACN;EACJ;EACA,KAAK,MAAMW,CAAC,IAAIsI,KAAK,EAAE;IACnB,MAAMrN,CAAC,GAAG+E,CAAC,CAACsG,gBAAgB;IAC5ByC,8BAA8B,CAAC9N,CAAC,CAACqE,QAAQ,CAAC8D,eAAe,EAAEnI,CAAC,CAACyE,QAAQ,CAAC0D,eAAe,CAAC;IACtF,IAAIwG,KAAK,GAAG,IAAI;IAChB,IAAIC,iBAAiB,GAAG5O,CAAC,CAACyE,QAAQ,CAAC0D,eAAe;IAClD,IAAI0G,kBAAkB,GAAG7O,CAAC,CAACqE,QAAQ,CAAC8D,eAAe;IACnD,SAAS2G,aAAaA,CAACC,uBAAuB,EAAEC,sBAAsB,EAA0B;MAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA;MAAA,IAAxBC,cAAc,GAAApP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAmE,SAAA,GAAAnE,SAAA,MAAG,KAAK;MAC1F,IAAI8O,uBAAuB,GAAGF,kBAAkB,IAAIG,sBAAsB,GAAGJ,iBAAiB,EAAE;QAC5F;MACJ;MACA,IAAID,KAAK,EAAE;QACPA,KAAK,GAAG,KAAK;MACjB,CAAC,MACI,IAAI,CAACU,cAAc,KAAKN,uBAAuB,KAAKF,kBAAkB,IAAIG,sBAAsB,KAAKJ,iBAAiB,CAAC,EAAE;QAC1H;QACA;QACA;MACJ;MACA,MAAM1G,aAAa,GAAG,IAAI5F,SAAS,CAACuM,kBAAkB,EAAEE,uBAAuB,CAAC;MAChF,MAAMhE,aAAa,GAAG,IAAIzI,SAAS,CAACsM,iBAAiB,EAAEI,sBAAsB,CAAC;MAC9E,IAAI9G,aAAa,CAACmB,OAAO,IAAI0B,aAAa,CAAC1B,OAAO,EAAE;QAChD;MACJ;MACA,MAAMiG,wBAAwB,IAAAL,qBAAA,IAAAC,sBAAA,GAAG1B,2BAA2B,CACvD+B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACpB,UAAU,GAAGW,uBAAuB,CAAC,cAAAG,sBAAA,uBAD1BA,sBAAA,CAE3BO,MAAM,CAAC,CAACC,CAAC,EAAE1P,CAAC,KAAK0P,CAAC,GAAG1P,CAAC,CAACwH,UAAU,EAAE,CAAC,CAAC,cAAAyH,qBAAA,cAAAA,qBAAA,GAAI,CAAC;MAChD,MAAMU,wBAAwB,IAAAR,qBAAA,IAAAC,sBAAA,GAAG1B,2BAA2B,CACvD6B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACpB,UAAU,GAAGY,sBAAsB,CAAC,cAAAI,sBAAA,uBADzBA,sBAAA,CAE3BK,MAAM,CAAC,CAACC,CAAC,EAAE1P,CAAC,KAAK0P,CAAC,GAAG1P,CAAC,CAACwH,UAAU,EAAE,CAAC,CAAC,cAAA2H,qBAAA,cAAAA,qBAAA,GAAI,CAAC;MAChDlF,MAAM,CAAC5C,IAAI,CAAC;QACRa,aAAa;QACb6C,aAAa;QACbK,kBAAkB,EAAElD,aAAa,CAAChI,MAAM,GAAGyN,cAAc,GAAG2B,wBAAwB;QACpFnE,kBAAkB,EAAEJ,aAAa,CAAC7K,MAAM,GAAG2I,aAAa,GAAG8G,wBAAwB;QACnFnK,IAAI,EAAET,CAAC,CAACsG;MACZ,CAAC,CAAC;MACFwD,kBAAkB,GAAGE,uBAAuB;MAC5CH,iBAAiB,GAAGI,sBAAsB;IAC9C;IACA,IAAItJ,kBAAkB,EAAE;MACpB,KAAK,MAAMjF,CAAC,IAAIT,CAAC,CAAC+J,YAAY,IAAI,EAAE,EAAE;QAClC,IAAItJ,CAAC,CAACyH,aAAa,CAAC0H,WAAW,GAAG,CAAC,IAAInP,CAAC,CAACsK,aAAa,CAAC6E,WAAW,GAAG,CAAC,EAAE;UACpE;UACAd,aAAa,CAACrO,CAAC,CAACyH,aAAa,CAACC,eAAe,EAAE1H,CAAC,CAACsK,aAAa,CAAC5C,eAAe,CAAC;QACnF;QACA,MAAMJ,aAAa,GAAGoF,cAAc,CAACnF,QAAQ,CAAC,CAAC;QAC/C;QACA,MAAM6H,SAAS,GAAGpP,CAAC,CAACyH,aAAa,CAAC4H,aAAa,IAAI/H,aAAa,CAACM,YAAY,CAAC,CAAC,GAAGN,aAAa,CAACgI,gBAAgB,CAACtP,CAAC,CAACyH,aAAa,CAAC4H,aAAa,CAAC,GAAGxB,MAAM,CAAC0B,gBAAgB;QACzK,IAAIvP,CAAC,CAACyH,aAAa,CAAC+H,SAAS,GAAGJ,SAAS,EAAE;UACvC;UACAf,aAAa,CAACrO,CAAC,CAACyH,aAAa,CAAC4H,aAAa,EAAErP,CAAC,CAACsK,aAAa,CAAC+E,aAAa,CAAC;QAC/E;MACJ;IACJ;IACAhB,aAAa,CAAC9O,CAAC,CAACqE,QAAQ,CAAC+D,sBAAsB,EAAEpI,CAAC,CAACyE,QAAQ,CAAC2D,sBAAsB,EAAE,IAAI,CAAC;IACzFwF,sBAAsB,GAAG5N,CAAC,CAACqE,QAAQ,CAAC+D,sBAAsB;IAC1DyF,sBAAsB,GAAG7N,CAAC,CAACyE,QAAQ,CAAC2D,sBAAsB;EAC9D;EACA0F,8BAA8B,CAACQ,MAAM,CAACC,SAAS,EAAED,MAAM,CAACC,SAAS,CAAC;EAClE,OAAOtE,MAAM;AACjB;AACA,SAASwD,wBAAwBA,CAACyC,MAAM,EAAEC,iBAAiB,EAAE;EACzD,MAAMC,eAAe,GAAG,EAAE;EAC1B,MAAMC,mBAAmB,GAAG,EAAE;EAC9B,MAAMC,WAAW,GAAGJ,MAAM,CAACpH,SAAS,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAACyH,cAAc,KAAK,CAAC,CAAC;EAC/F,MAAMC,oBAAoB,GAAGN,MAAM,CAACrI,aAAa,CAAC,CAAC,CAAC2I,oBAAoB;EACxE,MAAMC,gBAAgB,GAAGP,MAAM,CAACpH,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC;EAC3E,IAAIwH,WAAW,EAAE;IACb,KAAK,IAAI7P,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIyP,MAAM,CAAClI,QAAQ,CAAC,CAAC,CAACK,YAAY,CAAC,CAAC,EAAE5H,CAAC,EAAE,EAAE;MACxD,MAAMiQ,SAAS,GAAGF,oBAAoB,CAACG,yBAAyB,CAAClQ,CAAC,CAAC;MACnE,IAAIiQ,SAAS,GAAG,CAAC,EAAE;QACfL,mBAAmB,CAAChJ,IAAI,CAAC;UAAE+G,UAAU,EAAE3N,CAAC;UAAE+G,UAAU,EAAEiJ,gBAAgB,IAAIC,SAAS,GAAG,CAAC;QAAE,CAAC,CAAC;MAC/F;IACJ;EACJ;EACA,KAAK,MAAME,CAAC,IAAIV,MAAM,CAACW,cAAc,CAAC,CAAC,EAAE;IACrC,IAAIV,iBAAiB,CAACW,GAAG,CAACF,CAAC,CAAC1F,EAAE,CAAC,EAAE;MAC7B;IACJ;IACA,MAAM6F,eAAe,GAAGH,CAAC,CAACtJ,eAAe,KAAK,CAAC,GAAG,CAAC,GAAGkJ,oBAAoB,CAACQ,kCAAkC,CAAC,IAAIzO,QAAQ,CAACqO,CAAC,CAACtJ,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC8G,UAAU;IAC5JgC,eAAe,CAAC/I,IAAI,CAAC;MAAE+G,UAAU,EAAE2C,eAAe;MAAEvJ,UAAU,EAAEoJ,CAAC,CAACK;IAAO,CAAC,CAAC;EAC/E;EACA,MAAMhH,MAAM,GAAG5H,WAAW,CAAC+N,eAAe,EAAEC,mBAAmB,EAAEb,CAAC,IAAIA,CAAC,CAACpB,UAAU,EAAE,CAAC8C,EAAE,EAAEC,EAAE,MAAM;IAAE/C,UAAU,EAAE8C,EAAE,CAAC9C,UAAU;IAAE5G,UAAU,EAAE0J,EAAE,CAAC1J,UAAU,GAAG2J,EAAE,CAAC3J;EAAW,CAAC,CAAC,CAAC;EAC3K,OAAOyC,MAAM;AACjB;AACA,OAAO,SAASb,6BAA6BA,CAACgI,OAAO,EAAE;EACnD,IAAI,CAACA,OAAO,CAACrH,YAAY,EAAE;IACvB,OAAO,KAAK;EAChB;EACA,OAAOqH,OAAO,CAACrH,YAAY,CAACsH,KAAK,CAACrR,CAAC,IAAKsR,iBAAiB,CAACtR,CAAC,CAAC+K,aAAa,CAAC,IAAIuG,iBAAiB,CAACtR,CAAC,CAACkI,aAAa,CAAC,IACzGlI,CAAC,CAACkI,aAAa,CAACqJ,WAAW,CAAC,IAAI5O,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9D;AACA,SAAS2O,iBAAiBA,CAACE,KAAK,EAAE;EAC9B,OAAOA,KAAK,CAACrJ,eAAe,KAAKqJ,KAAK,CAAC1B,aAAa;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
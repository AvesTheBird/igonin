{"ast":null,"code":"var _DefaultWorkerFactory;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from './trustedTypes.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { COI, FileAccess } from '../common/network.js';\nimport { logOnceWebWorkerWarning, SimpleWorkerClient } from '../common/worker/simpleWorker.js';\nimport { Disposable, toDisposable } from '../common/lifecycle.js';\nimport { coalesce } from '../common/arrays.js';\nimport { getNLSLanguage, getNLSMessages } from '../../nls.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n// Reuse the trusted types policy defined from worker bootstrap\n// when available.\n// Refs https://github.com/microsoft/vscode/issues/222193\nlet ttPolicy;\nif (typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope' && globalThis.workerttPolicy !== undefined) {\n  ttPolicy = globalThis.workerttPolicy;\n} else {\n  ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', {\n    createScriptURL: value => value\n  });\n}\nfunction getWorker(esmWorkerLocation, label) {\n  const monacoEnvironment = globalThis.MonacoEnvironment;\n  if (monacoEnvironment) {\n    if (typeof monacoEnvironment.getWorker === 'function') {\n      return monacoEnvironment.getWorker('workerMain.js', label);\n    }\n    if (typeof monacoEnvironment.getWorkerUrl === 'function') {\n      const workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);\n      return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, {\n        name: label,\n        type: isESM ? 'module' : undefined\n      });\n    }\n  }\n  // ESM-comment-begin\n  // \tif (typeof require === 'function') {\n  // \t\tconst workerMainLocation = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n  // \t\tconst factoryModuleId = 'vs/base/worker/defaultWorkerFactory.js';\n  // \t\tconst workerBaseUrl = require.toUrl(factoryModuleId).slice(0, -factoryModuleId.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n  // \t\tconst workerUrl = getWorkerBootstrapUrl(label, workerMainLocation, workerBaseUrl);\n  // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n  // \t}\n  // ESM-comment-end\n  if (esmWorkerLocation) {\n    const workerUrl = getWorkerBootstrapUrl(label, esmWorkerLocation.toString(true));\n    const worker = new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, {\n      name: label,\n      type: isESM ? 'module' : undefined\n    });\n    if (isESM) {\n      return whenESMWorkerReady(worker);\n    } else {\n      return worker;\n    }\n  }\n  throw new Error(\"You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker\");\n}\nfunction getWorkerBootstrapUrl(label, workerScriptUrl, workerBaseUrl) {\n  const workerScriptUrlIsAbsolute = /^((http:)|(https:)|(file:)|(vscode-file:))/.test(workerScriptUrl);\n  if (workerScriptUrlIsAbsolute && workerScriptUrl.substring(0, globalThis.origin.length) !== globalThis.origin) {\n    // this is the cross-origin case\n    // i.e. the webpage is running at a different origin than where the scripts are loaded from\n  } else {\n    const start = workerScriptUrl.lastIndexOf('?');\n    const end = workerScriptUrl.lastIndexOf('#', start);\n    const params = start > 0 ? new URLSearchParams(workerScriptUrl.substring(start + 1, ~end ? end : undefined)) : new URLSearchParams();\n    COI.addSearchParam(params, true, true);\n    const search = params.toString();\n    if (!search) {\n      workerScriptUrl = \"\".concat(workerScriptUrl, \"#\").concat(label);\n    } else {\n      workerScriptUrl = \"\".concat(workerScriptUrl, \"?\").concat(params.toString(), \"#\").concat(label);\n    }\n  }\n  if (!isESM && !workerScriptUrlIsAbsolute) {\n    // we have to convert relative script URLs to the origin because importScripts\n    // does not work unless the script URL is absolute\n    workerScriptUrl = new URL(workerScriptUrl, globalThis.origin).toString();\n  }\n  const blob = new Blob([coalesce([\"/*\".concat(label, \"*/\"), workerBaseUrl ? \"globalThis.MonacoEnvironment = { baseUrl: '\".concat(workerBaseUrl, \"' };\") : undefined, \"globalThis._VSCODE_NLS_MESSAGES = \".concat(JSON.stringify(getNLSMessages()), \";\"), \"globalThis._VSCODE_NLS_LANGUAGE = \".concat(JSON.stringify(getNLSLanguage()), \";\"), \"globalThis._VSCODE_FILE_ROOT = '\".concat(globalThis._VSCODE_FILE_ROOT, \"';\"), \"const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });\", \"globalThis.workerttPolicy = ttPolicy;\", isESM ? \"await import(ttPolicy?.createScriptURL('\".concat(workerScriptUrl, \"') ?? '\").concat(workerScriptUrl, \"');\") : \"importScripts(ttPolicy?.createScriptURL('\".concat(workerScriptUrl, \"') ?? '\").concat(workerScriptUrl, \"');\"), isESM ? \"globalThis.postMessage({ type: 'vscode-worker-ready' });\" : undefined, // in ESM signal we are ready after the async import\n  \"/*\".concat(label, \"*/\")]).join('')], {\n    type: 'application/javascript'\n  });\n  return URL.createObjectURL(blob);\n}\nfunction whenESMWorkerReady(worker) {\n  return new Promise((resolve, reject) => {\n    worker.onmessage = function (e) {\n      if (e.data.type === 'vscode-worker-ready') {\n        worker.onmessage = null;\n        resolve(worker);\n      }\n    };\n    worker.onerror = reject;\n  });\n}\nfunction isPromiseLike(obj) {\n  if (typeof obj.then === 'function') {\n    return true;\n  }\n  return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker extends Disposable {\n  constructor(esmWorkerLocation, amdModuleId, id, label, onMessageCallback, onErrorCallback) {\n    super();\n    this.id = id;\n    this.label = label;\n    const workerOrPromise = getWorker(esmWorkerLocation, label);\n    if (isPromiseLike(workerOrPromise)) {\n      this.worker = workerOrPromise;\n    } else {\n      this.worker = Promise.resolve(workerOrPromise);\n    }\n    this.postMessage(amdModuleId, []);\n    this.worker.then(w => {\n      w.onmessage = function (ev) {\n        onMessageCallback(ev.data);\n      };\n      w.onmessageerror = onErrorCallback;\n      if (typeof w.addEventListener === 'function') {\n        w.addEventListener('error', onErrorCallback);\n      }\n    });\n    this._register(toDisposable(() => {\n      var _this$worker;\n      (_this$worker = this.worker) === null || _this$worker === void 0 || _this$worker.then(w => {\n        w.onmessage = null;\n        w.onmessageerror = null;\n        w.removeEventListener('error', onErrorCallback);\n        w.terminate();\n      });\n      this.worker = null;\n    }));\n  }\n  getId() {\n    return this.id;\n  }\n  postMessage(message, transfer) {\n    var _this$worker2;\n    (_this$worker2 = this.worker) === null || _this$worker2 === void 0 || _this$worker2.then(w => {\n      try {\n        w.postMessage(message, transfer);\n      } catch (err) {\n        onUnexpectedError(err);\n        onUnexpectedError(new Error(\"FAILED to post message to '\".concat(this.label, \"'-worker\"), {\n          cause: err\n        }));\n      }\n    });\n  }\n}\nexport class WorkerDescriptor {\n  constructor(amdModuleId, label) {\n    this.amdModuleId = amdModuleId;\n    this.label = label;\n    this.esmModuleLocation = isESM ? FileAccess.asBrowserUri(\"\".concat(amdModuleId, \".esm.js\")) : undefined;\n  }\n}\nclass DefaultWorkerFactory {\n  constructor() {\n    this._webWorkerFailedBeforeError = false;\n  }\n  create(desc, onMessageCallback, onErrorCallback) {\n    const workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n    if (this._webWorkerFailedBeforeError) {\n      throw this._webWorkerFailedBeforeError;\n    }\n    return new WebWorker(desc.esmModuleLocation, desc.amdModuleId, workerId, desc.label || 'anonymous' + workerId, onMessageCallback, err => {\n      logOnceWebWorkerWarning(err);\n      this._webWorkerFailedBeforeError = err;\n      onErrorCallback(err);\n    });\n  }\n}\n_DefaultWorkerFactory = DefaultWorkerFactory;\n_DefaultWorkerFactory.LAST_WORKER_ID = 0;\nexport function createWebWorker(arg0, arg1) {\n  const workerDescriptor = typeof arg0 === 'string' ? new WorkerDescriptor(arg0, arg1) : arg0;\n  return new SimpleWorkerClient(new DefaultWorkerFactory(), workerDescriptor);\n}","map":{"version":3,"names":["createTrustedTypesPolicy","onUnexpectedError","COI","FileAccess","logOnceWebWorkerWarning","SimpleWorkerClient","Disposable","toDisposable","coalesce","getNLSLanguage","getNLSMessages","isESM","ttPolicy","self","constructor","name","globalThis","workerttPolicy","undefined","createScriptURL","value","getWorker","esmWorkerLocation","label","monacoEnvironment","MonacoEnvironment","getWorkerUrl","workerUrl","Worker","type","getWorkerBootstrapUrl","toString","worker","whenESMWorkerReady","Error","workerScriptUrl","workerBaseUrl","workerScriptUrlIsAbsolute","test","substring","origin","length","start","lastIndexOf","end","params","URLSearchParams","addSearchParam","search","concat","URL","blob","Blob","JSON","stringify","_VSCODE_FILE_ROOT","join","createObjectURL","Promise","resolve","reject","onmessage","e","data","onerror","isPromiseLike","obj","then","WebWorker","amdModuleId","id","onMessageCallback","onErrorCallback","workerOrPromise","postMessage","w","ev","onmessageerror","addEventListener","_register","_this$worker","removeEventListener","terminate","getId","message","transfer","_this$worker2","err","cause","WorkerDescriptor","esmModuleLocation","asBrowserUri","DefaultWorkerFactory","_webWorkerFailedBeforeError","create","desc","workerId","LAST_WORKER_ID","_DefaultWorkerFactory","createWebWorker","arg0","arg1","workerDescriptor"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/base/browser/defaultWorkerFactory.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createTrustedTypesPolicy } from './trustedTypes.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { COI, FileAccess } from '../common/network.js';\nimport { logOnceWebWorkerWarning, SimpleWorkerClient } from '../common/worker/simpleWorker.js';\nimport { Disposable, toDisposable } from '../common/lifecycle.js';\nimport { coalesce } from '../common/arrays.js';\nimport { getNLSLanguage, getNLSMessages } from '../../nls.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\n// Reuse the trusted types policy defined from worker bootstrap\n// when available.\n// Refs https://github.com/microsoft/vscode/issues/222193\nlet ttPolicy;\nif (typeof self === 'object' && self.constructor && self.constructor.name === 'DedicatedWorkerGlobalScope' && globalThis.workerttPolicy !== undefined) {\n    ttPolicy = globalThis.workerttPolicy;\n}\nelse {\n    ttPolicy = createTrustedTypesPolicy('defaultWorkerFactory', { createScriptURL: value => value });\n}\nfunction getWorker(esmWorkerLocation, label) {\n    const monacoEnvironment = globalThis.MonacoEnvironment;\n    if (monacoEnvironment) {\n        if (typeof monacoEnvironment.getWorker === 'function') {\n            return monacoEnvironment.getWorker('workerMain.js', label);\n        }\n        if (typeof monacoEnvironment.getWorkerUrl === 'function') {\n            const workerUrl = monacoEnvironment.getWorkerUrl('workerMain.js', label);\n            return new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n        }\n    }\n    // ESM-comment-begin\n    // \tif (typeof require === 'function') {\n    // \t\tconst workerMainLocation = require.toUrl('vs/base/worker/workerMain.js'); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n    // \t\tconst factoryModuleId = 'vs/base/worker/defaultWorkerFactory.js';\n    // \t\tconst workerBaseUrl = require.toUrl(factoryModuleId).slice(0, -factoryModuleId.length); // explicitly using require.toUrl(), see https://github.com/microsoft/vscode/issues/107440#issuecomment-698982321\n    // \t\tconst workerUrl = getWorkerBootstrapUrl(label, workerMainLocation, workerBaseUrl);\n    // \t\treturn new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) as unknown as string : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n    // \t}\n    // ESM-comment-end\n    if (esmWorkerLocation) {\n        const workerUrl = getWorkerBootstrapUrl(label, esmWorkerLocation.toString(true));\n        const worker = new Worker(ttPolicy ? ttPolicy.createScriptURL(workerUrl) : workerUrl, { name: label, type: isESM ? 'module' : undefined });\n        if (isESM) {\n            return whenESMWorkerReady(worker);\n        }\n        else {\n            return worker;\n        }\n    }\n    throw new Error(`You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker`);\n}\nfunction getWorkerBootstrapUrl(label, workerScriptUrl, workerBaseUrl) {\n    const workerScriptUrlIsAbsolute = /^((http:)|(https:)|(file:)|(vscode-file:))/.test(workerScriptUrl);\n    if (workerScriptUrlIsAbsolute && workerScriptUrl.substring(0, globalThis.origin.length) !== globalThis.origin) {\n        // this is the cross-origin case\n        // i.e. the webpage is running at a different origin than where the scripts are loaded from\n    }\n    else {\n        const start = workerScriptUrl.lastIndexOf('?');\n        const end = workerScriptUrl.lastIndexOf('#', start);\n        const params = start > 0\n            ? new URLSearchParams(workerScriptUrl.substring(start + 1, ~end ? end : undefined))\n            : new URLSearchParams();\n        COI.addSearchParam(params, true, true);\n        const search = params.toString();\n        if (!search) {\n            workerScriptUrl = `${workerScriptUrl}#${label}`;\n        }\n        else {\n            workerScriptUrl = `${workerScriptUrl}?${params.toString()}#${label}`;\n        }\n    }\n    if (!isESM && !workerScriptUrlIsAbsolute) {\n        // we have to convert relative script URLs to the origin because importScripts\n        // does not work unless the script URL is absolute\n        workerScriptUrl = new URL(workerScriptUrl, globalThis.origin).toString();\n    }\n    const blob = new Blob([coalesce([\n            `/*${label}*/`,\n            workerBaseUrl ? `globalThis.MonacoEnvironment = { baseUrl: '${workerBaseUrl}' };` : undefined,\n            `globalThis._VSCODE_NLS_MESSAGES = ${JSON.stringify(getNLSMessages())};`,\n            `globalThis._VSCODE_NLS_LANGUAGE = ${JSON.stringify(getNLSLanguage())};`,\n            `globalThis._VSCODE_FILE_ROOT = '${globalThis._VSCODE_FILE_ROOT}';`,\n            `const ttPolicy = globalThis.trustedTypes?.createPolicy('defaultWorkerFactory', { createScriptURL: value => value });`,\n            `globalThis.workerttPolicy = ttPolicy;`,\n            isESM ? `await import(ttPolicy?.createScriptURL('${workerScriptUrl}') ?? '${workerScriptUrl}');` : `importScripts(ttPolicy?.createScriptURL('${workerScriptUrl}') ?? '${workerScriptUrl}');`,\n            isESM ? `globalThis.postMessage({ type: 'vscode-worker-ready' });` : undefined, // in ESM signal we are ready after the async import\n            `/*${label}*/`\n        ]).join('')], { type: 'application/javascript' });\n    return URL.createObjectURL(blob);\n}\nfunction whenESMWorkerReady(worker) {\n    return new Promise((resolve, reject) => {\n        worker.onmessage = function (e) {\n            if (e.data.type === 'vscode-worker-ready') {\n                worker.onmessage = null;\n                resolve(worker);\n            }\n        };\n        worker.onerror = reject;\n    });\n}\nfunction isPromiseLike(obj) {\n    if (typeof obj.then === 'function') {\n        return true;\n    }\n    return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\nclass WebWorker extends Disposable {\n    constructor(esmWorkerLocation, amdModuleId, id, label, onMessageCallback, onErrorCallback) {\n        super();\n        this.id = id;\n        this.label = label;\n        const workerOrPromise = getWorker(esmWorkerLocation, label);\n        if (isPromiseLike(workerOrPromise)) {\n            this.worker = workerOrPromise;\n        }\n        else {\n            this.worker = Promise.resolve(workerOrPromise);\n        }\n        this.postMessage(amdModuleId, []);\n        this.worker.then((w) => {\n            w.onmessage = function (ev) {\n                onMessageCallback(ev.data);\n            };\n            w.onmessageerror = onErrorCallback;\n            if (typeof w.addEventListener === 'function') {\n                w.addEventListener('error', onErrorCallback);\n            }\n        });\n        this._register(toDisposable(() => {\n            this.worker?.then(w => {\n                w.onmessage = null;\n                w.onmessageerror = null;\n                w.removeEventListener('error', onErrorCallback);\n                w.terminate();\n            });\n            this.worker = null;\n        }));\n    }\n    getId() {\n        return this.id;\n    }\n    postMessage(message, transfer) {\n        this.worker?.then(w => {\n            try {\n                w.postMessage(message, transfer);\n            }\n            catch (err) {\n                onUnexpectedError(err);\n                onUnexpectedError(new Error(`FAILED to post message to '${this.label}'-worker`, { cause: err }));\n            }\n        });\n    }\n}\nexport class WorkerDescriptor {\n    constructor(amdModuleId, label) {\n        this.amdModuleId = amdModuleId;\n        this.label = label;\n        this.esmModuleLocation = (isESM ? FileAccess.asBrowserUri(`${amdModuleId}.esm.js`) : undefined);\n    }\n}\nclass DefaultWorkerFactory {\n    static { this.LAST_WORKER_ID = 0; }\n    constructor() {\n        this._webWorkerFailedBeforeError = false;\n    }\n    create(desc, onMessageCallback, onErrorCallback) {\n        const workerId = (++DefaultWorkerFactory.LAST_WORKER_ID);\n        if (this._webWorkerFailedBeforeError) {\n            throw this._webWorkerFailedBeforeError;\n        }\n        return new WebWorker(desc.esmModuleLocation, desc.amdModuleId, workerId, desc.label || 'anonymous' + workerId, onMessageCallback, (err) => {\n            logOnceWebWorkerWarning(err);\n            this._webWorkerFailedBeforeError = err;\n            onErrorCallback(err);\n        });\n    }\n}\nexport function createWebWorker(arg0, arg1) {\n    const workerDescriptor = (typeof arg0 === 'string' ? new WorkerDescriptor(arg0, arg1) : arg0);\n    return new SimpleWorkerClient(new DefaultWorkerFactory(), workerDescriptor);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
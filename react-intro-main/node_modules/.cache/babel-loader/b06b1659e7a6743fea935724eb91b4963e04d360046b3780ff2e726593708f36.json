{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Cell from '../../cell/Cell';\nclass GraphAbstractHierarchyCell extends Cell {\n  /**\n   * Class: mxGraphAbstractHierarchyCell\n   *\n   * An abstraction of an internal hierarchy node or edge\n   *\n   * Constructor: mxGraphAbstractHierarchyCell\n   *\n   * Constructs a new hierarchical layout algorithm.\n   */\n  constructor() {\n    super();\n    this.swimlaneIndex = null;\n    /**\n     * The maximum rank this cell occupies. Default is -1.\n     */\n    this.maxRank = -1;\n    /**\n     * The minimum rank this cell occupies. Default is -1.\n     */\n    this.minRank = -1;\n    /**\n     * The width of this cell. Default is 0.\n     */\n    this.width = 0;\n    /**\n     * The height of this cell. Default is 0.\n     */\n    this.height = 0;\n    /**\n     * A cached version of the cells this cell connects to on the next layer up\n     */\n    this.nextLayerConnectedCells = null;\n    /**\n     * A cached version of the cells this cell connects to on the next layer down\n     */\n    this.previousLayerConnectedCells = null;\n    this.x = [];\n    this.y = [];\n    this.temp = [];\n  }\n  /**\n   * Returns whether or not this cell is an edge\n   */\n  isEdge() {\n    return false;\n  }\n  /**\n   * Returns whether or not this cell is a node\n   */\n  isVertex() {\n    return false;\n  }\n  /**\n   * Set the value of x for the specified layer\n   */\n  setX(layer, value) {\n    if (this.isVertex()) {\n      this.x[0] = value;\n    } else if (this.isEdge()) {\n      this.x[layer - this.minRank - 1] = value;\n    }\n  }\n  /**\n   * Gets the value of x on the specified layer\n   */\n  getX(layer) {\n    if (this.isVertex()) {\n      return this.x[0];\n    }\n    if (this.isEdge()) {\n      return this.x[layer - this.minRank - 1];\n    }\n    return 0.0;\n  }\n  /**\n   * Set the value of y for the specified layer\n   */\n  setY(layer, value) {\n    if (this.isVertex()) {\n      this.y[0] = value;\n    } else if (this.isEdge()) {\n      this.y[layer - this.minRank - 1] = value;\n    }\n  }\n}\nexport default GraphAbstractHierarchyCell;","map":{"version":3,"names":["Cell","GraphAbstractHierarchyCell","constructor","swimlaneIndex","maxRank","minRank","width","height","nextLayerConnectedCells","previousLayerConnectedCells","x","y","temp","isEdge","isVertex","setX","layer","value","getX","setY"],"sources":["D:/ospanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/layout/datatypes/GraphAbstractHierarchyCell.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Cell from '../../cell/Cell';\nclass GraphAbstractHierarchyCell extends Cell {\n    /**\n     * Class: mxGraphAbstractHierarchyCell\n     *\n     * An abstraction of an internal hierarchy node or edge\n     *\n     * Constructor: mxGraphAbstractHierarchyCell\n     *\n     * Constructs a new hierarchical layout algorithm.\n     */\n    constructor() {\n        super();\n        this.swimlaneIndex = null;\n        /**\n         * The maximum rank this cell occupies. Default is -1.\n         */\n        this.maxRank = -1;\n        /**\n         * The minimum rank this cell occupies. Default is -1.\n         */\n        this.minRank = -1;\n        /**\n         * The width of this cell. Default is 0.\n         */\n        this.width = 0;\n        /**\n         * The height of this cell. Default is 0.\n         */\n        this.height = 0;\n        /**\n         * A cached version of the cells this cell connects to on the next layer up\n         */\n        this.nextLayerConnectedCells = null;\n        /**\n         * A cached version of the cells this cell connects to on the next layer down\n         */\n        this.previousLayerConnectedCells = null;\n        this.x = [];\n        this.y = [];\n        this.temp = [];\n    }\n    /**\n     * Returns whether or not this cell is an edge\n     */\n    isEdge() {\n        return false;\n    }\n    /**\n     * Returns whether or not this cell is a node\n     */\n    isVertex() {\n        return false;\n    }\n    /**\n     * Set the value of x for the specified layer\n     */\n    setX(layer, value) {\n        if (this.isVertex()) {\n            this.x[0] = value;\n        }\n        else if (this.isEdge()) {\n            this.x[layer - this.minRank - 1] = value;\n        }\n    }\n    /**\n     * Gets the value of x on the specified layer\n     */\n    getX(layer) {\n        if (this.isVertex()) {\n            return this.x[0];\n        }\n        if (this.isEdge()) {\n            return this.x[layer - this.minRank - 1];\n        }\n        return 0.0;\n    }\n    /**\n     * Set the value of y for the specified layer\n     */\n    setY(layer, value) {\n        if (this.isVertex()) {\n            this.y[0] = value;\n        }\n        else if (this.isEdge()) {\n            this.y[layer - this.minRank - 1] = value;\n        }\n    }\n}\nexport default GraphAbstractHierarchyCell;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAI,MAAM,iBAAiB;AAClC,MAAMC,0BAA0B,SAASD,IAAI,CAAC;EAC1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,CAAC;IACd;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,CAAC;IACf;AACR;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAG,IAAI;IACnC;AACR;AACA;IACQ,IAAI,CAACC,2BAA2B,GAAG,IAAI;IACvC,IAAI,CAACC,CAAC,GAAG,EAAE;IACX,IAAI,CAACC,CAAC,GAAG,EAAE;IACX,IAAI,CAACC,IAAI,GAAG,EAAE;EAClB;EACA;AACJ;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,OAAO,KAAK;EAChB;EACA;AACJ;AACA;EACIC,QAAQA,CAAA,EAAG;IACP,OAAO,KAAK;EAChB;EACA;AACJ;AACA;EACIC,IAAIA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACf,IAAI,IAAI,CAACH,QAAQ,CAAC,CAAC,EAAE;MACjB,IAAI,CAACJ,CAAC,CAAC,CAAC,CAAC,GAAGO,KAAK;IACrB,CAAC,MACI,IAAI,IAAI,CAACJ,MAAM,CAAC,CAAC,EAAE;MACpB,IAAI,CAACH,CAAC,CAACM,KAAK,GAAG,IAAI,CAACX,OAAO,GAAG,CAAC,CAAC,GAAGY,KAAK;IAC5C;EACJ;EACA;AACJ;AACA;EACIC,IAAIA,CAACF,KAAK,EAAE;IACR,IAAI,IAAI,CAACF,QAAQ,CAAC,CAAC,EAAE;MACjB,OAAO,IAAI,CAACJ,CAAC,CAAC,CAAC,CAAC;IACpB;IACA,IAAI,IAAI,CAACG,MAAM,CAAC,CAAC,EAAE;MACf,OAAO,IAAI,CAACH,CAAC,CAACM,KAAK,GAAG,IAAI,CAACX,OAAO,GAAG,CAAC,CAAC;IAC3C;IACA,OAAO,GAAG;EACd;EACA;AACJ;AACA;EACIc,IAAIA,CAACH,KAAK,EAAEC,KAAK,EAAE;IACf,IAAI,IAAI,CAACH,QAAQ,CAAC,CAAC,EAAE;MACjB,IAAI,CAACH,CAAC,CAAC,CAAC,CAAC,GAAGM,KAAK;IACrB,CAAC,MACI,IAAI,IAAI,CAACJ,MAAM,CAAC,CAAC,EAAE;MACpB,IAAI,CAACF,CAAC,CAACK,KAAK,GAAG,IAAI,CAACX,OAAO,GAAG,CAAC,CAAC,GAAGY,KAAK;IAC5C;EACJ;AACJ;AACA,eAAehB,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { mixInto } from '../../util/Utils';\nimport { Graph } from '../Graph';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst DragDropMixin = {\n  /**\n   * Specifies the return value for {@link isDropEnabled}.\n   * @default false\n   */\n  dropEnabled: false,\n  /**\n   * Specifies if dropping onto edges should be enabled. This is ignored if\n   * {@link dropEnabled} is `false`. If enabled, it will call {@link splitEdge} to carry\n   * out the drop operation.\n   * @default true\n   */\n  splitEnabled: true,\n  /**\n   * Specifies if the graph should automatically scroll if the mouse goes near\n   * the container edge while dragging. This is only taken into account if the\n   * container has scrollbars.\n   *\n   * If you need this to work without scrollbars then set {@link ignoreScrollbars} to\n   * true. Please consult the {@link ignoreScrollbars} for details. In general, with\n   * no scrollbars, the use of {@link allowAutoPanning} is recommended.\n   * @default true\n   */\n  autoScroll: true,\n  isAutoScroll() {\n    return this.autoScroll;\n  },\n  /**\n   * Specifies if the size of the graph should be automatically extended if the\n   * mouse goes near the container edge while dragging. This is only taken into\n   * account if the container has scrollbars. See {@link autoScroll}.\n   * @default true\n   */\n  autoExtend: true,\n  isAutoExtend() {\n    return this.autoExtend;\n  },\n  /*****************************************************************************\n   * Group: Graph behaviour\n   *****************************************************************************/\n  /**\n   * Returns {@link dropEnabled} as a boolean.\n   */\n  isDropEnabled() {\n    return this.dropEnabled;\n  },\n  /**\n   * Specifies if the graph should allow dropping of cells onto or into other\n   * cells.\n   *\n   * @param dropEnabled Boolean indicating if the graph should allow dropping\n   * of cells into other cells.\n   */\n  setDropEnabled(value) {\n    this.dropEnabled = value;\n  },\n  /*****************************************************************************\n   * Group: Split behaviour\n   *****************************************************************************/\n  /**\n   * Returns {@link splitEnabled} as a boolean.\n   */\n  isSplitEnabled() {\n    return this.splitEnabled;\n  },\n  /**\n   * Specifies if the graph should allow dropping of cells onto or into other\n   * cells.\n   *\n   * @param dropEnabled Boolean indicating if the graph should allow dropping\n   * of cells into other cells.\n   */\n  setSplitEnabled(value) {\n    this.splitEnabled = value;\n  },\n  /**\n   * Returns true if the given edge may be splitted into two edges with the\n   * given cell as a new terminal between the two.\n   *\n   * @param target {@link mxCell} that represents the edge to be splitted.\n   * @param cells {@link mxCell} that should split the edge.\n   * @param evt Mouseevent that triggered the invocation.\n   */\n  isSplitTarget(target, cells = [], evt) {\n    if (target.isEdge() && cells.length === 1 && cells[0].isConnectable() && !this.getEdgeValidationError(target, target.getTerminal(true), cells[0])) {\n      const src = target.getTerminal(true);\n      const trg = target.getTerminal(false);\n      return !cells[0].isAncestor(src) && !cells[0].isAncestor(trg);\n    }\n    return false;\n  }\n};\nmixInto(Graph)(DragDropMixin);","map":{"version":3,"names":["mixInto","Graph","DragDropMixin","dropEnabled","splitEnabled","autoScroll","isAutoScroll","autoExtend","isAutoExtend","isDropEnabled","setDropEnabled","value","isSplitEnabled","setSplitEnabled","isSplitTarget","target","cells","evt","isEdge","length","isConnectable","getEdgeValidationError","getTerminal","src","trg","isAncestor"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/view/mixins/DragDropMixin.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { mixInto } from '../../util/Utils';\nimport { Graph } from '../Graph';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst DragDropMixin = {\n    /**\n     * Specifies the return value for {@link isDropEnabled}.\n     * @default false\n     */\n    dropEnabled: false,\n    /**\n     * Specifies if dropping onto edges should be enabled. This is ignored if\n     * {@link dropEnabled} is `false`. If enabled, it will call {@link splitEdge} to carry\n     * out the drop operation.\n     * @default true\n     */\n    splitEnabled: true,\n    /**\n     * Specifies if the graph should automatically scroll if the mouse goes near\n     * the container edge while dragging. This is only taken into account if the\n     * container has scrollbars.\n     *\n     * If you need this to work without scrollbars then set {@link ignoreScrollbars} to\n     * true. Please consult the {@link ignoreScrollbars} for details. In general, with\n     * no scrollbars, the use of {@link allowAutoPanning} is recommended.\n     * @default true\n     */\n    autoScroll: true,\n    isAutoScroll() {\n        return this.autoScroll;\n    },\n    /**\n     * Specifies if the size of the graph should be automatically extended if the\n     * mouse goes near the container edge while dragging. This is only taken into\n     * account if the container has scrollbars. See {@link autoScroll}.\n     * @default true\n     */\n    autoExtend: true,\n    isAutoExtend() {\n        return this.autoExtend;\n    },\n    /*****************************************************************************\n     * Group: Graph behaviour\n     *****************************************************************************/\n    /**\n     * Returns {@link dropEnabled} as a boolean.\n     */\n    isDropEnabled() {\n        return this.dropEnabled;\n    },\n    /**\n     * Specifies if the graph should allow dropping of cells onto or into other\n     * cells.\n     *\n     * @param dropEnabled Boolean indicating if the graph should allow dropping\n     * of cells into other cells.\n     */\n    setDropEnabled(value) {\n        this.dropEnabled = value;\n    },\n    /*****************************************************************************\n     * Group: Split behaviour\n     *****************************************************************************/\n    /**\n     * Returns {@link splitEnabled} as a boolean.\n     */\n    isSplitEnabled() {\n        return this.splitEnabled;\n    },\n    /**\n     * Specifies if the graph should allow dropping of cells onto or into other\n     * cells.\n     *\n     * @param dropEnabled Boolean indicating if the graph should allow dropping\n     * of cells into other cells.\n     */\n    setSplitEnabled(value) {\n        this.splitEnabled = value;\n    },\n    /**\n     * Returns true if the given edge may be splitted into two edges with the\n     * given cell as a new terminal between the two.\n     *\n     * @param target {@link mxCell} that represents the edge to be splitted.\n     * @param cells {@link mxCell} that should split the edge.\n     * @param evt Mouseevent that triggered the invocation.\n     */\n    isSplitTarget(target, cells = [], evt) {\n        if (target.isEdge() &&\n            cells.length === 1 &&\n            cells[0].isConnectable() &&\n            !this.getEdgeValidationError(target, target.getTerminal(true), cells[0])) {\n            const src = target.getTerminal(true);\n            const trg = target.getTerminal(false);\n            return !cells[0].isAncestor(src) && !cells[0].isAncestor(trg);\n        }\n        return false;\n    },\n};\nmixInto(Graph)(DragDropMixin);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,KAAK,QAAQ,UAAU;AAChC;AACA,MAAMC,aAAa,GAAG;EAClB;AACJ;AACA;AACA;EACIC,WAAW,EAAE,KAAK;EAClB;AACJ;AACA;AACA;AACA;AACA;EACIC,YAAY,EAAE,IAAI;EAClB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAU,EAAE,IAAI;EAChBC,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACD,UAAU;EAC1B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIE,UAAU,EAAE,IAAI;EAChBC,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACD,UAAU;EAC1B,CAAC;EACD;AACJ;AACA;EACI;AACJ;AACA;EACIE,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACN,WAAW;EAC3B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIO,cAAcA,CAACC,KAAK,EAAE;IAClB,IAAI,CAACR,WAAW,GAAGQ,KAAK;EAC5B,CAAC;EACD;AACJ;AACA;EACI;AACJ;AACA;EACIC,cAAcA,CAAA,EAAG;IACb,OAAO,IAAI,CAACR,YAAY;EAC5B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIS,eAAeA,CAACF,KAAK,EAAE;IACnB,IAAI,CAACP,YAAY,GAAGO,KAAK;EAC7B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,aAAaA,CAACC,MAAM,EAAEC,KAAK,GAAG,EAAE,EAAEC,GAAG,EAAE;IACnC,IAAIF,MAAM,CAACG,MAAM,CAAC,CAAC,IACfF,KAAK,CAACG,MAAM,KAAK,CAAC,IAClBH,KAAK,CAAC,CAAC,CAAC,CAACI,aAAa,CAAC,CAAC,IACxB,CAAC,IAAI,CAACC,sBAAsB,CAACN,MAAM,EAAEA,MAAM,CAACO,WAAW,CAAC,IAAI,CAAC,EAAEN,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1E,MAAMO,GAAG,GAAGR,MAAM,CAACO,WAAW,CAAC,IAAI,CAAC;MACpC,MAAME,GAAG,GAAGT,MAAM,CAACO,WAAW,CAAC,KAAK,CAAC;MACrC,OAAO,CAACN,KAAK,CAAC,CAAC,CAAC,CAACS,UAAU,CAACF,GAAG,CAAC,IAAI,CAACP,KAAK,CAAC,CAAC,CAAC,CAACS,UAAU,CAACD,GAAG,CAAC;IACjE;IACA,OAAO,KAAK;EAChB;AACJ,CAAC;AACDxB,OAAO,CAACC,KAAK,CAAC,CAACC,aAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
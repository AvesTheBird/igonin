{"ast":null,"code":"var _InlineEditController;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar InlineEditController_1;\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, constObservable, observableFromEvent, observableSignalFromEvent, observableValue, transaction } from '../../../../base/common/observable.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GhostTextWidget } from './ghostTextWidget.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InlineEditTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { GhostText, GhostTextPart } from '../../inlineCompletions/browser/model/ghostText.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { InlineEditHintsWidget } from './inlineEditHintsWidget.js';\nimport { createStyleSheet2 } from '../../../../base/browser/dom.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { derivedDisposable } from '../../../../base/common/observableInternal/derived.js';\nimport { InlineEditSideBySideWidget } from './inlineEditSideBySideWidget.js';\nimport { IDiffProviderFactoryService } from '../../../browser/widget/diffEditor/diffProviderFactoryService.js';\nimport { IModelService } from '../../../common/services/model.js';\nlet InlineEditController = (_InlineEditController = class InlineEditController extends Disposable {\n  static get(editor) {\n    return editor.getContribution(InlineEditController_1.ID);\n  }\n  constructor(editor, instantiationService, contextKeyService, languageFeaturesService, _commandService, _configurationService, _diffProviderFactoryService, _modelService) {\n    super();\n    this.editor = editor;\n    this.instantiationService = instantiationService;\n    this.contextKeyService = contextKeyService;\n    this.languageFeaturesService = languageFeaturesService;\n    this._commandService = _commandService;\n    this._configurationService = _configurationService;\n    this._diffProviderFactoryService = _diffProviderFactoryService;\n    this._modelService = _modelService;\n    this._isVisibleContext = InlineEditController_1.inlineEditVisibleContext.bindTo(this.contextKeyService);\n    this._isCursorAtInlineEditContext = InlineEditController_1.cursorAtInlineEditContext.bindTo(this.contextKeyService);\n    this._currentEdit = observableValue(this, undefined);\n    this._currentWidget = derivedDisposable(this._currentEdit, reader => {\n      var _this$editor$getModel;\n      const edit = this._currentEdit.read(reader);\n      if (!edit) {\n        return undefined;\n      }\n      const line = edit.range.endLineNumber;\n      const column = edit.range.endColumn;\n      const textToDisplay = edit.text.endsWith('\\n') && !(edit.range.startLineNumber === edit.range.endLineNumber && edit.range.startColumn === edit.range.endColumn) ? edit.text.slice(0, -1) : edit.text;\n      const ghostText = new GhostText(line, [new GhostTextPart(column, textToDisplay, false)]);\n      //only show ghost text for single line edits\n      //unless it is a pure removal\n      //multi line edits are shown in the side by side widget\n      const isSingleLine = edit.range.startLineNumber === edit.range.endLineNumber && ghostText.parts.length === 1 && ghostText.parts[0].lines.length === 1;\n      const isPureRemoval = edit.text === '';\n      if (!isSingleLine && !isPureRemoval) {\n        return undefined;\n      }\n      const instance = this.instantiationService.createInstance(GhostTextWidget, this.editor, {\n        ghostText: constObservable(ghostText),\n        minReservedLineCount: constObservable(0),\n        targetTextModel: constObservable((_this$editor$getModel = this.editor.getModel()) !== null && _this$editor$getModel !== void 0 ? _this$editor$getModel : undefined),\n        range: constObservable(edit.range)\n      });\n      return instance;\n    });\n    this._isAccepting = observableValue(this, false);\n    this._enabled = observableFromEvent(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).enabled);\n    this._fontFamily = observableFromEvent(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).fontFamily);\n    //Automatically request inline edit when the content was changed\n    //Cancel the previous request if there is one\n    //Remove the previous ghost text\n    const modelChangedSignal = observableSignalFromEvent('InlineEditController.modelContentChangedSignal', editor.onDidChangeModelContent);\n    this._register(autorun(reader => {\n      /** @description InlineEditController.modelContentChanged model */\n      if (!this._enabled.read(reader)) {\n        return;\n      }\n      modelChangedSignal.read(reader);\n      if (this._isAccepting.read(reader)) {\n        return;\n      }\n      this.getInlineEdit(editor, true);\n    }));\n    //Check if the cursor is at the ghost text\n    const cursorPosition = observableFromEvent(this, editor.onDidChangeCursorPosition, () => editor.getPosition());\n    this._register(autorun(reader => {\n      /** @description InlineEditController.cursorPositionChanged model */\n      if (!this._enabled.read(reader)) {\n        return;\n      }\n      const pos = cursorPosition.read(reader);\n      if (pos) {\n        this.checkCursorPosition(pos);\n      }\n    }));\n    //Perform stuff when the current edit has changed\n    this._register(autorun(reader => {\n      /** @description InlineEditController.update model */\n      const currentEdit = this._currentEdit.read(reader);\n      this._isCursorAtInlineEditContext.set(false);\n      if (!currentEdit) {\n        this._isVisibleContext.set(false);\n        return;\n      }\n      this._isVisibleContext.set(true);\n      const pos = editor.getPosition();\n      if (pos) {\n        this.checkCursorPosition(pos);\n      }\n    }));\n    //Clear suggestions on lost focus\n    const editorBlurSingal = observableSignalFromEvent('InlineEditController.editorBlurSignal', editor.onDidBlurEditorWidget);\n    this._register(autorun(async reader => {\n      var _this$_currentRequest;\n      /** @description InlineEditController.editorBlur */\n      if (!this._enabled.read(reader)) {\n        return;\n      }\n      editorBlurSingal.read(reader);\n      // This is a hidden setting very useful for debugging\n      if (this._configurationService.getValue('editor.experimentalInlineEdit.keepOnBlur') || editor.getOption(63 /* EditorOption.inlineEdit */).keepOnBlur) {\n        return;\n      }\n      (_this$_currentRequest = this._currentRequestCts) === null || _this$_currentRequest === void 0 || _this$_currentRequest.dispose(true);\n      this._currentRequestCts = undefined;\n      await this.clear(false);\n    }));\n    //Invoke provider on focus\n    const editorFocusSignal = observableSignalFromEvent('InlineEditController.editorFocusSignal', editor.onDidFocusEditorText);\n    this._register(autorun(reader => {\n      /** @description InlineEditController.editorFocus */\n      if (!this._enabled.read(reader)) {\n        return;\n      }\n      editorFocusSignal.read(reader);\n      this.getInlineEdit(editor, true);\n    }));\n    //handle changes of font setting\n    const styleElement = this._register(createStyleSheet2());\n    this._register(autorun(reader => {\n      const fontFamily = this._fontFamily.read(reader);\n      styleElement.setStyle(fontFamily === '' || fontFamily === 'default' ? \"\" : \"\\n.monaco-editor .inline-edit-decoration,\\n.monaco-editor .inline-edit-decoration-preview,\\n.monaco-editor .inline-edit {\\n\\tfont-family: \".concat(fontFamily, \";\\n}\"));\n    }));\n    this._register(new InlineEditHintsWidget(this.editor, this._currentWidget, this.instantiationService));\n    this._register(new InlineEditSideBySideWidget(this.editor, this._currentEdit, this.instantiationService, this._diffProviderFactoryService, this._modelService));\n  }\n  checkCursorPosition(position) {\n    if (!this._currentEdit) {\n      this._isCursorAtInlineEditContext.set(false);\n      return;\n    }\n    const gt = this._currentEdit.get();\n    if (!gt) {\n      this._isCursorAtInlineEditContext.set(false);\n      return;\n    }\n    this._isCursorAtInlineEditContext.set(Range.containsPosition(gt.range, position));\n  }\n  validateInlineEdit(editor, edit) {\n    //Multiline inline replacing edit must replace whole lines\n    if (edit.text.includes('\\n') && edit.range.startLineNumber !== edit.range.endLineNumber && edit.range.startColumn !== edit.range.endColumn) {\n      var _editor$getModel$getL, _editor$getModel;\n      const firstColumn = edit.range.startColumn;\n      if (firstColumn !== 1) {\n        return false;\n      }\n      const lastLine = edit.range.endLineNumber;\n      const lastColumn = edit.range.endColumn;\n      const lineLength = (_editor$getModel$getL = (_editor$getModel = editor.getModel()) === null || _editor$getModel === void 0 ? void 0 : _editor$getModel.getLineLength(lastLine)) !== null && _editor$getModel$getL !== void 0 ? _editor$getModel$getL : 0;\n      if (lastColumn !== lineLength + 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n  async fetchInlineEdit(editor, auto) {\n    if (this._currentRequestCts) {\n      this._currentRequestCts.dispose(true);\n    }\n    const model = editor.getModel();\n    if (!model) {\n      return;\n    }\n    const modelVersion = model.getVersionId();\n    const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n    if (providers.length === 0) {\n      return;\n    }\n    const provider = providers[0];\n    this._currentRequestCts = new CancellationTokenSource();\n    const token = this._currentRequestCts.token;\n    const triggerKind = auto ? InlineEditTriggerKind.Automatic : InlineEditTriggerKind.Invoke;\n    const shouldDebounce = auto;\n    if (shouldDebounce) {\n      await wait(50, token);\n    }\n    if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n      return;\n    }\n    const edit = await provider.provideInlineEdit(model, {\n      triggerKind\n    }, token);\n    if (!edit) {\n      return;\n    }\n    if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n      return;\n    }\n    if (!this.validateInlineEdit(editor, edit)) {\n      return;\n    }\n    return edit;\n  }\n  async getInlineEdit(editor, auto) {\n    this._isCursorAtInlineEditContext.set(false);\n    await this.clear();\n    const edit = await this.fetchInlineEdit(editor, auto);\n    if (!edit) {\n      return;\n    }\n    this._currentEdit.set(edit, undefined);\n  }\n  async trigger() {\n    await this.getInlineEdit(this.editor, false);\n  }\n  async jumpBack() {\n    if (!this._jumpBackPosition) {\n      return;\n    }\n    this.editor.setPosition(this._jumpBackPosition);\n    //if position is outside viewports, scroll to it\n    this.editor.revealPositionInCenterIfOutsideViewport(this._jumpBackPosition);\n  }\n  async accept() {\n    this._isAccepting.set(true, undefined);\n    const data = this._currentEdit.get();\n    if (!data) {\n      return;\n    }\n    //It should only happen in case of last line suggestion\n    let text = data.text;\n    if (data.text.startsWith('\\n')) {\n      text = data.text.substring(1);\n    }\n    this.editor.pushUndoStop();\n    this.editor.executeEdits('acceptCurrent', [EditOperation.replace(Range.lift(data.range), text)]);\n    if (data.accepted) {\n      await this._commandService.executeCommand(data.accepted.id, ...(data.accepted.arguments || [])).then(undefined, onUnexpectedExternalError);\n    }\n    this.freeEdit(data);\n    transaction(tx => {\n      this._currentEdit.set(undefined, tx);\n      this._isAccepting.set(false, tx);\n    });\n  }\n  jumpToCurrent() {\n    var _this$editor$getSelec;\n    this._jumpBackPosition = (_this$editor$getSelec = this.editor.getSelection()) === null || _this$editor$getSelec === void 0 ? void 0 : _this$editor$getSelec.getStartPosition();\n    const data = this._currentEdit.get();\n    if (!data) {\n      return;\n    }\n    const position = Position.lift({\n      lineNumber: data.range.startLineNumber,\n      column: data.range.startColumn\n    });\n    this.editor.setPosition(position);\n    //if position is outside viewports, scroll to it\n    this.editor.revealPositionInCenterIfOutsideViewport(position);\n  }\n  async clear() {\n    let sendRejection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const edit = this._currentEdit.get();\n    if (edit && edit !== null && edit !== void 0 && edit.rejected && sendRejection) {\n      await this._commandService.executeCommand(edit.rejected.id, ...(edit.rejected.arguments || [])).then(undefined, onUnexpectedExternalError);\n    }\n    if (edit) {\n      this.freeEdit(edit);\n    }\n    this._currentEdit.set(undefined, undefined);\n  }\n  freeEdit(edit) {\n    const model = this.editor.getModel();\n    if (!model) {\n      return;\n    }\n    const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n    if (providers.length === 0) {\n      return;\n    }\n    providers[0].freeInlineEdit(edit);\n  }\n}, InlineEditController_1 = _InlineEditController, _InlineEditController.ID = 'editor.contrib.inlineEditController', _InlineEditController.inlineEditVisibleKey = 'inlineEditVisible', _InlineEditController.inlineEditVisibleContext = new RawContextKey(_InlineEditController.inlineEditVisibleKey, false), _InlineEditController.cursorAtInlineEditKey = 'cursorAtInlineEdit', _InlineEditController.cursorAtInlineEditContext = new RawContextKey(_InlineEditController.cursorAtInlineEditKey, false), _InlineEditController);\nInlineEditController = InlineEditController_1 = __decorate([__param(1, IInstantiationService), __param(2, IContextKeyService), __param(3, ILanguageFeaturesService), __param(4, ICommandService), __param(5, IConfigurationService), __param(6, IDiffProviderFactoryService), __param(7, IModelService)], InlineEditController);\nexport { InlineEditController };\nfunction wait(ms, cancellationToken) {\n  return new Promise(resolve => {\n    let d = undefined;\n    const handle = setTimeout(() => {\n      if (d) {\n        d.dispose();\n      }\n      resolve();\n    }, ms);\n    if (cancellationToken) {\n      d = cancellationToken.onCancellationRequested(() => {\n        clearTimeout(handle);\n        if (d) {\n          d.dispose();\n        }\n        resolve();\n      });\n    }\n  });\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","InlineEditController_1","Disposable","autorun","constObservable","observableFromEvent","observableSignalFromEvent","observableValue","transaction","EditOperation","Position","Range","GhostTextWidget","IContextKeyService","RawContextKey","IInstantiationService","InlineEditTriggerKind","ILanguageFeaturesService","CancellationTokenSource","GhostText","GhostTextPart","ICommandService","InlineEditHintsWidget","createStyleSheet2","IConfigurationService","onUnexpectedExternalError","derivedDisposable","InlineEditSideBySideWidget","IDiffProviderFactoryService","IModelService","InlineEditController","_InlineEditController","get","editor","getContribution","ID","constructor","instantiationService","contextKeyService","languageFeaturesService","_commandService","_configurationService","_diffProviderFactoryService","_modelService","_isVisibleContext","inlineEditVisibleContext","bindTo","_isCursorAtInlineEditContext","cursorAtInlineEditContext","_currentEdit","undefined","_currentWidget","reader","_this$editor$getModel","edit","read","line","range","endLineNumber","column","endColumn","textToDisplay","text","endsWith","startLineNumber","startColumn","slice","ghostText","isSingleLine","parts","lines","isPureRemoval","instance","createInstance","minReservedLineCount","targetTextModel","getModel","_isAccepting","_enabled","onDidChangeConfiguration","getOption","enabled","_fontFamily","fontFamily","modelChangedSignal","onDidChangeModelContent","_register","getInlineEdit","cursorPosition","onDidChangeCursorPosition","getPosition","pos","checkCursorPosition","currentEdit","set","editorBlurSingal","onDidBlurEditorWidget","_this$_currentRequest","getValue","keepOnBlur","_currentRequestCts","dispose","clear","editorFocusSignal","onDidFocusEditorText","styleElement","setStyle","concat","position","gt","containsPosition","validateInlineEdit","includes","_editor$getModel$getL","_editor$getModel","firstColumn","lastLine","lastColumn","lineLength","getLineLength","fetchInlineEdit","auto","model","modelVersion","getVersionId","providers","inlineEditProvider","all","provider","token","triggerKind","Automatic","Invoke","shouldDebounce","wait","isCancellationRequested","isDisposed","provideInlineEdit","trigger","jumpBack","_jumpBackPosition","setPosition","revealPositionInCenterIfOutsideViewport","accept","data","startsWith","substring","pushUndoStop","executeEdits","replace","lift","accepted","executeCommand","id","then","freeEdit","tx","jumpToCurrent","_this$editor$getSelec","getSelection","getStartPosition","lineNumber","sendRejection","rejected","freeInlineEdit","inlineEditVisibleKey","cursorAtInlineEditKey","ms","cancellationToken","Promise","resolve","handle","setTimeout","onCancellationRequested","clearTimeout"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdit/browser/inlineEditController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar InlineEditController_1;\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, constObservable, observableFromEvent, observableSignalFromEvent, observableValue, transaction } from '../../../../base/common/observable.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GhostTextWidget } from './ghostTextWidget.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { InlineEditTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { GhostText, GhostTextPart } from '../../inlineCompletions/browser/model/ghostText.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { InlineEditHintsWidget } from './inlineEditHintsWidget.js';\nimport { createStyleSheet2 } from '../../../../base/browser/dom.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { derivedDisposable } from '../../../../base/common/observableInternal/derived.js';\nimport { InlineEditSideBySideWidget } from './inlineEditSideBySideWidget.js';\nimport { IDiffProviderFactoryService } from '../../../browser/widget/diffEditor/diffProviderFactoryService.js';\nimport { IModelService } from '../../../common/services/model.js';\nlet InlineEditController = class InlineEditController extends Disposable {\n    static { InlineEditController_1 = this; }\n    static { this.ID = 'editor.contrib.inlineEditController'; }\n    static { this.inlineEditVisibleKey = 'inlineEditVisible'; }\n    static { this.inlineEditVisibleContext = new RawContextKey(this.inlineEditVisibleKey, false); }\n    static { this.cursorAtInlineEditKey = 'cursorAtInlineEdit'; }\n    static { this.cursorAtInlineEditContext = new RawContextKey(this.cursorAtInlineEditKey, false); }\n    static get(editor) {\n        return editor.getContribution(InlineEditController_1.ID);\n    }\n    constructor(editor, instantiationService, contextKeyService, languageFeaturesService, _commandService, _configurationService, _diffProviderFactoryService, _modelService) {\n        super();\n        this.editor = editor;\n        this.instantiationService = instantiationService;\n        this.contextKeyService = contextKeyService;\n        this.languageFeaturesService = languageFeaturesService;\n        this._commandService = _commandService;\n        this._configurationService = _configurationService;\n        this._diffProviderFactoryService = _diffProviderFactoryService;\n        this._modelService = _modelService;\n        this._isVisibleContext = InlineEditController_1.inlineEditVisibleContext.bindTo(this.contextKeyService);\n        this._isCursorAtInlineEditContext = InlineEditController_1.cursorAtInlineEditContext.bindTo(this.contextKeyService);\n        this._currentEdit = observableValue(this, undefined);\n        this._currentWidget = derivedDisposable(this._currentEdit, (reader) => {\n            const edit = this._currentEdit.read(reader);\n            if (!edit) {\n                return undefined;\n            }\n            const line = edit.range.endLineNumber;\n            const column = edit.range.endColumn;\n            const textToDisplay = edit.text.endsWith('\\n') && !(edit.range.startLineNumber === edit.range.endLineNumber && edit.range.startColumn === edit.range.endColumn) ? edit.text.slice(0, -1) : edit.text;\n            const ghostText = new GhostText(line, [new GhostTextPart(column, textToDisplay, false)]);\n            //only show ghost text for single line edits\n            //unless it is a pure removal\n            //multi line edits are shown in the side by side widget\n            const isSingleLine = edit.range.startLineNumber === edit.range.endLineNumber && ghostText.parts.length === 1 && ghostText.parts[0].lines.length === 1;\n            const isPureRemoval = edit.text === '';\n            if (!isSingleLine && !isPureRemoval) {\n                return undefined;\n            }\n            const instance = this.instantiationService.createInstance(GhostTextWidget, this.editor, {\n                ghostText: constObservable(ghostText),\n                minReservedLineCount: constObservable(0),\n                targetTextModel: constObservable(this.editor.getModel() ?? undefined),\n                range: constObservable(edit.range)\n            });\n            return instance;\n        });\n        this._isAccepting = observableValue(this, false);\n        this._enabled = observableFromEvent(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).enabled);\n        this._fontFamily = observableFromEvent(this, this.editor.onDidChangeConfiguration, () => this.editor.getOption(63 /* EditorOption.inlineEdit */).fontFamily);\n        //Automatically request inline edit when the content was changed\n        //Cancel the previous request if there is one\n        //Remove the previous ghost text\n        const modelChangedSignal = observableSignalFromEvent('InlineEditController.modelContentChangedSignal', editor.onDidChangeModelContent);\n        this._register(autorun(reader => {\n            /** @description InlineEditController.modelContentChanged model */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            modelChangedSignal.read(reader);\n            if (this._isAccepting.read(reader)) {\n                return;\n            }\n            this.getInlineEdit(editor, true);\n        }));\n        //Check if the cursor is at the ghost text\n        const cursorPosition = observableFromEvent(this, editor.onDidChangeCursorPosition, () => editor.getPosition());\n        this._register(autorun(reader => {\n            /** @description InlineEditController.cursorPositionChanged model */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            const pos = cursorPosition.read(reader);\n            if (pos) {\n                this.checkCursorPosition(pos);\n            }\n        }));\n        //Perform stuff when the current edit has changed\n        this._register(autorun((reader) => {\n            /** @description InlineEditController.update model */\n            const currentEdit = this._currentEdit.read(reader);\n            this._isCursorAtInlineEditContext.set(false);\n            if (!currentEdit) {\n                this._isVisibleContext.set(false);\n                return;\n            }\n            this._isVisibleContext.set(true);\n            const pos = editor.getPosition();\n            if (pos) {\n                this.checkCursorPosition(pos);\n            }\n        }));\n        //Clear suggestions on lost focus\n        const editorBlurSingal = observableSignalFromEvent('InlineEditController.editorBlurSignal', editor.onDidBlurEditorWidget);\n        this._register(autorun(async (reader) => {\n            /** @description InlineEditController.editorBlur */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            editorBlurSingal.read(reader);\n            // This is a hidden setting very useful for debugging\n            if (this._configurationService.getValue('editor.experimentalInlineEdit.keepOnBlur') || editor.getOption(63 /* EditorOption.inlineEdit */).keepOnBlur) {\n                return;\n            }\n            this._currentRequestCts?.dispose(true);\n            this._currentRequestCts = undefined;\n            await this.clear(false);\n        }));\n        //Invoke provider on focus\n        const editorFocusSignal = observableSignalFromEvent('InlineEditController.editorFocusSignal', editor.onDidFocusEditorText);\n        this._register(autorun(reader => {\n            /** @description InlineEditController.editorFocus */\n            if (!this._enabled.read(reader)) {\n                return;\n            }\n            editorFocusSignal.read(reader);\n            this.getInlineEdit(editor, true);\n        }));\n        //handle changes of font setting\n        const styleElement = this._register(createStyleSheet2());\n        this._register(autorun(reader => {\n            const fontFamily = this._fontFamily.read(reader);\n            styleElement.setStyle(fontFamily === '' || fontFamily === 'default' ? `` : `\n.monaco-editor .inline-edit-decoration,\n.monaco-editor .inline-edit-decoration-preview,\n.monaco-editor .inline-edit {\n\tfont-family: ${fontFamily};\n}`);\n        }));\n        this._register(new InlineEditHintsWidget(this.editor, this._currentWidget, this.instantiationService));\n        this._register(new InlineEditSideBySideWidget(this.editor, this._currentEdit, this.instantiationService, this._diffProviderFactoryService, this._modelService));\n    }\n    checkCursorPosition(position) {\n        if (!this._currentEdit) {\n            this._isCursorAtInlineEditContext.set(false);\n            return;\n        }\n        const gt = this._currentEdit.get();\n        if (!gt) {\n            this._isCursorAtInlineEditContext.set(false);\n            return;\n        }\n        this._isCursorAtInlineEditContext.set(Range.containsPosition(gt.range, position));\n    }\n    validateInlineEdit(editor, edit) {\n        //Multiline inline replacing edit must replace whole lines\n        if (edit.text.includes('\\n') && edit.range.startLineNumber !== edit.range.endLineNumber && edit.range.startColumn !== edit.range.endColumn) {\n            const firstColumn = edit.range.startColumn;\n            if (firstColumn !== 1) {\n                return false;\n            }\n            const lastLine = edit.range.endLineNumber;\n            const lastColumn = edit.range.endColumn;\n            const lineLength = editor.getModel()?.getLineLength(lastLine) ?? 0;\n            if (lastColumn !== lineLength + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async fetchInlineEdit(editor, auto) {\n        if (this._currentRequestCts) {\n            this._currentRequestCts.dispose(true);\n        }\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelVersion = model.getVersionId();\n        const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n        if (providers.length === 0) {\n            return;\n        }\n        const provider = providers[0];\n        this._currentRequestCts = new CancellationTokenSource();\n        const token = this._currentRequestCts.token;\n        const triggerKind = auto ? InlineEditTriggerKind.Automatic : InlineEditTriggerKind.Invoke;\n        const shouldDebounce = auto;\n        if (shouldDebounce) {\n            await wait(50, token);\n        }\n        if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n            return;\n        }\n        const edit = await provider.provideInlineEdit(model, { triggerKind }, token);\n        if (!edit) {\n            return;\n        }\n        if (token.isCancellationRequested || model.isDisposed() || model.getVersionId() !== modelVersion) {\n            return;\n        }\n        if (!this.validateInlineEdit(editor, edit)) {\n            return;\n        }\n        return edit;\n    }\n    async getInlineEdit(editor, auto) {\n        this._isCursorAtInlineEditContext.set(false);\n        await this.clear();\n        const edit = await this.fetchInlineEdit(editor, auto);\n        if (!edit) {\n            return;\n        }\n        this._currentEdit.set(edit, undefined);\n    }\n    async trigger() {\n        await this.getInlineEdit(this.editor, false);\n    }\n    async jumpBack() {\n        if (!this._jumpBackPosition) {\n            return;\n        }\n        this.editor.setPosition(this._jumpBackPosition);\n        //if position is outside viewports, scroll to it\n        this.editor.revealPositionInCenterIfOutsideViewport(this._jumpBackPosition);\n    }\n    async accept() {\n        this._isAccepting.set(true, undefined);\n        const data = this._currentEdit.get();\n        if (!data) {\n            return;\n        }\n        //It should only happen in case of last line suggestion\n        let text = data.text;\n        if (data.text.startsWith('\\n')) {\n            text = data.text.substring(1);\n        }\n        this.editor.pushUndoStop();\n        this.editor.executeEdits('acceptCurrent', [EditOperation.replace(Range.lift(data.range), text)]);\n        if (data.accepted) {\n            await this._commandService\n                .executeCommand(data.accepted.id, ...(data.accepted.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n        }\n        this.freeEdit(data);\n        transaction((tx) => {\n            this._currentEdit.set(undefined, tx);\n            this._isAccepting.set(false, tx);\n        });\n    }\n    jumpToCurrent() {\n        this._jumpBackPosition = this.editor.getSelection()?.getStartPosition();\n        const data = this._currentEdit.get();\n        if (!data) {\n            return;\n        }\n        const position = Position.lift({ lineNumber: data.range.startLineNumber, column: data.range.startColumn });\n        this.editor.setPosition(position);\n        //if position is outside viewports, scroll to it\n        this.editor.revealPositionInCenterIfOutsideViewport(position);\n    }\n    async clear(sendRejection = true) {\n        const edit = this._currentEdit.get();\n        if (edit && edit?.rejected && sendRejection) {\n            await this._commandService\n                .executeCommand(edit.rejected.id, ...(edit.rejected.arguments || []))\n                .then(undefined, onUnexpectedExternalError);\n        }\n        if (edit) {\n            this.freeEdit(edit);\n        }\n        this._currentEdit.set(undefined, undefined);\n    }\n    freeEdit(edit) {\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        const providers = this.languageFeaturesService.inlineEditProvider.all(model);\n        if (providers.length === 0) {\n            return;\n        }\n        providers[0].freeInlineEdit(edit);\n    }\n};\nInlineEditController = InlineEditController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IContextKeyService),\n    __param(3, ILanguageFeaturesService),\n    __param(4, ICommandService),\n    __param(5, IConfigurationService),\n    __param(6, IDiffProviderFactoryService),\n    __param(7, IModelService)\n], InlineEditController);\nexport { InlineEditController };\nfunction wait(ms, cancellationToken) {\n    return new Promise(resolve => {\n        let d = undefined;\n        const handle = setTimeout(() => {\n            if (d) {\n                d.dispose();\n            }\n            resolve();\n        }, ms);\n        if (cancellationToken) {\n            d = cancellationToken.onCancellationRequested(() => {\n                clearTimeout(handle);\n                if (d) {\n                    d.dispose();\n                }\n                resolve();\n            });\n        }\n    });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup, UndoRedoSource } from './undoRedo.js';\nconst DEBUG = false;\nfunction getResourceLabel(resource) {\n  return resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\nlet stackElementCounter = 0;\nclass ResourceStackElement {\n  constructor(actual, resourceLabel, strResource, groupId, groupOrder, sourceId, sourceOrder) {\n    this.id = ++stackElementCounter;\n    this.type = 0 /* UndoRedoElementType.Resource */;\n    this.actual = actual;\n    this.label = actual.label;\n    this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n    this.resourceLabel = resourceLabel;\n    this.strResource = strResource;\n    this.resourceLabels = [this.resourceLabel];\n    this.strResources = [this.strResource];\n    this.groupId = groupId;\n    this.groupOrder = groupOrder;\n    this.sourceId = sourceId;\n    this.sourceOrder = sourceOrder;\n    this.isValid = true;\n  }\n  setValid(isValid) {\n    this.isValid = isValid;\n  }\n  toString() {\n    return \"[id:\".concat(this.id, \"] [group:\").concat(this.groupId, \"] [\").concat(this.isValid ? '  VALID' : 'INVALID', \"] \").concat(this.actual.constructor.name, \" - \").concat(this.actual);\n  }\n}\nclass ResourceReasonPair {\n  constructor(resourceLabel, reason) {\n    this.resourceLabel = resourceLabel;\n    this.reason = reason;\n  }\n}\nclass RemovedResources {\n  constructor() {\n    this.elements = new Map();\n  }\n  createMessage() {\n    const externalRemoval = [];\n    const noParallelUniverses = [];\n    for (const [, element] of this.elements) {\n      const dest = element.reason === 0 /* RemovedResourceReason.ExternalRemoval */ ? externalRemoval : noParallelUniverses;\n      dest.push(element.resourceLabel);\n    }\n    const messages = [];\n    if (externalRemoval.length > 0) {\n      messages.push(nls.localize({\n        key: 'externalRemoval',\n        comment: ['{0} is a list of filenames']\n      }, \"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')));\n    }\n    if (noParallelUniverses.length > 0) {\n      messages.push(nls.localize({\n        key: 'noParallelUniverses',\n        comment: ['{0} is a list of filenames']\n      }, \"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')));\n    }\n    return messages.join('\\n');\n  }\n  get size() {\n    return this.elements.size;\n  }\n  has(strResource) {\n    return this.elements.has(strResource);\n  }\n  set(strResource, value) {\n    this.elements.set(strResource, value);\n  }\n  delete(strResource) {\n    return this.elements.delete(strResource);\n  }\n}\nclass WorkspaceStackElement {\n  constructor(actual, resourceLabels, strResources, groupId, groupOrder, sourceId, sourceOrder) {\n    this.id = ++stackElementCounter;\n    this.type = 1 /* UndoRedoElementType.Workspace */;\n    this.actual = actual;\n    this.label = actual.label;\n    this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n    this.resourceLabels = resourceLabels;\n    this.strResources = strResources;\n    this.groupId = groupId;\n    this.groupOrder = groupOrder;\n    this.sourceId = sourceId;\n    this.sourceOrder = sourceOrder;\n    this.removedResources = null;\n    this.invalidatedResources = null;\n  }\n  canSplit() {\n    return typeof this.actual.split === 'function';\n  }\n  removeResource(resourceLabel, strResource, reason) {\n    if (!this.removedResources) {\n      this.removedResources = new RemovedResources();\n    }\n    if (!this.removedResources.has(strResource)) {\n      this.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n    }\n  }\n  setValid(resourceLabel, strResource, isValid) {\n    if (isValid) {\n      if (this.invalidatedResources) {\n        this.invalidatedResources.delete(strResource);\n        if (this.invalidatedResources.size === 0) {\n          this.invalidatedResources = null;\n        }\n      }\n    } else {\n      if (!this.invalidatedResources) {\n        this.invalidatedResources = new RemovedResources();\n      }\n      if (!this.invalidatedResources.has(strResource)) {\n        this.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, 0 /* RemovedResourceReason.ExternalRemoval */));\n      }\n    }\n  }\n  toString() {\n    return \"[id:\".concat(this.id, \"] [group:\").concat(this.groupId, \"] [\").concat(this.invalidatedResources ? 'INVALID' : '  VALID', \"] \").concat(this.actual.constructor.name, \" - \").concat(this.actual);\n  }\n}\nclass ResourceEditStack {\n  constructor(resourceLabel, strResource) {\n    this.resourceLabel = resourceLabel;\n    this.strResource = strResource;\n    this._past = [];\n    this._future = [];\n    this.locked = false;\n    this.versionId = 1;\n  }\n  dispose() {\n    for (const element of this._past) {\n      if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n        element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n      }\n    }\n    for (const element of this._future) {\n      if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n        element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n      }\n    }\n    this.versionId++;\n  }\n  toString() {\n    const result = [];\n    result.push(\"* \".concat(this.strResource, \":\"));\n    for (let i = 0; i < this._past.length; i++) {\n      result.push(\"   * [UNDO] \".concat(this._past[i]));\n    }\n    for (let i = this._future.length - 1; i >= 0; i--) {\n      result.push(\"   * [REDO] \".concat(this._future[i]));\n    }\n    return result.join('\\n');\n  }\n  flushAllElements() {\n    this._past = [];\n    this._future = [];\n    this.versionId++;\n  }\n  _setElementValidFlag(element, isValid) {\n    if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n      element.setValid(this.resourceLabel, this.strResource, isValid);\n    } else {\n      element.setValid(isValid);\n    }\n  }\n  setElementsValidFlag(isValid, filter) {\n    for (const element of this._past) {\n      if (filter(element.actual)) {\n        this._setElementValidFlag(element, isValid);\n      }\n    }\n    for (const element of this._future) {\n      if (filter(element.actual)) {\n        this._setElementValidFlag(element, isValid);\n      }\n    }\n  }\n  pushElement(element) {\n    // remove the future\n    for (const futureElement of this._future) {\n      if (futureElement.type === 1 /* UndoRedoElementType.Workspace */) {\n        futureElement.removeResource(this.resourceLabel, this.strResource, 1 /* RemovedResourceReason.NoParallelUniverses */);\n      }\n    }\n    this._future = [];\n    this._past.push(element);\n    this.versionId++;\n  }\n  createSnapshot(resource) {\n    const elements = [];\n    for (let i = 0, len = this._past.length; i < len; i++) {\n      elements.push(this._past[i].id);\n    }\n    for (let i = this._future.length - 1; i >= 0; i--) {\n      elements.push(this._future[i].id);\n    }\n    return new ResourceEditStackSnapshot(resource, elements);\n  }\n  restoreSnapshot(snapshot) {\n    const snapshotLength = snapshot.elements.length;\n    let isOK = true;\n    let snapshotIndex = 0;\n    let removePastAfter = -1;\n    for (let i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n      const element = this._past[i];\n      if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n        isOK = false;\n        removePastAfter = 0;\n      }\n      if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n        element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n      }\n    }\n    let removeFutureBefore = -1;\n    for (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n      const element = this._future[i];\n      if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n        isOK = false;\n        removeFutureBefore = i;\n      }\n      if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n        element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n      }\n    }\n    if (removePastAfter !== -1) {\n      this._past = this._past.slice(0, removePastAfter);\n    }\n    if (removeFutureBefore !== -1) {\n      this._future = this._future.slice(removeFutureBefore + 1);\n    }\n    this.versionId++;\n  }\n  getElements() {\n    const past = [];\n    const future = [];\n    for (const element of this._past) {\n      past.push(element.actual);\n    }\n    for (const element of this._future) {\n      future.push(element.actual);\n    }\n    return {\n      past,\n      future\n    };\n  }\n  getClosestPastElement() {\n    if (this._past.length === 0) {\n      return null;\n    }\n    return this._past[this._past.length - 1];\n  }\n  getSecondClosestPastElement() {\n    if (this._past.length < 2) {\n      return null;\n    }\n    return this._past[this._past.length - 2];\n  }\n  getClosestFutureElement() {\n    if (this._future.length === 0) {\n      return null;\n    }\n    return this._future[this._future.length - 1];\n  }\n  hasPastElements() {\n    return this._past.length > 0;\n  }\n  hasFutureElements() {\n    return this._future.length > 0;\n  }\n  splitPastWorkspaceElement(toRemove, individualMap) {\n    for (let j = this._past.length - 1; j >= 0; j--) {\n      if (this._past[j] === toRemove) {\n        if (individualMap.has(this.strResource)) {\n          // gets replaced\n          this._past[j] = individualMap.get(this.strResource);\n        } else {\n          // gets deleted\n          this._past.splice(j, 1);\n        }\n        break;\n      }\n    }\n    this.versionId++;\n  }\n  splitFutureWorkspaceElement(toRemove, individualMap) {\n    for (let j = this._future.length - 1; j >= 0; j--) {\n      if (this._future[j] === toRemove) {\n        if (individualMap.has(this.strResource)) {\n          // gets replaced\n          this._future[j] = individualMap.get(this.strResource);\n        } else {\n          // gets deleted\n          this._future.splice(j, 1);\n        }\n        break;\n      }\n    }\n    this.versionId++;\n  }\n  moveBackward(element) {\n    this._past.pop();\n    this._future.push(element);\n    this.versionId++;\n  }\n  moveForward(element) {\n    this._future.pop();\n    this._past.push(element);\n    this.versionId++;\n  }\n}\nclass EditStackSnapshot {\n  constructor(editStacks) {\n    this.editStacks = editStacks;\n    this._versionIds = [];\n    for (let i = 0, len = this.editStacks.length; i < len; i++) {\n      this._versionIds[i] = this.editStacks[i].versionId;\n    }\n  }\n  isValid() {\n    for (let i = 0, len = this.editStacks.length; i < len; i++) {\n      if (this._versionIds[i] !== this.editStacks[i].versionId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\nconst missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\nlet UndoRedoService = class UndoRedoService {\n  constructor(_dialogService, _notificationService) {\n    this._dialogService = _dialogService;\n    this._notificationService = _notificationService;\n    this._editStacks = new Map();\n    this._uriComparisonKeyComputers = [];\n  }\n  getUriComparisonKey(resource) {\n    for (const uriComparisonKeyComputer of this._uriComparisonKeyComputers) {\n      if (uriComparisonKeyComputer[0] === resource.scheme) {\n        return uriComparisonKeyComputer[1].getComparisonKey(resource);\n      }\n    }\n    return resource.toString();\n  }\n  _print(label) {\n    console.log(\"------------------------------------\");\n    console.log(\"AFTER \".concat(label, \": \"));\n    const str = [];\n    for (const element of this._editStacks) {\n      str.push(element[1].toString());\n    }\n    console.log(str.join('\\n'));\n  }\n  pushElement(element) {\n    let group = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UndoRedoGroup.None;\n    let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UndoRedoSource.None;\n    if (element.type === 0 /* UndoRedoElementType.Resource */) {\n      const resourceLabel = getResourceLabel(element.resource);\n      const strResource = this.getUriComparisonKey(element.resource);\n      this._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n    } else {\n      const seen = new Set();\n      const resourceLabels = [];\n      const strResources = [];\n      for (const resource of element.resources) {\n        const resourceLabel = getResourceLabel(resource);\n        const strResource = this.getUriComparisonKey(resource);\n        if (seen.has(strResource)) {\n          continue;\n        }\n        seen.add(strResource);\n        resourceLabels.push(resourceLabel);\n        strResources.push(strResource);\n      }\n      if (resourceLabels.length === 1) {\n        this._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n      } else {\n        this._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n      }\n    }\n    if (DEBUG) {\n      this._print('pushElement');\n    }\n  }\n  _pushElement(element) {\n    for (let i = 0, len = element.strResources.length; i < len; i++) {\n      const resourceLabel = element.resourceLabels[i];\n      const strResource = element.strResources[i];\n      let editStack;\n      if (this._editStacks.has(strResource)) {\n        editStack = this._editStacks.get(strResource);\n      } else {\n        editStack = new ResourceEditStack(resourceLabel, strResource);\n        this._editStacks.set(strResource, editStack);\n      }\n      editStack.pushElement(element);\n    }\n  }\n  getLastElement(resource) {\n    const strResource = this.getUriComparisonKey(resource);\n    if (this._editStacks.has(strResource)) {\n      const editStack = this._editStacks.get(strResource);\n      if (editStack.hasFutureElements()) {\n        return null;\n      }\n      const closestPastElement = editStack.getClosestPastElement();\n      return closestPastElement ? closestPastElement.actual : null;\n    }\n    return null;\n  }\n  _splitPastWorkspaceElement(toRemove, ignoreResources) {\n    const individualArr = toRemove.actual.split();\n    const individualMap = new Map();\n    for (const _element of individualArr) {\n      const resourceLabel = getResourceLabel(_element.resource);\n      const strResource = this.getUriComparisonKey(_element.resource);\n      const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n      individualMap.set(element.strResource, element);\n    }\n    for (const strResource of toRemove.strResources) {\n      if (ignoreResources && ignoreResources.has(strResource)) {\n        continue;\n      }\n      const editStack = this._editStacks.get(strResource);\n      editStack.splitPastWorkspaceElement(toRemove, individualMap);\n    }\n  }\n  _splitFutureWorkspaceElement(toRemove, ignoreResources) {\n    const individualArr = toRemove.actual.split();\n    const individualMap = new Map();\n    for (const _element of individualArr) {\n      const resourceLabel = getResourceLabel(_element.resource);\n      const strResource = this.getUriComparisonKey(_element.resource);\n      const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n      individualMap.set(element.strResource, element);\n    }\n    for (const strResource of toRemove.strResources) {\n      if (ignoreResources && ignoreResources.has(strResource)) {\n        continue;\n      }\n      const editStack = this._editStacks.get(strResource);\n      editStack.splitFutureWorkspaceElement(toRemove, individualMap);\n    }\n  }\n  removeElements(resource) {\n    const strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n    if (this._editStacks.has(strResource)) {\n      const editStack = this._editStacks.get(strResource);\n      editStack.dispose();\n      this._editStacks.delete(strResource);\n    }\n    if (DEBUG) {\n      this._print('removeElements');\n    }\n  }\n  setElementsValidFlag(resource, isValid, filter) {\n    const strResource = this.getUriComparisonKey(resource);\n    if (this._editStacks.has(strResource)) {\n      const editStack = this._editStacks.get(strResource);\n      editStack.setElementsValidFlag(isValid, filter);\n    }\n    if (DEBUG) {\n      this._print('setElementsValidFlag');\n    }\n  }\n  createSnapshot(resource) {\n    const strResource = this.getUriComparisonKey(resource);\n    if (this._editStacks.has(strResource)) {\n      const editStack = this._editStacks.get(strResource);\n      return editStack.createSnapshot(resource);\n    }\n    return new ResourceEditStackSnapshot(resource, []);\n  }\n  restoreSnapshot(snapshot) {\n    const strResource = this.getUriComparisonKey(snapshot.resource);\n    if (this._editStacks.has(strResource)) {\n      const editStack = this._editStacks.get(strResource);\n      editStack.restoreSnapshot(snapshot);\n      if (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n        // the edit stack is now empty, just remove it entirely\n        editStack.dispose();\n        this._editStacks.delete(strResource);\n      }\n    }\n    if (DEBUG) {\n      this._print('restoreSnapshot');\n    }\n  }\n  getElements(resource) {\n    const strResource = this.getUriComparisonKey(resource);\n    if (this._editStacks.has(strResource)) {\n      const editStack = this._editStacks.get(strResource);\n      return editStack.getElements();\n    }\n    return {\n      past: [],\n      future: []\n    };\n  }\n  _findClosestUndoElementWithSource(sourceId) {\n    if (!sourceId) {\n      return [null, null];\n    }\n    // find an element with the sourceId and with the highest sourceOrder ready to be undone\n    let matchedElement = null;\n    let matchedStrResource = null;\n    for (const [strResource, editStack] of this._editStacks) {\n      const candidate = editStack.getClosestPastElement();\n      if (!candidate) {\n        continue;\n      }\n      if (candidate.sourceId === sourceId) {\n        if (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n          matchedElement = candidate;\n          matchedStrResource = strResource;\n        }\n      }\n    }\n    return [matchedElement, matchedStrResource];\n  }\n  canUndo(resourceOrSource) {\n    if (resourceOrSource instanceof UndoRedoSource) {\n      const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n      return matchedStrResource ? true : false;\n    }\n    const strResource = this.getUriComparisonKey(resourceOrSource);\n    if (this._editStacks.has(strResource)) {\n      const editStack = this._editStacks.get(strResource);\n      return editStack.hasPastElements();\n    }\n    return false;\n  }\n  _onError(err, element) {\n    onUnexpectedError(err);\n    // An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n    for (const strResource of element.strResources) {\n      this.removeElements(strResource);\n    }\n    this._notificationService.error(err);\n  }\n  _acquireLocks(editStackSnapshot) {\n    // first, check if all locks can be acquired\n    for (const editStack of editStackSnapshot.editStacks) {\n      if (editStack.locked) {\n        throw new Error('Cannot acquire edit stack lock');\n      }\n    }\n    // can acquire all locks\n    for (const editStack of editStackSnapshot.editStacks) {\n      editStack.locked = true;\n    }\n    return () => {\n      // release all locks\n      for (const editStack of editStackSnapshot.editStacks) {\n        editStack.locked = false;\n      }\n    };\n  }\n  _safeInvokeWithLocks(element, invoke, editStackSnapshot, cleanup, continuation) {\n    const releaseLocks = this._acquireLocks(editStackSnapshot);\n    let result;\n    try {\n      result = invoke();\n    } catch (err) {\n      releaseLocks();\n      cleanup.dispose();\n      return this._onError(err, element);\n    }\n    if (result) {\n      // result is Promise<void>\n      return result.then(() => {\n        releaseLocks();\n        cleanup.dispose();\n        return continuation();\n      }, err => {\n        releaseLocks();\n        cleanup.dispose();\n        return this._onError(err, element);\n      });\n    } else {\n      // result is void\n      releaseLocks();\n      cleanup.dispose();\n      return continuation();\n    }\n  }\n  async _invokeWorkspacePrepare(element) {\n    if (typeof element.actual.prepareUndoRedo === 'undefined') {\n      return Disposable.None;\n    }\n    const result = element.actual.prepareUndoRedo();\n    if (typeof result === 'undefined') {\n      return Disposable.None;\n    }\n    return result;\n  }\n  _invokeResourcePrepare(element, callback) {\n    if (element.actual.type !== 1 /* UndoRedoElementType.Workspace */ || typeof element.actual.prepareUndoRedo === 'undefined') {\n      // no preparation needed\n      return callback(Disposable.None);\n    }\n    const r = element.actual.prepareUndoRedo();\n    if (!r) {\n      // nothing to clean up\n      return callback(Disposable.None);\n    }\n    if (isDisposable(r)) {\n      return callback(r);\n    }\n    return r.then(disposable => {\n      return callback(disposable);\n    });\n  }\n  _getAffectedEditStacks(element) {\n    const affectedEditStacks = [];\n    for (const strResource of element.strResources) {\n      affectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n    }\n    return new EditStackSnapshot(affectedEditStacks);\n  }\n  _tryToSplitAndUndo(strResource, element, ignoreResources, message) {\n    if (element.canSplit()) {\n      this._splitPastWorkspaceElement(element, ignoreResources);\n      this._notificationService.warn(message);\n      return new WorkspaceVerificationError(this._undo(strResource, 0, true));\n    } else {\n      // Cannot safely split this workspace element => flush all undo/redo stacks\n      for (const strResource of element.strResources) {\n        this.removeElements(strResource);\n      }\n      this._notificationService.warn(message);\n      return new WorkspaceVerificationError();\n    }\n  }\n  _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n    if (element.removedResources) {\n      return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({\n        key: 'cannotWorkspaceUndo',\n        comment: ['{0} is a label for an operation. {1} is another message.']\n      }, \"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n    }\n    if (checkInvalidatedResources && element.invalidatedResources) {\n      return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({\n        key: 'cannotWorkspaceUndo',\n        comment: ['{0} is a label for an operation. {1} is another message.']\n      }, \"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n    }\n    // this must be the last past element in all the impacted resources!\n    const cannotUndoDueToResources = [];\n    for (const editStack of editStackSnapshot.editStacks) {\n      if (editStack.getClosestPastElement() !== element) {\n        cannotUndoDueToResources.push(editStack.resourceLabel);\n      }\n    }\n    if (cannotUndoDueToResources.length > 0) {\n      return this._tryToSplitAndUndo(strResource, element, null, nls.localize({\n        key: 'cannotWorkspaceUndoDueToChanges',\n        comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n      }, \"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')));\n    }\n    const cannotLockDueToResources = [];\n    for (const editStack of editStackSnapshot.editStacks) {\n      if (editStack.locked) {\n        cannotLockDueToResources.push(editStack.resourceLabel);\n      }\n    }\n    if (cannotLockDueToResources.length > 0) {\n      return this._tryToSplitAndUndo(strResource, element, null, nls.localize({\n        key: 'cannotWorkspaceUndoDueToInProgressUndoRedo',\n        comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n      }, \"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n    }\n    // check if new stack elements were added in the meantime...\n    if (!editStackSnapshot.isValid()) {\n      return this._tryToSplitAndUndo(strResource, element, null, nls.localize({\n        key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo',\n        comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n      }, \"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n    }\n    return null;\n  }\n  _workspaceUndo(strResource, element, undoConfirmed) {\n    const affectedEditStacks = this._getAffectedEditStacks(element);\n    const verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/false);\n    if (verificationError) {\n      return verificationError.returnValue;\n    }\n    return this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n  }\n  _isPartOfUndoGroup(element) {\n    if (!element.groupId) {\n      return false;\n    }\n    // check that there is at least another element with the same groupId ready to be undone\n    for (const [, editStack] of this._editStacks) {\n      const pastElement = editStack.getClosestPastElement();\n      if (!pastElement) {\n        continue;\n      }\n      if (pastElement === element) {\n        const secondPastElement = editStack.getSecondClosestPastElement();\n        if (secondPastElement && secondPastElement.groupId === element.groupId) {\n          // there is another element with the same group id in the same stack!\n          return true;\n        }\n      }\n      if (pastElement.groupId === element.groupId) {\n        // there is another element with the same group id in another stack!\n        return true;\n      }\n    }\n    return false;\n  }\n  async _confirmAndExecuteWorkspaceUndo(strResource, element, editStackSnapshot, undoConfirmed) {\n    if (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n      // this element can be split\n      let UndoChoice;\n      (function (UndoChoice) {\n        UndoChoice[UndoChoice[\"All\"] = 0] = \"All\";\n        UndoChoice[UndoChoice[\"This\"] = 1] = \"This\";\n        UndoChoice[UndoChoice[\"Cancel\"] = 2] = \"Cancel\";\n      })(UndoChoice || (UndoChoice = {}));\n      const {\n        result\n      } = await this._dialogService.prompt({\n        type: Severity.Info,\n        message: nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label),\n        buttons: [{\n          label: nls.localize({\n            key: 'ok',\n            comment: ['{0} denotes a number that is > 1, && denotes a mnemonic']\n          }, \"&&Undo in {0} Files\", editStackSnapshot.editStacks.length),\n          run: () => UndoChoice.All\n        }, {\n          label: nls.localize({\n            key: 'nok',\n            comment: ['&& denotes a mnemonic']\n          }, \"Undo this &&File\"),\n          run: () => UndoChoice.This\n        }],\n        cancelButton: {\n          run: () => UndoChoice.Cancel\n        }\n      });\n      if (result === UndoChoice.Cancel) {\n        // choice: cancel\n        return;\n      }\n      if (result === UndoChoice.This) {\n        // choice: undo this file\n        this._splitPastWorkspaceElement(element, null);\n        return this._undo(strResource, 0, true);\n      }\n      // choice: undo in all files\n      // At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n      const verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/false);\n      if (verificationError1) {\n        return verificationError1.returnValue;\n      }\n      undoConfirmed = true;\n    }\n    // prepare\n    let cleanup;\n    try {\n      cleanup = await this._invokeWorkspacePrepare(element);\n    } catch (err) {\n      return this._onError(err, element);\n    }\n    // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n    const verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/true);\n    if (verificationError2) {\n      cleanup.dispose();\n      return verificationError2.returnValue;\n    }\n    for (const editStack of editStackSnapshot.editStacks) {\n      editStack.moveBackward(element);\n    }\n    return this._safeInvokeWithLocks(element, () => element.actual.undo(), editStackSnapshot, cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n  }\n  _resourceUndo(editStack, element, undoConfirmed) {\n    if (!element.isValid) {\n      // invalid element => immediately flush edit stack!\n      editStack.flushAllElements();\n      return;\n    }\n    if (editStack.locked) {\n      const message = nls.localize({\n        key: 'cannotResourceUndoDueToInProgressUndoRedo',\n        comment: ['{0} is a label for an operation.']\n      }, \"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label);\n      this._notificationService.warn(message);\n      return;\n    }\n    return this._invokeResourcePrepare(element, cleanup => {\n      editStack.moveBackward(element);\n      return this._safeInvokeWithLocks(element, () => element.actual.undo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n    });\n  }\n  _findClosestUndoElementInGroup(groupId) {\n    if (!groupId) {\n      return [null, null];\n    }\n    // find another element with the same groupId and with the highest groupOrder ready to be undone\n    let matchedElement = null;\n    let matchedStrResource = null;\n    for (const [strResource, editStack] of this._editStacks) {\n      const candidate = editStack.getClosestPastElement();\n      if (!candidate) {\n        continue;\n      }\n      if (candidate.groupId === groupId) {\n        if (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n          matchedElement = candidate;\n          matchedStrResource = strResource;\n        }\n      }\n    }\n    return [matchedElement, matchedStrResource];\n  }\n  _continueUndoInGroup(groupId, undoConfirmed) {\n    if (!groupId) {\n      return;\n    }\n    const [, matchedStrResource] = this._findClosestUndoElementInGroup(groupId);\n    if (matchedStrResource) {\n      return this._undo(matchedStrResource, 0, undoConfirmed);\n    }\n  }\n  undo(resourceOrSource) {\n    if (resourceOrSource instanceof UndoRedoSource) {\n      const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n      return matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n    }\n    if (typeof resourceOrSource === 'string') {\n      return this._undo(resourceOrSource, 0, false);\n    }\n    return this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n  }\n  _undo(strResource) {\n    let sourceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let undoConfirmed = arguments.length > 2 ? arguments[2] : undefined;\n    if (!this._editStacks.has(strResource)) {\n      return;\n    }\n    const editStack = this._editStacks.get(strResource);\n    const element = editStack.getClosestPastElement();\n    if (!element) {\n      return;\n    }\n    if (element.groupId) {\n      // this element is a part of a group, we need to make sure undoing in a group is in order\n      const [matchedElement, matchedStrResource] = this._findClosestUndoElementInGroup(element.groupId);\n      if (element !== matchedElement && matchedStrResource) {\n        // there is an element in the same group that should be undone before this one\n        return this._undo(matchedStrResource, sourceId, undoConfirmed);\n      }\n    }\n    const shouldPromptForConfirmation = element.sourceId !== sourceId || element.confirmBeforeUndo;\n    if (shouldPromptForConfirmation && !undoConfirmed) {\n      // Hit a different source or the element asks for prompt before undo, prompt for confirmation\n      return this._confirmAndContinueUndo(strResource, sourceId, element);\n    }\n    try {\n      if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n        return this._workspaceUndo(strResource, element, undoConfirmed);\n      } else {\n        return this._resourceUndo(editStack, element, undoConfirmed);\n      }\n    } finally {\n      if (DEBUG) {\n        this._print('undo');\n      }\n    }\n  }\n  async _confirmAndContinueUndo(strResource, sourceId, element) {\n    const result = await this._dialogService.confirm({\n      message: nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label),\n      primaryButton: nls.localize({\n        key: 'confirmDifferentSource.yes',\n        comment: ['&& denotes a mnemonic']\n      }, \"&&Yes\"),\n      cancelButton: nls.localize('confirmDifferentSource.no', \"No\")\n    });\n    if (!result.confirmed) {\n      return;\n    }\n    return this._undo(strResource, sourceId, true);\n  }\n  _findClosestRedoElementWithSource(sourceId) {\n    if (!sourceId) {\n      return [null, null];\n    }\n    // find an element with sourceId and with the lowest sourceOrder ready to be redone\n    let matchedElement = null;\n    let matchedStrResource = null;\n    for (const [strResource, editStack] of this._editStacks) {\n      const candidate = editStack.getClosestFutureElement();\n      if (!candidate) {\n        continue;\n      }\n      if (candidate.sourceId === sourceId) {\n        if (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n          matchedElement = candidate;\n          matchedStrResource = strResource;\n        }\n      }\n    }\n    return [matchedElement, matchedStrResource];\n  }\n  canRedo(resourceOrSource) {\n    if (resourceOrSource instanceof UndoRedoSource) {\n      const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n      return matchedStrResource ? true : false;\n    }\n    const strResource = this.getUriComparisonKey(resourceOrSource);\n    if (this._editStacks.has(strResource)) {\n      const editStack = this._editStacks.get(strResource);\n      return editStack.hasFutureElements();\n    }\n    return false;\n  }\n  _tryToSplitAndRedo(strResource, element, ignoreResources, message) {\n    if (element.canSplit()) {\n      this._splitFutureWorkspaceElement(element, ignoreResources);\n      this._notificationService.warn(message);\n      return new WorkspaceVerificationError(this._redo(strResource));\n    } else {\n      // Cannot safely split this workspace element => flush all undo/redo stacks\n      for (const strResource of element.strResources) {\n        this.removeElements(strResource);\n      }\n      this._notificationService.warn(message);\n      return new WorkspaceVerificationError();\n    }\n  }\n  _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n    if (element.removedResources) {\n      return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({\n        key: 'cannotWorkspaceRedo',\n        comment: ['{0} is a label for an operation. {1} is another message.']\n      }, \"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n    }\n    if (checkInvalidatedResources && element.invalidatedResources) {\n      return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({\n        key: 'cannotWorkspaceRedo',\n        comment: ['{0} is a label for an operation. {1} is another message.']\n      }, \"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n    }\n    // this must be the last future element in all the impacted resources!\n    const cannotRedoDueToResources = [];\n    for (const editStack of editStackSnapshot.editStacks) {\n      if (editStack.getClosestFutureElement() !== element) {\n        cannotRedoDueToResources.push(editStack.resourceLabel);\n      }\n    }\n    if (cannotRedoDueToResources.length > 0) {\n      return this._tryToSplitAndRedo(strResource, element, null, nls.localize({\n        key: 'cannotWorkspaceRedoDueToChanges',\n        comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n      }, \"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')));\n    }\n    const cannotLockDueToResources = [];\n    for (const editStack of editStackSnapshot.editStacks) {\n      if (editStack.locked) {\n        cannotLockDueToResources.push(editStack.resourceLabel);\n      }\n    }\n    if (cannotLockDueToResources.length > 0) {\n      return this._tryToSplitAndRedo(strResource, element, null, nls.localize({\n        key: 'cannotWorkspaceRedoDueToInProgressUndoRedo',\n        comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n      }, \"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n    }\n    // check if new stack elements were added in the meantime...\n    if (!editStackSnapshot.isValid()) {\n      return this._tryToSplitAndRedo(strResource, element, null, nls.localize({\n        key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo',\n        comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n      }, \"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n    }\n    return null;\n  }\n  _workspaceRedo(strResource, element) {\n    const affectedEditStacks = this._getAffectedEditStacks(element);\n    const verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/false);\n    if (verificationError) {\n      return verificationError.returnValue;\n    }\n    return this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n  }\n  async _executeWorkspaceRedo(strResource, element, editStackSnapshot) {\n    // prepare\n    let cleanup;\n    try {\n      cleanup = await this._invokeWorkspacePrepare(element);\n    } catch (err) {\n      return this._onError(err, element);\n    }\n    // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n    const verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/true);\n    if (verificationError) {\n      cleanup.dispose();\n      return verificationError.returnValue;\n    }\n    for (const editStack of editStackSnapshot.editStacks) {\n      editStack.moveForward(element);\n    }\n    return this._safeInvokeWithLocks(element, () => element.actual.redo(), editStackSnapshot, cleanup, () => this._continueRedoInGroup(element.groupId));\n  }\n  _resourceRedo(editStack, element) {\n    if (!element.isValid) {\n      // invalid element => immediately flush edit stack!\n      editStack.flushAllElements();\n      return;\n    }\n    if (editStack.locked) {\n      const message = nls.localize({\n        key: 'cannotResourceRedoDueToInProgressUndoRedo',\n        comment: ['{0} is a label for an operation.']\n      }, \"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label);\n      this._notificationService.warn(message);\n      return;\n    }\n    return this._invokeResourcePrepare(element, cleanup => {\n      editStack.moveForward(element);\n      return this._safeInvokeWithLocks(element, () => element.actual.redo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueRedoInGroup(element.groupId));\n    });\n  }\n  _findClosestRedoElementInGroup(groupId) {\n    if (!groupId) {\n      return [null, null];\n    }\n    // find another element with the same groupId and with the lowest groupOrder ready to be redone\n    let matchedElement = null;\n    let matchedStrResource = null;\n    for (const [strResource, editStack] of this._editStacks) {\n      const candidate = editStack.getClosestFutureElement();\n      if (!candidate) {\n        continue;\n      }\n      if (candidate.groupId === groupId) {\n        if (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n          matchedElement = candidate;\n          matchedStrResource = strResource;\n        }\n      }\n    }\n    return [matchedElement, matchedStrResource];\n  }\n  _continueRedoInGroup(groupId) {\n    if (!groupId) {\n      return;\n    }\n    const [, matchedStrResource] = this._findClosestRedoElementInGroup(groupId);\n    if (matchedStrResource) {\n      return this._redo(matchedStrResource);\n    }\n  }\n  redo(resourceOrSource) {\n    if (resourceOrSource instanceof UndoRedoSource) {\n      const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n      return matchedStrResource ? this._redo(matchedStrResource) : undefined;\n    }\n    if (typeof resourceOrSource === 'string') {\n      return this._redo(resourceOrSource);\n    }\n    return this._redo(this.getUriComparisonKey(resourceOrSource));\n  }\n  _redo(strResource) {\n    if (!this._editStacks.has(strResource)) {\n      return;\n    }\n    const editStack = this._editStacks.get(strResource);\n    const element = editStack.getClosestFutureElement();\n    if (!element) {\n      return;\n    }\n    if (element.groupId) {\n      // this element is a part of a group, we need to make sure redoing in a group is in order\n      const [matchedElement, matchedStrResource] = this._findClosestRedoElementInGroup(element.groupId);\n      if (element !== matchedElement && matchedStrResource) {\n        // there is an element in the same group that should be redone before this one\n        return this._redo(matchedStrResource);\n      }\n    }\n    try {\n      if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n        return this._workspaceRedo(strResource, element);\n      } else {\n        return this._resourceRedo(editStack, element);\n      }\n    } finally {\n      if (DEBUG) {\n        this._print('redo');\n      }\n    }\n  }\n};\nUndoRedoService = __decorate([__param(0, IDialogService), __param(1, INotificationService)], UndoRedoService);\nexport { UndoRedoService };\nclass WorkspaceVerificationError {\n  constructor(returnValue) {\n    this.returnValue = returnValue;\n  }\n}\nregisterSingleton(IUndoRedoService, UndoRedoService, 1 /* InstantiationType.Delayed */);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","onUnexpectedError","Disposable","isDisposable","Schemas","Severity","nls","IDialogService","registerSingleton","INotificationService","IUndoRedoService","ResourceEditStackSnapshot","UndoRedoGroup","UndoRedoSource","DEBUG","getResourceLabel","resource","scheme","file","fsPath","path","stackElementCounter","ResourceStackElement","constructor","actual","resourceLabel","strResource","groupId","groupOrder","sourceId","sourceOrder","id","type","label","confirmBeforeUndo","resourceLabels","strResources","isValid","setValid","toString","concat","name","ResourceReasonPair","reason","RemovedResources","elements","Map","createMessage","externalRemoval","noParallelUniverses","element","dest","push","messages","localize","comment","join","size","has","set","value","delete","WorkspaceStackElement","removedResources","invalidatedResources","canSplit","split","removeResource","ResourceEditStack","_past","_future","locked","versionId","dispose","result","flushAllElements","_setElementValidFlag","setElementsValidFlag","filter","pushElement","futureElement","createSnapshot","len","restoreSnapshot","snapshot","snapshotLength","isOK","snapshotIndex","removePastAfter","removeFutureBefore","slice","getElements","past","future","getClosestPastElement","getSecondClosestPastElement","getClosestFutureElement","hasPastElements","hasFutureElements","splitPastWorkspaceElement","toRemove","individualMap","j","get","splice","splitFutureWorkspaceElement","moveBackward","pop","moveForward","EditStackSnapshot","editStacks","_versionIds","missingEditStack","UndoRedoService","_dialogService","_notificationService","_editStacks","_uriComparisonKeyComputers","getUriComparisonKey","uriComparisonKeyComputer","getComparisonKey","_print","console","log","str","group","undefined","None","source","_pushElement","nextOrder","seen","Set","resources","add","editStack","getLastElement","closestPastElement","_splitPastWorkspaceElement","ignoreResources","individualArr","_element","_splitFutureWorkspaceElement","removeElements","_findClosestUndoElementWithSource","matchedElement","matchedStrResource","candidate","canUndo","resourceOrSource","_onError","err","error","_acquireLocks","editStackSnapshot","Error","_safeInvokeWithLocks","invoke","cleanup","continuation","releaseLocks","then","_invokeWorkspacePrepare","prepareUndoRedo","_invokeResourcePrepare","callback","disposable","_getAffectedEditStacks","affectedEditStacks","_tryToSplitAndUndo","message","warn","WorkspaceVerificationError","_undo","_checkWorkspaceUndo","checkInvalidatedResources","cannotUndoDueToResources","cannotLockDueToResources","_workspaceUndo","undoConfirmed","verificationError","returnValue","_confirmAndExecuteWorkspaceUndo","_isPartOfUndoGroup","pastElement","secondPastElement","UndoChoice","prompt","Info","buttons","run","All","This","cancelButton","Cancel","verificationError1","verificationError2","undo","_continueUndoInGroup","_resourceUndo","_findClosestUndoElementInGroup","shouldPromptForConfirmation","_confirmAndContinueUndo","confirm","primaryButton","confirmed","_findClosestRedoElementWithSource","canRedo","_tryToSplitAndRedo","_redo","_checkWorkspaceRedo","cannotRedoDueToResources","_workspaceRedo","_executeWorkspaceRedo","redo","_continueRedoInGroup","_resourceRedo","_findClosestRedoElementInGroup"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedoService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup, UndoRedoSource } from './undoRedo.js';\nconst DEBUG = false;\nfunction getResourceLabel(resource) {\n    return resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\nlet stackElementCounter = 0;\nclass ResourceStackElement {\n    constructor(actual, resourceLabel, strResource, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 0 /* UndoRedoElementType.Resource */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this.resourceLabels = [this.resourceLabel];\n        this.strResources = [this.strResource];\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.isValid = true;\n    }\n    setValid(isValid) {\n        this.isValid = isValid;\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? '  VALID' : 'INVALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceReasonPair {\n    constructor(resourceLabel, reason) {\n        this.resourceLabel = resourceLabel;\n        this.reason = reason;\n    }\n}\nclass RemovedResources {\n    constructor() {\n        this.elements = new Map();\n    }\n    createMessage() {\n        const externalRemoval = [];\n        const noParallelUniverses = [];\n        for (const [, element] of this.elements) {\n            const dest = (element.reason === 0 /* RemovedResourceReason.ExternalRemoval */\n                ? externalRemoval\n                : noParallelUniverses);\n            dest.push(element.resourceLabel);\n        }\n        const messages = [];\n        if (externalRemoval.length > 0) {\n            messages.push(nls.localize({ key: 'externalRemoval', comment: ['{0} is a list of filenames'] }, \"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')));\n        }\n        if (noParallelUniverses.length > 0) {\n            messages.push(nls.localize({ key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] }, \"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')));\n        }\n        return messages.join('\\n');\n    }\n    get size() {\n        return this.elements.size;\n    }\n    has(strResource) {\n        return this.elements.has(strResource);\n    }\n    set(strResource, value) {\n        this.elements.set(strResource, value);\n    }\n    delete(strResource) {\n        return this.elements.delete(strResource);\n    }\n}\nclass WorkspaceStackElement {\n    constructor(actual, resourceLabels, strResources, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabels = resourceLabels;\n        this.strResources = strResources;\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.removedResources = null;\n        this.invalidatedResources = null;\n    }\n    canSplit() {\n        return (typeof this.actual.split === 'function');\n    }\n    removeResource(resourceLabel, strResource, reason) {\n        if (!this.removedResources) {\n            this.removedResources = new RemovedResources();\n        }\n        if (!this.removedResources.has(strResource)) {\n            this.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n        }\n    }\n    setValid(resourceLabel, strResource, isValid) {\n        if (isValid) {\n            if (this.invalidatedResources) {\n                this.invalidatedResources.delete(strResource);\n                if (this.invalidatedResources.size === 0) {\n                    this.invalidatedResources = null;\n                }\n            }\n        }\n        else {\n            if (!this.invalidatedResources) {\n                this.invalidatedResources = new RemovedResources();\n            }\n            if (!this.invalidatedResources.has(strResource)) {\n                this.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, 0 /* RemovedResourceReason.ExternalRemoval */));\n            }\n        }\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? 'INVALID' : '  VALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceEditStack {\n    constructor(resourceLabel, strResource) {\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this._past = [];\n        this._future = [];\n        this.locked = false;\n        this.versionId = 1;\n    }\n    dispose() {\n        for (const element of this._past) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        for (const element of this._future) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        this.versionId++;\n    }\n    toString() {\n        const result = [];\n        result.push(`* ${this.strResource}:`);\n        for (let i = 0; i < this._past.length; i++) {\n            result.push(`   * [UNDO] ${this._past[i]}`);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            result.push(`   * [REDO] ${this._future[i]}`);\n        }\n        return result.join('\\n');\n    }\n    flushAllElements() {\n        this._past = [];\n        this._future = [];\n        this.versionId++;\n    }\n    _setElementValidFlag(element, isValid) {\n        if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n            element.setValid(this.resourceLabel, this.strResource, isValid);\n        }\n        else {\n            element.setValid(isValid);\n        }\n    }\n    setElementsValidFlag(isValid, filter) {\n        for (const element of this._past) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n        for (const element of this._future) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n    }\n    pushElement(element) {\n        // remove the future\n        for (const futureElement of this._future) {\n            if (futureElement.type === 1 /* UndoRedoElementType.Workspace */) {\n                futureElement.removeResource(this.resourceLabel, this.strResource, 1 /* RemovedResourceReason.NoParallelUniverses */);\n            }\n        }\n        this._future = [];\n        this._past.push(element);\n        this.versionId++;\n    }\n    createSnapshot(resource) {\n        const elements = [];\n        for (let i = 0, len = this._past.length; i < len; i++) {\n            elements.push(this._past[i].id);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            elements.push(this._future[i].id);\n        }\n        return new ResourceEditStackSnapshot(resource, elements);\n    }\n    restoreSnapshot(snapshot) {\n        const snapshotLength = snapshot.elements.length;\n        let isOK = true;\n        let snapshotIndex = 0;\n        let removePastAfter = -1;\n        for (let i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n            const element = this._past[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removePastAfter = 0;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        let removeFutureBefore = -1;\n        for (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n            const element = this._future[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removeFutureBefore = i;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        if (removePastAfter !== -1) {\n            this._past = this._past.slice(0, removePastAfter);\n        }\n        if (removeFutureBefore !== -1) {\n            this._future = this._future.slice(removeFutureBefore + 1);\n        }\n        this.versionId++;\n    }\n    getElements() {\n        const past = [];\n        const future = [];\n        for (const element of this._past) {\n            past.push(element.actual);\n        }\n        for (const element of this._future) {\n            future.push(element.actual);\n        }\n        return { past, future };\n    }\n    getClosestPastElement() {\n        if (this._past.length === 0) {\n            return null;\n        }\n        return this._past[this._past.length - 1];\n    }\n    getSecondClosestPastElement() {\n        if (this._past.length < 2) {\n            return null;\n        }\n        return this._past[this._past.length - 2];\n    }\n    getClosestFutureElement() {\n        if (this._future.length === 0) {\n            return null;\n        }\n        return this._future[this._future.length - 1];\n    }\n    hasPastElements() {\n        return (this._past.length > 0);\n    }\n    hasFutureElements() {\n        return (this._future.length > 0);\n    }\n    splitPastWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._past.length - 1; j >= 0; j--) {\n            if (this._past[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._past[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._past.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    splitFutureWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._future.length - 1; j >= 0; j--) {\n            if (this._future[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._future[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._future.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    moveBackward(element) {\n        this._past.pop();\n        this._future.push(element);\n        this.versionId++;\n    }\n    moveForward(element) {\n        this._future.pop();\n        this._past.push(element);\n        this.versionId++;\n    }\n}\nclass EditStackSnapshot {\n    constructor(editStacks) {\n        this.editStacks = editStacks;\n        this._versionIds = [];\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            this._versionIds[i] = this.editStacks[i].versionId;\n        }\n    }\n    isValid() {\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            if (this._versionIds[i] !== this.editStacks[i].versionId) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconst missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\nlet UndoRedoService = class UndoRedoService {\n    constructor(_dialogService, _notificationService) {\n        this._dialogService = _dialogService;\n        this._notificationService = _notificationService;\n        this._editStacks = new Map();\n        this._uriComparisonKeyComputers = [];\n    }\n    getUriComparisonKey(resource) {\n        for (const uriComparisonKeyComputer of this._uriComparisonKeyComputers) {\n            if (uriComparisonKeyComputer[0] === resource.scheme) {\n                return uriComparisonKeyComputer[1].getComparisonKey(resource);\n            }\n        }\n        return resource.toString();\n    }\n    _print(label) {\n        console.log(`------------------------------------`);\n        console.log(`AFTER ${label}: `);\n        const str = [];\n        for (const element of this._editStacks) {\n            str.push(element[1].toString());\n        }\n        console.log(str.join('\\n'));\n    }\n    pushElement(element, group = UndoRedoGroup.None, source = UndoRedoSource.None) {\n        if (element.type === 0 /* UndoRedoElementType.Resource */) {\n            const resourceLabel = getResourceLabel(element.resource);\n            const strResource = this.getUriComparisonKey(element.resource);\n            this._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n        }\n        else {\n            const seen = new Set();\n            const resourceLabels = [];\n            const strResources = [];\n            for (const resource of element.resources) {\n                const resourceLabel = getResourceLabel(resource);\n                const strResource = this.getUriComparisonKey(resource);\n                if (seen.has(strResource)) {\n                    continue;\n                }\n                seen.add(strResource);\n                resourceLabels.push(resourceLabel);\n                strResources.push(strResource);\n            }\n            if (resourceLabels.length === 1) {\n                this._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n            else {\n                this._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n        }\n        if (DEBUG) {\n            this._print('pushElement');\n        }\n    }\n    _pushElement(element) {\n        for (let i = 0, len = element.strResources.length; i < len; i++) {\n            const resourceLabel = element.resourceLabels[i];\n            const strResource = element.strResources[i];\n            let editStack;\n            if (this._editStacks.has(strResource)) {\n                editStack = this._editStacks.get(strResource);\n            }\n            else {\n                editStack = new ResourceEditStack(resourceLabel, strResource);\n                this._editStacks.set(strResource, editStack);\n            }\n            editStack.pushElement(element);\n        }\n    }\n    getLastElement(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            if (editStack.hasFutureElements()) {\n                return null;\n            }\n            const closestPastElement = editStack.getClosestPastElement();\n            return closestPastElement ? closestPastElement.actual : null;\n        }\n        return null;\n    }\n    _splitPastWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitPastWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    _splitFutureWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitFutureWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    removeElements(resource) {\n        const strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.dispose();\n            this._editStacks.delete(strResource);\n        }\n        if (DEBUG) {\n            this._print('removeElements');\n        }\n    }\n    setElementsValidFlag(resource, isValid, filter) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.setElementsValidFlag(isValid, filter);\n        }\n        if (DEBUG) {\n            this._print('setElementsValidFlag');\n        }\n    }\n    createSnapshot(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.createSnapshot(resource);\n        }\n        return new ResourceEditStackSnapshot(resource, []);\n    }\n    restoreSnapshot(snapshot) {\n        const strResource = this.getUriComparisonKey(snapshot.resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.restoreSnapshot(snapshot);\n            if (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n                // the edit stack is now empty, just remove it entirely\n                editStack.dispose();\n                this._editStacks.delete(strResource);\n            }\n        }\n        if (DEBUG) {\n            this._print('restoreSnapshot');\n        }\n    }\n    getElements(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.getElements();\n        }\n        return { past: [], future: [] };\n    }\n    _findClosestUndoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with the sourceId and with the highest sourceOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canUndo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasPastElements();\n        }\n        return false;\n    }\n    _onError(err, element) {\n        onUnexpectedError(err);\n        // An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n        for (const strResource of element.strResources) {\n            this.removeElements(strResource);\n        }\n        this._notificationService.error(err);\n    }\n    _acquireLocks(editStackSnapshot) {\n        // first, check if all locks can be acquired\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                throw new Error('Cannot acquire edit stack lock');\n            }\n        }\n        // can acquire all locks\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.locked = true;\n        }\n        return () => {\n            // release all locks\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.locked = false;\n            }\n        };\n    }\n    _safeInvokeWithLocks(element, invoke, editStackSnapshot, cleanup, continuation) {\n        const releaseLocks = this._acquireLocks(editStackSnapshot);\n        let result;\n        try {\n            result = invoke();\n        }\n        catch (err) {\n            releaseLocks();\n            cleanup.dispose();\n            return this._onError(err, element);\n        }\n        if (result) {\n            // result is Promise<void>\n            return result.then(() => {\n                releaseLocks();\n                cleanup.dispose();\n                return continuation();\n            }, (err) => {\n                releaseLocks();\n                cleanup.dispose();\n                return this._onError(err, element);\n            });\n        }\n        else {\n            // result is void\n            releaseLocks();\n            cleanup.dispose();\n            return continuation();\n        }\n    }\n    async _invokeWorkspacePrepare(element) {\n        if (typeof element.actual.prepareUndoRedo === 'undefined') {\n            return Disposable.None;\n        }\n        const result = element.actual.prepareUndoRedo();\n        if (typeof result === 'undefined') {\n            return Disposable.None;\n        }\n        return result;\n    }\n    _invokeResourcePrepare(element, callback) {\n        if (element.actual.type !== 1 /* UndoRedoElementType.Workspace */ || typeof element.actual.prepareUndoRedo === 'undefined') {\n            // no preparation needed\n            return callback(Disposable.None);\n        }\n        const r = element.actual.prepareUndoRedo();\n        if (!r) {\n            // nothing to clean up\n            return callback(Disposable.None);\n        }\n        if (isDisposable(r)) {\n            return callback(r);\n        }\n        return r.then((disposable) => {\n            return callback(disposable);\n        });\n    }\n    _getAffectedEditStacks(element) {\n        const affectedEditStacks = [];\n        for (const strResource of element.strResources) {\n            affectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n        }\n        return new EditStackSnapshot(affectedEditStacks);\n    }\n    _tryToSplitAndUndo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitPastWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._undo(strResource, 0, true));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last past element in all the impacted resources!\n        const cannotUndoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestPastElement() !== element) {\n                cannotUndoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotUndoDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceUndo(strResource, element, undoConfirmed) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n    }\n    _isPartOfUndoGroup(element) {\n        if (!element.groupId) {\n            return false;\n        }\n        // check that there is at least another element with the same groupId ready to be undone\n        for (const [, editStack] of this._editStacks) {\n            const pastElement = editStack.getClosestPastElement();\n            if (!pastElement) {\n                continue;\n            }\n            if (pastElement === element) {\n                const secondPastElement = editStack.getSecondClosestPastElement();\n                if (secondPastElement && secondPastElement.groupId === element.groupId) {\n                    // there is another element with the same group id in the same stack!\n                    return true;\n                }\n            }\n            if (pastElement.groupId === element.groupId) {\n                // there is another element with the same group id in another stack!\n                return true;\n            }\n        }\n        return false;\n    }\n    async _confirmAndExecuteWorkspaceUndo(strResource, element, editStackSnapshot, undoConfirmed) {\n        if (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n            // this element can be split\n            let UndoChoice;\n            (function (UndoChoice) {\n                UndoChoice[UndoChoice[\"All\"] = 0] = \"All\";\n                UndoChoice[UndoChoice[\"This\"] = 1] = \"This\";\n                UndoChoice[UndoChoice[\"Cancel\"] = 2] = \"Cancel\";\n            })(UndoChoice || (UndoChoice = {}));\n            const { result } = await this._dialogService.prompt({\n                type: Severity.Info,\n                message: nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label),\n                buttons: [\n                    {\n                        label: nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1, && denotes a mnemonic'] }, \"&&Undo in {0} Files\", editStackSnapshot.editStacks.length),\n                        run: () => UndoChoice.All\n                    },\n                    {\n                        label: nls.localize({ key: 'nok', comment: ['&& denotes a mnemonic'] }, \"Undo this &&File\"),\n                        run: () => UndoChoice.This\n                    }\n                ],\n                cancelButton: {\n                    run: () => UndoChoice.Cancel\n                }\n            });\n            if (result === UndoChoice.Cancel) {\n                // choice: cancel\n                return;\n            }\n            if (result === UndoChoice.This) {\n                // choice: undo this file\n                this._splitPastWorkspaceElement(element, null);\n                return this._undo(strResource, 0, true);\n            }\n            // choice: undo in all files\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n            const verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/ false);\n            if (verificationError1) {\n                return verificationError1.returnValue;\n            }\n            undoConfirmed = true;\n        }\n        // prepare\n        let cleanup;\n        try {\n            cleanup = await this._invokeWorkspacePrepare(element);\n        }\n        catch (err) {\n            return this._onError(err, element);\n        }\n        // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n        const verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n        if (verificationError2) {\n            cleanup.dispose();\n            return verificationError2.returnValue;\n        }\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.moveBackward(element);\n        }\n        return this._safeInvokeWithLocks(element, () => element.actual.undo(), editStackSnapshot, cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n    }\n    _resourceUndo(editStack, element, undoConfirmed) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveBackward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _findClosestUndoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the highest groupOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueUndoInGroup(groupId, undoConfirmed) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestUndoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._undo(matchedStrResource, 0, undoConfirmed);\n        }\n    }\n    undo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._undo(resourceOrSource, 0, false);\n        }\n        return this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n    }\n    _undo(strResource, sourceId = 0, undoConfirmed) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestPastElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure undoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestUndoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be undone before this one\n                return this._undo(matchedStrResource, sourceId, undoConfirmed);\n            }\n        }\n        const shouldPromptForConfirmation = (element.sourceId !== sourceId || element.confirmBeforeUndo);\n        if (shouldPromptForConfirmation && !undoConfirmed) {\n            // Hit a different source or the element asks for prompt before undo, prompt for confirmation\n            return this._confirmAndContinueUndo(strResource, sourceId, element);\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceUndo(strResource, element, undoConfirmed);\n            }\n            else {\n                return this._resourceUndo(editStack, element, undoConfirmed);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('undo');\n            }\n        }\n    }\n    async _confirmAndContinueUndo(strResource, sourceId, element) {\n        const result = await this._dialogService.confirm({\n            message: nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label),\n            primaryButton: nls.localize({ key: 'confirmDifferentSource.yes', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n            cancelButton: nls.localize('confirmDifferentSource.no', \"No\")\n        });\n        if (!result.confirmed) {\n            return;\n        }\n        return this._undo(strResource, sourceId, true);\n    }\n    _findClosestRedoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with sourceId and with the lowest sourceOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canRedo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasFutureElements();\n        }\n        return false;\n    }\n    _tryToSplitAndRedo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitFutureWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._redo(strResource));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last future element in all the impacted resources!\n        const cannotRedoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestFutureElement() !== element) {\n                cannotRedoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotRedoDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceRedo(strResource, element) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n    }\n    async _executeWorkspaceRedo(strResource, element, editStackSnapshot) {\n        // prepare\n        let cleanup;\n        try {\n            cleanup = await this._invokeWorkspacePrepare(element);\n        }\n        catch (err) {\n            return this._onError(err, element);\n        }\n        // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n        const verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n        if (verificationError) {\n            cleanup.dispose();\n            return verificationError.returnValue;\n        }\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.moveForward(element);\n        }\n        return this._safeInvokeWithLocks(element, () => element.actual.redo(), editStackSnapshot, cleanup, () => this._continueRedoInGroup(element.groupId));\n    }\n    _resourceRedo(editStack, element) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveForward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _findClosestRedoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the lowest groupOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueRedoInGroup(groupId) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestRedoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._redo(matchedStrResource);\n        }\n    }\n    redo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._redo(matchedStrResource) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._redo(resourceOrSource);\n        }\n        return this._redo(this.getUriComparisonKey(resourceOrSource));\n    }\n    _redo(strResource) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestFutureElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure redoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestRedoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be redone before this one\n                return this._redo(matchedStrResource);\n            }\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceRedo(strResource, element);\n            }\n            else {\n                return this._resourceRedo(editStack, element);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('redo');\n            }\n        }\n    }\n};\nUndoRedoService = __decorate([\n    __param(0, IDialogService),\n    __param(1, INotificationService)\n], UndoRedoService);\nexport { UndoRedoService };\nclass WorkspaceVerificationError {\n    constructor(returnValue) {\n        this.returnValue = returnValue;\n    }\n}\nregisterSingleton(IUndoRedoService, UndoRedoService, 1 /* InstantiationType.Delayed */);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,OAAOC,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEL,CAAC,GAAGI,OAAO,CAACC,QAAQ,CAACZ,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAC,CAAC,EAAEN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACM,cAAc,CAACb,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD,IAAIQ,OAAO,GAAI,IAAI,IAAI,IAAI,CAACA,OAAO,IAAK,UAAUC,UAAU,EAAEC,SAAS,EAAE;EACrE,OAAO,UAAUhB,MAAM,EAAEC,GAAG,EAAE;IAAEe,SAAS,CAAChB,MAAM,EAAEC,GAAG,EAAEc,UAAU,CAAC;EAAE,CAAC;AACzE,CAAC;AACD,SAASE,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,UAAU,EAAEC,YAAY,QAAQ,mCAAmC;AAC5E,SAASC,OAAO,QAAQ,iCAAiC;AACzD,OAAOC,QAAQ,MAAM,kCAAkC;AACvD,OAAO,KAAKC,GAAG,MAAM,iBAAiB;AACtC,SAASC,cAAc,QAAQ,iCAAiC;AAChE,SAASC,iBAAiB,QAAQ,0CAA0C;AAC5E,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,SAASC,gBAAgB,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,cAAc,QAAQ,eAAe;AAC1G,MAAMC,KAAK,GAAG,KAAK;AACnB,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAChC,OAAOA,QAAQ,CAACC,MAAM,KAAKb,OAAO,CAACc,IAAI,GAAGF,QAAQ,CAACG,MAAM,GAAGH,QAAQ,CAACI,IAAI;AAC7E;AACA,IAAIC,mBAAmB,GAAG,CAAC;AAC3B,MAAMC,oBAAoB,CAAC;EACvBC,WAAWA,CAACC,MAAM,EAAEC,aAAa,EAAEC,WAAW,EAAEC,OAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,EAAE;IACxF,IAAI,CAACC,EAAE,GAAI,EAAEV,mBAAoB;IACjC,IAAI,CAACW,IAAI,GAAG,CAAC,CAAC;IACd,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACS,KAAK,GAAGT,MAAM,CAACS,KAAK;IACzB,IAAI,CAACC,iBAAiB,GAAGV,MAAM,CAACU,iBAAiB,IAAI,KAAK;IAC1D,IAAI,CAACT,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACS,cAAc,GAAG,CAAC,IAAI,CAACV,aAAa,CAAC;IAC1C,IAAI,CAACW,YAAY,GAAG,CAAC,IAAI,CAACV,WAAW,CAAC;IACtC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACO,OAAO,GAAG,IAAI;EACvB;EACAC,QAAQA,CAACD,OAAO,EAAE;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACAE,QAAQA,CAAA,EAAG;IACP,cAAAC,MAAA,CAAc,IAAI,CAACT,EAAE,eAAAS,MAAA,CAAY,IAAI,CAACb,OAAO,SAAAa,MAAA,CAAM,IAAI,CAACH,OAAO,GAAG,SAAS,GAAG,SAAS,QAAAG,MAAA,CAAK,IAAI,CAAChB,MAAM,CAACD,WAAW,CAACkB,IAAI,SAAAD,MAAA,CAAM,IAAI,CAAChB,MAAM;EAC7I;AACJ;AACA,MAAMkB,kBAAkB,CAAC;EACrBnB,WAAWA,CAACE,aAAa,EAAEkB,MAAM,EAAE;IAC/B,IAAI,CAAClB,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACkB,MAAM,GAAGA,MAAM;EACxB;AACJ;AACA,MAAMC,gBAAgB,CAAC;EACnBrB,WAAWA,CAAA,EAAG;IACV,IAAI,CAACsB,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC7B;EACAC,aAAaA,CAAA,EAAG;IACZ,MAAMC,eAAe,GAAG,EAAE;IAC1B,MAAMC,mBAAmB,GAAG,EAAE;IAC9B,KAAK,MAAM,GAAGC,OAAO,CAAC,IAAI,IAAI,CAACL,QAAQ,EAAE;MACrC,MAAMM,IAAI,GAAID,OAAO,CAACP,MAAM,KAAK,CAAC,CAAC,8CAC7BK,eAAe,GACfC,mBAAoB;MAC1BE,IAAI,CAACC,IAAI,CAACF,OAAO,CAACzB,aAAa,CAAC;IACpC;IACA,MAAM4B,QAAQ,GAAG,EAAE;IACnB,IAAIL,eAAe,CAAC3D,MAAM,GAAG,CAAC,EAAE;MAC5BgE,QAAQ,CAACD,IAAI,CAAC9C,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,iBAAiB;QAAEsE,OAAO,EAAE,CAAC,4BAA4B;MAAE,CAAC,EAAE,iEAAiE,EAAEP,eAAe,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACnM;IACA,IAAIP,mBAAmB,CAAC5D,MAAM,GAAG,CAAC,EAAE;MAChCgE,QAAQ,CAACD,IAAI,CAAC9C,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,qBAAqB;QAAEsE,OAAO,EAAE,CAAC,4BAA4B;MAAE,CAAC,EAAE,qEAAqE,EAAEN,mBAAmB,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/M;IACA,OAAOH,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC;EAC9B;EACA,IAAIC,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACZ,QAAQ,CAACY,IAAI;EAC7B;EACAC,GAAGA,CAAChC,WAAW,EAAE;IACb,OAAO,IAAI,CAACmB,QAAQ,CAACa,GAAG,CAAChC,WAAW,CAAC;EACzC;EACAiC,GAAGA,CAACjC,WAAW,EAAEkC,KAAK,EAAE;IACpB,IAAI,CAACf,QAAQ,CAACc,GAAG,CAACjC,WAAW,EAAEkC,KAAK,CAAC;EACzC;EACAC,MAAMA,CAACnC,WAAW,EAAE;IAChB,OAAO,IAAI,CAACmB,QAAQ,CAACgB,MAAM,CAACnC,WAAW,CAAC;EAC5C;AACJ;AACA,MAAMoC,qBAAqB,CAAC;EACxBvC,WAAWA,CAACC,MAAM,EAAEW,cAAc,EAAEC,YAAY,EAAET,OAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,EAAE;IAC1F,IAAI,CAACC,EAAE,GAAI,EAAEV,mBAAoB;IACjC,IAAI,CAACW,IAAI,GAAG,CAAC,CAAC;IACd,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACS,KAAK,GAAGT,MAAM,CAACS,KAAK;IACzB,IAAI,CAACC,iBAAiB,GAAGV,MAAM,CAACU,iBAAiB,IAAI,KAAK;IAC1D,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACT,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACiC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,oBAAoB,GAAG,IAAI;EACpC;EACAC,QAAQA,CAAA,EAAG;IACP,OAAQ,OAAO,IAAI,CAACzC,MAAM,CAAC0C,KAAK,KAAK,UAAU;EACnD;EACAC,cAAcA,CAAC1C,aAAa,EAAEC,WAAW,EAAEiB,MAAM,EAAE;IAC/C,IAAI,CAAC,IAAI,CAACoB,gBAAgB,EAAE;MACxB,IAAI,CAACA,gBAAgB,GAAG,IAAInB,gBAAgB,CAAC,CAAC;IAClD;IACA,IAAI,CAAC,IAAI,CAACmB,gBAAgB,CAACL,GAAG,CAAChC,WAAW,CAAC,EAAE;MACzC,IAAI,CAACqC,gBAAgB,CAACJ,GAAG,CAACjC,WAAW,EAAE,IAAIgB,kBAAkB,CAACjB,aAAa,EAAEkB,MAAM,CAAC,CAAC;IACzF;EACJ;EACAL,QAAQA,CAACb,aAAa,EAAEC,WAAW,EAAEW,OAAO,EAAE;IAC1C,IAAIA,OAAO,EAAE;MACT,IAAI,IAAI,CAAC2B,oBAAoB,EAAE;QAC3B,IAAI,CAACA,oBAAoB,CAACH,MAAM,CAACnC,WAAW,CAAC;QAC7C,IAAI,IAAI,CAACsC,oBAAoB,CAACP,IAAI,KAAK,CAAC,EAAE;UACtC,IAAI,CAACO,oBAAoB,GAAG,IAAI;QACpC;MACJ;IACJ,CAAC,MACI;MACD,IAAI,CAAC,IAAI,CAACA,oBAAoB,EAAE;QAC5B,IAAI,CAACA,oBAAoB,GAAG,IAAIpB,gBAAgB,CAAC,CAAC;MACtD;MACA,IAAI,CAAC,IAAI,CAACoB,oBAAoB,CAACN,GAAG,CAAChC,WAAW,CAAC,EAAE;QAC7C,IAAI,CAACsC,oBAAoB,CAACL,GAAG,CAACjC,WAAW,EAAE,IAAIgB,kBAAkB,CAACjB,aAAa,EAAE,CAAC,CAAC,2CAA2C,CAAC,CAAC;MACpI;IACJ;EACJ;EACAc,QAAQA,CAAA,EAAG;IACP,cAAAC,MAAA,CAAc,IAAI,CAACT,EAAE,eAAAS,MAAA,CAAY,IAAI,CAACb,OAAO,SAAAa,MAAA,CAAM,IAAI,CAACwB,oBAAoB,GAAG,SAAS,GAAG,SAAS,QAAAxB,MAAA,CAAK,IAAI,CAAChB,MAAM,CAACD,WAAW,CAACkB,IAAI,SAAAD,MAAA,CAAM,IAAI,CAAChB,MAAM;EAC1J;AACJ;AACA,MAAM4C,iBAAiB,CAAC;EACpB7C,WAAWA,CAACE,aAAa,EAAEC,WAAW,EAAE;IACpC,IAAI,CAACD,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAAC2C,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC;EACtB;EACAC,OAAOA,CAAA,EAAG;IACN,KAAK,MAAMvB,OAAO,IAAI,IAAI,CAACmB,KAAK,EAAE;MAC9B,IAAInB,OAAO,CAAClB,IAAI,KAAK,CAAC,CAAC,qCAAqC;QACxDkB,OAAO,CAACiB,cAAc,CAAC,IAAI,CAAC1C,aAAa,EAAE,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC,2CAA2C,CAAC;MAC/G;IACJ;IACA,KAAK,MAAMwB,OAAO,IAAI,IAAI,CAACoB,OAAO,EAAE;MAChC,IAAIpB,OAAO,CAAClB,IAAI,KAAK,CAAC,CAAC,qCAAqC;QACxDkB,OAAO,CAACiB,cAAc,CAAC,IAAI,CAAC1C,aAAa,EAAE,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC,2CAA2C,CAAC;MAC/G;IACJ;IACA,IAAI,CAAC8C,SAAS,EAAE;EACpB;EACAjC,QAAQA,CAAA,EAAG;IACP,MAAMmC,MAAM,GAAG,EAAE;IACjBA,MAAM,CAACtB,IAAI,MAAAZ,MAAA,CAAM,IAAI,CAACd,WAAW,MAAG,CAAC;IACrC,KAAK,IAAI9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACyE,KAAK,CAAChF,MAAM,EAAEO,CAAC,EAAE,EAAE;MACxC8E,MAAM,CAACtB,IAAI,gBAAAZ,MAAA,CAAgB,IAAI,CAAC6B,KAAK,CAACzE,CAAC,CAAC,CAAE,CAAC;IAC/C;IACA,KAAK,IAAIA,CAAC,GAAG,IAAI,CAAC0E,OAAO,CAACjF,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC/C8E,MAAM,CAACtB,IAAI,gBAAAZ,MAAA,CAAgB,IAAI,CAAC8B,OAAO,CAAC1E,CAAC,CAAC,CAAE,CAAC;IACjD;IACA,OAAO8E,MAAM,CAAClB,IAAI,CAAC,IAAI,CAAC;EAC5B;EACAmB,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACN,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,OAAO,GAAG,EAAE;IACjB,IAAI,CAACE,SAAS,EAAE;EACpB;EACAI,oBAAoBA,CAAC1B,OAAO,EAAEb,OAAO,EAAE;IACnC,IAAIa,OAAO,CAAClB,IAAI,KAAK,CAAC,CAAC,qCAAqC;MACxDkB,OAAO,CAACZ,QAAQ,CAAC,IAAI,CAACb,aAAa,EAAE,IAAI,CAACC,WAAW,EAAEW,OAAO,CAAC;IACnE,CAAC,MACI;MACDa,OAAO,CAACZ,QAAQ,CAACD,OAAO,CAAC;IAC7B;EACJ;EACAwC,oBAAoBA,CAACxC,OAAO,EAAEyC,MAAM,EAAE;IAClC,KAAK,MAAM5B,OAAO,IAAI,IAAI,CAACmB,KAAK,EAAE;MAC9B,IAAIS,MAAM,CAAC5B,OAAO,CAAC1B,MAAM,CAAC,EAAE;QACxB,IAAI,CAACoD,oBAAoB,CAAC1B,OAAO,EAAEb,OAAO,CAAC;MAC/C;IACJ;IACA,KAAK,MAAMa,OAAO,IAAI,IAAI,CAACoB,OAAO,EAAE;MAChC,IAAIQ,MAAM,CAAC5B,OAAO,CAAC1B,MAAM,CAAC,EAAE;QACxB,IAAI,CAACoD,oBAAoB,CAAC1B,OAAO,EAAEb,OAAO,CAAC;MAC/C;IACJ;EACJ;EACA0C,WAAWA,CAAC7B,OAAO,EAAE;IACjB;IACA,KAAK,MAAM8B,aAAa,IAAI,IAAI,CAACV,OAAO,EAAE;MACtC,IAAIU,aAAa,CAAChD,IAAI,KAAK,CAAC,CAAC,qCAAqC;QAC9DgD,aAAa,CAACb,cAAc,CAAC,IAAI,CAAC1C,aAAa,EAAE,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC,+CAA+C,CAAC;MACzH;IACJ;IACA,IAAI,CAAC4C,OAAO,GAAG,EAAE;IACjB,IAAI,CAACD,KAAK,CAACjB,IAAI,CAACF,OAAO,CAAC;IACxB,IAAI,CAACsB,SAAS,EAAE;EACpB;EACAS,cAAcA,CAACjE,QAAQ,EAAE;IACrB,MAAM6B,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIjD,CAAC,GAAG,CAAC,EAAEsF,GAAG,GAAG,IAAI,CAACb,KAAK,CAAChF,MAAM,EAAEO,CAAC,GAAGsF,GAAG,EAAEtF,CAAC,EAAE,EAAE;MACnDiD,QAAQ,CAACO,IAAI,CAAC,IAAI,CAACiB,KAAK,CAACzE,CAAC,CAAC,CAACmC,EAAE,CAAC;IACnC;IACA,KAAK,IAAInC,CAAC,GAAG,IAAI,CAAC0E,OAAO,CAACjF,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC/CiD,QAAQ,CAACO,IAAI,CAAC,IAAI,CAACkB,OAAO,CAAC1E,CAAC,CAAC,CAACmC,EAAE,CAAC;IACrC;IACA,OAAO,IAAIpB,yBAAyB,CAACK,QAAQ,EAAE6B,QAAQ,CAAC;EAC5D;EACAsC,eAAeA,CAACC,QAAQ,EAAE;IACtB,MAAMC,cAAc,GAAGD,QAAQ,CAACvC,QAAQ,CAACxD,MAAM;IAC/C,IAAIiG,IAAI,GAAG,IAAI;IACf,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,eAAe,GAAG,CAAC,CAAC;IACxB,KAAK,IAAI5F,CAAC,GAAG,CAAC,EAAEsF,GAAG,GAAG,IAAI,CAACb,KAAK,CAAChF,MAAM,EAAEO,CAAC,GAAGsF,GAAG,EAAEtF,CAAC,EAAE,EAAE2F,aAAa,EAAE,EAAE;MACpE,MAAMrC,OAAO,GAAG,IAAI,CAACmB,KAAK,CAACzE,CAAC,CAAC;MAC7B,IAAI0F,IAAI,KAAKC,aAAa,IAAIF,cAAc,IAAInC,OAAO,CAACnB,EAAE,KAAKqD,QAAQ,CAACvC,QAAQ,CAAC0C,aAAa,CAAC,CAAC,EAAE;QAC9FD,IAAI,GAAG,KAAK;QACZE,eAAe,GAAG,CAAC;MACvB;MACA,IAAI,CAACF,IAAI,IAAIpC,OAAO,CAAClB,IAAI,KAAK,CAAC,CAAC,qCAAqC;QACjEkB,OAAO,CAACiB,cAAc,CAAC,IAAI,CAAC1C,aAAa,EAAE,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC,2CAA2C,CAAC;MAC/G;IACJ;IACA,IAAI+D,kBAAkB,GAAG,CAAC,CAAC;IAC3B,KAAK,IAAI7F,CAAC,GAAG,IAAI,CAAC0E,OAAO,CAACjF,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE2F,aAAa,EAAE,EAAE;MAChE,MAAMrC,OAAO,GAAG,IAAI,CAACoB,OAAO,CAAC1E,CAAC,CAAC;MAC/B,IAAI0F,IAAI,KAAKC,aAAa,IAAIF,cAAc,IAAInC,OAAO,CAACnB,EAAE,KAAKqD,QAAQ,CAACvC,QAAQ,CAAC0C,aAAa,CAAC,CAAC,EAAE;QAC9FD,IAAI,GAAG,KAAK;QACZG,kBAAkB,GAAG7F,CAAC;MAC1B;MACA,IAAI,CAAC0F,IAAI,IAAIpC,OAAO,CAAClB,IAAI,KAAK,CAAC,CAAC,qCAAqC;QACjEkB,OAAO,CAACiB,cAAc,CAAC,IAAI,CAAC1C,aAAa,EAAE,IAAI,CAACC,WAAW,EAAE,CAAC,CAAC,2CAA2C,CAAC;MAC/G;IACJ;IACA,IAAI8D,eAAe,KAAK,CAAC,CAAC,EAAE;MACxB,IAAI,CAACnB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACqB,KAAK,CAAC,CAAC,EAAEF,eAAe,CAAC;IACrD;IACA,IAAIC,kBAAkB,KAAK,CAAC,CAAC,EAAE;MAC3B,IAAI,CAACnB,OAAO,GAAG,IAAI,CAACA,OAAO,CAACoB,KAAK,CAACD,kBAAkB,GAAG,CAAC,CAAC;IAC7D;IACA,IAAI,CAACjB,SAAS,EAAE;EACpB;EACAmB,WAAWA,CAAA,EAAG;IACV,MAAMC,IAAI,GAAG,EAAE;IACf,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,MAAM3C,OAAO,IAAI,IAAI,CAACmB,KAAK,EAAE;MAC9BuB,IAAI,CAACxC,IAAI,CAACF,OAAO,CAAC1B,MAAM,CAAC;IAC7B;IACA,KAAK,MAAM0B,OAAO,IAAI,IAAI,CAACoB,OAAO,EAAE;MAChCuB,MAAM,CAACzC,IAAI,CAACF,OAAO,CAAC1B,MAAM,CAAC;IAC/B;IACA,OAAO;MAAEoE,IAAI;MAAEC;IAAO,CAAC;EAC3B;EACAC,qBAAqBA,CAAA,EAAG;IACpB,IAAI,IAAI,CAACzB,KAAK,CAAChF,MAAM,KAAK,CAAC,EAAE;MACzB,OAAO,IAAI;IACf;IACA,OAAO,IAAI,CAACgF,KAAK,CAAC,IAAI,CAACA,KAAK,CAAChF,MAAM,GAAG,CAAC,CAAC;EAC5C;EACA0G,2BAA2BA,CAAA,EAAG;IAC1B,IAAI,IAAI,CAAC1B,KAAK,CAAChF,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO,IAAI;IACf;IACA,OAAO,IAAI,CAACgF,KAAK,CAAC,IAAI,CAACA,KAAK,CAAChF,MAAM,GAAG,CAAC,CAAC;EAC5C;EACA2G,uBAAuBA,CAAA,EAAG;IACtB,IAAI,IAAI,CAAC1B,OAAO,CAACjF,MAAM,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI;IACf;IACA,OAAO,IAAI,CAACiF,OAAO,CAAC,IAAI,CAACA,OAAO,CAACjF,MAAM,GAAG,CAAC,CAAC;EAChD;EACA4G,eAAeA,CAAA,EAAG;IACd,OAAQ,IAAI,CAAC5B,KAAK,CAAChF,MAAM,GAAG,CAAC;EACjC;EACA6G,iBAAiBA,CAAA,EAAG;IAChB,OAAQ,IAAI,CAAC5B,OAAO,CAACjF,MAAM,GAAG,CAAC;EACnC;EACA8G,yBAAyBA,CAACC,QAAQ,EAAEC,aAAa,EAAE;IAC/C,KAAK,IAAIC,CAAC,GAAG,IAAI,CAACjC,KAAK,CAAChF,MAAM,GAAG,CAAC,EAAEiH,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC7C,IAAI,IAAI,CAACjC,KAAK,CAACiC,CAAC,CAAC,KAAKF,QAAQ,EAAE;QAC5B,IAAIC,aAAa,CAAC3C,GAAG,CAAC,IAAI,CAAChC,WAAW,CAAC,EAAE;UACrC;UACA,IAAI,CAAC2C,KAAK,CAACiC,CAAC,CAAC,GAAGD,aAAa,CAACE,GAAG,CAAC,IAAI,CAAC7E,WAAW,CAAC;QACvD,CAAC,MACI;UACD;UACA,IAAI,CAAC2C,KAAK,CAACmC,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;QAC3B;QACA;MACJ;IACJ;IACA,IAAI,CAAC9B,SAAS,EAAE;EACpB;EACAiC,2BAA2BA,CAACL,QAAQ,EAAEC,aAAa,EAAE;IACjD,KAAK,IAAIC,CAAC,GAAG,IAAI,CAAChC,OAAO,CAACjF,MAAM,GAAG,CAAC,EAAEiH,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC/C,IAAI,IAAI,CAAChC,OAAO,CAACgC,CAAC,CAAC,KAAKF,QAAQ,EAAE;QAC9B,IAAIC,aAAa,CAAC3C,GAAG,CAAC,IAAI,CAAChC,WAAW,CAAC,EAAE;UACrC;UACA,IAAI,CAAC4C,OAAO,CAACgC,CAAC,CAAC,GAAGD,aAAa,CAACE,GAAG,CAAC,IAAI,CAAC7E,WAAW,CAAC;QACzD,CAAC,MACI;UACD;UACA,IAAI,CAAC4C,OAAO,CAACkC,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;QAC7B;QACA;MACJ;IACJ;IACA,IAAI,CAAC9B,SAAS,EAAE;EACpB;EACAkC,YAAYA,CAACxD,OAAO,EAAE;IAClB,IAAI,CAACmB,KAAK,CAACsC,GAAG,CAAC,CAAC;IAChB,IAAI,CAACrC,OAAO,CAAClB,IAAI,CAACF,OAAO,CAAC;IAC1B,IAAI,CAACsB,SAAS,EAAE;EACpB;EACAoC,WAAWA,CAAC1D,OAAO,EAAE;IACjB,IAAI,CAACoB,OAAO,CAACqC,GAAG,CAAC,CAAC;IAClB,IAAI,CAACtC,KAAK,CAACjB,IAAI,CAACF,OAAO,CAAC;IACxB,IAAI,CAACsB,SAAS,EAAE;EACpB;AACJ;AACA,MAAMqC,iBAAiB,CAAC;EACpBtF,WAAWA,CAACuF,UAAU,EAAE;IACpB,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,KAAK,IAAInH,CAAC,GAAG,CAAC,EAAEsF,GAAG,GAAG,IAAI,CAAC4B,UAAU,CAACzH,MAAM,EAAEO,CAAC,GAAGsF,GAAG,EAAEtF,CAAC,EAAE,EAAE;MACxD,IAAI,CAACmH,WAAW,CAACnH,CAAC,CAAC,GAAG,IAAI,CAACkH,UAAU,CAAClH,CAAC,CAAC,CAAC4E,SAAS;IACtD;EACJ;EACAnC,OAAOA,CAAA,EAAG;IACN,KAAK,IAAIzC,CAAC,GAAG,CAAC,EAAEsF,GAAG,GAAG,IAAI,CAAC4B,UAAU,CAACzH,MAAM,EAAEO,CAAC,GAAGsF,GAAG,EAAEtF,CAAC,EAAE,EAAE;MACxD,IAAI,IAAI,CAACmH,WAAW,CAACnH,CAAC,CAAC,KAAK,IAAI,CAACkH,UAAU,CAAClH,CAAC,CAAC,CAAC4E,SAAS,EAAE;QACtD,OAAO,KAAK;MAChB;IACJ;IACA,OAAO,IAAI;EACf;AACJ;AACA,MAAMwC,gBAAgB,GAAG,IAAI5C,iBAAiB,CAAC,EAAE,EAAE,EAAE,CAAC;AACtD4C,gBAAgB,CAACzC,MAAM,GAAG,IAAI;AAC9B,IAAI0C,eAAe,GAAG,MAAMA,eAAe,CAAC;EACxC1F,WAAWA,CAAC2F,cAAc,EAAEC,oBAAoB,EAAE;IAC9C,IAAI,CAACD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACC,WAAW,GAAG,IAAItE,GAAG,CAAC,CAAC;IAC5B,IAAI,CAACuE,0BAA0B,GAAG,EAAE;EACxC;EACAC,mBAAmBA,CAACtG,QAAQ,EAAE;IAC1B,KAAK,MAAMuG,wBAAwB,IAAI,IAAI,CAACF,0BAA0B,EAAE;MACpE,IAAIE,wBAAwB,CAAC,CAAC,CAAC,KAAKvG,QAAQ,CAACC,MAAM,EAAE;QACjD,OAAOsG,wBAAwB,CAAC,CAAC,CAAC,CAACC,gBAAgB,CAACxG,QAAQ,CAAC;MACjE;IACJ;IACA,OAAOA,QAAQ,CAACuB,QAAQ,CAAC,CAAC;EAC9B;EACAkF,MAAMA,CAACxF,KAAK,EAAE;IACVyF,OAAO,CAACC,GAAG,uCAAuC,CAAC;IACnDD,OAAO,CAACC,GAAG,UAAAnF,MAAA,CAAUP,KAAK,OAAI,CAAC;IAC/B,MAAM2F,GAAG,GAAG,EAAE;IACd,KAAK,MAAM1E,OAAO,IAAI,IAAI,CAACkE,WAAW,EAAE;MACpCQ,GAAG,CAACxE,IAAI,CAACF,OAAO,CAAC,CAAC,CAAC,CAACX,QAAQ,CAAC,CAAC,CAAC;IACnC;IACAmF,OAAO,CAACC,GAAG,CAACC,GAAG,CAACpE,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B;EACAuB,WAAWA,CAAC7B,OAAO,EAA4D;IAAA,IAA1D2E,KAAK,GAAAzI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0I,SAAA,GAAA1I,SAAA,MAAGwB,aAAa,CAACmH,IAAI;IAAA,IAAEC,MAAM,GAAA5I,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0I,SAAA,GAAA1I,SAAA,MAAGyB,cAAc,CAACkH,IAAI;IACzE,IAAI7E,OAAO,CAAClB,IAAI,KAAK,CAAC,CAAC,oCAAoC;MACvD,MAAMP,aAAa,GAAGV,gBAAgB,CAACmC,OAAO,CAAClC,QAAQ,CAAC;MACxD,MAAMU,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAACpE,OAAO,CAAClC,QAAQ,CAAC;MAC9D,IAAI,CAACiH,YAAY,CAAC,IAAI3G,oBAAoB,CAAC4B,OAAO,EAAEzB,aAAa,EAAEC,WAAW,EAAEmG,KAAK,CAAC9F,EAAE,EAAE8F,KAAK,CAACK,SAAS,CAAC,CAAC,EAAEF,MAAM,CAACjG,EAAE,EAAEiG,MAAM,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;IAChJ,CAAC,MACI;MACD,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;MACtB,MAAMjG,cAAc,GAAG,EAAE;MACzB,MAAMC,YAAY,GAAG,EAAE;MACvB,KAAK,MAAMpB,QAAQ,IAAIkC,OAAO,CAACmF,SAAS,EAAE;QACtC,MAAM5G,aAAa,GAAGV,gBAAgB,CAACC,QAAQ,CAAC;QAChD,MAAMU,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAACtG,QAAQ,CAAC;QACtD,IAAImH,IAAI,CAACzE,GAAG,CAAChC,WAAW,CAAC,EAAE;UACvB;QACJ;QACAyG,IAAI,CAACG,GAAG,CAAC5G,WAAW,CAAC;QACrBS,cAAc,CAACiB,IAAI,CAAC3B,aAAa,CAAC;QAClCW,YAAY,CAACgB,IAAI,CAAC1B,WAAW,CAAC;MAClC;MACA,IAAIS,cAAc,CAAC9C,MAAM,KAAK,CAAC,EAAE;QAC7B,IAAI,CAAC4I,YAAY,CAAC,IAAI3G,oBAAoB,CAAC4B,OAAO,EAAEf,cAAc,CAAC,CAAC,CAAC,EAAEC,YAAY,CAAC,CAAC,CAAC,EAAEyF,KAAK,CAAC9F,EAAE,EAAE8F,KAAK,CAACK,SAAS,CAAC,CAAC,EAAEF,MAAM,CAACjG,EAAE,EAAEiG,MAAM,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;MACxJ,CAAC,MACI;QACD,IAAI,CAACD,YAAY,CAAC,IAAInE,qBAAqB,CAACZ,OAAO,EAAEf,cAAc,EAAEC,YAAY,EAAEyF,KAAK,CAAC9F,EAAE,EAAE8F,KAAK,CAACK,SAAS,CAAC,CAAC,EAAEF,MAAM,CAACjG,EAAE,EAAEiG,MAAM,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC;MACnJ;IACJ;IACA,IAAIpH,KAAK,EAAE;MACP,IAAI,CAAC2G,MAAM,CAAC,aAAa,CAAC;IAC9B;EACJ;EACAQ,YAAYA,CAAC/E,OAAO,EAAE;IAClB,KAAK,IAAItD,CAAC,GAAG,CAAC,EAAEsF,GAAG,GAAGhC,OAAO,CAACd,YAAY,CAAC/C,MAAM,EAAEO,CAAC,GAAGsF,GAAG,EAAEtF,CAAC,EAAE,EAAE;MAC7D,MAAM6B,aAAa,GAAGyB,OAAO,CAACf,cAAc,CAACvC,CAAC,CAAC;MAC/C,MAAM8B,WAAW,GAAGwB,OAAO,CAACd,YAAY,CAACxC,CAAC,CAAC;MAC3C,IAAI2I,SAAS;MACb,IAAI,IAAI,CAACnB,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;QACnC6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACjD,CAAC,MACI;QACD6G,SAAS,GAAG,IAAInE,iBAAiB,CAAC3C,aAAa,EAAEC,WAAW,CAAC;QAC7D,IAAI,CAAC0F,WAAW,CAACzD,GAAG,CAACjC,WAAW,EAAE6G,SAAS,CAAC;MAChD;MACAA,SAAS,CAACxD,WAAW,CAAC7B,OAAO,CAAC;IAClC;EACJ;EACAsF,cAAcA,CAACxH,QAAQ,EAAE;IACrB,MAAMU,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAACtG,QAAQ,CAAC;IACtD,IAAI,IAAI,CAACoG,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACnC,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD,IAAI6G,SAAS,CAACrC,iBAAiB,CAAC,CAAC,EAAE;QAC/B,OAAO,IAAI;MACf;MACA,MAAMuC,kBAAkB,GAAGF,SAAS,CAACzC,qBAAqB,CAAC,CAAC;MAC5D,OAAO2C,kBAAkB,GAAGA,kBAAkB,CAACjH,MAAM,GAAG,IAAI;IAChE;IACA,OAAO,IAAI;EACf;EACAkH,0BAA0BA,CAACtC,QAAQ,EAAEuC,eAAe,EAAE;IAClD,MAAMC,aAAa,GAAGxC,QAAQ,CAAC5E,MAAM,CAAC0C,KAAK,CAAC,CAAC;IAC7C,MAAMmC,aAAa,GAAG,IAAIvD,GAAG,CAAC,CAAC;IAC/B,KAAK,MAAM+F,QAAQ,IAAID,aAAa,EAAE;MAClC,MAAMnH,aAAa,GAAGV,gBAAgB,CAAC8H,QAAQ,CAAC7H,QAAQ,CAAC;MACzD,MAAMU,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAACuB,QAAQ,CAAC7H,QAAQ,CAAC;MAC/D,MAAMkC,OAAO,GAAG,IAAI5B,oBAAoB,CAACuH,QAAQ,EAAEpH,aAAa,EAAEC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1F2E,aAAa,CAAC1C,GAAG,CAACT,OAAO,CAACxB,WAAW,EAAEwB,OAAO,CAAC;IACnD;IACA,KAAK,MAAMxB,WAAW,IAAI0E,QAAQ,CAAChE,YAAY,EAAE;MAC7C,IAAIuG,eAAe,IAAIA,eAAe,CAACjF,GAAG,CAAChC,WAAW,CAAC,EAAE;QACrD;MACJ;MACA,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD6G,SAAS,CAACpC,yBAAyB,CAACC,QAAQ,EAAEC,aAAa,CAAC;IAChE;EACJ;EACAyC,4BAA4BA,CAAC1C,QAAQ,EAAEuC,eAAe,EAAE;IACpD,MAAMC,aAAa,GAAGxC,QAAQ,CAAC5E,MAAM,CAAC0C,KAAK,CAAC,CAAC;IAC7C,MAAMmC,aAAa,GAAG,IAAIvD,GAAG,CAAC,CAAC;IAC/B,KAAK,MAAM+F,QAAQ,IAAID,aAAa,EAAE;MAClC,MAAMnH,aAAa,GAAGV,gBAAgB,CAAC8H,QAAQ,CAAC7H,QAAQ,CAAC;MACzD,MAAMU,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAACuB,QAAQ,CAAC7H,QAAQ,CAAC;MAC/D,MAAMkC,OAAO,GAAG,IAAI5B,oBAAoB,CAACuH,QAAQ,EAAEpH,aAAa,EAAEC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1F2E,aAAa,CAAC1C,GAAG,CAACT,OAAO,CAACxB,WAAW,EAAEwB,OAAO,CAAC;IACnD;IACA,KAAK,MAAMxB,WAAW,IAAI0E,QAAQ,CAAChE,YAAY,EAAE;MAC7C,IAAIuG,eAAe,IAAIA,eAAe,CAACjF,GAAG,CAAChC,WAAW,CAAC,EAAE;QACrD;MACJ;MACA,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD6G,SAAS,CAAC9B,2BAA2B,CAACL,QAAQ,EAAEC,aAAa,CAAC;IAClE;EACJ;EACA0C,cAAcA,CAAC/H,QAAQ,EAAE;IACrB,MAAMU,WAAW,GAAG,OAAOV,QAAQ,KAAK,QAAQ,GAAGA,QAAQ,GAAG,IAAI,CAACsG,mBAAmB,CAACtG,QAAQ,CAAC;IAChG,IAAI,IAAI,CAACoG,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACnC,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD6G,SAAS,CAAC9D,OAAO,CAAC,CAAC;MACnB,IAAI,CAAC2C,WAAW,CAACvD,MAAM,CAACnC,WAAW,CAAC;IACxC;IACA,IAAIZ,KAAK,EAAE;MACP,IAAI,CAAC2G,MAAM,CAAC,gBAAgB,CAAC;IACjC;EACJ;EACA5C,oBAAoBA,CAAC7D,QAAQ,EAAEqB,OAAO,EAAEyC,MAAM,EAAE;IAC5C,MAAMpD,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAACtG,QAAQ,CAAC;IACtD,IAAI,IAAI,CAACoG,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACnC,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD6G,SAAS,CAAC1D,oBAAoB,CAACxC,OAAO,EAAEyC,MAAM,CAAC;IACnD;IACA,IAAIhE,KAAK,EAAE;MACP,IAAI,CAAC2G,MAAM,CAAC,sBAAsB,CAAC;IACvC;EACJ;EACAxC,cAAcA,CAACjE,QAAQ,EAAE;IACrB,MAAMU,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAACtG,QAAQ,CAAC;IACtD,IAAI,IAAI,CAACoG,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACnC,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD,OAAO6G,SAAS,CAACtD,cAAc,CAACjE,QAAQ,CAAC;IAC7C;IACA,OAAO,IAAIL,yBAAyB,CAACK,QAAQ,EAAE,EAAE,CAAC;EACtD;EACAmE,eAAeA,CAACC,QAAQ,EAAE;IACtB,MAAM1D,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAAClC,QAAQ,CAACpE,QAAQ,CAAC;IAC/D,IAAI,IAAI,CAACoG,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACnC,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD6G,SAAS,CAACpD,eAAe,CAACC,QAAQ,CAAC;MACnC,IAAI,CAACmD,SAAS,CAACtC,eAAe,CAAC,CAAC,IAAI,CAACsC,SAAS,CAACrC,iBAAiB,CAAC,CAAC,EAAE;QAChE;QACAqC,SAAS,CAAC9D,OAAO,CAAC,CAAC;QACnB,IAAI,CAAC2C,WAAW,CAACvD,MAAM,CAACnC,WAAW,CAAC;MACxC;IACJ;IACA,IAAIZ,KAAK,EAAE;MACP,IAAI,CAAC2G,MAAM,CAAC,iBAAiB,CAAC;IAClC;EACJ;EACA9B,WAAWA,CAAC3E,QAAQ,EAAE;IAClB,MAAMU,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAACtG,QAAQ,CAAC;IACtD,IAAI,IAAI,CAACoG,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACnC,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD,OAAO6G,SAAS,CAAC5C,WAAW,CAAC,CAAC;IAClC;IACA,OAAO;MAAEC,IAAI,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC;EACnC;EACAmD,iCAAiCA,CAACnH,QAAQ,EAAE;IACxC,IAAI,CAACA,QAAQ,EAAE;MACX,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACvB;IACA;IACA,IAAIoH,cAAc,GAAG,IAAI;IACzB,IAAIC,kBAAkB,GAAG,IAAI;IAC7B,KAAK,MAAM,CAACxH,WAAW,EAAE6G,SAAS,CAAC,IAAI,IAAI,CAACnB,WAAW,EAAE;MACrD,MAAM+B,SAAS,GAAGZ,SAAS,CAACzC,qBAAqB,CAAC,CAAC;MACnD,IAAI,CAACqD,SAAS,EAAE;QACZ;MACJ;MACA,IAAIA,SAAS,CAACtH,QAAQ,KAAKA,QAAQ,EAAE;QACjC,IAAI,CAACoH,cAAc,IAAIE,SAAS,CAACrH,WAAW,GAAGmH,cAAc,CAACnH,WAAW,EAAE;UACvEmH,cAAc,GAAGE,SAAS;UAC1BD,kBAAkB,GAAGxH,WAAW;QACpC;MACJ;IACJ;IACA,OAAO,CAACuH,cAAc,EAAEC,kBAAkB,CAAC;EAC/C;EACAE,OAAOA,CAACC,gBAAgB,EAAE;IACtB,IAAIA,gBAAgB,YAAYxI,cAAc,EAAE;MAC5C,MAAM,GAAGqI,kBAAkB,CAAC,GAAG,IAAI,CAACF,iCAAiC,CAACK,gBAAgB,CAACtH,EAAE,CAAC;MAC1F,OAAOmH,kBAAkB,GAAG,IAAI,GAAG,KAAK;IAC5C;IACA,MAAMxH,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAAC+B,gBAAgB,CAAC;IAC9D,IAAI,IAAI,CAACjC,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACnC,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD,OAAO6G,SAAS,CAACtC,eAAe,CAAC,CAAC;IACtC;IACA,OAAO,KAAK;EAChB;EACAqD,QAAQA,CAACC,GAAG,EAAErG,OAAO,EAAE;IACnBjD,iBAAiB,CAACsJ,GAAG,CAAC;IACtB;IACA,KAAK,MAAM7H,WAAW,IAAIwB,OAAO,CAACd,YAAY,EAAE;MAC5C,IAAI,CAAC2G,cAAc,CAACrH,WAAW,CAAC;IACpC;IACA,IAAI,CAACyF,oBAAoB,CAACqC,KAAK,CAACD,GAAG,CAAC;EACxC;EACAE,aAAaA,CAACC,iBAAiB,EAAE;IAC7B;IACA,KAAK,MAAMnB,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;MAClD,IAAIyB,SAAS,CAAChE,MAAM,EAAE;QAClB,MAAM,IAAIoF,KAAK,CAAC,gCAAgC,CAAC;MACrD;IACJ;IACA;IACA,KAAK,MAAMpB,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;MAClDyB,SAAS,CAAChE,MAAM,GAAG,IAAI;IAC3B;IACA,OAAO,MAAM;MACT;MACA,KAAK,MAAMgE,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;QAClDyB,SAAS,CAAChE,MAAM,GAAG,KAAK;MAC5B;IACJ,CAAC;EACL;EACAqF,oBAAoBA,CAAC1G,OAAO,EAAE2G,MAAM,EAAEH,iBAAiB,EAAEI,OAAO,EAAEC,YAAY,EAAE;IAC5E,MAAMC,YAAY,GAAG,IAAI,CAACP,aAAa,CAACC,iBAAiB,CAAC;IAC1D,IAAIhF,MAAM;IACV,IAAI;MACAA,MAAM,GAAGmF,MAAM,CAAC,CAAC;IACrB,CAAC,CACD,OAAON,GAAG,EAAE;MACRS,YAAY,CAAC,CAAC;MACdF,OAAO,CAACrF,OAAO,CAAC,CAAC;MACjB,OAAO,IAAI,CAAC6E,QAAQ,CAACC,GAAG,EAAErG,OAAO,CAAC;IACtC;IACA,IAAIwB,MAAM,EAAE;MACR;MACA,OAAOA,MAAM,CAACuF,IAAI,CAAC,MAAM;QACrBD,YAAY,CAAC,CAAC;QACdF,OAAO,CAACrF,OAAO,CAAC,CAAC;QACjB,OAAOsF,YAAY,CAAC,CAAC;MACzB,CAAC,EAAGR,GAAG,IAAK;QACRS,YAAY,CAAC,CAAC;QACdF,OAAO,CAACrF,OAAO,CAAC,CAAC;QACjB,OAAO,IAAI,CAAC6E,QAAQ,CAACC,GAAG,EAAErG,OAAO,CAAC;MACtC,CAAC,CAAC;IACN,CAAC,MACI;MACD;MACA8G,YAAY,CAAC,CAAC;MACdF,OAAO,CAACrF,OAAO,CAAC,CAAC;MACjB,OAAOsF,YAAY,CAAC,CAAC;IACzB;EACJ;EACA,MAAMG,uBAAuBA,CAAChH,OAAO,EAAE;IACnC,IAAI,OAAOA,OAAO,CAAC1B,MAAM,CAAC2I,eAAe,KAAK,WAAW,EAAE;MACvD,OAAOjK,UAAU,CAAC6H,IAAI;IAC1B;IACA,MAAMrD,MAAM,GAAGxB,OAAO,CAAC1B,MAAM,CAAC2I,eAAe,CAAC,CAAC;IAC/C,IAAI,OAAOzF,MAAM,KAAK,WAAW,EAAE;MAC/B,OAAOxE,UAAU,CAAC6H,IAAI;IAC1B;IACA,OAAOrD,MAAM;EACjB;EACA0F,sBAAsBA,CAAClH,OAAO,EAAEmH,QAAQ,EAAE;IACtC,IAAInH,OAAO,CAAC1B,MAAM,CAACQ,IAAI,KAAK,CAAC,CAAC,uCAAuC,OAAOkB,OAAO,CAAC1B,MAAM,CAAC2I,eAAe,KAAK,WAAW,EAAE;MACxH;MACA,OAAOE,QAAQ,CAACnK,UAAU,CAAC6H,IAAI,CAAC;IACpC;IACA,MAAMzI,CAAC,GAAG4D,OAAO,CAAC1B,MAAM,CAAC2I,eAAe,CAAC,CAAC;IAC1C,IAAI,CAAC7K,CAAC,EAAE;MACJ;MACA,OAAO+K,QAAQ,CAACnK,UAAU,CAAC6H,IAAI,CAAC;IACpC;IACA,IAAI5H,YAAY,CAACb,CAAC,CAAC,EAAE;MACjB,OAAO+K,QAAQ,CAAC/K,CAAC,CAAC;IACtB;IACA,OAAOA,CAAC,CAAC2K,IAAI,CAAEK,UAAU,IAAK;MAC1B,OAAOD,QAAQ,CAACC,UAAU,CAAC;IAC/B,CAAC,CAAC;EACN;EACAC,sBAAsBA,CAACrH,OAAO,EAAE;IAC5B,MAAMsH,kBAAkB,GAAG,EAAE;IAC7B,KAAK,MAAM9I,WAAW,IAAIwB,OAAO,CAACd,YAAY,EAAE;MAC5CoI,kBAAkB,CAACpH,IAAI,CAAC,IAAI,CAACgE,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC,IAAIsF,gBAAgB,CAAC;IAClF;IACA,OAAO,IAAIH,iBAAiB,CAAC2D,kBAAkB,CAAC;EACpD;EACAC,kBAAkBA,CAAC/I,WAAW,EAAEwB,OAAO,EAAEyF,eAAe,EAAE+B,OAAO,EAAE;IAC/D,IAAIxH,OAAO,CAACe,QAAQ,CAAC,CAAC,EAAE;MACpB,IAAI,CAACyE,0BAA0B,CAACxF,OAAO,EAAEyF,eAAe,CAAC;MACzD,IAAI,CAACxB,oBAAoB,CAACwD,IAAI,CAACD,OAAO,CAAC;MACvC,OAAO,IAAIE,0BAA0B,CAAC,IAAI,CAACC,KAAK,CAACnJ,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAC3E,CAAC,MACI;MACD;MACA,KAAK,MAAMA,WAAW,IAAIwB,OAAO,CAACd,YAAY,EAAE;QAC5C,IAAI,CAAC2G,cAAc,CAACrH,WAAW,CAAC;MACpC;MACA,IAAI,CAACyF,oBAAoB,CAACwD,IAAI,CAACD,OAAO,CAAC;MACvC,OAAO,IAAIE,0BAA0B,CAAC,CAAC;IAC3C;EACJ;EACAE,mBAAmBA,CAACpJ,WAAW,EAAEwB,OAAO,EAAEwG,iBAAiB,EAAEqB,yBAAyB,EAAE;IACpF,IAAI7H,OAAO,CAACa,gBAAgB,EAAE;MAC1B,OAAO,IAAI,CAAC0G,kBAAkB,CAAC/I,WAAW,EAAEwB,OAAO,EAAEA,OAAO,CAACa,gBAAgB,EAAEzD,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,qBAAqB;QAAEsE,OAAO,EAAE,CAAC,0DAA0D;MAAE,CAAC,EAAE,4CAA4C,EAAEL,OAAO,CAACjB,KAAK,EAAEiB,OAAO,CAACa,gBAAgB,CAAChB,aAAa,CAAC,CAAC,CAAC,CAAC;IAC9S;IACA,IAAIgI,yBAAyB,IAAI7H,OAAO,CAACc,oBAAoB,EAAE;MAC3D,OAAO,IAAI,CAACyG,kBAAkB,CAAC/I,WAAW,EAAEwB,OAAO,EAAEA,OAAO,CAACc,oBAAoB,EAAE1D,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,qBAAqB;QAAEsE,OAAO,EAAE,CAAC,0DAA0D;MAAE,CAAC,EAAE,4CAA4C,EAAEL,OAAO,CAACjB,KAAK,EAAEiB,OAAO,CAACc,oBAAoB,CAACjB,aAAa,CAAC,CAAC,CAAC,CAAC;IACtT;IACA;IACA,MAAMiI,wBAAwB,GAAG,EAAE;IACnC,KAAK,MAAMzC,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;MAClD,IAAIyB,SAAS,CAACzC,qBAAqB,CAAC,CAAC,KAAK5C,OAAO,EAAE;QAC/C8H,wBAAwB,CAAC5H,IAAI,CAACmF,SAAS,CAAC9G,aAAa,CAAC;MAC1D;IACJ;IACA,IAAIuJ,wBAAwB,CAAC3L,MAAM,GAAG,CAAC,EAAE;MACrC,OAAO,IAAI,CAACoL,kBAAkB,CAAC/I,WAAW,EAAEwB,OAAO,EAAE,IAAI,EAAE5C,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,iCAAiC;QAAEsE,OAAO,EAAE,CAAC,8DAA8D;MAAE,CAAC,EAAE,wEAAwE,EAAEL,OAAO,CAACjB,KAAK,EAAE+I,wBAAwB,CAACxH,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACjU;IACA,MAAMyH,wBAAwB,GAAG,EAAE;IACnC,KAAK,MAAM1C,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;MAClD,IAAIyB,SAAS,CAAChE,MAAM,EAAE;QAClB0G,wBAAwB,CAAC7H,IAAI,CAACmF,SAAS,CAAC9G,aAAa,CAAC;MAC1D;IACJ;IACA,IAAIwJ,wBAAwB,CAAC5L,MAAM,GAAG,CAAC,EAAE;MACrC,OAAO,IAAI,CAACoL,kBAAkB,CAAC/I,WAAW,EAAEwB,OAAO,EAAE,IAAI,EAAE5C,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,4CAA4C;QAAEsE,OAAO,EAAE,CAAC,8DAA8D;MAAE,CAAC,EAAE,yGAAyG,EAAEL,OAAO,CAACjB,KAAK,EAAEgJ,wBAAwB,CAACzH,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7W;IACA;IACA,IAAI,CAACkG,iBAAiB,CAACrH,OAAO,CAAC,CAAC,EAAE;MAC9B,OAAO,IAAI,CAACoI,kBAAkB,CAAC/I,WAAW,EAAEwB,OAAO,EAAE,IAAI,EAAE5C,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,4CAA4C;QAAEsE,OAAO,EAAE,CAAC,8DAA8D;MAAE,CAAC,EAAE,kGAAkG,EAAEL,OAAO,CAACjB,KAAK,CAAC,CAAC;IACjU;IACA,OAAO,IAAI;EACf;EACAiJ,cAAcA,CAACxJ,WAAW,EAAEwB,OAAO,EAAEiI,aAAa,EAAE;IAChD,MAAMX,kBAAkB,GAAG,IAAI,CAACD,sBAAsB,CAACrH,OAAO,CAAC;IAC/D,MAAMkI,iBAAiB,GAAG,IAAI,CAACN,mBAAmB,CAACpJ,WAAW,EAAEwB,OAAO,EAAEsH,kBAAkB,EAAE,gEAAiE,KAAK,CAAC;IACpK,IAAIY,iBAAiB,EAAE;MACnB,OAAOA,iBAAiB,CAACC,WAAW;IACxC;IACA,OAAO,IAAI,CAACC,+BAA+B,CAAC5J,WAAW,EAAEwB,OAAO,EAAEsH,kBAAkB,EAAEW,aAAa,CAAC;EACxG;EACAI,kBAAkBA,CAACrI,OAAO,EAAE;IACxB,IAAI,CAACA,OAAO,CAACvB,OAAO,EAAE;MAClB,OAAO,KAAK;IAChB;IACA;IACA,KAAK,MAAM,GAAG4G,SAAS,CAAC,IAAI,IAAI,CAACnB,WAAW,EAAE;MAC1C,MAAMoE,WAAW,GAAGjD,SAAS,CAACzC,qBAAqB,CAAC,CAAC;MACrD,IAAI,CAAC0F,WAAW,EAAE;QACd;MACJ;MACA,IAAIA,WAAW,KAAKtI,OAAO,EAAE;QACzB,MAAMuI,iBAAiB,GAAGlD,SAAS,CAACxC,2BAA2B,CAAC,CAAC;QACjE,IAAI0F,iBAAiB,IAAIA,iBAAiB,CAAC9J,OAAO,KAAKuB,OAAO,CAACvB,OAAO,EAAE;UACpE;UACA,OAAO,IAAI;QACf;MACJ;MACA,IAAI6J,WAAW,CAAC7J,OAAO,KAAKuB,OAAO,CAACvB,OAAO,EAAE;QACzC;QACA,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB;EACA,MAAM2J,+BAA+BA,CAAC5J,WAAW,EAAEwB,OAAO,EAAEwG,iBAAiB,EAAEyB,aAAa,EAAE;IAC1F,IAAIjI,OAAO,CAACe,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAACsH,kBAAkB,CAACrI,OAAO,CAAC,EAAE;MACzD;MACA,IAAIwI,UAAU;MACd,CAAC,UAAUA,UAAU,EAAE;QACnBA,UAAU,CAACA,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;QACzCA,UAAU,CAACA,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;QAC3CA,UAAU,CAACA,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ;MACnD,CAAC,EAAEA,UAAU,KAAKA,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;MACnC,MAAM;QAAEhH;MAAO,CAAC,GAAG,MAAM,IAAI,CAACwC,cAAc,CAACyE,MAAM,CAAC;QAChD3J,IAAI,EAAE3B,QAAQ,CAACuL,IAAI;QACnBlB,OAAO,EAAEpK,GAAG,CAACgD,QAAQ,CAAC,kBAAkB,EAAE,gDAAgD,EAAEJ,OAAO,CAACjB,KAAK,CAAC;QAC1G4J,OAAO,EAAE,CACL;UACI5J,KAAK,EAAE3B,GAAG,CAACgD,QAAQ,CAAC;YAAErE,GAAG,EAAE,IAAI;YAAEsE,OAAO,EAAE,CAAC,yDAAyD;UAAE,CAAC,EAAE,qBAAqB,EAAEmG,iBAAiB,CAAC5C,UAAU,CAACzH,MAAM,CAAC;UACpKyM,GAAG,EAAEA,CAAA,KAAMJ,UAAU,CAACK;QAC1B,CAAC,EACD;UACI9J,KAAK,EAAE3B,GAAG,CAACgD,QAAQ,CAAC;YAAErE,GAAG,EAAE,KAAK;YAAEsE,OAAO,EAAE,CAAC,uBAAuB;UAAE,CAAC,EAAE,kBAAkB,CAAC;UAC3FuI,GAAG,EAAEA,CAAA,KAAMJ,UAAU,CAACM;QAC1B,CAAC,CACJ;QACDC,YAAY,EAAE;UACVH,GAAG,EAAEA,CAAA,KAAMJ,UAAU,CAACQ;QAC1B;MACJ,CAAC,CAAC;MACF,IAAIxH,MAAM,KAAKgH,UAAU,CAACQ,MAAM,EAAE;QAC9B;QACA;MACJ;MACA,IAAIxH,MAAM,KAAKgH,UAAU,CAACM,IAAI,EAAE;QAC5B;QACA,IAAI,CAACtD,0BAA0B,CAACxF,OAAO,EAAE,IAAI,CAAC;QAC9C,OAAO,IAAI,CAAC2H,KAAK,CAACnJ,WAAW,EAAE,CAAC,EAAE,IAAI,CAAC;MAC3C;MACA;MACA;MACA,MAAMyK,kBAAkB,GAAG,IAAI,CAACrB,mBAAmB,CAACpJ,WAAW,EAAEwB,OAAO,EAAEwG,iBAAiB,EAAE,gEAAiE,KAAK,CAAC;MACpK,IAAIyC,kBAAkB,EAAE;QACpB,OAAOA,kBAAkB,CAACd,WAAW;MACzC;MACAF,aAAa,GAAG,IAAI;IACxB;IACA;IACA,IAAIrB,OAAO;IACX,IAAI;MACAA,OAAO,GAAG,MAAM,IAAI,CAACI,uBAAuB,CAAChH,OAAO,CAAC;IACzD,CAAC,CACD,OAAOqG,GAAG,EAAE;MACR,OAAO,IAAI,CAACD,QAAQ,CAACC,GAAG,EAAErG,OAAO,CAAC;IACtC;IACA;IACA,MAAMkJ,kBAAkB,GAAG,IAAI,CAACtB,mBAAmB,CAACpJ,WAAW,EAAEwB,OAAO,EAAEwG,iBAAiB,EAAE,+DAAgE,IAAI,CAAC;IAClK,IAAI0C,kBAAkB,EAAE;MACpBtC,OAAO,CAACrF,OAAO,CAAC,CAAC;MACjB,OAAO2H,kBAAkB,CAACf,WAAW;IACzC;IACA,KAAK,MAAM9C,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;MAClDyB,SAAS,CAAC7B,YAAY,CAACxD,OAAO,CAAC;IACnC;IACA,OAAO,IAAI,CAAC0G,oBAAoB,CAAC1G,OAAO,EAAE,MAAMA,OAAO,CAAC1B,MAAM,CAAC6K,IAAI,CAAC,CAAC,EAAE3C,iBAAiB,EAAEI,OAAO,EAAE,MAAM,IAAI,CAACwC,oBAAoB,CAACpJ,OAAO,CAACvB,OAAO,EAAEwJ,aAAa,CAAC,CAAC;EACvK;EACAoB,aAAaA,CAAChE,SAAS,EAAErF,OAAO,EAAEiI,aAAa,EAAE;IAC7C,IAAI,CAACjI,OAAO,CAACb,OAAO,EAAE;MAClB;MACAkG,SAAS,CAAC5D,gBAAgB,CAAC,CAAC;MAC5B;IACJ;IACA,IAAI4D,SAAS,CAAChE,MAAM,EAAE;MAClB,MAAMmG,OAAO,GAAGpK,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,2CAA2C;QAAEsE,OAAO,EAAE,CAAC,kCAAkC;MAAE,CAAC,EAAE,kFAAkF,EAAEL,OAAO,CAACjB,KAAK,CAAC;MACpO,IAAI,CAACkF,oBAAoB,CAACwD,IAAI,CAACD,OAAO,CAAC;MACvC;IACJ;IACA,OAAO,IAAI,CAACN,sBAAsB,CAAClH,OAAO,EAAG4G,OAAO,IAAK;MACrDvB,SAAS,CAAC7B,YAAY,CAACxD,OAAO,CAAC;MAC/B,OAAO,IAAI,CAAC0G,oBAAoB,CAAC1G,OAAO,EAAE,MAAMA,OAAO,CAAC1B,MAAM,CAAC6K,IAAI,CAAC,CAAC,EAAE,IAAIxF,iBAAiB,CAAC,CAAC0B,SAAS,CAAC,CAAC,EAAEuB,OAAO,EAAE,MAAM,IAAI,CAACwC,oBAAoB,CAACpJ,OAAO,CAACvB,OAAO,EAAEwJ,aAAa,CAAC,CAAC;IACxL,CAAC,CAAC;EACN;EACAqB,8BAA8BA,CAAC7K,OAAO,EAAE;IACpC,IAAI,CAACA,OAAO,EAAE;MACV,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACvB;IACA;IACA,IAAIsH,cAAc,GAAG,IAAI;IACzB,IAAIC,kBAAkB,GAAG,IAAI;IAC7B,KAAK,MAAM,CAACxH,WAAW,EAAE6G,SAAS,CAAC,IAAI,IAAI,CAACnB,WAAW,EAAE;MACrD,MAAM+B,SAAS,GAAGZ,SAAS,CAACzC,qBAAqB,CAAC,CAAC;MACnD,IAAI,CAACqD,SAAS,EAAE;QACZ;MACJ;MACA,IAAIA,SAAS,CAACxH,OAAO,KAAKA,OAAO,EAAE;QAC/B,IAAI,CAACsH,cAAc,IAAIE,SAAS,CAACvH,UAAU,GAAGqH,cAAc,CAACrH,UAAU,EAAE;UACrEqH,cAAc,GAAGE,SAAS;UAC1BD,kBAAkB,GAAGxH,WAAW;QACpC;MACJ;IACJ;IACA,OAAO,CAACuH,cAAc,EAAEC,kBAAkB,CAAC;EAC/C;EACAoD,oBAAoBA,CAAC3K,OAAO,EAAEwJ,aAAa,EAAE;IACzC,IAAI,CAACxJ,OAAO,EAAE;MACV;IACJ;IACA,MAAM,GAAGuH,kBAAkB,CAAC,GAAG,IAAI,CAACsD,8BAA8B,CAAC7K,OAAO,CAAC;IAC3E,IAAIuH,kBAAkB,EAAE;MACpB,OAAO,IAAI,CAAC2B,KAAK,CAAC3B,kBAAkB,EAAE,CAAC,EAAEiC,aAAa,CAAC;IAC3D;EACJ;EACAkB,IAAIA,CAAChD,gBAAgB,EAAE;IACnB,IAAIA,gBAAgB,YAAYxI,cAAc,EAAE;MAC5C,MAAM,GAAGqI,kBAAkB,CAAC,GAAG,IAAI,CAACF,iCAAiC,CAACK,gBAAgB,CAACtH,EAAE,CAAC;MAC1F,OAAOmH,kBAAkB,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,kBAAkB,EAAEG,gBAAgB,CAACtH,EAAE,EAAE,KAAK,CAAC,GAAG+F,SAAS;IACtG;IACA,IAAI,OAAOuB,gBAAgB,KAAK,QAAQ,EAAE;MACtC,OAAO,IAAI,CAACwB,KAAK,CAACxB,gBAAgB,EAAE,CAAC,EAAE,KAAK,CAAC;IACjD;IACA,OAAO,IAAI,CAACwB,KAAK,CAAC,IAAI,CAACvD,mBAAmB,CAAC+B,gBAAgB,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;EAC3E;EACAwB,KAAKA,CAACnJ,WAAW,EAA+B;IAAA,IAA7BG,QAAQ,GAAAzC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAA0I,SAAA,GAAA1I,SAAA,MAAG,CAAC;IAAA,IAAE+L,aAAa,GAAA/L,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAA0I,SAAA;IAC1C,IAAI,CAAC,IAAI,CAACV,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACpC;IACJ;IACA,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;IACnD,MAAMwB,OAAO,GAAGqF,SAAS,CAACzC,qBAAqB,CAAC,CAAC;IACjD,IAAI,CAAC5C,OAAO,EAAE;MACV;IACJ;IACA,IAAIA,OAAO,CAACvB,OAAO,EAAE;MACjB;MACA,MAAM,CAACsH,cAAc,EAAEC,kBAAkB,CAAC,GAAG,IAAI,CAACsD,8BAA8B,CAACtJ,OAAO,CAACvB,OAAO,CAAC;MACjG,IAAIuB,OAAO,KAAK+F,cAAc,IAAIC,kBAAkB,EAAE;QAClD;QACA,OAAO,IAAI,CAAC2B,KAAK,CAAC3B,kBAAkB,EAAErH,QAAQ,EAAEsJ,aAAa,CAAC;MAClE;IACJ;IACA,MAAMsB,2BAA2B,GAAIvJ,OAAO,CAACrB,QAAQ,KAAKA,QAAQ,IAAIqB,OAAO,CAAChB,iBAAkB;IAChG,IAAIuK,2BAA2B,IAAI,CAACtB,aAAa,EAAE;MAC/C;MACA,OAAO,IAAI,CAACuB,uBAAuB,CAAChL,WAAW,EAAEG,QAAQ,EAAEqB,OAAO,CAAC;IACvE;IACA,IAAI;MACA,IAAIA,OAAO,CAAClB,IAAI,KAAK,CAAC,CAAC,qCAAqC;QACxD,OAAO,IAAI,CAACkJ,cAAc,CAACxJ,WAAW,EAAEwB,OAAO,EAAEiI,aAAa,CAAC;MACnE,CAAC,MACI;QACD,OAAO,IAAI,CAACoB,aAAa,CAAChE,SAAS,EAAErF,OAAO,EAAEiI,aAAa,CAAC;MAChE;IACJ,CAAC,SACO;MACJ,IAAIrK,KAAK,EAAE;QACP,IAAI,CAAC2G,MAAM,CAAC,MAAM,CAAC;MACvB;IACJ;EACJ;EACA,MAAMiF,uBAAuBA,CAAChL,WAAW,EAAEG,QAAQ,EAAEqB,OAAO,EAAE;IAC1D,MAAMwB,MAAM,GAAG,MAAM,IAAI,CAACwC,cAAc,CAACyF,OAAO,CAAC;MAC7CjC,OAAO,EAAEpK,GAAG,CAACgD,QAAQ,CAAC,wBAAwB,EAAE,+BAA+B,EAAEJ,OAAO,CAACjB,KAAK,CAAC;MAC/F2K,aAAa,EAAEtM,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,4BAA4B;QAAEsE,OAAO,EAAE,CAAC,uBAAuB;MAAE,CAAC,EAAE,OAAO,CAAC;MAC/G0I,YAAY,EAAE3L,GAAG,CAACgD,QAAQ,CAAC,2BAA2B,EAAE,IAAI;IAChE,CAAC,CAAC;IACF,IAAI,CAACoB,MAAM,CAACmI,SAAS,EAAE;MACnB;IACJ;IACA,OAAO,IAAI,CAAChC,KAAK,CAACnJ,WAAW,EAAEG,QAAQ,EAAE,IAAI,CAAC;EAClD;EACAiL,iCAAiCA,CAACjL,QAAQ,EAAE;IACxC,IAAI,CAACA,QAAQ,EAAE;MACX,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACvB;IACA;IACA,IAAIoH,cAAc,GAAG,IAAI;IACzB,IAAIC,kBAAkB,GAAG,IAAI;IAC7B,KAAK,MAAM,CAACxH,WAAW,EAAE6G,SAAS,CAAC,IAAI,IAAI,CAACnB,WAAW,EAAE;MACrD,MAAM+B,SAAS,GAAGZ,SAAS,CAACvC,uBAAuB,CAAC,CAAC;MACrD,IAAI,CAACmD,SAAS,EAAE;QACZ;MACJ;MACA,IAAIA,SAAS,CAACtH,QAAQ,KAAKA,QAAQ,EAAE;QACjC,IAAI,CAACoH,cAAc,IAAIE,SAAS,CAACrH,WAAW,GAAGmH,cAAc,CAACnH,WAAW,EAAE;UACvEmH,cAAc,GAAGE,SAAS;UAC1BD,kBAAkB,GAAGxH,WAAW;QACpC;MACJ;IACJ;IACA,OAAO,CAACuH,cAAc,EAAEC,kBAAkB,CAAC;EAC/C;EACA6D,OAAOA,CAAC1D,gBAAgB,EAAE;IACtB,IAAIA,gBAAgB,YAAYxI,cAAc,EAAE;MAC5C,MAAM,GAAGqI,kBAAkB,CAAC,GAAG,IAAI,CAAC4D,iCAAiC,CAACzD,gBAAgB,CAACtH,EAAE,CAAC;MAC1F,OAAOmH,kBAAkB,GAAG,IAAI,GAAG,KAAK;IAC5C;IACA,MAAMxH,WAAW,GAAG,IAAI,CAAC4F,mBAAmB,CAAC+B,gBAAgB,CAAC;IAC9D,IAAI,IAAI,CAACjC,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACnC,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;MACnD,OAAO6G,SAAS,CAACrC,iBAAiB,CAAC,CAAC;IACxC;IACA,OAAO,KAAK;EAChB;EACA8G,kBAAkBA,CAACtL,WAAW,EAAEwB,OAAO,EAAEyF,eAAe,EAAE+B,OAAO,EAAE;IAC/D,IAAIxH,OAAO,CAACe,QAAQ,CAAC,CAAC,EAAE;MACpB,IAAI,CAAC6E,4BAA4B,CAAC5F,OAAO,EAAEyF,eAAe,CAAC;MAC3D,IAAI,CAACxB,oBAAoB,CAACwD,IAAI,CAACD,OAAO,CAAC;MACvC,OAAO,IAAIE,0BAA0B,CAAC,IAAI,CAACqC,KAAK,CAACvL,WAAW,CAAC,CAAC;IAClE,CAAC,MACI;MACD;MACA,KAAK,MAAMA,WAAW,IAAIwB,OAAO,CAACd,YAAY,EAAE;QAC5C,IAAI,CAAC2G,cAAc,CAACrH,WAAW,CAAC;MACpC;MACA,IAAI,CAACyF,oBAAoB,CAACwD,IAAI,CAACD,OAAO,CAAC;MACvC,OAAO,IAAIE,0BAA0B,CAAC,CAAC;IAC3C;EACJ;EACAsC,mBAAmBA,CAACxL,WAAW,EAAEwB,OAAO,EAAEwG,iBAAiB,EAAEqB,yBAAyB,EAAE;IACpF,IAAI7H,OAAO,CAACa,gBAAgB,EAAE;MAC1B,OAAO,IAAI,CAACiJ,kBAAkB,CAACtL,WAAW,EAAEwB,OAAO,EAAEA,OAAO,CAACa,gBAAgB,EAAEzD,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,qBAAqB;QAAEsE,OAAO,EAAE,CAAC,0DAA0D;MAAE,CAAC,EAAE,4CAA4C,EAAEL,OAAO,CAACjB,KAAK,EAAEiB,OAAO,CAACa,gBAAgB,CAAChB,aAAa,CAAC,CAAC,CAAC,CAAC;IAC9S;IACA,IAAIgI,yBAAyB,IAAI7H,OAAO,CAACc,oBAAoB,EAAE;MAC3D,OAAO,IAAI,CAACgJ,kBAAkB,CAACtL,WAAW,EAAEwB,OAAO,EAAEA,OAAO,CAACc,oBAAoB,EAAE1D,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,qBAAqB;QAAEsE,OAAO,EAAE,CAAC,0DAA0D;MAAE,CAAC,EAAE,4CAA4C,EAAEL,OAAO,CAACjB,KAAK,EAAEiB,OAAO,CAACc,oBAAoB,CAACjB,aAAa,CAAC,CAAC,CAAC,CAAC;IACtT;IACA;IACA,MAAMoK,wBAAwB,GAAG,EAAE;IACnC,KAAK,MAAM5E,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;MAClD,IAAIyB,SAAS,CAACvC,uBAAuB,CAAC,CAAC,KAAK9C,OAAO,EAAE;QACjDiK,wBAAwB,CAAC/J,IAAI,CAACmF,SAAS,CAAC9G,aAAa,CAAC;MAC1D;IACJ;IACA,IAAI0L,wBAAwB,CAAC9N,MAAM,GAAG,CAAC,EAAE;MACrC,OAAO,IAAI,CAAC2N,kBAAkB,CAACtL,WAAW,EAAEwB,OAAO,EAAE,IAAI,EAAE5C,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,iCAAiC;QAAEsE,OAAO,EAAE,CAAC,8DAA8D;MAAE,CAAC,EAAE,wEAAwE,EAAEL,OAAO,CAACjB,KAAK,EAAEkL,wBAAwB,CAAC3J,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACjU;IACA,MAAMyH,wBAAwB,GAAG,EAAE;IACnC,KAAK,MAAM1C,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;MAClD,IAAIyB,SAAS,CAAChE,MAAM,EAAE;QAClB0G,wBAAwB,CAAC7H,IAAI,CAACmF,SAAS,CAAC9G,aAAa,CAAC;MAC1D;IACJ;IACA,IAAIwJ,wBAAwB,CAAC5L,MAAM,GAAG,CAAC,EAAE;MACrC,OAAO,IAAI,CAAC2N,kBAAkB,CAACtL,WAAW,EAAEwB,OAAO,EAAE,IAAI,EAAE5C,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,4CAA4C;QAAEsE,OAAO,EAAE,CAAC,8DAA8D;MAAE,CAAC,EAAE,yGAAyG,EAAEL,OAAO,CAACjB,KAAK,EAAEgJ,wBAAwB,CAACzH,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7W;IACA;IACA,IAAI,CAACkG,iBAAiB,CAACrH,OAAO,CAAC,CAAC,EAAE;MAC9B,OAAO,IAAI,CAAC2K,kBAAkB,CAACtL,WAAW,EAAEwB,OAAO,EAAE,IAAI,EAAE5C,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,4CAA4C;QAAEsE,OAAO,EAAE,CAAC,8DAA8D;MAAE,CAAC,EAAE,kGAAkG,EAAEL,OAAO,CAACjB,KAAK,CAAC,CAAC;IACjU;IACA,OAAO,IAAI;EACf;EACAmL,cAAcA,CAAC1L,WAAW,EAAEwB,OAAO,EAAE;IACjC,MAAMsH,kBAAkB,GAAG,IAAI,CAACD,sBAAsB,CAACrH,OAAO,CAAC;IAC/D,MAAMkI,iBAAiB,GAAG,IAAI,CAAC8B,mBAAmB,CAACxL,WAAW,EAAEwB,OAAO,EAAEsH,kBAAkB,EAAE,gEAAiE,KAAK,CAAC;IACpK,IAAIY,iBAAiB,EAAE;MACnB,OAAOA,iBAAiB,CAACC,WAAW;IACxC;IACA,OAAO,IAAI,CAACgC,qBAAqB,CAAC3L,WAAW,EAAEwB,OAAO,EAAEsH,kBAAkB,CAAC;EAC/E;EACA,MAAM6C,qBAAqBA,CAAC3L,WAAW,EAAEwB,OAAO,EAAEwG,iBAAiB,EAAE;IACjE;IACA,IAAII,OAAO;IACX,IAAI;MACAA,OAAO,GAAG,MAAM,IAAI,CAACI,uBAAuB,CAAChH,OAAO,CAAC;IACzD,CAAC,CACD,OAAOqG,GAAG,EAAE;MACR,OAAO,IAAI,CAACD,QAAQ,CAACC,GAAG,EAAErG,OAAO,CAAC;IACtC;IACA;IACA,MAAMkI,iBAAiB,GAAG,IAAI,CAAC8B,mBAAmB,CAACxL,WAAW,EAAEwB,OAAO,EAAEwG,iBAAiB,EAAE,+DAAgE,IAAI,CAAC;IACjK,IAAI0B,iBAAiB,EAAE;MACnBtB,OAAO,CAACrF,OAAO,CAAC,CAAC;MACjB,OAAO2G,iBAAiB,CAACC,WAAW;IACxC;IACA,KAAK,MAAM9C,SAAS,IAAImB,iBAAiB,CAAC5C,UAAU,EAAE;MAClDyB,SAAS,CAAC3B,WAAW,CAAC1D,OAAO,CAAC;IAClC;IACA,OAAO,IAAI,CAAC0G,oBAAoB,CAAC1G,OAAO,EAAE,MAAMA,OAAO,CAAC1B,MAAM,CAAC8L,IAAI,CAAC,CAAC,EAAE5D,iBAAiB,EAAEI,OAAO,EAAE,MAAM,IAAI,CAACyD,oBAAoB,CAACrK,OAAO,CAACvB,OAAO,CAAC,CAAC;EACxJ;EACA6L,aAAaA,CAACjF,SAAS,EAAErF,OAAO,EAAE;IAC9B,IAAI,CAACA,OAAO,CAACb,OAAO,EAAE;MAClB;MACAkG,SAAS,CAAC5D,gBAAgB,CAAC,CAAC;MAC5B;IACJ;IACA,IAAI4D,SAAS,CAAChE,MAAM,EAAE;MAClB,MAAMmG,OAAO,GAAGpK,GAAG,CAACgD,QAAQ,CAAC;QAAErE,GAAG,EAAE,2CAA2C;QAAEsE,OAAO,EAAE,CAAC,kCAAkC;MAAE,CAAC,EAAE,kFAAkF,EAAEL,OAAO,CAACjB,KAAK,CAAC;MACpO,IAAI,CAACkF,oBAAoB,CAACwD,IAAI,CAACD,OAAO,CAAC;MACvC;IACJ;IACA,OAAO,IAAI,CAACN,sBAAsB,CAAClH,OAAO,EAAG4G,OAAO,IAAK;MACrDvB,SAAS,CAAC3B,WAAW,CAAC1D,OAAO,CAAC;MAC9B,OAAO,IAAI,CAAC0G,oBAAoB,CAAC1G,OAAO,EAAE,MAAMA,OAAO,CAAC1B,MAAM,CAAC8L,IAAI,CAAC,CAAC,EAAE,IAAIzG,iBAAiB,CAAC,CAAC0B,SAAS,CAAC,CAAC,EAAEuB,OAAO,EAAE,MAAM,IAAI,CAACyD,oBAAoB,CAACrK,OAAO,CAACvB,OAAO,CAAC,CAAC;IACzK,CAAC,CAAC;EACN;EACA8L,8BAA8BA,CAAC9L,OAAO,EAAE;IACpC,IAAI,CAACA,OAAO,EAAE;MACV,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACvB;IACA;IACA,IAAIsH,cAAc,GAAG,IAAI;IACzB,IAAIC,kBAAkB,GAAG,IAAI;IAC7B,KAAK,MAAM,CAACxH,WAAW,EAAE6G,SAAS,CAAC,IAAI,IAAI,CAACnB,WAAW,EAAE;MACrD,MAAM+B,SAAS,GAAGZ,SAAS,CAACvC,uBAAuB,CAAC,CAAC;MACrD,IAAI,CAACmD,SAAS,EAAE;QACZ;MACJ;MACA,IAAIA,SAAS,CAACxH,OAAO,KAAKA,OAAO,EAAE;QAC/B,IAAI,CAACsH,cAAc,IAAIE,SAAS,CAACvH,UAAU,GAAGqH,cAAc,CAACrH,UAAU,EAAE;UACrEqH,cAAc,GAAGE,SAAS;UAC1BD,kBAAkB,GAAGxH,WAAW;QACpC;MACJ;IACJ;IACA,OAAO,CAACuH,cAAc,EAAEC,kBAAkB,CAAC;EAC/C;EACAqE,oBAAoBA,CAAC5L,OAAO,EAAE;IAC1B,IAAI,CAACA,OAAO,EAAE;MACV;IACJ;IACA,MAAM,GAAGuH,kBAAkB,CAAC,GAAG,IAAI,CAACuE,8BAA8B,CAAC9L,OAAO,CAAC;IAC3E,IAAIuH,kBAAkB,EAAE;MACpB,OAAO,IAAI,CAAC+D,KAAK,CAAC/D,kBAAkB,CAAC;IACzC;EACJ;EACAoE,IAAIA,CAACjE,gBAAgB,EAAE;IACnB,IAAIA,gBAAgB,YAAYxI,cAAc,EAAE;MAC5C,MAAM,GAAGqI,kBAAkB,CAAC,GAAG,IAAI,CAAC4D,iCAAiC,CAACzD,gBAAgB,CAACtH,EAAE,CAAC;MAC1F,OAAOmH,kBAAkB,GAAG,IAAI,CAAC+D,KAAK,CAAC/D,kBAAkB,CAAC,GAAGpB,SAAS;IAC1E;IACA,IAAI,OAAOuB,gBAAgB,KAAK,QAAQ,EAAE;MACtC,OAAO,IAAI,CAAC4D,KAAK,CAAC5D,gBAAgB,CAAC;IACvC;IACA,OAAO,IAAI,CAAC4D,KAAK,CAAC,IAAI,CAAC3F,mBAAmB,CAAC+B,gBAAgB,CAAC,CAAC;EACjE;EACA4D,KAAKA,CAACvL,WAAW,EAAE;IACf,IAAI,CAAC,IAAI,CAAC0F,WAAW,CAAC1D,GAAG,CAAChC,WAAW,CAAC,EAAE;MACpC;IACJ;IACA,MAAM6G,SAAS,GAAG,IAAI,CAACnB,WAAW,CAACb,GAAG,CAAC7E,WAAW,CAAC;IACnD,MAAMwB,OAAO,GAAGqF,SAAS,CAACvC,uBAAuB,CAAC,CAAC;IACnD,IAAI,CAAC9C,OAAO,EAAE;MACV;IACJ;IACA,IAAIA,OAAO,CAACvB,OAAO,EAAE;MACjB;MACA,MAAM,CAACsH,cAAc,EAAEC,kBAAkB,CAAC,GAAG,IAAI,CAACuE,8BAA8B,CAACvK,OAAO,CAACvB,OAAO,CAAC;MACjG,IAAIuB,OAAO,KAAK+F,cAAc,IAAIC,kBAAkB,EAAE;QAClD;QACA,OAAO,IAAI,CAAC+D,KAAK,CAAC/D,kBAAkB,CAAC;MACzC;IACJ;IACA,IAAI;MACA,IAAIhG,OAAO,CAAClB,IAAI,KAAK,CAAC,CAAC,qCAAqC;QACxD,OAAO,IAAI,CAACoL,cAAc,CAAC1L,WAAW,EAAEwB,OAAO,CAAC;MACpD,CAAC,MACI;QACD,OAAO,IAAI,CAACsK,aAAa,CAACjF,SAAS,EAAErF,OAAO,CAAC;MACjD;IACJ,CAAC,SACO;MACJ,IAAIpC,KAAK,EAAE;QACP,IAAI,CAAC2G,MAAM,CAAC,MAAM,CAAC;MACvB;IACJ;EACJ;AACJ,CAAC;AACDR,eAAe,GAAGnI,UAAU,CAAC,CACzBgB,OAAO,CAAC,CAAC,EAAES,cAAc,CAAC,EAC1BT,OAAO,CAAC,CAAC,EAAEW,oBAAoB,CAAC,CACnC,EAAEwG,eAAe,CAAC;AACnB,SAASA,eAAe;AACxB,MAAM2D,0BAA0B,CAAC;EAC7BrJ,WAAWA,CAAC8J,WAAW,EAAE;IACrB,IAAI,CAACA,WAAW,GAAGA,WAAW;EAClC;AACJ;AACA7K,iBAAiB,CAACE,gBAAgB,EAAEuG,eAAe,EAAE,CAAC,CAAC,+BAA+B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
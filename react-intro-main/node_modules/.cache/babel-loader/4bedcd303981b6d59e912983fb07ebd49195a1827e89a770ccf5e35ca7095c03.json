{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2019, JGraph Ltd\nCopyright (c) 2006-2019, draw.io AG\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EditorPopupMenu from './EditorPopupMenu';\nimport UndoManager from '../view/undoable_changes/UndoManager';\nimport EditorKeyHandler from './EditorKeyHandler';\nimport EventSource from '../view/event/EventSource';\nimport Translations from '../util/Translations';\nimport Client from '../Client';\nimport CompactTreeLayout from '../view/layout/CompactTreeLayout';\nimport { EditorToolbar } from './EditorToolbar';\nimport StackLayout from '../view/layout/StackLayout';\nimport EventObject from '../view/event/EventObject';\nimport { getOffset } from '../util/styleUtils';\nimport Codec from '../serialization/Codec';\nimport MaxWindow, { error } from '../gui/MaxWindow';\nimport MaxForm from '../gui/MaxForm';\nimport Outline from '../view/other/Outline';\nimport Cell from '../view/cell/Cell';\nimport Geometry from '../view/geometry/Geometry';\nimport { ALIGN, FONT } from '../util/Constants';\nimport { Graph } from '../view/Graph';\nimport SwimlaneManager from '../view/layout/SwimlaneManager';\nimport LayoutManager from '../view/layout/LayoutManager';\nimport RootChange from '../view/undoable_changes/RootChange';\nimport ValueChange from '../view/undoable_changes/ValueChange';\nimport CellAttributeChange from '../view/undoable_changes/CellAttributeChange';\nimport PrintPreview from '../view/other/PrintPreview';\nimport mxClipboard from '../util/Clipboard';\nimport MaxLog from '../gui/MaxLog';\nimport { isNode } from '../util/domUtils';\nimport { getViewXml, getXml } from '../util/xmlUtils';\nimport { load, post, submit } from '../util/MaxXmlRequest';\nimport RubberBandHandler from '../view/handler/RubberBandHandler';\nimport InternalEvent from '../view/event/InternalEvent';\nimport { show } from '../util/printUtils';\n/**\n * Installs the required language resources at class\n * loading time.\n */\n/*\nif (mxLoadResources) {\n  mxResources.add(`${Client.basePath}/resources/editor`);\n} else {\n  Client.defaultBundles.push(`${Client.basePath}/resources/editor`);\n}\n */\n/**\n * Extends {@link EventSource} to implement an application wrapper for a graph that\n * adds {@link actions}, I/O using {@link Codec}, auto-layout using {@link LayoutManager},\n * command history using {@link undoManager}, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds {@link templates}\n * to be used as cells in toolbars, auto-validation using the {@link validation}\n * flag, attribute cycling using {@link cycleAttributeValues}, higher-level events\n * such as {@link root}, and backend integration using <urlPost> and {@link urlImage}.\n *\n * ### Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <Editor> as the first, and an optional <Cell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * ### Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * ```javascript\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * ```\n *\n * For reading a diagram from a remote location, use the {@link open} method.\n *\n * To save diagrams in XML on a server, you can set the {@link urlPost} variable.\n * This variable will be used in {@link getUrlPost} to construct a URL for the post\n * request that is issued in the {@link save} method. The post request contains the\n * XML representation of the diagram as returned by {@link writeGraphModel} in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * ### Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * ### Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the {@link escapePostData} flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * ```javascript\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * ```\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * ### Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * ```javascript\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * ```\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * ### Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in {@link Editor.templates} and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * ```javascript\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * ```\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * ```javascript\n * <Task label=\"Task\" description=\"\"/>\n * ```\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * {@link Codec} will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of {@link createProperties}, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the {@link CellAttributeChange} action in the model. The dialog can be replaced\n * by overriding the {@link createProperties} hook or by replacing the showProperties\n * action in {@link action}. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * {@link Editor.dblClickAction} to showProperties as follows:\n *\n * ```javascript\n * editor.dblClickAction = 'showProperties';\n * ```\n *\n * ### Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * ```javascript\n * <Editor>\n *   <EditorPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * ```\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the {@link DefaultPopupMenuCodec}, the format of the\n * configuration is explained in {@link EditorPopupMenu.decode}.\n *\n * The toolbar is defined in the EditorToolbar section. Items can be added\n * and removed in this section.\n *\n * ```javascript\n * <Editor>\n *   <EditorToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * ```\n *\n * The format of the configuration is described in\n * {@link DefaultToolbarCodec.decode}.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in {@link Codec}: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the {@link Cell.id} of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the {@link mxGraphModel.getCell} function. If there is a collision, a new\n * Id will be created for the cell using {@link mxGraphModel.createId}. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See {@link EditorCodec}, {@link DefaultToolbarCodec} and {@link DefaultPopupMenuCodec}\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * ```javascript\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * ```\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * ```javascript\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * ```\n *\n * #### Translations:\n *\n * resources/editor - Language resources for Editor\n *\n * #### Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * #### Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * {@link resetFirstTime} to reset this cookie. This cookie\n * only exists if {@link onInit} is implemented.\n *\n * #### Event: mxEvent.OPEN\n *\n * Fires after a file was opened in {@link open}. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * {@link filename}.\n *\n * #### Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in {@link save}. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * #### Event: mxEvent.POST\n *\n * Fires if a successful response was received in {@link postDiagram}. The\n * <code>request</code> property contains the <MaxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * #### Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * #### Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in {@link addVertex}. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * #### Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * #### Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * ### Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * ```javascript\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * ```\n *\n * ### Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * ### Constructor: Editor\n *\n * Constructs a new editor. This function invokes the {@link onInit} callback\n * upon completion.\n *\n * ```javascript\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new Editor(config);\n * ```\n *\n * @class Editor\n * @extends EventSource\n */\nexport class Editor extends EventSource {\n  constructor(config) {\n    super();\n    this.onInit = null;\n    this.lastSnapshot = null;\n    this.ignoredChanges = null;\n    this.rubberband = null;\n    this.isActive = null;\n    this.destroyed = false;\n    /**\n     * Specifies the resource key for the zoom dialog. If the resource for this\n     * key does not exist then the value is used as the error message. Default is 'askZoom'.\n     * @default 'askZoom'\n     */\n    // askZoomResource: 'askZoom' | '';\n    this.askZoomResource = Client.language !== 'none' ? 'askZoom' : '';\n    /**\n     * Group: Controls and Handlers\n     */\n    /**\n     * Specifies the resource key for the last saved info. If the resource for\n     * this key does not exist then the value is used as the error message. Default is 'lastSaved'.\n     * @default 'lastSaved'.\n     */\n    this.lastSavedResource = Client.language !== 'none' ? 'lastSaved' : '';\n    /**\n     * Specifies the resource key for the current file info. If the resource for\n     * this key does not exist then the value is used as the error message. Default is 'currentFile'.\n     * @default 'currentFile'\n     */\n    this.currentFileResource = Client.language !== 'none' ? 'currentFile' : '';\n    /**\n     * Specifies the resource key for the properties window title. If the\n     * resource for this key does not exist then the value is used as the\n     * error message. Default is 'properties'.\n     * @default 'properties'\n     */\n    this.propertiesResource = Client.language !== 'none' ? 'properties' : '';\n    /**\n     * Specifies the resource key for the tasks window title. If the\n     * resource for this key does not exist then the value is used as the\n     * error message. Default is 'tasks'.\n     * @default 'tasks'\n     */\n    this.tasksResource = Client.language !== 'none' ? 'tasks' : '';\n    /**\n     * Specifies the resource key for the help window title. If the\n     * resource for this key does not exist then the value is used as the\n     * error message. Default is 'help'.\n     * @default 'help'\n     */\n    this.helpResource = Client.language !== 'none' ? 'help' : '';\n    /**\n     * Specifies the resource key for the outline window title. If the\n     * resource for this key does not exist then the value is used as the\n     * error message. Default is 'outline'.\n     * @default 'outline'\n     */\n    this.outlineResource = Client.language !== 'none' ? 'outline' : '';\n    /**\n     * Reference to the {@link MaxWindow} that contains the outline. The {@link outline}\n     * is stored in outline.outline.\n     */\n    this.outline = null;\n    /**\n     * Holds the render hint used for creating the\n     * graph in {@link setGraphContainer}. See {@link graph}. Default is null.\n     * @default null\n     */\n    this.graphRenderHint = null;\n    /**\n     * Holds a {@link EditorToolbar} for displaying the toolbar. The\n     * toolbar is created in {@link setToolbarContainer}.\n     */\n    this.toolbar = null;\n    /**\n     * DOM container that holds the statusbar.\n     * Use {@link setStatusContainer} to set this value.\n     */\n    this.status = null;\n    /**\n     * Holds a {@link EditorPopupMenu} for displaying popupmenus.\n     */\n    this.popupHandler = null;\n    /**\n     * Holds an {@link UndoManager} for the command history.\n     */\n    this.undoManager = null;\n    /**\n     * Holds a {@link EditorKeyHandler} for handling keyboard events.\n     * The handler is created in {@link setGraphContainer}.\n     */\n    this.keyHandler = null;\n    /**\n     * Maps from actionnames to actions, which are functions taking\n     * the editor and the cell as arguments. Use {@link addAction}\n     * to add or replace an action and {@link execute} to execute an action\n     * by name, passing the cell to be operated upon as the second\n     * argument.\n     */\n    this.actions = {};\n    /**\n     * Group: Actions and Options\n     */\n    /**\n     * Specifies the name of the action to be executed\n     * when a cell is double clicked. Default is 'edit'.\n     *\n     * To handle a singleclick, use the following code.\n     *\n     * @example\n     * ```javascript\n     * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n     * {\n     *   var e = evt.getProperty('event');\n     *   var cell = evt.getProperty('cell');\n     *\n     *   if (cell != null && !e.isConsumed())\n     *   {\n     *     // Do something useful with cell...\n     *     e.consume();\n     *   }\n     * });\n     * ```\n     * @default 'edit'\n     */\n    this.dblClickAction = 'edit';\n    /**\n     * Specifies if new cells must be inserted\n     * into an existing swimlane. Otherwise, cells\n     * that are not swimlanes can be inserted as\n     * top-level cells. Default is false.\n     * @default false\n     */\n    this.swimlaneRequired = false;\n    /**\n     * Specifies if the context menu should be disabled in the graph container.\n     * Default is true.\n     * @default true\n     */\n    this.disableContextMenu = true;\n    /**\n     * Specifies the function to be used for inserting new\n     * cells into the graph. This is assigned from the\n     * {@link EditorToolbar} if a vertex-tool is clicked.\n     */\n    this.insertFunction = null;\n    /**\n     * Group: Templates\n     */\n    /**\n     * Specifies if a new cell should be inserted on a single\n     * click even using {@link insertFunction} if there is a cell\n     * under the mousepointer, otherwise the cell under the\n     * mousepointer is selected. Default is false.\n     * @default false\n     */\n    this.forcedInserting = false;\n    /**\n     * Maps from names to protoype cells to be used\n     * in the toolbar for inserting new cells into\n     * the diagram.\n     */\n    this.templates = null;\n    /**\n     * Prototype edge cell that is used for creating new edges.\n     */\n    this.defaultEdge = null;\n    /**\n     * Specifies the edge style to be returned in {@link getEdgeStyle}. Default is null.\n     * @default null\n     */\n    this.defaultEdgeStyle = null;\n    /**\n     * Prototype group cell that is used for creating new groups.\n     */\n    this.defaultGroup = null;\n    /**\n     * Default size for the border of new groups. If null,\n     * then then {@link Graph#gridSize} is used. Default is null.\n     * @default null\n     */\n    this.groupBorderSize = null;\n    /**\n     * Contains the URL of the last opened file as a string. Default is null.\n     * @default null\n     */\n    this.filename = null;\n    /**\n     * Group: Backend Integration\n     */\n    /**\n     * Character to be used for encoding linefeeds in {@link save}. Default is '&#xa;'.\n     * @default '&#xa;'\n     */\n    this.linefeed = '&#xa;';\n    /**\n     * Specifies if the name of the post parameter that contains the diagram\n     * data in a post request to the server. Default is 'xml'.\n     * @default 'xml'\n     */\n    this.postParameterName = 'xml';\n    /**\n     * Specifies if the data in the post request for saving a diagram\n     * should be converted using encodeURIComponent. Default is true.\n     * @default true\n     */\n    this.escapePostData = true;\n    /**\n     * Specifies the URL to be used for posting the diagram\n     * to a backend in {@link save}.\n     * @default null\n     */\n    this.urlPost = null;\n    /**\n     * Specifies the URL to be used for creating a bitmap of\n     * the graph in the image action.\n     * @default null\n     */\n    this.urlImage = null;\n    /**\n     * Specifies the direction of the flow\n     * in the diagram. This is used in the\n     * layout algorithms. Default is false,\n     * ie. vertical flow.\n     * @default false\n     */\n    this.horizontalFlow = false;\n    /**\n     * Group: Autolayout\n     */\n    /**\n     * Specifies if the top-level elements in the\n     * diagram should be layed out using a vertical\n     * or horizontal stack depending on the setting\n     * of {@link horizontalFlow}. The spacing between the\n     * swimlanes is specified by {@link swimlaneSpacing}.\n     * Default is false.\n     *\n     * If the top-level elements are swimlanes, then\n     * the intra-swimlane layout is activated by\n     * the {@link layoutSwimlanes} switch.\n     * @default false\n     */\n    this.layoutDiagram = false;\n    /**\n     * Specifies the spacing between swimlanes if\n     * automatic layout is turned on in\n     * {@link layoutDiagram}. Default is 0.\n     * @default 0\n     */\n    this.swimlaneSpacing = 0;\n    /**\n     * Specifies if the swimlanes should be kept at the same\n     * width or height depending on the setting of\n     * {@link horizontalFlow}. Default is false.\n     *\n     * For horizontal flows, all swimlanes\n     * have the same height and for vertical flows, all swimlanes\n     * have the same width. Furthermore, the swimlanes are\n     * automatically \"stacked\" if {@link layoutDiagram} is true.\n     * @default false\n     */\n    this.maintainSwimlanes = false;\n    /**\n     * Specifies if the children of swimlanes should\n     * be layed out, either vertically or horizontally\n     * depending on {@link horizontalFlow}. Default is false.\n     * @default false\n     */\n    this.layoutSwimlanes = false;\n    /**\n     * Specifies the attribute values to be cycled when inserting new swimlanes.\n     * Default is an empty array.\n     * @default any[]\n     */\n    this.cycleAttributeValues = [];\n    /**\n     * Group: Attribute Cycling\n     */\n    /**\n     * Index of the last consumed attribute index. If a new\n     * swimlane is inserted, then the {@link cycleAttributeValues}\n     * at this index will be used as the value for\n     * {@link cycleAttributeName}. Default is 0.\n     * @default 0\n     */\n    this.cycleAttributeIndex = 0;\n    /**\n     * Name of the attribute to be assigned a {@link cycleAttributeValues}\n     * when inserting new swimlanes. Default is 'fillColor'.\n     * @default 'fillColor'\n     */\n    // cycleAttributeName: 'fillColor';\n    this.cycleAttributeName = 'fillColor';\n    /**\n     * Holds the [@link MaxWindow} created in {@link showTasks}.\n     */\n    this.tasks = null;\n    /**\n     * Group: Windows\n     */\n    /**\n     * Icon for the tasks window.\n     */\n    this.tasksWindowImage = null;\n    /**\n     * Specifies the top coordinate of the tasks window in pixels. Default is 20.\n     * @default 20\n     */\n    this.tasksTop = 20;\n    /**\n     * Holds the {@link MaxWindow} created in {@link showHelp}\n     */\n    this.help = null;\n    /**\n     * Icon for the help window.\n     */\n    this.helpWindowImage = null;\n    /**\n     * Specifies the URL to be used for the contents of the\n     * Online Help window. This is usually specified in the\n     * resources file under urlHelp for language-specific\n     * online help support.\n     */\n    this.urlHelp = null;\n    /**\n     * Specifies the width of the help window in pixels. Default is 300.\n     * @default 300\n     */\n    this.helpWidth = 300;\n    /**\n     * Specifies the height of the help window in pixels. Default is 260.\n     * @default 260\n     */\n    // helpHeight: number;\n    this.helpHeight = 260;\n    /**\n     * Specifies the width of the properties window in pixels. Default is 240.\n     * @default 240\n     */\n    this.propertiesWidth = 240;\n    /**\n     * Specifies the height of the properties window in pixels.\n     * If no height is specified then the window will be automatically\n     * sized to fit its contents. Default is null.\n     * @default null\n     */\n    this.propertiesHeight = null;\n    /**\n     * Specifies if the properties dialog should be automatically\n     * moved near the cell it is displayed for, otherwise the\n     * dialog is not moved. This value is only taken into\n     * account if the dialog is already visible. Default is false.\n     * @default false\n     */\n    this.movePropertiesDialog = false;\n    /**\n     * Specifies if <{@link xGraph.validateGraph} should automatically be invoked after\n     * each change. Default is false.\n     * @default false\n     */\n    this.validating = false;\n    /**\n     * True if the graph has been modified since it was last saved.\n     */\n    this.modified = false;\n    this.actions = {};\n    this.addActions();\n    // Executes the following only if a document has been instanciated.\n    // That is, don't execute when the editorcodec is setup.\n    if (document.body != null) {\n      // Defines instance fields\n      this.cycleAttributeValues = [];\n      this.popupHandler = new EditorPopupMenu();\n      this.undoManager = new UndoManager();\n      // Creates the graph and toolbar without the containers\n      this.graph = this.createGraph();\n      this.toolbar = this.createToolbar();\n      // Creates the global keyhandler (requires graph instance)\n      this.keyHandler = new EditorKeyHandler(this);\n      // Configures the editor using the URI\n      // which was passed to the ctor\n      this.configure(config);\n      // Assigns the swimlaneIndicatorColorAttribute on the graph\n      this.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n      // Checks if the <onInit> hook has been set\n      if (this.onInit != null) {\n        // Invokes the <onInit> hook\n        this.onInit();\n      }\n    }\n  }\n  /**\n   * Returns {@link modified}.\n   */\n  isModified() {\n    return this.modified;\n  }\n  /**\n   * Sets {@link modified} to the specified boolean value.\n   * @param value\n   */\n  setModified(value) {\n    this.modified = value;\n  }\n  /**\n   * Adds the built-in actions to the editor instance.\n   * save - Saves the graph using <urlPost>.\n   * print - Shows the graph in a new print preview window.\n   * show - Shows the graph in a new window.\n   * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n   * refresh - Refreshes the graph's display.\n   * cut - Copies the current selection into the clipboard\n   * and removes it from the graph.\n   * copy - Copies the current selection into the clipboard.\n   * paste - Pastes the clipboard into the graph.\n   * delete - Removes the current selection from the graph.\n   * group - Puts the current selection into a new group.\n   * ungroup - Removes the selected groups and selects the children.\n   * undo - Undoes the last change on the graph model.\n   * redo - Redoes the last change on the graph model.\n   * zoom - Sets the zoom via a dialog.\n   * zoomIn - Zooms into the graph.\n   * zoomOut - Zooms out of the graph\n   * actualSize - Resets the scale and translation on the graph.\n   * fit - Changes the scale so that the graph fits into the window.\n   * showProperties - Shows the properties dialog.\n   * selectAll - Selects all cells.\n   * selectNone - Clears the selection.\n   * selectVertices - Selects all vertices.\n   * selectEdges = Selects all edges.\n   * edit - Starts editing the current selection cell.\n   * enterGroup - Drills down into the current selection cell.\n   * exitGroup - Moves up in the drilling hierachy\n   * home - Moves to the topmost parent in the drilling hierarchy\n   * selectPrevious - Selects the previous cell.\n   * selectNext - Selects the next cell.\n   * selectParent - Selects the parent of the selection cell.\n   * selectChild - Selects the first child of the selection cell.\n   * collapse - Collapses the currently selected cells.\n   * expand - Expands the currently selected cells.\n   * bold - Toggle bold text style.\n   * italic - Toggle italic text style.\n   * underline - Toggle underline text style.\n   * alignCellsLeft - Aligns the selection cells at the left.\n   * alignCellsCenter - Aligns the selection cells in the center.\n   * alignCellsRight - Aligns the selection cells at the right.\n   * alignCellsTop - Aligns the selection cells at the top.\n   * alignCellsMiddle - Aligns the selection cells in the middle.\n   * alignCellsBottom - Aligns the selection cells at the bottom.\n   * alignFontLeft - Sets the horizontal text alignment to left.\n   * alignFontCenter - Sets the horizontal text alignment to center.\n   * alignFontRight - Sets the horizontal text alignment to right.\n   * alignFontTop - Sets the vertical text alignment to top.\n   * alignFontMiddle - Sets the vertical text alignment to middle.\n   * alignFontBottom - Sets the vertical text alignment to bottom.\n   * toggleTasks - Shows or hides the tasks window.\n   * toggleHelp - Shows or hides the help window.\n   * toggleOutline - Shows or hides the outline window.\n   * toggleConsole - Shows or hides the console window.\n   */\n  addActions() {\n    this.addAction('save', editor => {\n      editor.save();\n    });\n    this.addAction('print', editor => {\n      const preview = new PrintPreview(editor.graph, 1);\n      preview.open();\n    });\n    this.addAction('show', editor => {\n      show(editor.graph, null, 10, 10);\n    });\n    this.addAction('exportImage', editor => {\n      const url = editor.getUrlImage();\n      if (url == null || Client.IS_LOCAL) {\n        editor.execute('show');\n      } else {\n        const node = getViewXml(editor.graph, 1);\n        const xml = getXml(node, '\\n');\n        submit(url, `${editor.postParameterName}=${encodeURIComponent(xml)}`, document, '_blank');\n      }\n    });\n    this.addAction('refresh', editor => {\n      editor.graph.refresh();\n    });\n    this.addAction('cut', editor => {\n      if (editor.graph.isEnabled()) {\n        mxClipboard.cut(editor.graph);\n      }\n    });\n    this.addAction('copy', editor => {\n      if (editor.graph.isEnabled()) {\n        mxClipboard.copy(editor.graph);\n      }\n    });\n    this.addAction('paste', editor => {\n      if (editor.graph.isEnabled()) {\n        mxClipboard.paste(editor.graph);\n      }\n    });\n    this.addAction('delete', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.removeCells();\n      }\n    });\n    this.addAction('group', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.setSelectionCell(editor.groupCells());\n      }\n    });\n    this.addAction('ungroup', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.setSelectionCells(editor.graph.ungroupCells());\n      }\n    });\n    this.addAction('removeFromParent', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.removeCellsFromParent();\n      }\n    });\n    this.addAction('undo', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.undo();\n      }\n    });\n    this.addAction('redo', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.redo();\n      }\n    });\n    this.addAction('zoomIn', editor => {\n      editor.graph.zoomIn();\n    });\n    this.addAction('zoomOut', editor => {\n      editor.graph.zoomOut();\n    });\n    this.addAction('actualSize', editor => {\n      editor.graph.zoomActual();\n    });\n    this.addAction('fit', editor => {\n      editor.graph.fit();\n    });\n    this.addAction('showProperties', (editor, cell) => {\n      editor.showProperties(cell);\n    });\n    this.addAction('selectAll', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.selectAll();\n      }\n    });\n    this.addAction('selectNone', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.clearSelection();\n      }\n    });\n    this.addAction('selectVertices', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.selectVertices();\n      }\n    });\n    this.addAction('selectEdges', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.selectEdges();\n      }\n    });\n    this.addAction('edit', (editor, cell) => {\n      if (editor.graph.isEnabled() && editor.graph.isCellEditable(cell)) {\n        editor.graph.startEditingAtCell(cell);\n      }\n    });\n    this.addAction('toBack', (editor, cell) => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.orderCells(true);\n      }\n    });\n    this.addAction('toFront', (editor, cell) => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.orderCells(false);\n      }\n    });\n    this.addAction('enterGroup', (editor, cell) => {\n      editor.graph.enterGroup(cell);\n    });\n    this.addAction('exitGroup', editor => {\n      editor.graph.exitGroup();\n    });\n    this.addAction('home', editor => {\n      editor.graph.home();\n    });\n    this.addAction('selectPrevious', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.selectPreviousCell();\n      }\n    });\n    this.addAction('selectNext', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.selectNextCell();\n      }\n    });\n    this.addAction('selectParent', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.selectParentCell();\n      }\n    });\n    this.addAction('selectChild', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.selectChildCell();\n      }\n    });\n    this.addAction('collapse', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.foldCells(true);\n      }\n    });\n    this.addAction('collapseAll', editor => {\n      if (editor.graph.isEnabled()) {\n        const cells = editor.graph.getChildVertices();\n        editor.graph.foldCells(true, false, cells);\n      }\n    });\n    this.addAction('expand', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.foldCells(false);\n      }\n    });\n    this.addAction('expandAll', editor => {\n      if (editor.graph.isEnabled()) {\n        const cells = editor.graph.getChildVertices();\n        editor.graph.foldCells(false, false, cells);\n      }\n    });\n    this.addAction('bold', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.toggleCellStyleFlags('fontStyle', FONT.BOLD);\n      }\n    });\n    this.addAction('italic', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.toggleCellStyleFlags('fontStyle', FONT.ITALIC);\n      }\n    });\n    this.addAction('underline', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.toggleCellStyleFlags('fontStyle', FONT.UNDERLINE);\n      }\n    });\n    this.addAction('alignCellsLeft', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.alignCells(ALIGN.LEFT);\n      }\n    });\n    this.addAction('alignCellsCenter', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.alignCells(ALIGN.CENTER);\n      }\n    });\n    this.addAction('alignCellsRight', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.alignCells(ALIGN.RIGHT);\n      }\n    });\n    this.addAction('alignCellsTop', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.alignCells(ALIGN.TOP);\n      }\n    });\n    this.addAction('alignCellsMiddle', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.alignCells(ALIGN.MIDDLE);\n      }\n    });\n    this.addAction('alignCellsBottom', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.alignCells(ALIGN.BOTTOM);\n      }\n    });\n    this.addAction('alignFontLeft', editor => {\n      editor.graph.setCellStyles('align', ALIGN.LEFT);\n    });\n    this.addAction('alignFontCenter', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.setCellStyles('align', ALIGN.CENTER);\n      }\n    });\n    this.addAction('alignFontRight', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.setCellStyles('align', ALIGN.RIGHT);\n      }\n    });\n    this.addAction('alignFontTop', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.setCellStyles('verticalAlign', ALIGN.TOP);\n      }\n    });\n    this.addAction('alignFontMiddle', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.setCellStyles('verticalAlign', ALIGN.MIDDLE);\n      }\n    });\n    this.addAction('alignFontBottom', editor => {\n      if (editor.graph.isEnabled()) {\n        editor.graph.setCellStyles('verticalAlign', ALIGN.BOTTOM);\n      }\n    });\n    this.addAction('zoom', editor => {\n      const current = editor.graph.getView().scale * 100;\n      const preInput = prompt(Translations.get(editor.askZoomResource) || editor.askZoomResource, String(current));\n      if (preInput) {\n        const scale = parseFloat(preInput) / 100;\n        if (!isNaN(scale)) {\n          editor.graph.getView().setScale(scale);\n        }\n      }\n    });\n    this.addAction('toggleTasks', editor => {\n      if (editor.tasks != null) {\n        editor.tasks.setVisible(!editor.tasks.isVisible());\n      } else {\n        editor.showTasks();\n      }\n    });\n    this.addAction('toggleHelp', editor => {\n      if (editor.help != null) {\n        editor.help.setVisible(!editor.help.isVisible());\n      } else {\n        editor.showHelp();\n      }\n    });\n    this.addAction('toggleOutline', editor => {\n      if (editor.outline == null) {\n        editor.showOutline();\n      } else {\n        editor.outline.setVisible(!editor.outline.isVisible());\n      }\n    });\n    this.addAction('toggleConsole', editor => {\n      MaxLog.setVisible(!MaxLog.isVisible());\n    });\n  }\n  /**\n   * Configures the editor using the specified node. To load the\n   * configuration from a given URL the following code can be used to obtain\n   * the XML node.\n   *\n   * @example\n   * ```javascript\n   * var node = mxUtils.load(url).getDocumentElement();\n   * ```\n   * @param node XML node that contains the configuration.\n   */\n  configure(node) {\n    if (node != null) {\n      // Creates a decoder for the XML data\n      // and uses it to configure the editor\n      const dec = new Codec(node.ownerDocument);\n      dec.decode(node, this);\n      // Resets the counters, modified state and\n      // command history\n      this.resetHistory();\n    }\n  }\n  /**\n   * Resets the cookie that is used to remember if the editor has already been used.\n   */\n  resetFirstTime() {\n    document.cookie = 'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n  }\n  /**\n   * Resets the command history, modified state and counters.\n   */\n  resetHistory() {\n    this.lastSnapshot = new Date().getTime();\n    this.undoManager.clear();\n    this.ignoredChanges = 0;\n    this.setModified(false);\n  }\n  /**\n   * Binds the specified actionname to the specified function.\n   *\n   * @example\n   * ```javascript\n   * editor.addAction('test', function(editor: Editor, cell: Cell)\n   * {\n   * \t\tmxUtils.alert(\"test \"+cell);\n   * });\n   * ```\n   * @param actionname String that specifies the name of the action to be added.\n   * @param funct Function that implements the new action. The first argument\n   * of the function is the editor it is used with,\n   * the second argument is the cell it operates upon.\n   */\n  addAction(actionname, funct) {\n    this.actions[actionname] = funct;\n  }\n  /**\n   * Executes the function with the given name in {@link actions} passing the\n   * editor instance and given cell as the first and second argument. All\n   * additional arguments are passed to the action as well. This method\n   * contains a try-catch block and displays an error message if an action\n   * causes an exception. The exception is re-thrown after the error\n   * message was displayed.\n   *\n   * @example\n   * ```javascript\n   * editor.execute(\"showProperties\", cell);\n   * ```\n   * @param actionname\n   * @param cell\n   * @param evt\n   */\n  execute(actionname, cell = null, evt = null) {\n    const action = this.actions[actionname];\n    if (action != null) {\n      try {\n        // Creates the array of arguments by replacing the actionname\n        // with the editor instance in the args of this function\n        const args = [this, cell, evt];\n        // Invokes the function on the editor using the args\n        action.apply(this, args);\n      } catch (e) {\n        error(`Cannot execute ${actionname}: ${e.message}`, 280, true);\n        throw e;\n      }\n    } else {\n      error(`Cannot find action ${actionname}`, 280, true);\n    }\n  }\n  /**\n   * Adds the specified template under the given name in {@link templates}.\n   * @param name\n   * @param template\n   */\n  addTemplate(name, template) {\n    this.templates[name] = template;\n  }\n  /**\n   * Returns the template for the given name.\n   * @param name\n   */\n  getTemplate(name) {\n    return this.templates[name];\n  }\n  /**\n   * Creates the {@link graph} for the editor. The graph is created with no\n   * container and is initialized from {@link setGraphContainer}.\n   * @returns graph instance\n   */\n  createGraph() {\n    const __dummy = undefined;\n    const graph = new Graph(__dummy);\n    // Enables rubberband, tooltips, panning\n    graph.setTooltips(true);\n    graph.setPanning(true);\n    // Overrides the dblclick method on the graph to\n    // invoke the dblClickAction for a cell and reset\n    // the selection tool in the toolbar\n    this.installDblClickHandler(graph);\n    // Installs the command history\n    this.installUndoHandler(graph);\n    // Installs the handlers for the root event\n    this.installDrillHandler(graph);\n    // Installs the handler for validation\n    this.installChangeHandler(graph);\n    // Installs the handler for calling the\n    // insert function and consume the\n    // event if an insert function is defined\n    this.installInsertHandler(graph);\n    // Redirects the function for creating the popupmenu items\n    const popupMenuHandler = graph.getPlugin('PopupMenuHandler');\n    if (popupMenuHandler) {\n      popupMenuHandler.factoryMethod = (menu, cell, evt) => {\n        return this.createPopupMenu(menu, cell, evt);\n      };\n    }\n    // Redirects the function for creating new connections in the diagram\n    const connectionHandler = graph.getPlugin('ConnectionHandler');\n    if (connectionHandler) {\n      connectionHandler.factoryMethod = (source, target) => {\n        return this.createEdge(source, target);\n      };\n    }\n    // Maintains swimlanes and installs autolayout\n    this.createSwimlaneManager(graph);\n    this.createLayoutManager(graph);\n    return graph;\n  }\n  /**\n   * Sets the graph's container using [@link mxGraph.init}.\n   * @param graph\n   * @returns SwimlaneManager instance\n   */\n  createSwimlaneManager(graph) {\n    const swimlaneMgr = new SwimlaneManager(graph, false);\n    swimlaneMgr.isHorizontal = () => {\n      return this.horizontalFlow;\n    };\n    swimlaneMgr.isEnabled = () => {\n      return this.maintainSwimlanes;\n    };\n    return swimlaneMgr;\n  }\n  /**\n   * Creates a layout manager for the swimlane and diagram layouts, that\n   * is, the locally defined inter and intraswimlane layouts.\n   * @param graph\n   * @returns LayoutManager instance\n   */\n  createLayoutManager(graph) {\n    const layoutMgr = new LayoutManager(graph);\n    const self = this; // closure\n    layoutMgr.getLayout = cell => {\n      let layout = null;\n      const model = self.graph.getDataModel();\n      if (cell.getParent() != null) {\n        // Executes the swimlane layout if a child of\n        // a swimlane has been changed. The layout is\n        // lazy created in createSwimlaneLayout.\n        if (self.layoutSwimlanes && graph.isSwimlane(cell)) {\n          if (self.swimlaneLayout == null) {\n            self.swimlaneLayout = self.createSwimlaneLayout();\n          }\n          layout = self.swimlaneLayout;\n        }\n        // Executes the diagram layout if the modified\n        // cell is a top-level cell. The layout is\n        // lazy created in createDiagramLayout.\n        else if (self.layoutDiagram && (graph.isValidRoot(cell) || cell.getParent().getParent() == null)) {\n          if (self.diagramLayout == null) {\n            self.diagramLayout = self.createDiagramLayout();\n          }\n          layout = self.diagramLayout;\n        }\n      }\n      return layout;\n    };\n    return layoutMgr;\n  }\n  /**\n   * Sets the graph's container using {@link graph.init}.\n   * @param container\n   */\n  setGraphContainer(container) {\n    if (this.graph.container == null) {\n      // Creates the graph instance inside the given container and render hint\n      // this.graph = new mxGraph(container, null, this.graphRenderHint);\n      // @ts-ignore  TODO: FIXME!! ==============================================================================================\n      this.graph.init(container);\n      // Install rubberband selection as the last\n      // action handler in the chain\n      this.rubberband = new RubberBandHandler(this.graph);\n      // Disables the context menu\n      if (this.disableContextMenu) {\n        InternalEvent.disableContextMenu(container);\n      }\n    }\n  }\n  /**\n   * Overrides {@link graph.dblClick} to invoke {@link dblClickAction}\n   * on a cell and reset the selection tool in the toolbar.\n   * @param graph\n   */\n  installDblClickHandler(graph) {\n    // Installs a listener for double click events\n    graph.addListener(InternalEvent.DOUBLE_CLICK, (sender, evt) => {\n      const cell = evt.getProperty('cell');\n      if (cell != null && graph.isEnabled() && this.dblClickAction != null) {\n        this.execute(this.dblClickAction, cell);\n        evt.consume();\n      }\n    });\n  }\n  /**\n   * Adds the {@link undoManager} to the graph model and the view.\n   * @param graph\n   */\n  installUndoHandler(graph) {\n    const listener = (sender, evt) => {\n      const edit = evt.getProperty('edit');\n      this.undoManager.undoableEditHappened(edit);\n    };\n    graph.getDataModel().addListener(InternalEvent.UNDO, listener);\n    graph.getView().addListener(InternalEvent.UNDO, listener);\n    // Keeps the selection state in sync\n    const undoHandler = (sender, evt) => {\n      const {\n        changes\n      } = evt.getProperty('edit');\n      graph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n    };\n    this.undoManager.addListener(InternalEvent.UNDO, undoHandler);\n    this.undoManager.addListener(InternalEvent.REDO, undoHandler);\n  }\n  /**\n   * Installs listeners for dispatching the {@link root} event.\n   * @param graph\n   */\n  installDrillHandler(graph) {\n    const listener = sender => {\n      this.fireEvent(new EventObject(InternalEvent.ROOT));\n    };\n    graph.getView().addListener(InternalEvent.DOWN, listener);\n    graph.getView().addListener(InternalEvent.UP, listener);\n  }\n  /**\n   * Installs the listeners required to automatically validate\n   * the graph. On each change of the root, this implementation\n   * fires a {@link root} event.\n   * @param graph\n   */\n  installChangeHandler(graph) {\n    const listener = (sender, evt) => {\n      // Updates the modified state\n      this.setModified(true);\n      // Automatically validates the graph\n      // after each change\n      if (this.validating == true) {\n        graph.validateGraph();\n      }\n      // Checks if the root has been changed\n      const {\n        changes\n      } = evt.getProperty('edit');\n      for (let i = 0; i < changes.length; i += 1) {\n        const change = changes[i];\n        if (change instanceof RootChange || change instanceof ValueChange && change.cell === this.graph.model.root || change instanceof CellAttributeChange && change.cell === this.graph.model.root) {\n          this.fireEvent(new EventObject(InternalEvent.ROOT));\n          break;\n        }\n      }\n    };\n    graph.getDataModel().addListener(InternalEvent.CHANGE, listener);\n  }\n  /**\n   * Installs the handler for invoking {@link insertFunction} if one is defined.\n   * @param graph\n   */\n  installInsertHandler(graph) {\n    const self = this; // closure\n    const insertHandler = {\n      mouseDown: (sender, me) => {\n        if (self.insertFunction != null && !me.isPopupTrigger() && (self.forcedInserting || me.getState() == null)) {\n          self.graph.clearSelection();\n          self.insertFunction(me.getEvent(), me.getCell());\n          // Consumes the rest of the events\n          // for this gesture (down, move, up)\n          this.isActive = true;\n          me.consume();\n        }\n      },\n      mouseMove: (sender, me) => {\n        if (this.isActive) {\n          me.consume();\n        }\n      },\n      mouseUp: (sender, me) => {\n        if (this.isActive) {\n          this.isActive = false;\n          me.consume();\n        }\n      }\n    };\n    graph.addMouseListener(insertHandler);\n  }\n  /**\n   * Creates the layout instance used to layout the\n   * swimlanes in the diagram.\n   * @returns StackLayout instance\n   */\n  createDiagramLayout() {\n    const gs = this.graph.gridSize;\n    const layout = new StackLayout(this.graph, !this.horizontalFlow, this.swimlaneSpacing, 2 * gs, 2 * gs);\n    // Overrides isIgnored to only take into account swimlanes\n    layout.isVertexIgnored = cell => {\n      return !layout.graph.isSwimlane(cell);\n    };\n    return layout;\n  }\n  /**\n   * Creates the layout instance used to layout the\n   * children of each swimlane.\n   * @returns CompactTreeLayout instance\n   */\n  createSwimlaneLayout() {\n    return new CompactTreeLayout(this.graph, this.horizontalFlow);\n  }\n  /**\n   * Creates the {@link toolbar} with no container.\n   * @returns EditorToolbar instance\n   */\n  createToolbar() {\n    return new EditorToolbar(null, this);\n  }\n  /**\n   * Initializes the toolbar for the given container.\n   * @param container\n   */\n  setToolbarContainer(container) {\n    this.toolbar.init(container);\n  }\n  /**\n   * Creates the {@link status} using the specified container.\n   * This implementation adds listeners in the editor to\n   * display the last saved time and the current filename\n   * in the status bar.\n   * @param container DOM node that will contain the statusbar.\n   */\n  setStatusContainer(container) {\n    if (this.status == null) {\n      this.status = container;\n      // Prints the last saved time in the status bar\n      // when files are saved\n      this.addListener(InternalEvent.SAVE, () => {\n        const tstamp = new Date().toLocaleString();\n        this.setStatus(`${Translations.get(this.lastSavedResource) || this.lastSavedResource}: ${tstamp}`);\n      });\n      // Updates the statusbar to display the filename\n      // when new files are opened\n      this.addListener(InternalEvent.OPEN, () => {\n        this.setStatus(`${Translations.get(this.currentFileResource) || this.currentFileResource}: ${this.filename}`);\n      });\n    }\n  }\n  /**\n   * Display the specified message in the status bar.\n   * @param message String the specified the message to be displayed.\n   */\n  setStatus(message) {\n    if (this.status != null && message != null) {\n      this.status.innerHTML = message;\n    }\n  }\n  /**\n   * Creates a listener to update the inner HTML of the\n   * specified DOM node with the value of {@link getTitle}.\n   * @param container DOM node that will contain the title.\n   */\n  setTitleContainer(container) {\n    this.addListener(InternalEvent.ROOT, sender => {\n      container.innerHTML = this.getTitle();\n    });\n  }\n  /**\n   * Executes a vertical or horizontal compact tree layout\n   * using the specified cell as an argument. The cell may\n   * either be a group or the root of a tree.\n   * @param cell {@link mxCell} to use in the compact tree layout.\n   * @param horizontal Optional boolean to specify the tree's\n   * orientation. Default is true.\n   */\n  treeLayout(cell, horizontal) {\n    if (cell != null) {\n      const layout = new CompactTreeLayout(this.graph, horizontal);\n      layout.execute(cell);\n    }\n  }\n  /**\n   * Returns the string value for the current root of the diagram.\n   */\n  getTitle() {\n    let title = '';\n    const {\n      graph\n    } = this;\n    let cell = graph.getCurrentRoot();\n    while (cell != null && cell.getParent().getParent() != null) {\n      // Append each label of a valid root\n      if (graph.isValidRoot(cell)) {\n        title = ` > ${graph.convertValueToString(cell)}${title}`;\n      }\n      cell = cell.getParent();\n    }\n    const prefix = this.getRootTitle();\n    return prefix + title;\n  }\n  /**\n   * Returns the string value of the root cell in {@link graph.model}.\n   */\n  getRootTitle() {\n    const root = this.graph.getDataModel().getRoot();\n    return this.graph.convertValueToString(root);\n  }\n  /**\n   * Undo the last change in {@link graph}.\n   */\n  undo() {\n    this.undoManager.undo();\n  }\n  /**\n   * Redo the last change in {@link graph}.\n   */\n  redo() {\n    this.undoManager.redo();\n  }\n  /**\n   * Invokes {@link createGroup} to create a new group cell and the invokes\n   * {@link graph.groupCells}, using the grid size of the graph as the spacing\n   * in the group's content area.\n   */\n  groupCells() {\n    const border = this.groupBorderSize != null ? this.groupBorderSize : this.graph.gridSize;\n    return this.graph.groupCells(this.createGroup(), border);\n  }\n  /**\n   * Creates and returns a clone of {@link defaultGroup} to be used\n   * as a new group cell in {@link group}.\n   * @returns Cell\n   */\n  createGroup() {\n    const model = this.graph.getDataModel();\n    return model.cloneCell(this.defaultGroup);\n  }\n  /**\n   * Opens the specified file synchronously and parses it using\n   * {@link readGraphModel}. It updates {@link filename} and fires an <open>-event after\n   * the file has been opened. Exceptions should be handled as follows:\n   *\n   * @example\n   * ```javascript\n   * try\n   * {\n   *   editor.open(filename);\n   * }\n   * catch (e)\n   * {\n   *   mxUtils.error('Cannot open ' + filename +\n   *     ': ' + e.message, 280, true);\n   * }\n   * ```\n   *\n   * @param filename URL of the file to be opened.\n   */\n  open(filename) {\n    if (filename != null) {\n      const xml = load(filename).getXml();\n      this.readGraphModel(xml.documentElement);\n      this.filename = filename;\n      this.fireEvent(new EventObject(InternalEvent.OPEN, {\n        filename\n      }));\n    }\n  }\n  /**\n   * Reads the specified XML node into the existing graph model and resets\n   * the command history and modified state.\n   * @param node\n   */\n  readGraphModel(node) {\n    const dec = new Codec(node.ownerDocument);\n    dec.decode(node, this.graph.getDataModel());\n    this.resetHistory();\n  }\n  /**\n   * Posts the string returned by {@link writeGraphModel} to the given URL or the\n   * URL returned by {@link getUrlPost}. The actual posting is carried out by\n   * {@link postDiagram}. If the URL is null then the resulting XML will be\n   * displayed using {@link popup}. Exceptions should be handled as\n   * follows:\n   *\n   * @example\n   * ```javascript\n   * try\n   * {\n   *   editor.save();\n   * }\n   * catch (e)\n   * {\n   *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n   * }\n   * ```\n   *\n   * @param url\n   * @param linefeed\n   */\n  save(url = null, linefeed = this.linefeed) {\n    // Gets the URL to post the data to\n    url = url || this.getUrlPost();\n    // Posts the data if the URL is not empty\n    if (url != null && url.length > 0) {\n      const data = this.writeGraphModel(linefeed);\n      this.postDiagram(url, data);\n      // Resets the modified flag\n      this.setModified(false);\n    }\n    // Dispatches a save event\n    this.fireEvent(new EventObject(InternalEvent.SAVE, {\n      url\n    }));\n  }\n  /**\n   * Hook for subclassers to override the posting of a diagram\n   * represented by the given node to the given URL. This fires\n   * an asynchronous {@link post} event if the diagram has been posted.\n   *\n   * ### Example:\n   *\n   * To replace the diagram with the diagram in the response, use the\n   * following code.\n   *\n   * @example\n   * ```javascript\n   * editor.addListener(mxEvent.POST, function(sender, evt)\n   * {\n   *   // Process response (replace diagram)\n   *   var req = evt.getProperty('request');\n   *   var root = req.getDocumentElement();\n   *   editor.graph.readGraphModel(root)\n   * });\n   * ```\n   * @param url\n   * @param data\n   */\n  postDiagram(url, data) {\n    if (this.escapePostData) {\n      data = encodeURIComponent(data);\n    }\n    post(url, `${this.postParameterName}=${data}`, req => {\n      this.fireEvent(new EventObject(InternalEvent.POST, {\n        request: req,\n        url,\n        data\n      }));\n    });\n  }\n  /**\n   * Hook to create the string representation of the diagram. The default\n   * implementation uses an {@link Codec} to encode the graph model as\n   * follows:\n   *\n   * @example\n   * ```javascript\n   * var enc = new Codec();\n   * var node = enc.encode(this.graph.getDataModel());\n   * return mxUtils.getXml(node, this.linefeed);\n   * ```\n   *\n   * @param linefeed Optional character to be used as the linefeed. Default is {@link linefeed}.\n   */\n  writeGraphModel(linefeed) {\n    linefeed = linefeed != null ? linefeed : this.linefeed;\n    const enc = new Codec();\n    const node = enc.encode(this.graph.getDataModel());\n    return getXml(node, linefeed);\n  }\n  /**\n   * Returns the URL to post the diagram to. This is used\n   * in {@link save}. The default implementation returns {@link urlPost},\n   * adding <code>?draft=true</code>.\n   */\n  getUrlPost() {\n    return this.urlPost;\n  }\n  /**\n   * Returns the URL to create the image with. This is typically\n   * the URL of a backend which accepts an XML representation\n   * of a graph view to create an image. The function is used\n   * in the image action to create an image. This implementation\n   * returns {@link urlImage}.\n   */\n  getUrlImage() {\n    return this.urlImage;\n  }\n  /**\n   * Swaps the styles for the given names in the graph's\n   * stylesheet and refreshes the graph.\n   * @param first\n   * @param second\n   */\n  swapStyles(first, second) {\n    // @ts-ignore\n    const style = this.graph.getStylesheet().styles[second];\n    this.graph.getView()\n    // @ts-ignore\n    .getStylesheet()\n    // @ts-ignore\n    .putCellStyle(second, this.graph.getStylesheet().styles[first]);\n    this.graph.getStylesheet().putCellStyle(first, style);\n    this.graph.refresh();\n  }\n  /**\n   * Creates and shows the properties dialog for the given\n   * cell. The content area of the dialog is created using\n   * {@link createProperties}.\n   * @param cell\n   */\n  showProperties(cell = null) {\n    cell = cell || this.graph.getSelectionCell();\n    // Uses the root node for the properties dialog\n    // if not cell was passed in and no cell is\n    // selected\n    if (cell == null) {\n      cell = this.graph.getCurrentRoot();\n      if (cell == null) {\n        cell = this.graph.getDataModel().getRoot();\n      }\n    }\n    if (cell != null) {\n      // Makes sure there is no in-place editor in the\n      // graph and computes the location of the dialog\n      this.graph.stopEditing(true);\n      const offset = getOffset(this.graph.container);\n      let x = offset.x + 10;\n      let {\n        y\n      } = offset;\n      // Avoids moving the dialog if it is alredy open\n      if (this.properties != null && !this.movePropertiesDialog) {\n        x = this.properties.getX();\n        y = this.properties.getY();\n      }\n      // Places the dialog near the cell for which it\n      // displays the properties\n      else {\n        const bounds = this.graph.getCellBounds(cell);\n        if (bounds != null) {\n          x += bounds.x + Math.min(200, bounds.width);\n          y += bounds.y;\n        }\n      }\n      // Hides the existing properties dialog and creates a new one with the\n      // contents created in the hook method\n      this.hideProperties();\n      const node = this.createProperties(cell);\n      if (node != null) {\n        // Displays the contents in a window and stores a reference to the\n        // window for later hiding of the window\n        this.properties = new MaxWindow(Translations.get(this.propertiesResource) || this.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n        this.properties.setVisible(true);\n      }\n    }\n  }\n  /**\n   * Returns true if the properties dialog is currently visible.\n   */\n  isPropertiesVisible() {\n    return this.properties != null;\n  }\n  /**\n   * Creates and returns the DOM node that represents the contents\n   * of the properties dialog for the given cell. This implementation\n   * works for user objects that are XML nodes and display all the\n   * node attributes in a form.\n   */\n  createProperties(cell) {\n    const model = this.graph.getDataModel();\n    const value = cell.getValue();\n    if (isNode(value)) {\n      // Creates a form for the user object inside\n      // the cell\n      const form = new MaxForm('properties');\n      // Adds a readonly field for the cell id\n      const id = form.addText('ID', cell.getId());\n      id.setAttribute('readonly', 'true');\n      let geo = null;\n      let yField = null;\n      let xField = null;\n      let widthField = null;\n      let heightField = null;\n      // Adds fields for the location and size\n      if (cell.isVertex()) {\n        geo = cell.getGeometry();\n        if (geo != null) {\n          yField = form.addText('top', geo.y);\n          xField = form.addText('left', geo.x);\n          widthField = form.addText('width', geo.width);\n          heightField = form.addText('height', geo.height);\n        }\n      }\n      // Adds a field for the cell style\n      const tmp = cell.getStyle();\n      const style = form.addText('Style', tmp || '');\n      // Creates textareas for each attribute of the\n      // user object within the cell\n      const attrs = value.attributes;\n      const texts = [];\n      for (let i = 0; i < attrs.length; i += 1) {\n        // Creates a textarea with more lines for\n        // the cell label\n        const val = attrs[i].value;\n        texts.push(form.addTextarea(attrs[i].nodeName, val, attrs[i].nodeName === 'label' ? 4 : 2));\n      }\n      // Adds an OK and Cancel button to the dialog\n      // contents and implements the respective\n      // actions below\n      // Defines the function to be executed when the\n      // OK button is pressed in the dialog\n      const okFunction = () => {\n        // Hides the dialog\n        this.hideProperties();\n        // Supports undo for the changes on the underlying\n        // XML structure / XML node attribute changes.\n        model.beginUpdate();\n        try {\n          if (geo != null && xField != null && yField != null && widthField != null && heightField != null) {\n            geo = geo.clone();\n            geo.x = parseFloat(xField.value);\n            geo.y = parseFloat(yField.value);\n            geo.width = parseFloat(widthField.value);\n            geo.height = parseFloat(heightField.value);\n            model.setGeometry(cell, geo);\n          }\n          // Applies the style\n          if (style.value.length > 0) {\n            // @ts-expect-error TODO - style is no longer a string\n            model.setStyle(cell, style.value);\n          } else {\n            model.setStyle(cell, {});\n          }\n          // Creates an undoable change for each\n          // attribute and executes it using the\n          // model, which will also make the change\n          // part of the current transaction\n          for (let i = 0; i < attrs.length; i += 1) {\n            const edit = new CellAttributeChange(cell, attrs[i].nodeName, texts[i].value);\n            model.execute(edit);\n          }\n          // Checks if the graph wants cells to\n          // be automatically sized and updates\n          // the size as an undoable step if\n          // the feature is enabled\n          if (this.graph.isAutoSizeCell(cell)) {\n            this.graph.updateCellSize(cell);\n          }\n        } finally {\n          model.endUpdate();\n        }\n      };\n      // Defines the function to be executed when the\n      // Cancel button is pressed in the dialog\n      const cancelFunction = () => {\n        // Hides the dialog\n        this.hideProperties();\n      };\n      form.addButtons(okFunction, cancelFunction);\n      return form.table;\n    }\n    return null;\n  }\n  /**\n   * Hides the properties dialog.\n   */\n  hideProperties() {\n    if (this.properties != null) {\n      this.properties.destroy();\n      this.properties = null;\n    }\n  }\n  /**\n   * Shows the tasks window. The tasks window is created using {@link createTasks}. The\n   * default width of the window is 200 pixels, the y-coordinate of the location\n   * can be specifies in {@link tasksTop} and the x-coordinate is right aligned with a\n   * 20 pixel offset from the right border. To change the location of the tasks\n   * window, the following code can be used:\n   *\n   * @example\n   * ```javascript\n   * var oldShowTasks = Editor.prototype.showTasks;\n   * Editor.prototype.showTasks = function()\n   * {\n   *   oldShowTasks.apply(this, arguments); // \"supercall\"\n   *\n   *   if (this.tasks != null)\n   *   {\n   *     this.tasks.setLocation(10, 10);\n   *   }\n   * };\n   * ```\n   */\n  showTasks() {\n    if (this.tasks == null) {\n      const div = document.createElement('div');\n      div.style.padding = '4px';\n      div.style.paddingLeft = '20px';\n      const w = document.body.clientWidth;\n      const wnd = new MaxWindow(Translations.get(this.tasksResource) || this.tasksResource, div, w - 220, this.tasksTop, 200);\n      wnd.setClosable(true);\n      wnd.destroyOnClose = false;\n      // Installs a function to update the contents\n      // of the tasks window on every change of the\n      // model, selection or root.\n      const funct = sender => {\n        InternalEvent.release(div);\n        div.innerHTML = '';\n        this.createTasks(div);\n      };\n      this.graph.getDataModel().addListener(InternalEvent.CHANGE, funct);\n      this.graph.getSelectionModel().addListener(InternalEvent.CHANGE, funct);\n      this.graph.addListener(InternalEvent.ROOT, funct);\n      // Assigns the icon to the tasks window\n      if (this.tasksWindowImage != null) {\n        wnd.setImage(this.tasksWindowImage);\n      }\n      this.tasks = wnd;\n      this.createTasks(div);\n    }\n    this.tasks.setVisible(true);\n  }\n  /**\n   * Updates the contents of the tasks window using {@link createTasks}.\n   * @param div\n   */\n  refreshTasks(div) {\n    if (this.tasks != null) {\n      const div = this.tasks.content;\n      InternalEvent.release(div);\n      div.innerHTML = '';\n      this.createTasks(div);\n    }\n  }\n  /**\n   * Updates the contents of the given DOM node to\n   * display the tasks associated with the current\n   * editor state. This is invoked whenever there\n   * is a possible change of state in the editor.\n   * Default implementation is empty.\n   * @param div\n   */\n  createTasks(div) {\n    // override\n  }\n  /**\n   * Shows the help window. If the help window does not exist\n   * then it is created using an iframe pointing to the resource\n   * for the <code>urlHelp</code> key or {@link urlHelp} if the resource\n   * is undefined.\n   * @param tasks\n   */\n  showHelp(tasks = null) {\n    if (this.help == null) {\n      const frame = document.createElement('iframe');\n      frame.setAttribute('src', Translations.get('urlHelp') || this.urlHelp);\n      frame.setAttribute('height', '100%');\n      frame.setAttribute('width', '100%');\n      frame.setAttribute('frameBorder', '0');\n      frame.style.backgroundColor = 'white';\n      const w = document.body.clientWidth;\n      const h = document.body.clientHeight || document.documentElement.clientHeight;\n      const wnd = new MaxWindow(Translations.get(this.helpResource) || this.helpResource, frame, (w - this.helpWidth) / 2, (h - this.helpHeight) / 3, this.helpWidth, this.helpHeight);\n      wnd.setMaximizable(true);\n      wnd.setClosable(true);\n      wnd.destroyOnClose = false;\n      wnd.setResizable(true);\n      // Assigns the icon to the help window\n      if (this.helpWindowImage != null) {\n        wnd.setImage(this.helpWindowImage);\n      }\n      // Workaround for ignored iframe height 100% in FF\n      if (Client.IS_NS) {\n        const handler = sender => {\n          const h = wnd.div.offsetHeight;\n          frame.setAttribute('height', `${h - 26}px`);\n        };\n        wnd.addListener(InternalEvent.RESIZE_END, handler);\n        wnd.addListener(InternalEvent.MAXIMIZE, handler);\n        wnd.addListener(InternalEvent.NORMALIZE, handler);\n        wnd.addListener(InternalEvent.SHOW, handler);\n      }\n      this.help = wnd;\n    }\n    this.help.setVisible(true);\n  }\n  /**\n   * Shows the outline window. If the window does not exist, then it is\n   * created using an {@link outline}.\n   */\n  showOutline() {\n    const create = this.outline == null;\n    if (create) {\n      const div = document.createElement('div');\n      div.style.overflow = 'hidden';\n      div.style.position = 'relative';\n      div.style.width = '100%';\n      div.style.height = '100%';\n      div.style.background = 'white';\n      div.style.cursor = 'move';\n      const wnd = new MaxWindow(Translations.get(this.outlineResource) || this.outlineResource, div, 600, 480, 200, 200, false);\n      // Creates the outline in the specified div\n      // and links it to the existing graph\n      const outline = new Outline(this.graph, div);\n      wnd.setClosable(true);\n      wnd.setResizable(true);\n      wnd.destroyOnClose = false;\n      wnd.addListener(InternalEvent.RESIZE_END, () => {\n        outline.update();\n      });\n      this.outline = wnd;\n      this.outline.Outline = outline;\n    }\n    // Finally shows the outline\n    this.outline.setVisible(true);\n    this.outline.outline.update(true);\n  }\n  /**\n   * Puts the graph into the specified mode. The following modenames are\n   * supported:\n   *\n   * select - Selects using the left mouse button, new connections are disabled.\n   * connect - Selects using the left mouse button or creates new connections if mouse over cell hotspot.\n   * See {@link mxConnectionHandler}.\n   * pan - Pans using the left mouse button, new connections are disabled.\n   * @param modename\n   */\n  setMode(modename) {\n    const panningHandler = this.graph.getPlugin('PanningHandler');\n    if (modename === 'select') {\n      panningHandler && (panningHandler.useLeftButtonForPanning = false);\n      this.graph.setConnectable(false);\n    } else if (modename === 'connect') {\n      panningHandler && (panningHandler.useLeftButtonForPanning = false);\n      this.graph.setConnectable(true);\n    } else if (modename === 'pan') {\n      panningHandler && (panningHandler.useLeftButtonForPanning = true);\n      this.graph.setConnectable(false);\n    }\n  }\n  /**\n   * Uses {@link popupHandler} to create the menu in the graph's\n   * panning handler. The redirection is setup in {@link setToolbarContainer}.\n   * @param menu\n   * @param cell\n   * @param evt\n   */\n  createPopupMenu(menu, cell, evt) {\n    this.popupHandler.createMenu(this, menu, cell, evt);\n  }\n  /**\n   * Uses {@link defaultEdge} as the prototype for creating new edges\n   * in the connection handler of the graph. The style of the\n   * edge will be overridden with the value returned by {@link getEdgeStyle}.\n   * @param source\n   * @param target\n   */\n  createEdge(source, target) {\n    // Clones the defaultedge prototype\n    let e;\n    if (this.defaultEdge != null) {\n      const model = this.graph.getDataModel();\n      e = model.cloneCell(this.defaultEdge);\n    } else {\n      e = new Cell('');\n      e.setEdge(true);\n      const geo = new Geometry();\n      geo.relative = true;\n      e.setGeometry(geo);\n    }\n    // Overrides the edge style\n    const style = this.getEdgeStyle();\n    if (style != null) {\n      e.setStyle(style);\n    }\n    return e;\n  }\n  /**\n   * Returns a string identifying the style of new edges.\n   * The function is used in {@link createEdge} when new edges\n   * are created in the graph.\n   */\n  getEdgeStyle() {\n    return this.defaultEdgeStyle;\n  }\n  /**\n   * Returns the next attribute in {@link cycleAttributeValues}\n   * or null, if not attribute should be used in the specified cell.\n   * @param cell\n   */\n  consumeCycleAttribute(cell) {\n    return this.cycleAttributeValues != null && this.cycleAttributeValues.length > 0 && this.graph.isSwimlane(cell) ? this.cycleAttributeValues[this.cycleAttributeIndex++ % this.cycleAttributeValues.length] : null;\n  }\n  /**\n   * Uses the returned value from {@link consumeCycleAttribute}\n   * as the value for the {@link cycleAttributeName} key in the given cell's style.\n   * @param cell\n   */\n  cycleAttribute(cell) {\n    if (this.cycleAttributeName != null) {\n      const value = this.consumeCycleAttribute(cell);\n      if (value != null) {\n        // @ts-expect-error TODO - style is no longer a string\n        cell.setStyle(`${cell.getStyle()};${this.cycleAttributeName}=${value}`);\n      }\n    }\n  }\n  /**\n   * Adds the given vertex as a child of parent at the specified\n   * x and y coordinate and fires an {@link addVertex} event.\n   * @param parent\n   * @param vertex\n   * @param x\n   * @param y\n   */\n  addVertex(parent, vertex, x, y) {\n    const model = this.graph.getDataModel();\n    while (parent != null && !this.graph.isValidDropTarget(parent)) {\n      parent = parent.getParent();\n    }\n    parent = parent != null ? parent : this.graph.getSwimlaneAt(x, y);\n    const {\n      scale\n    } = this.graph.getView();\n    let geo = vertex.getGeometry();\n    const pgeo = parent.getGeometry();\n    if (this.graph.isSwimlane(vertex) && !this.graph.swimlaneNesting) {\n      parent = null;\n    } else if (parent == null && this.swimlaneRequired) {\n      return null;\n    } else if (parent != null && pgeo != null) {\n      // Keeps vertex inside parent\n      const state = this.graph.getView().getState(parent);\n      if (state != null) {\n        x -= state.origin.x * scale;\n        y -= state.origin.y * scale;\n        if (this.graph.isConstrainedMoving) {\n          const {\n            width\n          } = geo;\n          const {\n            height\n          } = geo;\n          let tmp = state.x + state.width;\n          if (x + width > tmp) {\n            x -= x + width - tmp;\n          }\n          tmp = state.y + state.height;\n          if (y + height > tmp) {\n            y -= y + height - tmp;\n          }\n        }\n      } else if (pgeo != null) {\n        x -= pgeo.x * scale;\n        y -= pgeo.y * scale;\n      }\n    }\n    geo = geo.clone();\n    geo.x = this.graph.snap(x / scale - this.graph.getView().translate.x - this.graph.gridSize / 2);\n    geo.y = this.graph.snap(y / scale - this.graph.getView().translate.y - this.graph.gridSize / 2);\n    vertex.setGeometry(geo);\n    if (parent == null) {\n      parent = this.graph.getDefaultParent();\n    }\n    this.cycleAttribute(vertex);\n    this.fireEvent(new EventObject(InternalEvent.BEFORE_ADD_VERTEX, {\n      vertex: vertex,\n      parent: parent\n    }));\n    model.beginUpdate();\n    try {\n      vertex = this.graph.addCell(vertex, parent);\n      if (vertex != null) {\n        this.graph.constrainChild(vertex);\n        this.fireEvent(new EventObject(InternalEvent.ADD_VERTEX, {\n          vertex: vertex\n        }));\n      }\n    } finally {\n      model.endUpdate();\n    }\n    if (vertex != null) {\n      this.graph.setSelectionCell(vertex);\n      this.graph.scrollCellToVisible(vertex);\n      this.fireEvent(new EventObject(InternalEvent.AFTER_ADD_VERTEX, {\n        vertex: vertex\n      }));\n    }\n    return vertex;\n  }\n  /**\n   * Removes the editor and all its associated resources. This does not\n   * normally need to be called, it is called automatically when the window\n   * unloads.\n   */\n  destroy() {\n    if (!this.destroyed) {\n      this.destroyed = true;\n      if (this.tasks != null) {\n        this.tasks.destroy();\n      }\n      if (this.outline != null) {\n        this.outline.destroy();\n      }\n      if (this.properties != null) {\n        this.properties.destroy();\n      }\n      if (this.keyHandler != null) {\n        this.keyHandler.destroy();\n      }\n      if (this.rubberband != null) {\n        this.rubberband.onDestroy();\n      }\n      if (this.toolbar != null) {\n        this.toolbar.destroy();\n      }\n      if (this.graph != null) {\n        this.graph.destroy();\n      }\n      this.status = null;\n      this.templates = null;\n    }\n  }\n}\nexport default Editor;","map":{"version":3,"names":["EditorPopupMenu","UndoManager","EditorKeyHandler","EventSource","Translations","Client","CompactTreeLayout","EditorToolbar","StackLayout","EventObject","getOffset","Codec","MaxWindow","error","MaxForm","Outline","Cell","Geometry","ALIGN","FONT","Graph","SwimlaneManager","LayoutManager","RootChange","ValueChange","CellAttributeChange","PrintPreview","mxClipboard","MaxLog","isNode","getViewXml","getXml","load","post","submit","RubberBandHandler","InternalEvent","show","Editor","constructor","config","onInit","lastSnapshot","ignoredChanges","rubberband","isActive","destroyed","askZoomResource","language","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","outline","graphRenderHint","toolbar","status","popupHandler","undoManager","keyHandler","actions","dblClickAction","swimlaneRequired","disableContextMenu","insertFunction","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","linefeed","postParameterName","escapePostData","urlPost","urlImage","horizontalFlow","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeValues","cycleAttributeIndex","cycleAttributeName","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","modified","addActions","document","body","graph","createGraph","createToolbar","configure","swimlaneIndicatorColorAttribute","isModified","setModified","value","addAction","editor","save","preview","open","url","getUrlImage","IS_LOCAL","execute","node","xml","encodeURIComponent","refresh","isEnabled","cut","copy","paste","removeCells","setSelectionCell","groupCells","setSelectionCells","ungroupCells","removeCellsFromParent","undo","redo","zoomIn","zoomOut","zoomActual","fit","cell","showProperties","selectAll","clearSelection","selectVertices","selectEdges","isCellEditable","startEditingAtCell","orderCells","enterGroup","exitGroup","home","selectPreviousCell","selectNextCell","selectParentCell","selectChildCell","foldCells","cells","getChildVertices","toggleCellStyleFlags","BOLD","ITALIC","UNDERLINE","alignCells","LEFT","CENTER","RIGHT","TOP","MIDDLE","BOTTOM","setCellStyles","current","getView","scale","preInput","prompt","get","String","parseFloat","isNaN","setScale","setVisible","isVisible","showTasks","showHelp","showOutline","dec","ownerDocument","decode","resetHistory","resetFirstTime","cookie","Date","getTime","clear","actionname","funct","evt","action","args","apply","e","message","addTemplate","name","template","getTemplate","__dummy","undefined","setTooltips","setPanning","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","popupMenuHandler","getPlugin","factoryMethod","menu","createPopupMenu","connectionHandler","source","target","createEdge","createSwimlaneManager","createLayoutManager","swimlaneMgr","isHorizontal","layoutMgr","self","getLayout","layout","model","getDataModel","getParent","isSwimlane","swimlaneLayout","createSwimlaneLayout","isValidRoot","diagramLayout","createDiagramLayout","setGraphContainer","container","init","addListener","DOUBLE_CLICK","sender","getProperty","consume","listener","edit","undoableEditHappened","UNDO","undoHandler","changes","getSelectionCellsForChanges","REDO","fireEvent","ROOT","DOWN","UP","validateGraph","i","length","change","root","CHANGE","insertHandler","mouseDown","me","isPopupTrigger","getState","getEvent","getCell","mouseMove","mouseUp","addMouseListener","gs","gridSize","isVertexIgnored","setToolbarContainer","setStatusContainer","SAVE","tstamp","toLocaleString","setStatus","OPEN","innerHTML","setTitleContainer","getTitle","treeLayout","horizontal","title","getCurrentRoot","convertValueToString","prefix","getRootTitle","getRoot","border","createGroup","cloneCell","readGraphModel","documentElement","getUrlPost","data","writeGraphModel","postDiagram","req","POST","request","enc","encode","swapStyles","first","second","style","getStylesheet","styles","putCellStyle","getSelectionCell","stopEditing","offset","x","y","properties","getX","getY","bounds","getCellBounds","Math","min","width","hideProperties","createProperties","isPropertiesVisible","getValue","form","id","addText","getId","setAttribute","geo","yField","xField","widthField","heightField","isVertex","getGeometry","height","tmp","getStyle","attrs","attributes","texts","val","push","addTextarea","nodeName","okFunction","beginUpdate","clone","setGeometry","setStyle","isAutoSizeCell","updateCellSize","endUpdate","cancelFunction","addButtons","table","destroy","div","createElement","padding","paddingLeft","w","clientWidth","wnd","setClosable","destroyOnClose","release","createTasks","getSelectionModel","setImage","refreshTasks","content","frame","backgroundColor","h","clientHeight","setMaximizable","setResizable","IS_NS","handler","offsetHeight","RESIZE_END","MAXIMIZE","NORMALIZE","SHOW","create","overflow","position","background","cursor","update","setMode","modename","panningHandler","useLeftButtonForPanning","setConnectable","createMenu","setEdge","relative","getEdgeStyle","consumeCycleAttribute","cycleAttribute","addVertex","parent","vertex","isValidDropTarget","getSwimlaneAt","pgeo","swimlaneNesting","state","origin","isConstrainedMoving","snap","translate","getDefaultParent","BEFORE_ADD_VERTEX","addCell","constrainChild","ADD_VERTEX","scrollCellToVisible","AFTER_ADD_VERTEX","onDestroy"],"sources":["D:/OSPanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/editor/Editor.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2019, JGraph Ltd\nCopyright (c) 2006-2019, draw.io AG\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EditorPopupMenu from './EditorPopupMenu';\nimport UndoManager from '../view/undoable_changes/UndoManager';\nimport EditorKeyHandler from './EditorKeyHandler';\nimport EventSource from '../view/event/EventSource';\nimport Translations from '../util/Translations';\nimport Client from '../Client';\nimport CompactTreeLayout from '../view/layout/CompactTreeLayout';\nimport { EditorToolbar } from './EditorToolbar';\nimport StackLayout from '../view/layout/StackLayout';\nimport EventObject from '../view/event/EventObject';\nimport { getOffset } from '../util/styleUtils';\nimport Codec from '../serialization/Codec';\nimport MaxWindow, { error } from '../gui/MaxWindow';\nimport MaxForm from '../gui/MaxForm';\nimport Outline from '../view/other/Outline';\nimport Cell from '../view/cell/Cell';\nimport Geometry from '../view/geometry/Geometry';\nimport { ALIGN, FONT } from '../util/Constants';\nimport { Graph } from '../view/Graph';\nimport SwimlaneManager from '../view/layout/SwimlaneManager';\nimport LayoutManager from '../view/layout/LayoutManager';\nimport RootChange from '../view/undoable_changes/RootChange';\nimport ValueChange from '../view/undoable_changes/ValueChange';\nimport CellAttributeChange from '../view/undoable_changes/CellAttributeChange';\nimport PrintPreview from '../view/other/PrintPreview';\nimport mxClipboard from '../util/Clipboard';\nimport MaxLog from '../gui/MaxLog';\nimport { isNode } from '../util/domUtils';\nimport { getViewXml, getXml } from '../util/xmlUtils';\nimport { load, post, submit } from '../util/MaxXmlRequest';\nimport RubberBandHandler from '../view/handler/RubberBandHandler';\nimport InternalEvent from '../view/event/InternalEvent';\nimport { show } from '../util/printUtils';\n/**\n * Installs the required language resources at class\n * loading time.\n */\n/*\nif (mxLoadResources) {\n  mxResources.add(`${Client.basePath}/resources/editor`);\n} else {\n  Client.defaultBundles.push(`${Client.basePath}/resources/editor`);\n}\n */\n/**\n * Extends {@link EventSource} to implement an application wrapper for a graph that\n * adds {@link actions}, I/O using {@link Codec}, auto-layout using {@link LayoutManager},\n * command history using {@link undoManager}, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds {@link templates}\n * to be used as cells in toolbars, auto-validation using the {@link validation}\n * flag, attribute cycling using {@link cycleAttributeValues}, higher-level events\n * such as {@link root}, and backend integration using <urlPost> and {@link urlImage}.\n *\n * ### Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <Editor> as the first, and an optional <Cell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * ### Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * ```javascript\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * ```\n *\n * For reading a diagram from a remote location, use the {@link open} method.\n *\n * To save diagrams in XML on a server, you can set the {@link urlPost} variable.\n * This variable will be used in {@link getUrlPost} to construct a URL for the post\n * request that is issued in the {@link save} method. The post request contains the\n * XML representation of the diagram as returned by {@link writeGraphModel} in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * ### Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * ### Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the {@link escapePostData} flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * ```javascript\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * ```\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * ### Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * ```javascript\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * ```\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * ### Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in {@link Editor.templates} and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * ```javascript\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * ```\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * ```javascript\n * <Task label=\"Task\" description=\"\"/>\n * ```\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * {@link Codec} will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of {@link createProperties}, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the {@link CellAttributeChange} action in the model. The dialog can be replaced\n * by overriding the {@link createProperties} hook or by replacing the showProperties\n * action in {@link action}. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * {@link Editor.dblClickAction} to showProperties as follows:\n *\n * ```javascript\n * editor.dblClickAction = 'showProperties';\n * ```\n *\n * ### Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * ```javascript\n * <Editor>\n *   <EditorPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * ```\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the {@link DefaultPopupMenuCodec}, the format of the\n * configuration is explained in {@link EditorPopupMenu.decode}.\n *\n * The toolbar is defined in the EditorToolbar section. Items can be added\n * and removed in this section.\n *\n * ```javascript\n * <Editor>\n *   <EditorToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * ```\n *\n * The format of the configuration is described in\n * {@link DefaultToolbarCodec.decode}.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in {@link Codec}: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the {@link Cell.id} of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the {@link mxGraphModel.getCell} function. If there is a collision, a new\n * Id will be created for the cell using {@link mxGraphModel.createId}. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See {@link EditorCodec}, {@link DefaultToolbarCodec} and {@link DefaultPopupMenuCodec}\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * ```javascript\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * ```\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * ```javascript\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * ```\n *\n * #### Translations:\n *\n * resources/editor - Language resources for Editor\n *\n * #### Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * #### Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * {@link resetFirstTime} to reset this cookie. This cookie\n * only exists if {@link onInit} is implemented.\n *\n * #### Event: mxEvent.OPEN\n *\n * Fires after a file was opened in {@link open}. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * {@link filename}.\n *\n * #### Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in {@link save}. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * #### Event: mxEvent.POST\n *\n * Fires if a successful response was received in {@link postDiagram}. The\n * <code>request</code> property contains the <MaxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * #### Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * #### Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in {@link addVertex}. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * #### Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * #### Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * ### Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * ```javascript\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * ```\n *\n * ### Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * ### Constructor: Editor\n *\n * Constructs a new editor. This function invokes the {@link onInit} callback\n * upon completion.\n *\n * ```javascript\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new Editor(config);\n * ```\n *\n * @class Editor\n * @extends EventSource\n */\nexport class Editor extends EventSource {\n    constructor(config) {\n        super();\n        this.onInit = null;\n        this.lastSnapshot = null;\n        this.ignoredChanges = null;\n        this.rubberband = null;\n        this.isActive = null;\n        this.destroyed = false;\n        /**\n         * Specifies the resource key for the zoom dialog. If the resource for this\n         * key does not exist then the value is used as the error message. Default is 'askZoom'.\n         * @default 'askZoom'\n         */\n        // askZoomResource: 'askZoom' | '';\n        this.askZoomResource = Client.language !== 'none' ? 'askZoom' : '';\n        /**\n         * Group: Controls and Handlers\n         */\n        /**\n         * Specifies the resource key for the last saved info. If the resource for\n         * this key does not exist then the value is used as the error message. Default is 'lastSaved'.\n         * @default 'lastSaved'.\n         */\n        this.lastSavedResource = Client.language !== 'none' ? 'lastSaved' : '';\n        /**\n         * Specifies the resource key for the current file info. If the resource for\n         * this key does not exist then the value is used as the error message. Default is 'currentFile'.\n         * @default 'currentFile'\n         */\n        this.currentFileResource = Client.language !== 'none' ? 'currentFile' : '';\n        /**\n         * Specifies the resource key for the properties window title. If the\n         * resource for this key does not exist then the value is used as the\n         * error message. Default is 'properties'.\n         * @default 'properties'\n         */\n        this.propertiesResource = Client.language !== 'none' ? 'properties' : '';\n        /**\n         * Specifies the resource key for the tasks window title. If the\n         * resource for this key does not exist then the value is used as the\n         * error message. Default is 'tasks'.\n         * @default 'tasks'\n         */\n        this.tasksResource = Client.language !== 'none' ? 'tasks' : '';\n        /**\n         * Specifies the resource key for the help window title. If the\n         * resource for this key does not exist then the value is used as the\n         * error message. Default is 'help'.\n         * @default 'help'\n         */\n        this.helpResource = Client.language !== 'none' ? 'help' : '';\n        /**\n         * Specifies the resource key for the outline window title. If the\n         * resource for this key does not exist then the value is used as the\n         * error message. Default is 'outline'.\n         * @default 'outline'\n         */\n        this.outlineResource = Client.language !== 'none' ? 'outline' : '';\n        /**\n         * Reference to the {@link MaxWindow} that contains the outline. The {@link outline}\n         * is stored in outline.outline.\n         */\n        this.outline = null;\n        /**\n         * Holds the render hint used for creating the\n         * graph in {@link setGraphContainer}. See {@link graph}. Default is null.\n         * @default null\n         */\n        this.graphRenderHint = null;\n        /**\n         * Holds a {@link EditorToolbar} for displaying the toolbar. The\n         * toolbar is created in {@link setToolbarContainer}.\n         */\n        this.toolbar = null;\n        /**\n         * DOM container that holds the statusbar.\n         * Use {@link setStatusContainer} to set this value.\n         */\n        this.status = null;\n        /**\n         * Holds a {@link EditorPopupMenu} for displaying popupmenus.\n         */\n        this.popupHandler = null;\n        /**\n         * Holds an {@link UndoManager} for the command history.\n         */\n        this.undoManager = null;\n        /**\n         * Holds a {@link EditorKeyHandler} for handling keyboard events.\n         * The handler is created in {@link setGraphContainer}.\n         */\n        this.keyHandler = null;\n        /**\n         * Maps from actionnames to actions, which are functions taking\n         * the editor and the cell as arguments. Use {@link addAction}\n         * to add or replace an action and {@link execute} to execute an action\n         * by name, passing the cell to be operated upon as the second\n         * argument.\n         */\n        this.actions = {};\n        /**\n         * Group: Actions and Options\n         */\n        /**\n         * Specifies the name of the action to be executed\n         * when a cell is double clicked. Default is 'edit'.\n         *\n         * To handle a singleclick, use the following code.\n         *\n         * @example\n         * ```javascript\n         * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n         * {\n         *   var e = evt.getProperty('event');\n         *   var cell = evt.getProperty('cell');\n         *\n         *   if (cell != null && !e.isConsumed())\n         *   {\n         *     // Do something useful with cell...\n         *     e.consume();\n         *   }\n         * });\n         * ```\n         * @default 'edit'\n         */\n        this.dblClickAction = 'edit';\n        /**\n         * Specifies if new cells must be inserted\n         * into an existing swimlane. Otherwise, cells\n         * that are not swimlanes can be inserted as\n         * top-level cells. Default is false.\n         * @default false\n         */\n        this.swimlaneRequired = false;\n        /**\n         * Specifies if the context menu should be disabled in the graph container.\n         * Default is true.\n         * @default true\n         */\n        this.disableContextMenu = true;\n        /**\n         * Specifies the function to be used for inserting new\n         * cells into the graph. This is assigned from the\n         * {@link EditorToolbar} if a vertex-tool is clicked.\n         */\n        this.insertFunction = null;\n        /**\n         * Group: Templates\n         */\n        /**\n         * Specifies if a new cell should be inserted on a single\n         * click even using {@link insertFunction} if there is a cell\n         * under the mousepointer, otherwise the cell under the\n         * mousepointer is selected. Default is false.\n         * @default false\n         */\n        this.forcedInserting = false;\n        /**\n         * Maps from names to protoype cells to be used\n         * in the toolbar for inserting new cells into\n         * the diagram.\n         */\n        this.templates = null;\n        /**\n         * Prototype edge cell that is used for creating new edges.\n         */\n        this.defaultEdge = null;\n        /**\n         * Specifies the edge style to be returned in {@link getEdgeStyle}. Default is null.\n         * @default null\n         */\n        this.defaultEdgeStyle = null;\n        /**\n         * Prototype group cell that is used for creating new groups.\n         */\n        this.defaultGroup = null;\n        /**\n         * Default size for the border of new groups. If null,\n         * then then {@link Graph#gridSize} is used. Default is null.\n         * @default null\n         */\n        this.groupBorderSize = null;\n        /**\n         * Contains the URL of the last opened file as a string. Default is null.\n         * @default null\n         */\n        this.filename = null;\n        /**\n         * Group: Backend Integration\n         */\n        /**\n         * Character to be used for encoding linefeeds in {@link save}. Default is '&#xa;'.\n         * @default '&#xa;'\n         */\n        this.linefeed = '&#xa;';\n        /**\n         * Specifies if the name of the post parameter that contains the diagram\n         * data in a post request to the server. Default is 'xml'.\n         * @default 'xml'\n         */\n        this.postParameterName = 'xml';\n        /**\n         * Specifies if the data in the post request for saving a diagram\n         * should be converted using encodeURIComponent. Default is true.\n         * @default true\n         */\n        this.escapePostData = true;\n        /**\n         * Specifies the URL to be used for posting the diagram\n         * to a backend in {@link save}.\n         * @default null\n         */\n        this.urlPost = null;\n        /**\n         * Specifies the URL to be used for creating a bitmap of\n         * the graph in the image action.\n         * @default null\n         */\n        this.urlImage = null;\n        /**\n         * Specifies the direction of the flow\n         * in the diagram. This is used in the\n         * layout algorithms. Default is false,\n         * ie. vertical flow.\n         * @default false\n         */\n        this.horizontalFlow = false;\n        /**\n         * Group: Autolayout\n         */\n        /**\n         * Specifies if the top-level elements in the\n         * diagram should be layed out using a vertical\n         * or horizontal stack depending on the setting\n         * of {@link horizontalFlow}. The spacing between the\n         * swimlanes is specified by {@link swimlaneSpacing}.\n         * Default is false.\n         *\n         * If the top-level elements are swimlanes, then\n         * the intra-swimlane layout is activated by\n         * the {@link layoutSwimlanes} switch.\n         * @default false\n         */\n        this.layoutDiagram = false;\n        /**\n         * Specifies the spacing between swimlanes if\n         * automatic layout is turned on in\n         * {@link layoutDiagram}. Default is 0.\n         * @default 0\n         */\n        this.swimlaneSpacing = 0;\n        /**\n         * Specifies if the swimlanes should be kept at the same\n         * width or height depending on the setting of\n         * {@link horizontalFlow}. Default is false.\n         *\n         * For horizontal flows, all swimlanes\n         * have the same height and for vertical flows, all swimlanes\n         * have the same width. Furthermore, the swimlanes are\n         * automatically \"stacked\" if {@link layoutDiagram} is true.\n         * @default false\n         */\n        this.maintainSwimlanes = false;\n        /**\n         * Specifies if the children of swimlanes should\n         * be layed out, either vertically or horizontally\n         * depending on {@link horizontalFlow}. Default is false.\n         * @default false\n         */\n        this.layoutSwimlanes = false;\n        /**\n         * Specifies the attribute values to be cycled when inserting new swimlanes.\n         * Default is an empty array.\n         * @default any[]\n         */\n        this.cycleAttributeValues = [];\n        /**\n         * Group: Attribute Cycling\n         */\n        /**\n         * Index of the last consumed attribute index. If a new\n         * swimlane is inserted, then the {@link cycleAttributeValues}\n         * at this index will be used as the value for\n         * {@link cycleAttributeName}. Default is 0.\n         * @default 0\n         */\n        this.cycleAttributeIndex = 0;\n        /**\n         * Name of the attribute to be assigned a {@link cycleAttributeValues}\n         * when inserting new swimlanes. Default is 'fillColor'.\n         * @default 'fillColor'\n         */\n        // cycleAttributeName: 'fillColor';\n        this.cycleAttributeName = 'fillColor';\n        /**\n         * Holds the [@link MaxWindow} created in {@link showTasks}.\n         */\n        this.tasks = null;\n        /**\n         * Group: Windows\n         */\n        /**\n         * Icon for the tasks window.\n         */\n        this.tasksWindowImage = null;\n        /**\n         * Specifies the top coordinate of the tasks window in pixels. Default is 20.\n         * @default 20\n         */\n        this.tasksTop = 20;\n        /**\n         * Holds the {@link MaxWindow} created in {@link showHelp}\n         */\n        this.help = null;\n        /**\n         * Icon for the help window.\n         */\n        this.helpWindowImage = null;\n        /**\n         * Specifies the URL to be used for the contents of the\n         * Online Help window. This is usually specified in the\n         * resources file under urlHelp for language-specific\n         * online help support.\n         */\n        this.urlHelp = null;\n        /**\n         * Specifies the width of the help window in pixels. Default is 300.\n         * @default 300\n         */\n        this.helpWidth = 300;\n        /**\n         * Specifies the height of the help window in pixels. Default is 260.\n         * @default 260\n         */\n        // helpHeight: number;\n        this.helpHeight = 260;\n        /**\n         * Specifies the width of the properties window in pixels. Default is 240.\n         * @default 240\n         */\n        this.propertiesWidth = 240;\n        /**\n         * Specifies the height of the properties window in pixels.\n         * If no height is specified then the window will be automatically\n         * sized to fit its contents. Default is null.\n         * @default null\n         */\n        this.propertiesHeight = null;\n        /**\n         * Specifies if the properties dialog should be automatically\n         * moved near the cell it is displayed for, otherwise the\n         * dialog is not moved. This value is only taken into\n         * account if the dialog is already visible. Default is false.\n         * @default false\n         */\n        this.movePropertiesDialog = false;\n        /**\n         * Specifies if <{@link xGraph.validateGraph} should automatically be invoked after\n         * each change. Default is false.\n         * @default false\n         */\n        this.validating = false;\n        /**\n         * True if the graph has been modified since it was last saved.\n         */\n        this.modified = false;\n        this.actions = {};\n        this.addActions();\n        // Executes the following only if a document has been instanciated.\n        // That is, don't execute when the editorcodec is setup.\n        if (document.body != null) {\n            // Defines instance fields\n            this.cycleAttributeValues = [];\n            this.popupHandler = new EditorPopupMenu();\n            this.undoManager = new UndoManager();\n            // Creates the graph and toolbar without the containers\n            this.graph = this.createGraph();\n            this.toolbar = this.createToolbar();\n            // Creates the global keyhandler (requires graph instance)\n            this.keyHandler = new EditorKeyHandler(this);\n            // Configures the editor using the URI\n            // which was passed to the ctor\n            this.configure(config);\n            // Assigns the swimlaneIndicatorColorAttribute on the graph\n            this.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n            // Checks if the <onInit> hook has been set\n            if (this.onInit != null) {\n                // Invokes the <onInit> hook\n                this.onInit();\n            }\n        }\n    }\n    /**\n     * Returns {@link modified}.\n     */\n    isModified() {\n        return this.modified;\n    }\n    /**\n     * Sets {@link modified} to the specified boolean value.\n     * @param value\n     */\n    setModified(value) {\n        this.modified = value;\n    }\n    /**\n     * Adds the built-in actions to the editor instance.\n     * save - Saves the graph using <urlPost>.\n     * print - Shows the graph in a new print preview window.\n     * show - Shows the graph in a new window.\n     * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n     * refresh - Refreshes the graph's display.\n     * cut - Copies the current selection into the clipboard\n     * and removes it from the graph.\n     * copy - Copies the current selection into the clipboard.\n     * paste - Pastes the clipboard into the graph.\n     * delete - Removes the current selection from the graph.\n     * group - Puts the current selection into a new group.\n     * ungroup - Removes the selected groups and selects the children.\n     * undo - Undoes the last change on the graph model.\n     * redo - Redoes the last change on the graph model.\n     * zoom - Sets the zoom via a dialog.\n     * zoomIn - Zooms into the graph.\n     * zoomOut - Zooms out of the graph\n     * actualSize - Resets the scale and translation on the graph.\n     * fit - Changes the scale so that the graph fits into the window.\n     * showProperties - Shows the properties dialog.\n     * selectAll - Selects all cells.\n     * selectNone - Clears the selection.\n     * selectVertices - Selects all vertices.\n     * selectEdges = Selects all edges.\n     * edit - Starts editing the current selection cell.\n     * enterGroup - Drills down into the current selection cell.\n     * exitGroup - Moves up in the drilling hierachy\n     * home - Moves to the topmost parent in the drilling hierarchy\n     * selectPrevious - Selects the previous cell.\n     * selectNext - Selects the next cell.\n     * selectParent - Selects the parent of the selection cell.\n     * selectChild - Selects the first child of the selection cell.\n     * collapse - Collapses the currently selected cells.\n     * expand - Expands the currently selected cells.\n     * bold - Toggle bold text style.\n     * italic - Toggle italic text style.\n     * underline - Toggle underline text style.\n     * alignCellsLeft - Aligns the selection cells at the left.\n     * alignCellsCenter - Aligns the selection cells in the center.\n     * alignCellsRight - Aligns the selection cells at the right.\n     * alignCellsTop - Aligns the selection cells at the top.\n     * alignCellsMiddle - Aligns the selection cells in the middle.\n     * alignCellsBottom - Aligns the selection cells at the bottom.\n     * alignFontLeft - Sets the horizontal text alignment to left.\n     * alignFontCenter - Sets the horizontal text alignment to center.\n     * alignFontRight - Sets the horizontal text alignment to right.\n     * alignFontTop - Sets the vertical text alignment to top.\n     * alignFontMiddle - Sets the vertical text alignment to middle.\n     * alignFontBottom - Sets the vertical text alignment to bottom.\n     * toggleTasks - Shows or hides the tasks window.\n     * toggleHelp - Shows or hides the help window.\n     * toggleOutline - Shows or hides the outline window.\n     * toggleConsole - Shows or hides the console window.\n     */\n    addActions() {\n        this.addAction('save', (editor) => {\n            editor.save();\n        });\n        this.addAction('print', (editor) => {\n            const preview = new PrintPreview(editor.graph, 1);\n            preview.open();\n        });\n        this.addAction('show', (editor) => {\n            show(editor.graph, null, 10, 10);\n        });\n        this.addAction('exportImage', (editor) => {\n            const url = editor.getUrlImage();\n            if (url == null || Client.IS_LOCAL) {\n                editor.execute('show');\n            }\n            else {\n                const node = getViewXml(editor.graph, 1);\n                const xml = getXml(node, '\\n');\n                submit(url, `${editor.postParameterName}=${encodeURIComponent(xml)}`, document, '_blank');\n            }\n        });\n        this.addAction('refresh', (editor) => {\n            editor.graph.refresh();\n        });\n        this.addAction('cut', (editor) => {\n            if (editor.graph.isEnabled()) {\n                mxClipboard.cut(editor.graph);\n            }\n        });\n        this.addAction('copy', (editor) => {\n            if (editor.graph.isEnabled()) {\n                mxClipboard.copy(editor.graph);\n            }\n        });\n        this.addAction('paste', (editor) => {\n            if (editor.graph.isEnabled()) {\n                mxClipboard.paste(editor.graph);\n            }\n        });\n        this.addAction('delete', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.removeCells();\n            }\n        });\n        this.addAction('group', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setSelectionCell(editor.groupCells());\n            }\n        });\n        this.addAction('ungroup', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setSelectionCells(editor.graph.ungroupCells());\n            }\n        });\n        this.addAction('removeFromParent', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.removeCellsFromParent();\n            }\n        });\n        this.addAction('undo', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.undo();\n            }\n        });\n        this.addAction('redo', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.redo();\n            }\n        });\n        this.addAction('zoomIn', (editor) => {\n            editor.graph.zoomIn();\n        });\n        this.addAction('zoomOut', (editor) => {\n            editor.graph.zoomOut();\n        });\n        this.addAction('actualSize', (editor) => {\n            editor.graph.zoomActual();\n        });\n        this.addAction('fit', (editor) => {\n            editor.graph.fit();\n        });\n        this.addAction('showProperties', (editor, cell) => {\n            editor.showProperties(cell);\n        });\n        this.addAction('selectAll', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectAll();\n            }\n        });\n        this.addAction('selectNone', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.clearSelection();\n            }\n        });\n        this.addAction('selectVertices', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectVertices();\n            }\n        });\n        this.addAction('selectEdges', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectEdges();\n            }\n        });\n        this.addAction('edit', (editor, cell) => {\n            if (editor.graph.isEnabled() && editor.graph.isCellEditable(cell)) {\n                editor.graph.startEditingAtCell(cell);\n            }\n        });\n        this.addAction('toBack', (editor, cell) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.orderCells(true);\n            }\n        });\n        this.addAction('toFront', (editor, cell) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.orderCells(false);\n            }\n        });\n        this.addAction('enterGroup', (editor, cell) => {\n            editor.graph.enterGroup(cell);\n        });\n        this.addAction('exitGroup', (editor) => {\n            editor.graph.exitGroup();\n        });\n        this.addAction('home', (editor) => {\n            editor.graph.home();\n        });\n        this.addAction('selectPrevious', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectPreviousCell();\n            }\n        });\n        this.addAction('selectNext', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectNextCell();\n            }\n        });\n        this.addAction('selectParent', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectParentCell();\n            }\n        });\n        this.addAction('selectChild', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.selectChildCell();\n            }\n        });\n        this.addAction('collapse', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.foldCells(true);\n            }\n        });\n        this.addAction('collapseAll', (editor) => {\n            if (editor.graph.isEnabled()) {\n                const cells = editor.graph.getChildVertices();\n                editor.graph.foldCells(true, false, cells);\n            }\n        });\n        this.addAction('expand', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.foldCells(false);\n            }\n        });\n        this.addAction('expandAll', (editor) => {\n            if (editor.graph.isEnabled()) {\n                const cells = editor.graph.getChildVertices();\n                editor.graph.foldCells(false, false, cells);\n            }\n        });\n        this.addAction('bold', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.toggleCellStyleFlags('fontStyle', FONT.BOLD);\n            }\n        });\n        this.addAction('italic', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.toggleCellStyleFlags('fontStyle', FONT.ITALIC);\n            }\n        });\n        this.addAction('underline', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.toggleCellStyleFlags('fontStyle', FONT.UNDERLINE);\n            }\n        });\n        this.addAction('alignCellsLeft', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells(ALIGN.LEFT);\n            }\n        });\n        this.addAction('alignCellsCenter', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells(ALIGN.CENTER);\n            }\n        });\n        this.addAction('alignCellsRight', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells(ALIGN.RIGHT);\n            }\n        });\n        this.addAction('alignCellsTop', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells(ALIGN.TOP);\n            }\n        });\n        this.addAction('alignCellsMiddle', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells(ALIGN.MIDDLE);\n            }\n        });\n        this.addAction('alignCellsBottom', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.alignCells(ALIGN.BOTTOM);\n            }\n        });\n        this.addAction('alignFontLeft', (editor) => {\n            editor.graph.setCellStyles('align', ALIGN.LEFT);\n        });\n        this.addAction('alignFontCenter', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('align', ALIGN.CENTER);\n            }\n        });\n        this.addAction('alignFontRight', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('align', ALIGN.RIGHT);\n            }\n        });\n        this.addAction('alignFontTop', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('verticalAlign', ALIGN.TOP);\n            }\n        });\n        this.addAction('alignFontMiddle', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('verticalAlign', ALIGN.MIDDLE);\n            }\n        });\n        this.addAction('alignFontBottom', (editor) => {\n            if (editor.graph.isEnabled()) {\n                editor.graph.setCellStyles('verticalAlign', ALIGN.BOTTOM);\n            }\n        });\n        this.addAction('zoom', (editor) => {\n            const current = editor.graph.getView().scale * 100;\n            const preInput = prompt(Translations.get(editor.askZoomResource) || editor.askZoomResource, String(current));\n            if (preInput) {\n                const scale = parseFloat(preInput) / 100;\n                if (!isNaN(scale)) {\n                    editor.graph.getView().setScale(scale);\n                }\n            }\n        });\n        this.addAction('toggleTasks', (editor) => {\n            if (editor.tasks != null) {\n                editor.tasks.setVisible(!editor.tasks.isVisible());\n            }\n            else {\n                editor.showTasks();\n            }\n        });\n        this.addAction('toggleHelp', (editor) => {\n            if (editor.help != null) {\n                editor.help.setVisible(!editor.help.isVisible());\n            }\n            else {\n                editor.showHelp();\n            }\n        });\n        this.addAction('toggleOutline', (editor) => {\n            if (editor.outline == null) {\n                editor.showOutline();\n            }\n            else {\n                editor.outline.setVisible(!editor.outline.isVisible());\n            }\n        });\n        this.addAction('toggleConsole', (editor) => {\n            MaxLog.setVisible(!MaxLog.isVisible());\n        });\n    }\n    /**\n     * Configures the editor using the specified node. To load the\n     * configuration from a given URL the following code can be used to obtain\n     * the XML node.\n     *\n     * @example\n     * ```javascript\n     * var node = mxUtils.load(url).getDocumentElement();\n     * ```\n     * @param node XML node that contains the configuration.\n     */\n    configure(node) {\n        if (node != null) {\n            // Creates a decoder for the XML data\n            // and uses it to configure the editor\n            const dec = new Codec(node.ownerDocument);\n            dec.decode(node, this);\n            // Resets the counters, modified state and\n            // command history\n            this.resetHistory();\n        }\n    }\n    /**\n     * Resets the cookie that is used to remember if the editor has already been used.\n     */\n    resetFirstTime() {\n        document.cookie = 'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n    }\n    /**\n     * Resets the command history, modified state and counters.\n     */\n    resetHistory() {\n        this.lastSnapshot = new Date().getTime();\n        this.undoManager.clear();\n        this.ignoredChanges = 0;\n        this.setModified(false);\n    }\n    /**\n     * Binds the specified actionname to the specified function.\n     *\n     * @example\n     * ```javascript\n     * editor.addAction('test', function(editor: Editor, cell: Cell)\n     * {\n     * \t\tmxUtils.alert(\"test \"+cell);\n     * });\n     * ```\n     * @param actionname String that specifies the name of the action to be added.\n     * @param funct Function that implements the new action. The first argument\n     * of the function is the editor it is used with,\n     * the second argument is the cell it operates upon.\n     */\n    addAction(actionname, funct) {\n        this.actions[actionname] = funct;\n    }\n    /**\n     * Executes the function with the given name in {@link actions} passing the\n     * editor instance and given cell as the first and second argument. All\n     * additional arguments are passed to the action as well. This method\n     * contains a try-catch block and displays an error message if an action\n     * causes an exception. The exception is re-thrown after the error\n     * message was displayed.\n     *\n     * @example\n     * ```javascript\n     * editor.execute(\"showProperties\", cell);\n     * ```\n     * @param actionname\n     * @param cell\n     * @param evt\n     */\n    execute(actionname, cell = null, evt = null) {\n        const action = this.actions[actionname];\n        if (action != null) {\n            try {\n                // Creates the array of arguments by replacing the actionname\n                // with the editor instance in the args of this function\n                const args = [this, cell, evt];\n                // Invokes the function on the editor using the args\n                action.apply(this, args);\n            }\n            catch (e) {\n                error(`Cannot execute ${actionname}: ${e.message}`, 280, true);\n                throw e;\n            }\n        }\n        else {\n            error(`Cannot find action ${actionname}`, 280, true);\n        }\n    }\n    /**\n     * Adds the specified template under the given name in {@link templates}.\n     * @param name\n     * @param template\n     */\n    addTemplate(name, template) {\n        this.templates[name] = template;\n    }\n    /**\n     * Returns the template for the given name.\n     * @param name\n     */\n    getTemplate(name) {\n        return this.templates[name];\n    }\n    /**\n     * Creates the {@link graph} for the editor. The graph is created with no\n     * container and is initialized from {@link setGraphContainer}.\n     * @returns graph instance\n     */\n    createGraph() {\n        const __dummy = undefined;\n        const graph = new Graph(__dummy);\n        // Enables rubberband, tooltips, panning\n        graph.setTooltips(true);\n        graph.setPanning(true);\n        // Overrides the dblclick method on the graph to\n        // invoke the dblClickAction for a cell and reset\n        // the selection tool in the toolbar\n        this.installDblClickHandler(graph);\n        // Installs the command history\n        this.installUndoHandler(graph);\n        // Installs the handlers for the root event\n        this.installDrillHandler(graph);\n        // Installs the handler for validation\n        this.installChangeHandler(graph);\n        // Installs the handler for calling the\n        // insert function and consume the\n        // event if an insert function is defined\n        this.installInsertHandler(graph);\n        // Redirects the function for creating the popupmenu items\n        const popupMenuHandler = graph.getPlugin('PopupMenuHandler');\n        if (popupMenuHandler) {\n            popupMenuHandler.factoryMethod = (menu, cell, evt) => {\n                return this.createPopupMenu(menu, cell, evt);\n            };\n        }\n        // Redirects the function for creating new connections in the diagram\n        const connectionHandler = graph.getPlugin('ConnectionHandler');\n        if (connectionHandler) {\n            connectionHandler.factoryMethod = (source, target) => {\n                return this.createEdge(source, target);\n            };\n        }\n        // Maintains swimlanes and installs autolayout\n        this.createSwimlaneManager(graph);\n        this.createLayoutManager(graph);\n        return graph;\n    }\n    /**\n     * Sets the graph's container using [@link mxGraph.init}.\n     * @param graph\n     * @returns SwimlaneManager instance\n     */\n    createSwimlaneManager(graph) {\n        const swimlaneMgr = new SwimlaneManager(graph, false);\n        swimlaneMgr.isHorizontal = () => {\n            return this.horizontalFlow;\n        };\n        swimlaneMgr.isEnabled = () => {\n            return this.maintainSwimlanes;\n        };\n        return swimlaneMgr;\n    }\n    /**\n     * Creates a layout manager for the swimlane and diagram layouts, that\n     * is, the locally defined inter and intraswimlane layouts.\n     * @param graph\n     * @returns LayoutManager instance\n     */\n    createLayoutManager(graph) {\n        const layoutMgr = new LayoutManager(graph);\n        const self = this; // closure\n        layoutMgr.getLayout = (cell) => {\n            let layout = null;\n            const model = self.graph.getDataModel();\n            if (cell.getParent() != null) {\n                // Executes the swimlane layout if a child of\n                // a swimlane has been changed. The layout is\n                // lazy created in createSwimlaneLayout.\n                if (self.layoutSwimlanes && graph.isSwimlane(cell)) {\n                    if (self.swimlaneLayout == null) {\n                        self.swimlaneLayout = self.createSwimlaneLayout();\n                    }\n                    layout = self.swimlaneLayout;\n                }\n                // Executes the diagram layout if the modified\n                // cell is a top-level cell. The layout is\n                // lazy created in createDiagramLayout.\n                else if (self.layoutDiagram &&\n                    (graph.isValidRoot(cell) || cell.getParent().getParent() == null)) {\n                    if (self.diagramLayout == null) {\n                        self.diagramLayout = self.createDiagramLayout();\n                    }\n                    layout = self.diagramLayout;\n                }\n            }\n            return layout;\n        };\n        return layoutMgr;\n    }\n    /**\n     * Sets the graph's container using {@link graph.init}.\n     * @param container\n     */\n    setGraphContainer(container) {\n        if (this.graph.container == null) {\n            // Creates the graph instance inside the given container and render hint\n            // this.graph = new mxGraph(container, null, this.graphRenderHint);\n            // @ts-ignore  TODO: FIXME!! ==============================================================================================\n            this.graph.init(container);\n            // Install rubberband selection as the last\n            // action handler in the chain\n            this.rubberband = new RubberBandHandler(this.graph);\n            // Disables the context menu\n            if (this.disableContextMenu) {\n                InternalEvent.disableContextMenu(container);\n            }\n        }\n    }\n    /**\n     * Overrides {@link graph.dblClick} to invoke {@link dblClickAction}\n     * on a cell and reset the selection tool in the toolbar.\n     * @param graph\n     */\n    installDblClickHandler(graph) {\n        // Installs a listener for double click events\n        graph.addListener(InternalEvent.DOUBLE_CLICK, (sender, evt) => {\n            const cell = evt.getProperty('cell');\n            if (cell != null && graph.isEnabled() && this.dblClickAction != null) {\n                this.execute(this.dblClickAction, cell);\n                evt.consume();\n            }\n        });\n    }\n    /**\n     * Adds the {@link undoManager} to the graph model and the view.\n     * @param graph\n     */\n    installUndoHandler(graph) {\n        const listener = (sender, evt) => {\n            const edit = evt.getProperty('edit');\n            this.undoManager.undoableEditHappened(edit);\n        };\n        graph.getDataModel().addListener(InternalEvent.UNDO, listener);\n        graph.getView().addListener(InternalEvent.UNDO, listener);\n        // Keeps the selection state in sync\n        const undoHandler = (sender, evt) => {\n            const { changes } = evt.getProperty('edit');\n            graph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n        };\n        this.undoManager.addListener(InternalEvent.UNDO, undoHandler);\n        this.undoManager.addListener(InternalEvent.REDO, undoHandler);\n    }\n    /**\n     * Installs listeners for dispatching the {@link root} event.\n     * @param graph\n     */\n    installDrillHandler(graph) {\n        const listener = (sender) => {\n            this.fireEvent(new EventObject(InternalEvent.ROOT));\n        };\n        graph.getView().addListener(InternalEvent.DOWN, listener);\n        graph.getView().addListener(InternalEvent.UP, listener);\n    }\n    /**\n     * Installs the listeners required to automatically validate\n     * the graph. On each change of the root, this implementation\n     * fires a {@link root} event.\n     * @param graph\n     */\n    installChangeHandler(graph) {\n        const listener = (sender, evt) => {\n            // Updates the modified state\n            this.setModified(true);\n            // Automatically validates the graph\n            // after each change\n            if (this.validating == true) {\n                graph.validateGraph();\n            }\n            // Checks if the root has been changed\n            const { changes } = evt.getProperty('edit');\n            for (let i = 0; i < changes.length; i += 1) {\n                const change = changes[i];\n                if (change instanceof RootChange ||\n                    (change instanceof ValueChange && change.cell === this.graph.model.root) ||\n                    (change instanceof CellAttributeChange && change.cell === this.graph.model.root)) {\n                    this.fireEvent(new EventObject(InternalEvent.ROOT));\n                    break;\n                }\n            }\n        };\n        graph.getDataModel().addListener(InternalEvent.CHANGE, listener);\n    }\n    /**\n     * Installs the handler for invoking {@link insertFunction} if one is defined.\n     * @param graph\n     */\n    installInsertHandler(graph) {\n        const self = this; // closure\n        const insertHandler = {\n            mouseDown: (sender, me) => {\n                if (self.insertFunction != null &&\n                    !me.isPopupTrigger() &&\n                    (self.forcedInserting || me.getState() == null)) {\n                    self.graph.clearSelection();\n                    self.insertFunction(me.getEvent(), me.getCell());\n                    // Consumes the rest of the events\n                    // for this gesture (down, move, up)\n                    this.isActive = true;\n                    me.consume();\n                }\n            },\n            mouseMove: (sender, me) => {\n                if (this.isActive) {\n                    me.consume();\n                }\n            },\n            mouseUp: (sender, me) => {\n                if (this.isActive) {\n                    this.isActive = false;\n                    me.consume();\n                }\n            },\n        };\n        graph.addMouseListener(insertHandler);\n    }\n    /**\n     * Creates the layout instance used to layout the\n     * swimlanes in the diagram.\n     * @returns StackLayout instance\n     */\n    createDiagramLayout() {\n        const gs = this.graph.gridSize;\n        const layout = new StackLayout(this.graph, !this.horizontalFlow, this.swimlaneSpacing, 2 * gs, 2 * gs);\n        // Overrides isIgnored to only take into account swimlanes\n        layout.isVertexIgnored = (cell) => {\n            return !layout.graph.isSwimlane(cell);\n        };\n        return layout;\n    }\n    /**\n     * Creates the layout instance used to layout the\n     * children of each swimlane.\n     * @returns CompactTreeLayout instance\n     */\n    createSwimlaneLayout() {\n        return new CompactTreeLayout(this.graph, this.horizontalFlow);\n    }\n    /**\n     * Creates the {@link toolbar} with no container.\n     * @returns EditorToolbar instance\n     */\n    createToolbar() {\n        return new EditorToolbar(null, this);\n    }\n    /**\n     * Initializes the toolbar for the given container.\n     * @param container\n     */\n    setToolbarContainer(container) {\n        this.toolbar.init(container);\n    }\n    /**\n     * Creates the {@link status} using the specified container.\n     * This implementation adds listeners in the editor to\n     * display the last saved time and the current filename\n     * in the status bar.\n     * @param container DOM node that will contain the statusbar.\n     */\n    setStatusContainer(container) {\n        if (this.status == null) {\n            this.status = container;\n            // Prints the last saved time in the status bar\n            // when files are saved\n            this.addListener(InternalEvent.SAVE, () => {\n                const tstamp = new Date().toLocaleString();\n                this.setStatus(`${Translations.get(this.lastSavedResource) || this.lastSavedResource}: ${tstamp}`);\n            });\n            // Updates the statusbar to display the filename\n            // when new files are opened\n            this.addListener(InternalEvent.OPEN, () => {\n                this.setStatus(`${Translations.get(this.currentFileResource) || this.currentFileResource}: ${this.filename}`);\n            });\n        }\n    }\n    /**\n     * Display the specified message in the status bar.\n     * @param message String the specified the message to be displayed.\n     */\n    setStatus(message) {\n        if (this.status != null && message != null) {\n            this.status.innerHTML = message;\n        }\n    }\n    /**\n     * Creates a listener to update the inner HTML of the\n     * specified DOM node with the value of {@link getTitle}.\n     * @param container DOM node that will contain the title.\n     */\n    setTitleContainer(container) {\n        this.addListener(InternalEvent.ROOT, (sender) => {\n            container.innerHTML = this.getTitle();\n        });\n    }\n    /**\n     * Executes a vertical or horizontal compact tree layout\n     * using the specified cell as an argument. The cell may\n     * either be a group or the root of a tree.\n     * @param cell {@link mxCell} to use in the compact tree layout.\n     * @param horizontal Optional boolean to specify the tree's\n     * orientation. Default is true.\n     */\n    treeLayout(cell, horizontal) {\n        if (cell != null) {\n            const layout = new CompactTreeLayout(this.graph, horizontal);\n            layout.execute(cell);\n        }\n    }\n    /**\n     * Returns the string value for the current root of the diagram.\n     */\n    getTitle() {\n        let title = '';\n        const { graph } = this;\n        let cell = graph.getCurrentRoot();\n        while (cell != null && cell.getParent().getParent() != null) {\n            // Append each label of a valid root\n            if (graph.isValidRoot(cell)) {\n                title = ` > ${graph.convertValueToString(cell)}${title}`;\n            }\n            cell = cell.getParent();\n        }\n        const prefix = this.getRootTitle();\n        return prefix + title;\n    }\n    /**\n     * Returns the string value of the root cell in {@link graph.model}.\n     */\n    getRootTitle() {\n        const root = this.graph.getDataModel().getRoot();\n        return this.graph.convertValueToString(root);\n    }\n    /**\n     * Undo the last change in {@link graph}.\n     */\n    undo() {\n        this.undoManager.undo();\n    }\n    /**\n     * Redo the last change in {@link graph}.\n     */\n    redo() {\n        this.undoManager.redo();\n    }\n    /**\n     * Invokes {@link createGroup} to create a new group cell and the invokes\n     * {@link graph.groupCells}, using the grid size of the graph as the spacing\n     * in the group's content area.\n     */\n    groupCells() {\n        const border = this.groupBorderSize != null ? this.groupBorderSize : this.graph.gridSize;\n        return this.graph.groupCells(this.createGroup(), border);\n    }\n    /**\n     * Creates and returns a clone of {@link defaultGroup} to be used\n     * as a new group cell in {@link group}.\n     * @returns Cell\n     */\n    createGroup() {\n        const model = this.graph.getDataModel();\n        return model.cloneCell(this.defaultGroup);\n    }\n    /**\n     * Opens the specified file synchronously and parses it using\n     * {@link readGraphModel}. It updates {@link filename} and fires an <open>-event after\n     * the file has been opened. Exceptions should be handled as follows:\n     *\n     * @example\n     * ```javascript\n     * try\n     * {\n     *   editor.open(filename);\n     * }\n     * catch (e)\n     * {\n     *   mxUtils.error('Cannot open ' + filename +\n     *     ': ' + e.message, 280, true);\n     * }\n     * ```\n     *\n     * @param filename URL of the file to be opened.\n     */\n    open(filename) {\n        if (filename != null) {\n            const xml = load(filename).getXml();\n            this.readGraphModel(xml.documentElement);\n            this.filename = filename;\n            this.fireEvent(new EventObject(InternalEvent.OPEN, { filename }));\n        }\n    }\n    /**\n     * Reads the specified XML node into the existing graph model and resets\n     * the command history and modified state.\n     * @param node\n     */\n    readGraphModel(node) {\n        const dec = new Codec(node.ownerDocument);\n        dec.decode(node, this.graph.getDataModel());\n        this.resetHistory();\n    }\n    /**\n     * Posts the string returned by {@link writeGraphModel} to the given URL or the\n     * URL returned by {@link getUrlPost}. The actual posting is carried out by\n     * {@link postDiagram}. If the URL is null then the resulting XML will be\n     * displayed using {@link popup}. Exceptions should be handled as\n     * follows:\n     *\n     * @example\n     * ```javascript\n     * try\n     * {\n     *   editor.save();\n     * }\n     * catch (e)\n     * {\n     *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n     * }\n     * ```\n     *\n     * @param url\n     * @param linefeed\n     */\n    save(url = null, linefeed = this.linefeed) {\n        // Gets the URL to post the data to\n        url = url || this.getUrlPost();\n        // Posts the data if the URL is not empty\n        if (url != null && url.length > 0) {\n            const data = this.writeGraphModel(linefeed);\n            this.postDiagram(url, data);\n            // Resets the modified flag\n            this.setModified(false);\n        }\n        // Dispatches a save event\n        this.fireEvent(new EventObject(InternalEvent.SAVE, { url }));\n    }\n    /**\n     * Hook for subclassers to override the posting of a diagram\n     * represented by the given node to the given URL. This fires\n     * an asynchronous {@link post} event if the diagram has been posted.\n     *\n     * ### Example:\n     *\n     * To replace the diagram with the diagram in the response, use the\n     * following code.\n     *\n     * @example\n     * ```javascript\n     * editor.addListener(mxEvent.POST, function(sender, evt)\n     * {\n     *   // Process response (replace diagram)\n     *   var req = evt.getProperty('request');\n     *   var root = req.getDocumentElement();\n     *   editor.graph.readGraphModel(root)\n     * });\n     * ```\n     * @param url\n     * @param data\n     */\n    postDiagram(url, data) {\n        if (this.escapePostData) {\n            data = encodeURIComponent(data);\n        }\n        post(url, `${this.postParameterName}=${data}`, (req) => {\n            this.fireEvent(new EventObject(InternalEvent.POST, { request: req, url, data }));\n        });\n    }\n    /**\n     * Hook to create the string representation of the diagram. The default\n     * implementation uses an {@link Codec} to encode the graph model as\n     * follows:\n     *\n     * @example\n     * ```javascript\n     * var enc = new Codec();\n     * var node = enc.encode(this.graph.getDataModel());\n     * return mxUtils.getXml(node, this.linefeed);\n     * ```\n     *\n     * @param linefeed Optional character to be used as the linefeed. Default is {@link linefeed}.\n     */\n    writeGraphModel(linefeed) {\n        linefeed = linefeed != null ? linefeed : this.linefeed;\n        const enc = new Codec();\n        const node = enc.encode(this.graph.getDataModel());\n        return getXml(node, linefeed);\n    }\n    /**\n     * Returns the URL to post the diagram to. This is used\n     * in {@link save}. The default implementation returns {@link urlPost},\n     * adding <code>?draft=true</code>.\n     */\n    getUrlPost() {\n        return this.urlPost;\n    }\n    /**\n     * Returns the URL to create the image with. This is typically\n     * the URL of a backend which accepts an XML representation\n     * of a graph view to create an image. The function is used\n     * in the image action to create an image. This implementation\n     * returns {@link urlImage}.\n     */\n    getUrlImage() {\n        return this.urlImage;\n    }\n    /**\n     * Swaps the styles for the given names in the graph's\n     * stylesheet and refreshes the graph.\n     * @param first\n     * @param second\n     */\n    swapStyles(first, second) {\n        // @ts-ignore\n        const style = this.graph.getStylesheet().styles[second];\n        this.graph\n            .getView()\n            // @ts-ignore\n            .getStylesheet()\n            // @ts-ignore\n            .putCellStyle(second, this.graph.getStylesheet().styles[first]);\n        this.graph.getStylesheet().putCellStyle(first, style);\n        this.graph.refresh();\n    }\n    /**\n     * Creates and shows the properties dialog for the given\n     * cell. The content area of the dialog is created using\n     * {@link createProperties}.\n     * @param cell\n     */\n    showProperties(cell = null) {\n        cell = cell || this.graph.getSelectionCell();\n        // Uses the root node for the properties dialog\n        // if not cell was passed in and no cell is\n        // selected\n        if (cell == null) {\n            cell = this.graph.getCurrentRoot();\n            if (cell == null) {\n                cell = this.graph.getDataModel().getRoot();\n            }\n        }\n        if (cell != null) {\n            // Makes sure there is no in-place editor in the\n            // graph and computes the location of the dialog\n            this.graph.stopEditing(true);\n            const offset = getOffset(this.graph.container);\n            let x = offset.x + 10;\n            let { y } = offset;\n            // Avoids moving the dialog if it is alredy open\n            if (this.properties != null && !this.movePropertiesDialog) {\n                x = this.properties.getX();\n                y = this.properties.getY();\n            }\n            // Places the dialog near the cell for which it\n            // displays the properties\n            else {\n                const bounds = this.graph.getCellBounds(cell);\n                if (bounds != null) {\n                    x += bounds.x + Math.min(200, bounds.width);\n                    y += bounds.y;\n                }\n            }\n            // Hides the existing properties dialog and creates a new one with the\n            // contents created in the hook method\n            this.hideProperties();\n            const node = this.createProperties(cell);\n            if (node != null) {\n                // Displays the contents in a window and stores a reference to the\n                // window for later hiding of the window\n                this.properties = new MaxWindow(Translations.get(this.propertiesResource) || this.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n                this.properties.setVisible(true);\n            }\n        }\n    }\n    /**\n     * Returns true if the properties dialog is currently visible.\n     */\n    isPropertiesVisible() {\n        return this.properties != null;\n    }\n    /**\n     * Creates and returns the DOM node that represents the contents\n     * of the properties dialog for the given cell. This implementation\n     * works for user objects that are XML nodes and display all the\n     * node attributes in a form.\n     */\n    createProperties(cell) {\n        const model = this.graph.getDataModel();\n        const value = cell.getValue();\n        if (isNode(value)) {\n            // Creates a form for the user object inside\n            // the cell\n            const form = new MaxForm('properties');\n            // Adds a readonly field for the cell id\n            const id = form.addText('ID', cell.getId());\n            id.setAttribute('readonly', 'true');\n            let geo = null;\n            let yField = null;\n            let xField = null;\n            let widthField = null;\n            let heightField = null;\n            // Adds fields for the location and size\n            if (cell.isVertex()) {\n                geo = cell.getGeometry();\n                if (geo != null) {\n                    yField = form.addText('top', geo.y);\n                    xField = form.addText('left', geo.x);\n                    widthField = form.addText('width', geo.width);\n                    heightField = form.addText('height', geo.height);\n                }\n            }\n            // Adds a field for the cell style\n            const tmp = cell.getStyle();\n            const style = form.addText('Style', tmp || '');\n            // Creates textareas for each attribute of the\n            // user object within the cell\n            const attrs = value.attributes;\n            const texts = [];\n            for (let i = 0; i < attrs.length; i += 1) {\n                // Creates a textarea with more lines for\n                // the cell label\n                const val = attrs[i].value;\n                texts.push(form.addTextarea(attrs[i].nodeName, val, attrs[i].nodeName === 'label' ? 4 : 2));\n            }\n            // Adds an OK and Cancel button to the dialog\n            // contents and implements the respective\n            // actions below\n            // Defines the function to be executed when the\n            // OK button is pressed in the dialog\n            const okFunction = () => {\n                // Hides the dialog\n                this.hideProperties();\n                // Supports undo for the changes on the underlying\n                // XML structure / XML node attribute changes.\n                model.beginUpdate();\n                try {\n                    if (geo != null &&\n                        xField != null &&\n                        yField != null &&\n                        widthField != null &&\n                        heightField != null) {\n                        geo = geo.clone();\n                        geo.x = parseFloat(xField.value);\n                        geo.y = parseFloat(yField.value);\n                        geo.width = parseFloat(widthField.value);\n                        geo.height = parseFloat(heightField.value);\n                        model.setGeometry(cell, geo);\n                    }\n                    // Applies the style\n                    if (style.value.length > 0) {\n                        // @ts-expect-error TODO - style is no longer a string\n                        model.setStyle(cell, style.value);\n                    }\n                    else {\n                        model.setStyle(cell, {});\n                    }\n                    // Creates an undoable change for each\n                    // attribute and executes it using the\n                    // model, which will also make the change\n                    // part of the current transaction\n                    for (let i = 0; i < attrs.length; i += 1) {\n                        const edit = new CellAttributeChange(cell, attrs[i].nodeName, texts[i].value);\n                        model.execute(edit);\n                    }\n                    // Checks if the graph wants cells to\n                    // be automatically sized and updates\n                    // the size as an undoable step if\n                    // the feature is enabled\n                    if (this.graph.isAutoSizeCell(cell)) {\n                        this.graph.updateCellSize(cell);\n                    }\n                }\n                finally {\n                    model.endUpdate();\n                }\n            };\n            // Defines the function to be executed when the\n            // Cancel button is pressed in the dialog\n            const cancelFunction = () => {\n                // Hides the dialog\n                this.hideProperties();\n            };\n            form.addButtons(okFunction, cancelFunction);\n            return form.table;\n        }\n        return null;\n    }\n    /**\n     * Hides the properties dialog.\n     */\n    hideProperties() {\n        if (this.properties != null) {\n            this.properties.destroy();\n            this.properties = null;\n        }\n    }\n    /**\n     * Shows the tasks window. The tasks window is created using {@link createTasks}. The\n     * default width of the window is 200 pixels, the y-coordinate of the location\n     * can be specifies in {@link tasksTop} and the x-coordinate is right aligned with a\n     * 20 pixel offset from the right border. To change the location of the tasks\n     * window, the following code can be used:\n     *\n     * @example\n     * ```javascript\n     * var oldShowTasks = Editor.prototype.showTasks;\n     * Editor.prototype.showTasks = function()\n     * {\n     *   oldShowTasks.apply(this, arguments); // \"supercall\"\n     *\n     *   if (this.tasks != null)\n     *   {\n     *     this.tasks.setLocation(10, 10);\n     *   }\n     * };\n     * ```\n     */\n    showTasks() {\n        if (this.tasks == null) {\n            const div = document.createElement('div');\n            div.style.padding = '4px';\n            div.style.paddingLeft = '20px';\n            const w = document.body.clientWidth;\n            const wnd = new MaxWindow(Translations.get(this.tasksResource) || this.tasksResource, div, w - 220, this.tasksTop, 200);\n            wnd.setClosable(true);\n            wnd.destroyOnClose = false;\n            // Installs a function to update the contents\n            // of the tasks window on every change of the\n            // model, selection or root.\n            const funct = (sender) => {\n                InternalEvent.release(div);\n                div.innerHTML = '';\n                this.createTasks(div);\n            };\n            this.graph.getDataModel().addListener(InternalEvent.CHANGE, funct);\n            this.graph.getSelectionModel().addListener(InternalEvent.CHANGE, funct);\n            this.graph.addListener(InternalEvent.ROOT, funct);\n            // Assigns the icon to the tasks window\n            if (this.tasksWindowImage != null) {\n                wnd.setImage(this.tasksWindowImage);\n            }\n            this.tasks = wnd;\n            this.createTasks(div);\n        }\n        this.tasks.setVisible(true);\n    }\n    /**\n     * Updates the contents of the tasks window using {@link createTasks}.\n     * @param div\n     */\n    refreshTasks(div) {\n        if (this.tasks != null) {\n            const div = this.tasks.content;\n            InternalEvent.release(div);\n            div.innerHTML = '';\n            this.createTasks(div);\n        }\n    }\n    /**\n     * Updates the contents of the given DOM node to\n     * display the tasks associated with the current\n     * editor state. This is invoked whenever there\n     * is a possible change of state in the editor.\n     * Default implementation is empty.\n     * @param div\n     */\n    createTasks(div) {\n        // override\n    }\n    /**\n     * Shows the help window. If the help window does not exist\n     * then it is created using an iframe pointing to the resource\n     * for the <code>urlHelp</code> key or {@link urlHelp} if the resource\n     * is undefined.\n     * @param tasks\n     */\n    showHelp(tasks = null) {\n        if (this.help == null) {\n            const frame = document.createElement('iframe');\n            frame.setAttribute('src', (Translations.get('urlHelp') || this.urlHelp));\n            frame.setAttribute('height', '100%');\n            frame.setAttribute('width', '100%');\n            frame.setAttribute('frameBorder', '0');\n            frame.style.backgroundColor = 'white';\n            const w = document.body.clientWidth;\n            const h = document.body.clientHeight || document.documentElement.clientHeight;\n            const wnd = new MaxWindow(Translations.get(this.helpResource) || this.helpResource, frame, (w - this.helpWidth) / 2, (h - this.helpHeight) / 3, this.helpWidth, this.helpHeight);\n            wnd.setMaximizable(true);\n            wnd.setClosable(true);\n            wnd.destroyOnClose = false;\n            wnd.setResizable(true);\n            // Assigns the icon to the help window\n            if (this.helpWindowImage != null) {\n                wnd.setImage(this.helpWindowImage);\n            }\n            // Workaround for ignored iframe height 100% in FF\n            if (Client.IS_NS) {\n                const handler = (sender) => {\n                    const h = wnd.div.offsetHeight;\n                    frame.setAttribute('height', `${h - 26}px`);\n                };\n                wnd.addListener(InternalEvent.RESIZE_END, handler);\n                wnd.addListener(InternalEvent.MAXIMIZE, handler);\n                wnd.addListener(InternalEvent.NORMALIZE, handler);\n                wnd.addListener(InternalEvent.SHOW, handler);\n            }\n            this.help = wnd;\n        }\n        this.help.setVisible(true);\n    }\n    /**\n     * Shows the outline window. If the window does not exist, then it is\n     * created using an {@link outline}.\n     */\n    showOutline() {\n        const create = this.outline == null;\n        if (create) {\n            const div = document.createElement('div');\n            div.style.overflow = 'hidden';\n            div.style.position = 'relative';\n            div.style.width = '100%';\n            div.style.height = '100%';\n            div.style.background = 'white';\n            div.style.cursor = 'move';\n            const wnd = new MaxWindow(Translations.get(this.outlineResource) || this.outlineResource, div, 600, 480, 200, 200, false);\n            // Creates the outline in the specified div\n            // and links it to the existing graph\n            const outline = new Outline(this.graph, div);\n            wnd.setClosable(true);\n            wnd.setResizable(true);\n            wnd.destroyOnClose = false;\n            wnd.addListener(InternalEvent.RESIZE_END, () => {\n                outline.update();\n            });\n            this.outline = wnd;\n            this.outline.Outline = outline;\n        }\n        // Finally shows the outline\n        this.outline.setVisible(true);\n        this.outline.outline.update(true);\n    }\n    /**\n     * Puts the graph into the specified mode. The following modenames are\n     * supported:\n     *\n     * select - Selects using the left mouse button, new connections are disabled.\n     * connect - Selects using the left mouse button or creates new connections if mouse over cell hotspot.\n     * See {@link mxConnectionHandler}.\n     * pan - Pans using the left mouse button, new connections are disabled.\n     * @param modename\n     */\n    setMode(modename) {\n        const panningHandler = (this.graph.getPlugin('PanningHandler'));\n        if (modename === 'select') {\n            panningHandler && (panningHandler.useLeftButtonForPanning = false);\n            this.graph.setConnectable(false);\n        }\n        else if (modename === 'connect') {\n            panningHandler && (panningHandler.useLeftButtonForPanning = false);\n            this.graph.setConnectable(true);\n        }\n        else if (modename === 'pan') {\n            panningHandler && (panningHandler.useLeftButtonForPanning = true);\n            this.graph.setConnectable(false);\n        }\n    }\n    /**\n     * Uses {@link popupHandler} to create the menu in the graph's\n     * panning handler. The redirection is setup in {@link setToolbarContainer}.\n     * @param menu\n     * @param cell\n     * @param evt\n     */\n    createPopupMenu(menu, cell, evt) {\n        this.popupHandler.createMenu(this, menu, cell, evt);\n    }\n    /**\n     * Uses {@link defaultEdge} as the prototype for creating new edges\n     * in the connection handler of the graph. The style of the\n     * edge will be overridden with the value returned by {@link getEdgeStyle}.\n     * @param source\n     * @param target\n     */\n    createEdge(source, target) {\n        // Clones the defaultedge prototype\n        let e;\n        if (this.defaultEdge != null) {\n            const model = this.graph.getDataModel();\n            e = model.cloneCell(this.defaultEdge);\n        }\n        else {\n            e = new Cell('');\n            e.setEdge(true);\n            const geo = new Geometry();\n            geo.relative = true;\n            e.setGeometry(geo);\n        }\n        // Overrides the edge style\n        const style = this.getEdgeStyle();\n        if (style != null) {\n            e.setStyle(style);\n        }\n        return e;\n    }\n    /**\n     * Returns a string identifying the style of new edges.\n     * The function is used in {@link createEdge} when new edges\n     * are created in the graph.\n     */\n    getEdgeStyle() {\n        return this.defaultEdgeStyle;\n    }\n    /**\n     * Returns the next attribute in {@link cycleAttributeValues}\n     * or null, if not attribute should be used in the specified cell.\n     * @param cell\n     */\n    consumeCycleAttribute(cell) {\n        return this.cycleAttributeValues != null &&\n            this.cycleAttributeValues.length > 0 &&\n            this.graph.isSwimlane(cell)\n            ? this.cycleAttributeValues[this.cycleAttributeIndex++ % this.cycleAttributeValues.length]\n            : null;\n    }\n    /**\n     * Uses the returned value from {@link consumeCycleAttribute}\n     * as the value for the {@link cycleAttributeName} key in the given cell's style.\n     * @param cell\n     */\n    cycleAttribute(cell) {\n        if (this.cycleAttributeName != null) {\n            const value = this.consumeCycleAttribute(cell);\n            if (value != null) {\n                // @ts-expect-error TODO - style is no longer a string\n                cell.setStyle(`${cell.getStyle()};${this.cycleAttributeName}=${value}`);\n            }\n        }\n    }\n    /**\n     * Adds the given vertex as a child of parent at the specified\n     * x and y coordinate and fires an {@link addVertex} event.\n     * @param parent\n     * @param vertex\n     * @param x\n     * @param y\n     */\n    addVertex(parent, vertex, x, y) {\n        const model = this.graph.getDataModel();\n        while (parent != null && !this.graph.isValidDropTarget(parent)) {\n            parent = parent.getParent();\n        }\n        parent = parent != null ? parent : this.graph.getSwimlaneAt(x, y);\n        const { scale } = this.graph.getView();\n        let geo = vertex.getGeometry();\n        const pgeo = parent.getGeometry();\n        if (this.graph.isSwimlane(vertex) && !this.graph.swimlaneNesting) {\n            parent = null;\n        }\n        else if (parent == null && this.swimlaneRequired) {\n            return null;\n        }\n        else if (parent != null && pgeo != null) {\n            // Keeps vertex inside parent\n            const state = this.graph.getView().getState(parent);\n            if (state != null) {\n                x -= state.origin.x * scale;\n                y -= state.origin.y * scale;\n                if (this.graph.isConstrainedMoving) {\n                    const { width } = geo;\n                    const { height } = geo;\n                    let tmp = state.x + state.width;\n                    if (x + width > tmp) {\n                        x -= x + width - tmp;\n                    }\n                    tmp = state.y + state.height;\n                    if (y + height > tmp) {\n                        y -= y + height - tmp;\n                    }\n                }\n            }\n            else if (pgeo != null) {\n                x -= pgeo.x * scale;\n                y -= pgeo.y * scale;\n            }\n        }\n        geo = geo.clone();\n        geo.x = this.graph.snap(x / scale - this.graph.getView().translate.x - this.graph.gridSize / 2);\n        geo.y = this.graph.snap(y / scale - this.graph.getView().translate.y - this.graph.gridSize / 2);\n        vertex.setGeometry(geo);\n        if (parent == null) {\n            parent = this.graph.getDefaultParent();\n        }\n        this.cycleAttribute(vertex);\n        this.fireEvent(new EventObject(InternalEvent.BEFORE_ADD_VERTEX, { vertex: vertex, parent: parent }));\n        model.beginUpdate();\n        try {\n            vertex = this.graph.addCell(vertex, parent);\n            if (vertex != null) {\n                this.graph.constrainChild(vertex);\n                this.fireEvent(new EventObject(InternalEvent.ADD_VERTEX, { vertex: vertex }));\n            }\n        }\n        finally {\n            model.endUpdate();\n        }\n        if (vertex != null) {\n            this.graph.setSelectionCell(vertex);\n            this.graph.scrollCellToVisible(vertex);\n            this.fireEvent(new EventObject(InternalEvent.AFTER_ADD_VERTEX, { vertex: vertex }));\n        }\n        return vertex;\n    }\n    /**\n     * Removes the editor and all its associated resources. This does not\n     * normally need to be called, it is called automatically when the window\n     * unloads.\n     */\n    destroy() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            if (this.tasks != null) {\n                this.tasks.destroy();\n            }\n            if (this.outline != null) {\n                this.outline.destroy();\n            }\n            if (this.properties != null) {\n                this.properties.destroy();\n            }\n            if (this.keyHandler != null) {\n                this.keyHandler.destroy();\n            }\n            if (this.rubberband != null) {\n                this.rubberband.onDestroy();\n            }\n            if (this.toolbar != null) {\n                this.toolbar.destroy();\n            }\n            if (this.graph != null) {\n                this.graph.destroy();\n            }\n            this.status = null;\n            this.templates = null;\n        }\n    }\n}\nexport default Editor;\n"],"mappings":"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C,WAAW,GAAG,IAAI;IACvB;AACR;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB;AACR;AACA;IACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,MAAM;IAC5B;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B;AACR;AACA;IACQ;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB;AACR;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B;AACR;AACA;IACQ,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B;AACR;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB;AACR;AACA;IACQ;AACR;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,OAAO;IACvB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B;AACR;AACA;IACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,KAAK;IAC1B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,CAAC;IACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,oBAAoB,GAAG,EAAE;IAC9B;AACR;AACA;IACQ;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,mBAAmB,GAAG,CAAC;IAC5B;AACR;AACA;AACA;AACA;IACQ;IACA,IAAI,CAACC,kBAAkB,GAAG,WAAW;IACrC;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB;AACR;AACA;IACQ;AACR;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B;AACR;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB;AACR;AACA;IACQ,IAAI,CAACC,IAAI,GAAG,IAAI;IAChB;AACR;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;AACR;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,GAAG;IACpB;AACR;AACA;AACA;IACQ;IACA,IAAI,CAACC,UAAU,GAAG,GAAG;IACrB;AACR;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAG,GAAG;IAC1B;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,oBAAoB,GAAG,KAAK;IACjC;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB;AACR;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACrC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACsC,UAAU,CAAC,CAAC;IACjB;IACA;IACA,IAAIC,QAAQ,CAACC,IAAI,IAAI,IAAI,EAAE;MACvB;MACA,IAAI,CAAClB,oBAAoB,GAAG,EAAE;MAC9B,IAAI,CAACzB,YAAY,GAAG,IAAI3D,eAAe,CAAC,CAAC;MACzC,IAAI,CAAC4D,WAAW,GAAG,IAAI3D,WAAW,CAAC,CAAC;MACpC;MACA,IAAI,CAACsG,KAAK,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;MAC/B,IAAI,CAAC/C,OAAO,GAAG,IAAI,CAACgD,aAAa,CAAC,CAAC;MACnC;MACA,IAAI,CAAC5C,UAAU,GAAG,IAAI3D,gBAAgB,CAAC,IAAI,CAAC;MAC5C;MACA;MACA,IAAI,CAACwG,SAAS,CAAClE,MAAM,CAAC;MACtB;MACA,IAAI,CAAC+D,KAAK,CAACI,+BAA+B,GAAG,IAAI,CAACrB,kBAAkB;MACpE;MACA,IAAI,IAAI,CAAC7C,MAAM,IAAI,IAAI,EAAE;QACrB;QACA,IAAI,CAACA,MAAM,CAAC,CAAC;MACjB;IACJ;EACJ;EACA;AACJ;AACA;EACImE,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACT,QAAQ;EACxB;EACA;AACJ;AACA;AACA;EACIU,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,CAACX,QAAQ,GAAGW,KAAK;EACzB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIV,UAAUA,CAAA,EAAG;IACT,IAAI,CAACW,SAAS,CAAC,MAAM,EAAGC,MAAM,IAAK;MAC/BA,MAAM,CAACC,IAAI,CAAC,CAAC;IACjB,CAAC,CAAC;IACF,IAAI,CAACF,SAAS,CAAC,OAAO,EAAGC,MAAM,IAAK;MAChC,MAAME,OAAO,GAAG,IAAIxF,YAAY,CAACsF,MAAM,CAACT,KAAK,EAAE,CAAC,CAAC;MACjDW,OAAO,CAACC,IAAI,CAAC,CAAC;IAClB,CAAC,CAAC;IACF,IAAI,CAACJ,SAAS,CAAC,MAAM,EAAGC,MAAM,IAAK;MAC/B3E,IAAI,CAAC2E,MAAM,CAACT,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC;IACpC,CAAC,CAAC;IACF,IAAI,CAACQ,SAAS,CAAC,aAAa,EAAGC,MAAM,IAAK;MACtC,MAAMI,GAAG,GAAGJ,MAAM,CAACK,WAAW,CAAC,CAAC;MAChC,IAAID,GAAG,IAAI,IAAI,IAAI/G,MAAM,CAACiH,QAAQ,EAAE;QAChCN,MAAM,CAACO,OAAO,CAAC,MAAM,CAAC;MAC1B,CAAC,MACI;QACD,MAAMC,IAAI,GAAG1F,UAAU,CAACkF,MAAM,CAACT,KAAK,EAAE,CAAC,CAAC;QACxC,MAAMkB,GAAG,GAAG1F,MAAM,CAACyF,IAAI,EAAE,IAAI,CAAC;QAC9BtF,MAAM,CAACkF,GAAG,EAAG,GAAEJ,MAAM,CAACrC,iBAAkB,IAAG+C,kBAAkB,CAACD,GAAG,CAAE,EAAC,EAAEpB,QAAQ,EAAE,QAAQ,CAAC;MAC7F;IACJ,CAAC,CAAC;IACF,IAAI,CAACU,SAAS,CAAC,SAAS,EAAGC,MAAM,IAAK;MAClCA,MAAM,CAACT,KAAK,CAACoB,OAAO,CAAC,CAAC;IAC1B,CAAC,CAAC;IACF,IAAI,CAACZ,SAAS,CAAC,KAAK,EAAGC,MAAM,IAAK;MAC9B,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BjG,WAAW,CAACkG,GAAG,CAACb,MAAM,CAACT,KAAK,CAAC;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAACQ,SAAS,CAAC,MAAM,EAAGC,MAAM,IAAK;MAC/B,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BjG,WAAW,CAACmG,IAAI,CAACd,MAAM,CAACT,KAAK,CAAC;MAClC;IACJ,CAAC,CAAC;IACF,IAAI,CAACQ,SAAS,CAAC,OAAO,EAAGC,MAAM,IAAK;MAChC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BjG,WAAW,CAACoG,KAAK,CAACf,MAAM,CAACT,KAAK,CAAC;MACnC;IACJ,CAAC,CAAC;IACF,IAAI,CAACQ,SAAS,CAAC,QAAQ,EAAGC,MAAM,IAAK;MACjC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACyB,WAAW,CAAC,CAAC;MAC9B;IACJ,CAAC,CAAC;IACF,IAAI,CAACjB,SAAS,CAAC,OAAO,EAAGC,MAAM,IAAK;MAChC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC0B,gBAAgB,CAACjB,MAAM,CAACkB,UAAU,CAAC,CAAC,CAAC;MACtD;IACJ,CAAC,CAAC;IACF,IAAI,CAACnB,SAAS,CAAC,SAAS,EAAGC,MAAM,IAAK;MAClC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC4B,iBAAiB,CAACnB,MAAM,CAACT,KAAK,CAAC6B,YAAY,CAAC,CAAC,CAAC;MAC/D;IACJ,CAAC,CAAC;IACF,IAAI,CAACrB,SAAS,CAAC,kBAAkB,EAAGC,MAAM,IAAK;MAC3C,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC8B,qBAAqB,CAAC,CAAC;MACxC;IACJ,CAAC,CAAC;IACF,IAAI,CAACtB,SAAS,CAAC,MAAM,EAAGC,MAAM,IAAK;MAC/B,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACsB,IAAI,CAAC,CAAC;MACjB;IACJ,CAAC,CAAC;IACF,IAAI,CAACvB,SAAS,CAAC,MAAM,EAAGC,MAAM,IAAK;MAC/B,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACuB,IAAI,CAAC,CAAC;MACjB;IACJ,CAAC,CAAC;IACF,IAAI,CAACxB,SAAS,CAAC,QAAQ,EAAGC,MAAM,IAAK;MACjCA,MAAM,CAACT,KAAK,CAACiC,MAAM,CAAC,CAAC;IACzB,CAAC,CAAC;IACF,IAAI,CAACzB,SAAS,CAAC,SAAS,EAAGC,MAAM,IAAK;MAClCA,MAAM,CAACT,KAAK,CAACkC,OAAO,CAAC,CAAC;IAC1B,CAAC,CAAC;IACF,IAAI,CAAC1B,SAAS,CAAC,YAAY,EAAGC,MAAM,IAAK;MACrCA,MAAM,CAACT,KAAK,CAACmC,UAAU,CAAC,CAAC;IAC7B,CAAC,CAAC;IACF,IAAI,CAAC3B,SAAS,CAAC,KAAK,EAAGC,MAAM,IAAK;MAC9BA,MAAM,CAACT,KAAK,CAACoC,GAAG,CAAC,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAAC5B,SAAS,CAAC,gBAAgB,EAAE,CAACC,MAAM,EAAE4B,IAAI,KAAK;MAC/C5B,MAAM,CAAC6B,cAAc,CAACD,IAAI,CAAC;IAC/B,CAAC,CAAC;IACF,IAAI,CAAC7B,SAAS,CAAC,WAAW,EAAGC,MAAM,IAAK;MACpC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACuC,SAAS,CAAC,CAAC;MAC5B;IACJ,CAAC,CAAC;IACF,IAAI,CAAC/B,SAAS,CAAC,YAAY,EAAGC,MAAM,IAAK;MACrC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACwC,cAAc,CAAC,CAAC;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAAChC,SAAS,CAAC,gBAAgB,EAAGC,MAAM,IAAK;MACzC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACyC,cAAc,CAAC,CAAC;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAACjC,SAAS,CAAC,aAAa,EAAGC,MAAM,IAAK;MACtC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC0C,WAAW,CAAC,CAAC;MAC9B;IACJ,CAAC,CAAC;IACF,IAAI,CAAClC,SAAS,CAAC,MAAM,EAAE,CAACC,MAAM,EAAE4B,IAAI,KAAK;MACrC,IAAI5B,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,IAAIZ,MAAM,CAACT,KAAK,CAAC2C,cAAc,CAACN,IAAI,CAAC,EAAE;QAC/D5B,MAAM,CAACT,KAAK,CAAC4C,kBAAkB,CAACP,IAAI,CAAC;MACzC;IACJ,CAAC,CAAC;IACF,IAAI,CAAC7B,SAAS,CAAC,QAAQ,EAAE,CAACC,MAAM,EAAE4B,IAAI,KAAK;MACvC,IAAI5B,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC6C,UAAU,CAAC,IAAI,CAAC;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAACrC,SAAS,CAAC,SAAS,EAAE,CAACC,MAAM,EAAE4B,IAAI,KAAK;MACxC,IAAI5B,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC6C,UAAU,CAAC,KAAK,CAAC;MAClC;IACJ,CAAC,CAAC;IACF,IAAI,CAACrC,SAAS,CAAC,YAAY,EAAE,CAACC,MAAM,EAAE4B,IAAI,KAAK;MAC3C5B,MAAM,CAACT,KAAK,CAAC8C,UAAU,CAACT,IAAI,CAAC;IACjC,CAAC,CAAC;IACF,IAAI,CAAC7B,SAAS,CAAC,WAAW,EAAGC,MAAM,IAAK;MACpCA,MAAM,CAACT,KAAK,CAAC+C,SAAS,CAAC,CAAC;IAC5B,CAAC,CAAC;IACF,IAAI,CAACvC,SAAS,CAAC,MAAM,EAAGC,MAAM,IAAK;MAC/BA,MAAM,CAACT,KAAK,CAACgD,IAAI,CAAC,CAAC;IACvB,CAAC,CAAC;IACF,IAAI,CAACxC,SAAS,CAAC,gBAAgB,EAAGC,MAAM,IAAK;MACzC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACiD,kBAAkB,CAAC,CAAC;MACrC;IACJ,CAAC,CAAC;IACF,IAAI,CAACzC,SAAS,CAAC,YAAY,EAAGC,MAAM,IAAK;MACrC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACkD,cAAc,CAAC,CAAC;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAAC1C,SAAS,CAAC,cAAc,EAAGC,MAAM,IAAK;MACvC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACmD,gBAAgB,CAAC,CAAC;MACnC;IACJ,CAAC,CAAC;IACF,IAAI,CAAC3C,SAAS,CAAC,aAAa,EAAGC,MAAM,IAAK;MACtC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACoD,eAAe,CAAC,CAAC;MAClC;IACJ,CAAC,CAAC;IACF,IAAI,CAAC5C,SAAS,CAAC,UAAU,EAAGC,MAAM,IAAK;MACnC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACqD,SAAS,CAAC,IAAI,CAAC;MAChC;IACJ,CAAC,CAAC;IACF,IAAI,CAAC7C,SAAS,CAAC,aAAa,EAAGC,MAAM,IAAK;MACtC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1B,MAAMiC,KAAK,GAAG7C,MAAM,CAACT,KAAK,CAACuD,gBAAgB,CAAC,CAAC;QAC7C9C,MAAM,CAACT,KAAK,CAACqD,SAAS,CAAC,IAAI,EAAE,KAAK,EAAEC,KAAK,CAAC;MAC9C;IACJ,CAAC,CAAC;IACF,IAAI,CAAC9C,SAAS,CAAC,QAAQ,EAAGC,MAAM,IAAK;MACjC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACqD,SAAS,CAAC,KAAK,CAAC;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAAC7C,SAAS,CAAC,WAAW,EAAGC,MAAM,IAAK;MACpC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1B,MAAMiC,KAAK,GAAG7C,MAAM,CAACT,KAAK,CAACuD,gBAAgB,CAAC,CAAC;QAC7C9C,MAAM,CAACT,KAAK,CAACqD,SAAS,CAAC,KAAK,EAAE,KAAK,EAAEC,KAAK,CAAC;MAC/C;IACJ,CAAC,CAAC;IACF,IAAI,CAAC9C,SAAS,CAAC,MAAM,EAAGC,MAAM,IAAK;MAC/B,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACwD,oBAAoB,CAAC,WAAW,EAAE5I,IAAI,CAAC6I,IAAI,CAAC;MAC7D;IACJ,CAAC,CAAC;IACF,IAAI,CAACjD,SAAS,CAAC,QAAQ,EAAGC,MAAM,IAAK;MACjC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACwD,oBAAoB,CAAC,WAAW,EAAE5I,IAAI,CAAC8I,MAAM,CAAC;MAC/D;IACJ,CAAC,CAAC;IACF,IAAI,CAAClD,SAAS,CAAC,WAAW,EAAGC,MAAM,IAAK;MACpC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACwD,oBAAoB,CAAC,WAAW,EAAE5I,IAAI,CAAC+I,SAAS,CAAC;MAClE;IACJ,CAAC,CAAC;IACF,IAAI,CAACnD,SAAS,CAAC,gBAAgB,EAAGC,MAAM,IAAK;MACzC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC4D,UAAU,CAACjJ,KAAK,CAACkJ,IAAI,CAAC;MACvC;IACJ,CAAC,CAAC;IACF,IAAI,CAACrD,SAAS,CAAC,kBAAkB,EAAGC,MAAM,IAAK;MAC3C,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC4D,UAAU,CAACjJ,KAAK,CAACmJ,MAAM,CAAC;MACzC;IACJ,CAAC,CAAC;IACF,IAAI,CAACtD,SAAS,CAAC,iBAAiB,EAAGC,MAAM,IAAK;MAC1C,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC4D,UAAU,CAACjJ,KAAK,CAACoJ,KAAK,CAAC;MACxC;IACJ,CAAC,CAAC;IACF,IAAI,CAACvD,SAAS,CAAC,eAAe,EAAGC,MAAM,IAAK;MACxC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC4D,UAAU,CAACjJ,KAAK,CAACqJ,GAAG,CAAC;MACtC;IACJ,CAAC,CAAC;IACF,IAAI,CAACxD,SAAS,CAAC,kBAAkB,EAAGC,MAAM,IAAK;MAC3C,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC4D,UAAU,CAACjJ,KAAK,CAACsJ,MAAM,CAAC;MACzC;IACJ,CAAC,CAAC;IACF,IAAI,CAACzD,SAAS,CAAC,kBAAkB,EAAGC,MAAM,IAAK;MAC3C,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAAC4D,UAAU,CAACjJ,KAAK,CAACuJ,MAAM,CAAC;MACzC;IACJ,CAAC,CAAC;IACF,IAAI,CAAC1D,SAAS,CAAC,eAAe,EAAGC,MAAM,IAAK;MACxCA,MAAM,CAACT,KAAK,CAACmE,aAAa,CAAC,OAAO,EAAExJ,KAAK,CAACkJ,IAAI,CAAC;IACnD,CAAC,CAAC;IACF,IAAI,CAACrD,SAAS,CAAC,iBAAiB,EAAGC,MAAM,IAAK;MAC1C,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACmE,aAAa,CAAC,OAAO,EAAExJ,KAAK,CAACmJ,MAAM,CAAC;MACrD;IACJ,CAAC,CAAC;IACF,IAAI,CAACtD,SAAS,CAAC,gBAAgB,EAAGC,MAAM,IAAK;MACzC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACmE,aAAa,CAAC,OAAO,EAAExJ,KAAK,CAACoJ,KAAK,CAAC;MACpD;IACJ,CAAC,CAAC;IACF,IAAI,CAACvD,SAAS,CAAC,cAAc,EAAGC,MAAM,IAAK;MACvC,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACmE,aAAa,CAAC,eAAe,EAAExJ,KAAK,CAACqJ,GAAG,CAAC;MAC1D;IACJ,CAAC,CAAC;IACF,IAAI,CAACxD,SAAS,CAAC,iBAAiB,EAAGC,MAAM,IAAK;MAC1C,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACmE,aAAa,CAAC,eAAe,EAAExJ,KAAK,CAACsJ,MAAM,CAAC;MAC7D;IACJ,CAAC,CAAC;IACF,IAAI,CAACzD,SAAS,CAAC,iBAAiB,EAAGC,MAAM,IAAK;MAC1C,IAAIA,MAAM,CAACT,KAAK,CAACqB,SAAS,CAAC,CAAC,EAAE;QAC1BZ,MAAM,CAACT,KAAK,CAACmE,aAAa,CAAC,eAAe,EAAExJ,KAAK,CAACuJ,MAAM,CAAC;MAC7D;IACJ,CAAC,CAAC;IACF,IAAI,CAAC1D,SAAS,CAAC,MAAM,EAAGC,MAAM,IAAK;MAC/B,MAAM2D,OAAO,GAAG3D,MAAM,CAACT,KAAK,CAACqE,OAAO,CAAC,CAAC,CAACC,KAAK,GAAG,GAAG;MAClD,MAAMC,QAAQ,GAAGC,MAAM,CAAC3K,YAAY,CAAC4K,GAAG,CAAChE,MAAM,CAACjE,eAAe,CAAC,IAAIiE,MAAM,CAACjE,eAAe,EAAEkI,MAAM,CAACN,OAAO,CAAC,CAAC;MAC5G,IAAIG,QAAQ,EAAE;QACV,MAAMD,KAAK,GAAGK,UAAU,CAACJ,QAAQ,CAAC,GAAG,GAAG;QACxC,IAAI,CAACK,KAAK,CAACN,KAAK,CAAC,EAAE;UACf7D,MAAM,CAACT,KAAK,CAACqE,OAAO,CAAC,CAAC,CAACQ,QAAQ,CAACP,KAAK,CAAC;QAC1C;MACJ;IACJ,CAAC,CAAC;IACF,IAAI,CAAC9D,SAAS,CAAC,aAAa,EAAGC,MAAM,IAAK;MACtC,IAAIA,MAAM,CAACzB,KAAK,IAAI,IAAI,EAAE;QACtByB,MAAM,CAACzB,KAAK,CAAC8F,UAAU,CAAC,CAACrE,MAAM,CAACzB,KAAK,CAAC+F,SAAS,CAAC,CAAC,CAAC;MACtD,CAAC,MACI;QACDtE,MAAM,CAACuE,SAAS,CAAC,CAAC;MACtB;IACJ,CAAC,CAAC;IACF,IAAI,CAACxE,SAAS,CAAC,YAAY,EAAGC,MAAM,IAAK;MACrC,IAAIA,MAAM,CAACtB,IAAI,IAAI,IAAI,EAAE;QACrBsB,MAAM,CAACtB,IAAI,CAAC2F,UAAU,CAAC,CAACrE,MAAM,CAACtB,IAAI,CAAC4F,SAAS,CAAC,CAAC,CAAC;MACpD,CAAC,MACI;QACDtE,MAAM,CAACwE,QAAQ,CAAC,CAAC;MACrB;IACJ,CAAC,CAAC;IACF,IAAI,CAACzE,SAAS,CAAC,eAAe,EAAGC,MAAM,IAAK;MACxC,IAAIA,MAAM,CAACzD,OAAO,IAAI,IAAI,EAAE;QACxByD,MAAM,CAACyE,WAAW,CAAC,CAAC;MACxB,CAAC,MACI;QACDzE,MAAM,CAACzD,OAAO,CAAC8H,UAAU,CAAC,CAACrE,MAAM,CAACzD,OAAO,CAAC+H,SAAS,CAAC,CAAC,CAAC;MAC1D;IACJ,CAAC,CAAC;IACF,IAAI,CAACvE,SAAS,CAAC,eAAe,EAAGC,MAAM,IAAK;MACxCpF,MAAM,CAACyJ,UAAU,CAAC,CAACzJ,MAAM,CAAC0J,SAAS,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI5E,SAASA,CAACc,IAAI,EAAE;IACZ,IAAIA,IAAI,IAAI,IAAI,EAAE;MACd;MACA;MACA,MAAMkE,GAAG,GAAG,IAAI/K,KAAK,CAAC6G,IAAI,CAACmE,aAAa,CAAC;MACzCD,GAAG,CAACE,MAAM,CAACpE,IAAI,EAAE,IAAI,CAAC;MACtB;MACA;MACA,IAAI,CAACqE,YAAY,CAAC,CAAC;IACvB;EACJ;EACA;AACJ;AACA;EACIC,cAAcA,CAAA,EAAG;IACbzF,QAAQ,CAAC0F,MAAM,GAAG,6DAA6D;EACnF;EACA;AACJ;AACA;EACIF,YAAYA,CAAA,EAAG;IACX,IAAI,CAACnJ,YAAY,GAAG,IAAIsJ,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACxC,IAAI,CAACrI,WAAW,CAACsI,KAAK,CAAC,CAAC;IACxB,IAAI,CAACvJ,cAAc,GAAG,CAAC;IACvB,IAAI,CAACkE,WAAW,CAAC,KAAK,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,SAASA,CAACoF,UAAU,EAAEC,KAAK,EAAE;IACzB,IAAI,CAACtI,OAAO,CAACqI,UAAU,CAAC,GAAGC,KAAK;EACpC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI7E,OAAOA,CAAC4E,UAAU,EAAEvD,IAAI,GAAG,IAAI,EAAEyD,GAAG,GAAG,IAAI,EAAE;IACzC,MAAMC,MAAM,GAAG,IAAI,CAACxI,OAAO,CAACqI,UAAU,CAAC;IACvC,IAAIG,MAAM,IAAI,IAAI,EAAE;MAChB,IAAI;QACA;QACA;QACA,MAAMC,IAAI,GAAG,CAAC,IAAI,EAAE3D,IAAI,EAAEyD,GAAG,CAAC;QAC9B;QACAC,MAAM,CAACE,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC;MAC5B,CAAC,CACD,OAAOE,CAAC,EAAE;QACN5L,KAAK,CAAE,kBAAiBsL,UAAW,KAAIM,CAAC,CAACC,OAAQ,EAAC,EAAE,GAAG,EAAE,IAAI,CAAC;QAC9D,MAAMD,CAAC;MACX;IACJ,CAAC,MACI;MACD5L,KAAK,CAAE,sBAAqBsL,UAAW,EAAC,EAAE,GAAG,EAAE,IAAI,CAAC;IACxD;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIQ,WAAWA,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACxB,IAAI,CAACzI,SAAS,CAACwI,IAAI,CAAC,GAAGC,QAAQ;EACnC;EACA;AACJ;AACA;AACA;EACIC,WAAWA,CAACF,IAAI,EAAE;IACd,OAAO,IAAI,CAACxI,SAAS,CAACwI,IAAI,CAAC;EAC/B;EACA;AACJ;AACA;AACA;AACA;EACIpG,WAAWA,CAAA,EAAG;IACV,MAAMuG,OAAO,GAAGC,SAAS;IACzB,MAAMzG,KAAK,GAAG,IAAInF,KAAK,CAAC2L,OAAO,CAAC;IAChC;IACAxG,KAAK,CAAC0G,WAAW,CAAC,IAAI,CAAC;IACvB1G,KAAK,CAAC2G,UAAU,CAAC,IAAI,CAAC;IACtB;IACA;IACA;IACA,IAAI,CAACC,sBAAsB,CAAC5G,KAAK,CAAC;IAClC;IACA,IAAI,CAAC6G,kBAAkB,CAAC7G,KAAK,CAAC;IAC9B;IACA,IAAI,CAAC8G,mBAAmB,CAAC9G,KAAK,CAAC;IAC/B;IACA,IAAI,CAAC+G,oBAAoB,CAAC/G,KAAK,CAAC;IAChC;IACA;IACA;IACA,IAAI,CAACgH,oBAAoB,CAAChH,KAAK,CAAC;IAChC;IACA,MAAMiH,gBAAgB,GAAGjH,KAAK,CAACkH,SAAS,CAAC,kBAAkB,CAAC;IAC5D,IAAID,gBAAgB,EAAE;MAClBA,gBAAgB,CAACE,aAAa,GAAG,CAACC,IAAI,EAAE/E,IAAI,EAAEyD,GAAG,KAAK;QAClD,OAAO,IAAI,CAACuB,eAAe,CAACD,IAAI,EAAE/E,IAAI,EAAEyD,GAAG,CAAC;MAChD,CAAC;IACL;IACA;IACA,MAAMwB,iBAAiB,GAAGtH,KAAK,CAACkH,SAAS,CAAC,mBAAmB,CAAC;IAC9D,IAAII,iBAAiB,EAAE;MACnBA,iBAAiB,CAACH,aAAa,GAAG,CAACI,MAAM,EAAEC,MAAM,KAAK;QAClD,OAAO,IAAI,CAACC,UAAU,CAACF,MAAM,EAAEC,MAAM,CAAC;MAC1C,CAAC;IACL;IACA;IACA,IAAI,CAACE,qBAAqB,CAAC1H,KAAK,CAAC;IACjC,IAAI,CAAC2H,mBAAmB,CAAC3H,KAAK,CAAC;IAC/B,OAAOA,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACI0H,qBAAqBA,CAAC1H,KAAK,EAAE;IACzB,MAAM4H,WAAW,GAAG,IAAI9M,eAAe,CAACkF,KAAK,EAAE,KAAK,CAAC;IACrD4H,WAAW,CAACC,YAAY,GAAG,MAAM;MAC7B,OAAO,IAAI,CAACrJ,cAAc;IAC9B,CAAC;IACDoJ,WAAW,CAACvG,SAAS,GAAG,MAAM;MAC1B,OAAO,IAAI,CAAC1C,iBAAiB;IACjC,CAAC;IACD,OAAOiJ,WAAW;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;EACID,mBAAmBA,CAAC3H,KAAK,EAAE;IACvB,MAAM8H,SAAS,GAAG,IAAI/M,aAAa,CAACiF,KAAK,CAAC;IAC1C,MAAM+H,IAAI,GAAG,IAAI,CAAC,CAAC;IACnBD,SAAS,CAACE,SAAS,GAAI3F,IAAI,IAAK;MAC5B,IAAI4F,MAAM,GAAG,IAAI;MACjB,MAAMC,KAAK,GAAGH,IAAI,CAAC/H,KAAK,CAACmI,YAAY,CAAC,CAAC;MACvC,IAAI9F,IAAI,CAAC+F,SAAS,CAAC,CAAC,IAAI,IAAI,EAAE;QAC1B;QACA;QACA;QACA,IAAIL,IAAI,CAACnJ,eAAe,IAAIoB,KAAK,CAACqI,UAAU,CAAChG,IAAI,CAAC,EAAE;UAChD,IAAI0F,IAAI,CAACO,cAAc,IAAI,IAAI,EAAE;YAC7BP,IAAI,CAACO,cAAc,GAAGP,IAAI,CAACQ,oBAAoB,CAAC,CAAC;UACrD;UACAN,MAAM,GAAGF,IAAI,CAACO,cAAc;QAChC;QACA;QACA;QACA;QAAA,KACK,IAAIP,IAAI,CAACtJ,aAAa,KACtBuB,KAAK,CAACwI,WAAW,CAACnG,IAAI,CAAC,IAAIA,IAAI,CAAC+F,SAAS,CAAC,CAAC,CAACA,SAAS,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE;UACnE,IAAIL,IAAI,CAACU,aAAa,IAAI,IAAI,EAAE;YAC5BV,IAAI,CAACU,aAAa,GAAGV,IAAI,CAACW,mBAAmB,CAAC,CAAC;UACnD;UACAT,MAAM,GAAGF,IAAI,CAACU,aAAa;QAC/B;MACJ;MACA,OAAOR,MAAM;IACjB,CAAC;IACD,OAAOH,SAAS;EACpB;EACA;AACJ;AACA;AACA;EACIa,iBAAiBA,CAACC,SAAS,EAAE;IACzB,IAAI,IAAI,CAAC5I,KAAK,CAAC4I,SAAS,IAAI,IAAI,EAAE;MAC9B;MACA;MACA;MACA,IAAI,CAAC5I,KAAK,CAAC6I,IAAI,CAACD,SAAS,CAAC;MAC1B;MACA;MACA,IAAI,CAACvM,UAAU,GAAG,IAAIT,iBAAiB,CAAC,IAAI,CAACoE,KAAK,CAAC;MACnD;MACA,IAAI,IAAI,CAACtC,kBAAkB,EAAE;QACzB7B,aAAa,CAAC6B,kBAAkB,CAACkL,SAAS,CAAC;MAC/C;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIhC,sBAAsBA,CAAC5G,KAAK,EAAE;IAC1B;IACAA,KAAK,CAAC8I,WAAW,CAACjN,aAAa,CAACkN,YAAY,EAAE,CAACC,MAAM,EAAElD,GAAG,KAAK;MAC3D,MAAMzD,IAAI,GAAGyD,GAAG,CAACmD,WAAW,CAAC,MAAM,CAAC;MACpC,IAAI5G,IAAI,IAAI,IAAI,IAAIrC,KAAK,CAACqB,SAAS,CAAC,CAAC,IAAI,IAAI,CAAC7D,cAAc,IAAI,IAAI,EAAE;QAClE,IAAI,CAACwD,OAAO,CAAC,IAAI,CAACxD,cAAc,EAAE6E,IAAI,CAAC;QACvCyD,GAAG,CAACoD,OAAO,CAAC,CAAC;MACjB;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACIrC,kBAAkBA,CAAC7G,KAAK,EAAE;IACtB,MAAMmJ,QAAQ,GAAGA,CAACH,MAAM,EAAElD,GAAG,KAAK;MAC9B,MAAMsD,IAAI,GAAGtD,GAAG,CAACmD,WAAW,CAAC,MAAM,CAAC;MACpC,IAAI,CAAC5L,WAAW,CAACgM,oBAAoB,CAACD,IAAI,CAAC;IAC/C,CAAC;IACDpJ,KAAK,CAACmI,YAAY,CAAC,CAAC,CAACW,WAAW,CAACjN,aAAa,CAACyN,IAAI,EAAEH,QAAQ,CAAC;IAC9DnJ,KAAK,CAACqE,OAAO,CAAC,CAAC,CAACyE,WAAW,CAACjN,aAAa,CAACyN,IAAI,EAAEH,QAAQ,CAAC;IACzD;IACA,MAAMI,WAAW,GAAGA,CAACP,MAAM,EAAElD,GAAG,KAAK;MACjC,MAAM;QAAE0D;MAAQ,CAAC,GAAG1D,GAAG,CAACmD,WAAW,CAAC,MAAM,CAAC;MAC3CjJ,KAAK,CAAC4B,iBAAiB,CAAC5B,KAAK,CAACyJ,2BAA2B,CAACD,OAAO,CAAC,CAAC;IACvE,CAAC;IACD,IAAI,CAACnM,WAAW,CAACyL,WAAW,CAACjN,aAAa,CAACyN,IAAI,EAAEC,WAAW,CAAC;IAC7D,IAAI,CAAClM,WAAW,CAACyL,WAAW,CAACjN,aAAa,CAAC6N,IAAI,EAAEH,WAAW,CAAC;EACjE;EACA;AACJ;AACA;AACA;EACIzC,mBAAmBA,CAAC9G,KAAK,EAAE;IACvB,MAAMmJ,QAAQ,GAAIH,MAAM,IAAK;MACzB,IAAI,CAACW,SAAS,CAAC,IAAIzP,WAAW,CAAC2B,aAAa,CAAC+N,IAAI,CAAC,CAAC;IACvD,CAAC;IACD5J,KAAK,CAACqE,OAAO,CAAC,CAAC,CAACyE,WAAW,CAACjN,aAAa,CAACgO,IAAI,EAAEV,QAAQ,CAAC;IACzDnJ,KAAK,CAACqE,OAAO,CAAC,CAAC,CAACyE,WAAW,CAACjN,aAAa,CAACiO,EAAE,EAAEX,QAAQ,CAAC;EAC3D;EACA;AACJ;AACA;AACA;AACA;AACA;EACIpC,oBAAoBA,CAAC/G,KAAK,EAAE;IACxB,MAAMmJ,QAAQ,GAAGA,CAACH,MAAM,EAAElD,GAAG,KAAK;MAC9B;MACA,IAAI,CAACxF,WAAW,CAAC,IAAI,CAAC;MACtB;MACA;MACA,IAAI,IAAI,CAACX,UAAU,IAAI,IAAI,EAAE;QACzBK,KAAK,CAAC+J,aAAa,CAAC,CAAC;MACzB;MACA;MACA,MAAM;QAAEP;MAAQ,CAAC,GAAG1D,GAAG,CAACmD,WAAW,CAAC,MAAM,CAAC;MAC3C,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,OAAO,CAACS,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QACxC,MAAME,MAAM,GAAGV,OAAO,CAACQ,CAAC,CAAC;QACzB,IAAIE,MAAM,YAAYlP,UAAU,IAC3BkP,MAAM,YAAYjP,WAAW,IAAIiP,MAAM,CAAC7H,IAAI,KAAK,IAAI,CAACrC,KAAK,CAACkI,KAAK,CAACiC,IAAK,IACvED,MAAM,YAAYhP,mBAAmB,IAAIgP,MAAM,CAAC7H,IAAI,KAAK,IAAI,CAACrC,KAAK,CAACkI,KAAK,CAACiC,IAAK,EAAE;UAClF,IAAI,CAACR,SAAS,CAAC,IAAIzP,WAAW,CAAC2B,aAAa,CAAC+N,IAAI,CAAC,CAAC;UACnD;QACJ;MACJ;IACJ,CAAC;IACD5J,KAAK,CAACmI,YAAY,CAAC,CAAC,CAACW,WAAW,CAACjN,aAAa,CAACuO,MAAM,EAAEjB,QAAQ,CAAC;EACpE;EACA;AACJ;AACA;AACA;EACInC,oBAAoBA,CAAChH,KAAK,EAAE;IACxB,MAAM+H,IAAI,GAAG,IAAI,CAAC,CAAC;IACnB,MAAMsC,aAAa,GAAG;MAClBC,SAAS,EAAEA,CAACtB,MAAM,EAAEuB,EAAE,KAAK;QACvB,IAAIxC,IAAI,CAACpK,cAAc,IAAI,IAAI,IAC3B,CAAC4M,EAAE,CAACC,cAAc,CAAC,CAAC,KACnBzC,IAAI,CAACnK,eAAe,IAAI2M,EAAE,CAACE,QAAQ,CAAC,CAAC,IAAI,IAAI,CAAC,EAAE;UACjD1C,IAAI,CAAC/H,KAAK,CAACwC,cAAc,CAAC,CAAC;UAC3BuF,IAAI,CAACpK,cAAc,CAAC4M,EAAE,CAACG,QAAQ,CAAC,CAAC,EAAEH,EAAE,CAACI,OAAO,CAAC,CAAC,CAAC;UAChD;UACA;UACA,IAAI,CAACrO,QAAQ,GAAG,IAAI;UACpBiO,EAAE,CAACrB,OAAO,CAAC,CAAC;QAChB;MACJ,CAAC;MACD0B,SAAS,EAAEA,CAAC5B,MAAM,EAAEuB,EAAE,KAAK;QACvB,IAAI,IAAI,CAACjO,QAAQ,EAAE;UACfiO,EAAE,CAACrB,OAAO,CAAC,CAAC;QAChB;MACJ,CAAC;MACD2B,OAAO,EAAEA,CAAC7B,MAAM,EAAEuB,EAAE,KAAK;QACrB,IAAI,IAAI,CAACjO,QAAQ,EAAE;UACf,IAAI,CAACA,QAAQ,GAAG,KAAK;UACrBiO,EAAE,CAACrB,OAAO,CAAC,CAAC;QAChB;MACJ;IACJ,CAAC;IACDlJ,KAAK,CAAC8K,gBAAgB,CAACT,aAAa,CAAC;EACzC;EACA;AACJ;AACA;AACA;AACA;EACI3B,mBAAmBA,CAAA,EAAG;IAClB,MAAMqC,EAAE,GAAG,IAAI,CAAC/K,KAAK,CAACgL,QAAQ;IAC9B,MAAM/C,MAAM,GAAG,IAAIhO,WAAW,CAAC,IAAI,CAAC+F,KAAK,EAAE,CAAC,IAAI,CAACxB,cAAc,EAAE,IAAI,CAACE,eAAe,EAAE,CAAC,GAAGqM,EAAE,EAAE,CAAC,GAAGA,EAAE,CAAC;IACtG;IACA9C,MAAM,CAACgD,eAAe,GAAI5I,IAAI,IAAK;MAC/B,OAAO,CAAC4F,MAAM,CAACjI,KAAK,CAACqI,UAAU,CAAChG,IAAI,CAAC;IACzC,CAAC;IACD,OAAO4F,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;EACIM,oBAAoBA,CAAA,EAAG;IACnB,OAAO,IAAIxO,iBAAiB,CAAC,IAAI,CAACiG,KAAK,EAAE,IAAI,CAACxB,cAAc,CAAC;EACjE;EACA;AACJ;AACA;AACA;EACI0B,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAIlG,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC;EACxC;EACA;AACJ;AACA;AACA;EACIkR,mBAAmBA,CAACtC,SAAS,EAAE;IAC3B,IAAI,CAAC1L,OAAO,CAAC2L,IAAI,CAACD,SAAS,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIuC,kBAAkBA,CAACvC,SAAS,EAAE;IAC1B,IAAI,IAAI,CAACzL,MAAM,IAAI,IAAI,EAAE;MACrB,IAAI,CAACA,MAAM,GAAGyL,SAAS;MACvB;MACA;MACA,IAAI,CAACE,WAAW,CAACjN,aAAa,CAACuP,IAAI,EAAE,MAAM;QACvC,MAAMC,MAAM,GAAG,IAAI5F,IAAI,CAAC,CAAC,CAAC6F,cAAc,CAAC,CAAC;QAC1C,IAAI,CAACC,SAAS,CAAE,GAAE1R,YAAY,CAAC4K,GAAG,CAAC,IAAI,CAAC/H,iBAAiB,CAAC,IAAI,IAAI,CAACA,iBAAkB,KAAI2O,MAAO,EAAC,CAAC;MACtG,CAAC,CAAC;MACF;MACA;MACA,IAAI,CAACvC,WAAW,CAACjN,aAAa,CAAC2P,IAAI,EAAE,MAAM;QACvC,IAAI,CAACD,SAAS,CAAE,GAAE1R,YAAY,CAAC4K,GAAG,CAAC,IAAI,CAAC9H,mBAAmB,CAAC,IAAI,IAAI,CAACA,mBAAoB,KAAI,IAAI,CAACuB,QAAS,EAAC,CAAC;MACjH,CAAC,CAAC;IACN;EACJ;EACA;AACJ;AACA;AACA;EACIqN,SAASA,CAACpF,OAAO,EAAE;IACf,IAAI,IAAI,CAAChJ,MAAM,IAAI,IAAI,IAAIgJ,OAAO,IAAI,IAAI,EAAE;MACxC,IAAI,CAAChJ,MAAM,CAACsO,SAAS,GAAGtF,OAAO;IACnC;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIuF,iBAAiBA,CAAC9C,SAAS,EAAE;IACzB,IAAI,CAACE,WAAW,CAACjN,aAAa,CAAC+N,IAAI,EAAGZ,MAAM,IAAK;MAC7CJ,SAAS,CAAC6C,SAAS,GAAG,IAAI,CAACE,QAAQ,CAAC,CAAC;IACzC,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACvJ,IAAI,EAAEwJ,UAAU,EAAE;IACzB,IAAIxJ,IAAI,IAAI,IAAI,EAAE;MACd,MAAM4F,MAAM,GAAG,IAAIlO,iBAAiB,CAAC,IAAI,CAACiG,KAAK,EAAE6L,UAAU,CAAC;MAC5D5D,MAAM,CAACjH,OAAO,CAACqB,IAAI,CAAC;IACxB;EACJ;EACA;AACJ;AACA;EACIsJ,QAAQA,CAAA,EAAG;IACP,IAAIG,KAAK,GAAG,EAAE;IACd,MAAM;MAAE9L;IAAM,CAAC,GAAG,IAAI;IACtB,IAAIqC,IAAI,GAAGrC,KAAK,CAAC+L,cAAc,CAAC,CAAC;IACjC,OAAO1J,IAAI,IAAI,IAAI,IAAIA,IAAI,CAAC+F,SAAS,CAAC,CAAC,CAACA,SAAS,CAAC,CAAC,IAAI,IAAI,EAAE;MACzD;MACA,IAAIpI,KAAK,CAACwI,WAAW,CAACnG,IAAI,CAAC,EAAE;QACzByJ,KAAK,GAAI,MAAK9L,KAAK,CAACgM,oBAAoB,CAAC3J,IAAI,CAAE,GAAEyJ,KAAM,EAAC;MAC5D;MACAzJ,IAAI,GAAGA,IAAI,CAAC+F,SAAS,CAAC,CAAC;IAC3B;IACA,MAAM6D,MAAM,GAAG,IAAI,CAACC,YAAY,CAAC,CAAC;IAClC,OAAOD,MAAM,GAAGH,KAAK;EACzB;EACA;AACJ;AACA;EACII,YAAYA,CAAA,EAAG;IACX,MAAM/B,IAAI,GAAG,IAAI,CAACnK,KAAK,CAACmI,YAAY,CAAC,CAAC,CAACgE,OAAO,CAAC,CAAC;IAChD,OAAO,IAAI,CAACnM,KAAK,CAACgM,oBAAoB,CAAC7B,IAAI,CAAC;EAChD;EACA;AACJ;AACA;EACIpI,IAAIA,CAAA,EAAG;IACH,IAAI,CAAC1E,WAAW,CAAC0E,IAAI,CAAC,CAAC;EAC3B;EACA;AACJ;AACA;EACIC,IAAIA,CAAA,EAAG;IACH,IAAI,CAAC3E,WAAW,CAAC2E,IAAI,CAAC,CAAC;EAC3B;EACA;AACJ;AACA;AACA;AACA;EACIL,UAAUA,CAAA,EAAG;IACT,MAAMyK,MAAM,GAAG,IAAI,CAACnO,eAAe,IAAI,IAAI,GAAG,IAAI,CAACA,eAAe,GAAG,IAAI,CAAC+B,KAAK,CAACgL,QAAQ;IACxF,OAAO,IAAI,CAAChL,KAAK,CAAC2B,UAAU,CAAC,IAAI,CAAC0K,WAAW,CAAC,CAAC,EAAED,MAAM,CAAC;EAC5D;EACA;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAAA,EAAG;IACV,MAAMnE,KAAK,GAAG,IAAI,CAAClI,KAAK,CAACmI,YAAY,CAAC,CAAC;IACvC,OAAOD,KAAK,CAACoE,SAAS,CAAC,IAAI,CAACtO,YAAY,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI4C,IAAIA,CAAC1C,QAAQ,EAAE;IACX,IAAIA,QAAQ,IAAI,IAAI,EAAE;MAClB,MAAMgD,GAAG,GAAGzF,IAAI,CAACyC,QAAQ,CAAC,CAAC1C,MAAM,CAAC,CAAC;MACnC,IAAI,CAAC+Q,cAAc,CAACrL,GAAG,CAACsL,eAAe,CAAC;MACxC,IAAI,CAACtO,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACyL,SAAS,CAAC,IAAIzP,WAAW,CAAC2B,aAAa,CAAC2P,IAAI,EAAE;QAAEtN;MAAS,CAAC,CAAC,CAAC;IACrE;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIqO,cAAcA,CAACtL,IAAI,EAAE;IACjB,MAAMkE,GAAG,GAAG,IAAI/K,KAAK,CAAC6G,IAAI,CAACmE,aAAa,CAAC;IACzCD,GAAG,CAACE,MAAM,CAACpE,IAAI,EAAE,IAAI,CAACjB,KAAK,CAACmI,YAAY,CAAC,CAAC,CAAC;IAC3C,IAAI,CAAC7C,YAAY,CAAC,CAAC;EACvB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI5E,IAAIA,CAACG,GAAG,GAAG,IAAI,EAAE1C,QAAQ,GAAG,IAAI,CAACA,QAAQ,EAAE;IACvC;IACA0C,GAAG,GAAGA,GAAG,IAAI,IAAI,CAAC4L,UAAU,CAAC,CAAC;IAC9B;IACA,IAAI5L,GAAG,IAAI,IAAI,IAAIA,GAAG,CAACoJ,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAMyC,IAAI,GAAG,IAAI,CAACC,eAAe,CAACxO,QAAQ,CAAC;MAC3C,IAAI,CAACyO,WAAW,CAAC/L,GAAG,EAAE6L,IAAI,CAAC;MAC3B;MACA,IAAI,CAACpM,WAAW,CAAC,KAAK,CAAC;IAC3B;IACA;IACA,IAAI,CAACqJ,SAAS,CAAC,IAAIzP,WAAW,CAAC2B,aAAa,CAACuP,IAAI,EAAE;MAAEvK;IAAI,CAAC,CAAC,CAAC;EAChE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI+L,WAAWA,CAAC/L,GAAG,EAAE6L,IAAI,EAAE;IACnB,IAAI,IAAI,CAACrO,cAAc,EAAE;MACrBqO,IAAI,GAAGvL,kBAAkB,CAACuL,IAAI,CAAC;IACnC;IACAhR,IAAI,CAACmF,GAAG,EAAG,GAAE,IAAI,CAACzC,iBAAkB,IAAGsO,IAAK,EAAC,EAAGG,GAAG,IAAK;MACpD,IAAI,CAAClD,SAAS,CAAC,IAAIzP,WAAW,CAAC2B,aAAa,CAACiR,IAAI,EAAE;QAAEC,OAAO,EAAEF,GAAG;QAAEhM,GAAG;QAAE6L;MAAK,CAAC,CAAC,CAAC;IACpF,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAACxO,QAAQ,EAAE;IACtBA,QAAQ,GAAGA,QAAQ,IAAI,IAAI,GAAGA,QAAQ,GAAG,IAAI,CAACA,QAAQ;IACtD,MAAM6O,GAAG,GAAG,IAAI5S,KAAK,CAAC,CAAC;IACvB,MAAM6G,IAAI,GAAG+L,GAAG,CAACC,MAAM,CAAC,IAAI,CAACjN,KAAK,CAACmI,YAAY,CAAC,CAAC,CAAC;IAClD,OAAO3M,MAAM,CAACyF,IAAI,EAAE9C,QAAQ,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;EACIsO,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACnO,OAAO;EACvB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIwC,WAAWA,CAAA,EAAG;IACV,OAAO,IAAI,CAACvC,QAAQ;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACI2O,UAAUA,CAACC,KAAK,EAAEC,MAAM,EAAE;IACtB;IACA,MAAMC,KAAK,GAAG,IAAI,CAACrN,KAAK,CAACsN,aAAa,CAAC,CAAC,CAACC,MAAM,CAACH,MAAM,CAAC;IACvD,IAAI,CAACpN,KAAK,CACLqE,OAAO,CAAC;IACT;IAAA,CACCiJ,aAAa,CAAC;IACf;IAAA,CACCE,YAAY,CAACJ,MAAM,EAAE,IAAI,CAACpN,KAAK,CAACsN,aAAa,CAAC,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC;IACnE,IAAI,CAACnN,KAAK,CAACsN,aAAa,CAAC,CAAC,CAACE,YAAY,CAACL,KAAK,EAAEE,KAAK,CAAC;IACrD,IAAI,CAACrN,KAAK,CAACoB,OAAO,CAAC,CAAC;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIkB,cAAcA,CAACD,IAAI,GAAG,IAAI,EAAE;IACxBA,IAAI,GAAGA,IAAI,IAAI,IAAI,CAACrC,KAAK,CAACyN,gBAAgB,CAAC,CAAC;IAC5C;IACA;IACA;IACA,IAAIpL,IAAI,IAAI,IAAI,EAAE;MACdA,IAAI,GAAG,IAAI,CAACrC,KAAK,CAAC+L,cAAc,CAAC,CAAC;MAClC,IAAI1J,IAAI,IAAI,IAAI,EAAE;QACdA,IAAI,GAAG,IAAI,CAACrC,KAAK,CAACmI,YAAY,CAAC,CAAC,CAACgE,OAAO,CAAC,CAAC;MAC9C;IACJ;IACA,IAAI9J,IAAI,IAAI,IAAI,EAAE;MACd;MACA;MACA,IAAI,CAACrC,KAAK,CAAC0N,WAAW,CAAC,IAAI,CAAC;MAC5B,MAAMC,MAAM,GAAGxT,SAAS,CAAC,IAAI,CAAC6F,KAAK,CAAC4I,SAAS,CAAC;MAC9C,IAAIgF,CAAC,GAAGD,MAAM,CAACC,CAAC,GAAG,EAAE;MACrB,IAAI;QAAEC;MAAE,CAAC,GAAGF,MAAM;MAClB;MACA,IAAI,IAAI,CAACG,UAAU,IAAI,IAAI,IAAI,CAAC,IAAI,CAACpO,oBAAoB,EAAE;QACvDkO,CAAC,GAAG,IAAI,CAACE,UAAU,CAACC,IAAI,CAAC,CAAC;QAC1BF,CAAC,GAAG,IAAI,CAACC,UAAU,CAACE,IAAI,CAAC,CAAC;MAC9B;MACA;MACA;MAAA,KACK;QACD,MAAMC,MAAM,GAAG,IAAI,CAACjO,KAAK,CAACkO,aAAa,CAAC7L,IAAI,CAAC;QAC7C,IAAI4L,MAAM,IAAI,IAAI,EAAE;UAChBL,CAAC,IAAIK,MAAM,CAACL,CAAC,GAAGO,IAAI,CAACC,GAAG,CAAC,GAAG,EAAEH,MAAM,CAACI,KAAK,CAAC;UAC3CR,CAAC,IAAII,MAAM,CAACJ,CAAC;QACjB;MACJ;MACA;MACA;MACA,IAAI,CAACS,cAAc,CAAC,CAAC;MACrB,MAAMrN,IAAI,GAAG,IAAI,CAACsN,gBAAgB,CAAClM,IAAI,CAAC;MACxC,IAAIpB,IAAI,IAAI,IAAI,EAAE;QACd;QACA;QACA,IAAI,CAAC6M,UAAU,GAAG,IAAIzT,SAAS,CAACR,YAAY,CAAC4K,GAAG,CAAC,IAAI,CAAC7H,kBAAkB,CAAC,IAAI,IAAI,CAACA,kBAAkB,EAAEqE,IAAI,EAAE2M,CAAC,EAAEC,CAAC,EAAE,IAAI,CAACrO,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,KAAK,CAAC;QACrK,IAAI,CAACqO,UAAU,CAAChJ,UAAU,CAAC,IAAI,CAAC;MACpC;IACJ;EACJ;EACA;AACJ;AACA;EACI0J,mBAAmBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACV,UAAU,IAAI,IAAI;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;EACIS,gBAAgBA,CAAClM,IAAI,EAAE;IACnB,MAAM6F,KAAK,GAAG,IAAI,CAAClI,KAAK,CAACmI,YAAY,CAAC,CAAC;IACvC,MAAM5H,KAAK,GAAG8B,IAAI,CAACoM,QAAQ,CAAC,CAAC;IAC7B,IAAInT,MAAM,CAACiF,KAAK,CAAC,EAAE;MACf;MACA;MACA,MAAMmO,IAAI,GAAG,IAAInU,OAAO,CAAC,YAAY,CAAC;MACtC;MACA,MAAMoU,EAAE,GAAGD,IAAI,CAACE,OAAO,CAAC,IAAI,EAAEvM,IAAI,CAACwM,KAAK,CAAC,CAAC,CAAC;MAC3CF,EAAE,CAACG,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC;MACnC,IAAIC,GAAG,GAAG,IAAI;MACd,IAAIC,MAAM,GAAG,IAAI;MACjB,IAAIC,MAAM,GAAG,IAAI;MACjB,IAAIC,UAAU,GAAG,IAAI;MACrB,IAAIC,WAAW,GAAG,IAAI;MACtB;MACA,IAAI9M,IAAI,CAAC+M,QAAQ,CAAC,CAAC,EAAE;QACjBL,GAAG,GAAG1M,IAAI,CAACgN,WAAW,CAAC,CAAC;QACxB,IAAIN,GAAG,IAAI,IAAI,EAAE;UACbC,MAAM,GAAGN,IAAI,CAACE,OAAO,CAAC,KAAK,EAAEG,GAAG,CAAClB,CAAC,CAAC;UACnCoB,MAAM,GAAGP,IAAI,CAACE,OAAO,CAAC,MAAM,EAAEG,GAAG,CAACnB,CAAC,CAAC;UACpCsB,UAAU,GAAGR,IAAI,CAACE,OAAO,CAAC,OAAO,EAAEG,GAAG,CAACV,KAAK,CAAC;UAC7Cc,WAAW,GAAGT,IAAI,CAACE,OAAO,CAAC,QAAQ,EAAEG,GAAG,CAACO,MAAM,CAAC;QACpD;MACJ;MACA;MACA,MAAMC,GAAG,GAAGlN,IAAI,CAACmN,QAAQ,CAAC,CAAC;MAC3B,MAAMnC,KAAK,GAAGqB,IAAI,CAACE,OAAO,CAAC,OAAO,EAAEW,GAAG,IAAI,EAAE,CAAC;MAC9C;MACA;MACA,MAAME,KAAK,GAAGlP,KAAK,CAACmP,UAAU;MAC9B,MAAMC,KAAK,GAAG,EAAE;MAChB,KAAK,IAAI3F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyF,KAAK,CAACxF,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QACtC;QACA;QACA,MAAM4F,GAAG,GAAGH,KAAK,CAACzF,CAAC,CAAC,CAACzJ,KAAK;QAC1BoP,KAAK,CAACE,IAAI,CAACnB,IAAI,CAACoB,WAAW,CAACL,KAAK,CAACzF,CAAC,CAAC,CAAC+F,QAAQ,EAAEH,GAAG,EAAEH,KAAK,CAACzF,CAAC,CAAC,CAAC+F,QAAQ,KAAK,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAC/F;MACA;MACA;MACA;MACA;MACA;MACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;QACrB;QACA,IAAI,CAAC1B,cAAc,CAAC,CAAC;QACrB;QACA;QACApG,KAAK,CAAC+H,WAAW,CAAC,CAAC;QACnB,IAAI;UACA,IAAIlB,GAAG,IAAI,IAAI,IACXE,MAAM,IAAI,IAAI,IACdD,MAAM,IAAI,IAAI,IACdE,UAAU,IAAI,IAAI,IAClBC,WAAW,IAAI,IAAI,EAAE;YACrBJ,GAAG,GAAGA,GAAG,CAACmB,KAAK,CAAC,CAAC;YACjBnB,GAAG,CAACnB,CAAC,GAAGjJ,UAAU,CAACsK,MAAM,CAAC1O,KAAK,CAAC;YAChCwO,GAAG,CAAClB,CAAC,GAAGlJ,UAAU,CAACqK,MAAM,CAACzO,KAAK,CAAC;YAChCwO,GAAG,CAACV,KAAK,GAAG1J,UAAU,CAACuK,UAAU,CAAC3O,KAAK,CAAC;YACxCwO,GAAG,CAACO,MAAM,GAAG3K,UAAU,CAACwK,WAAW,CAAC5O,KAAK,CAAC;YAC1C2H,KAAK,CAACiI,WAAW,CAAC9N,IAAI,EAAE0M,GAAG,CAAC;UAChC;UACA;UACA,IAAI1B,KAAK,CAAC9M,KAAK,CAAC0J,MAAM,GAAG,CAAC,EAAE;YACxB;YACA/B,KAAK,CAACkI,QAAQ,CAAC/N,IAAI,EAAEgL,KAAK,CAAC9M,KAAK,CAAC;UACrC,CAAC,MACI;YACD2H,KAAK,CAACkI,QAAQ,CAAC/N,IAAI,EAAE,CAAC,CAAC,CAAC;UAC5B;UACA;UACA;UACA;UACA;UACA,KAAK,IAAI2H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyF,KAAK,CAACxF,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;YACtC,MAAMZ,IAAI,GAAG,IAAIlO,mBAAmB,CAACmH,IAAI,EAAEoN,KAAK,CAACzF,CAAC,CAAC,CAAC+F,QAAQ,EAAEJ,KAAK,CAAC3F,CAAC,CAAC,CAACzJ,KAAK,CAAC;YAC7E2H,KAAK,CAAClH,OAAO,CAACoI,IAAI,CAAC;UACvB;UACA;UACA;UACA;UACA;UACA,IAAI,IAAI,CAACpJ,KAAK,CAACqQ,cAAc,CAAChO,IAAI,CAAC,EAAE;YACjC,IAAI,CAACrC,KAAK,CAACsQ,cAAc,CAACjO,IAAI,CAAC;UACnC;QACJ,CAAC,SACO;UACJ6F,KAAK,CAACqI,SAAS,CAAC,CAAC;QACrB;MACJ,CAAC;MACD;MACA;MACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;QACzB;QACA,IAAI,CAAClC,cAAc,CAAC,CAAC;MACzB,CAAC;MACDI,IAAI,CAAC+B,UAAU,CAACT,UAAU,EAAEQ,cAAc,CAAC;MAC3C,OAAO9B,IAAI,CAACgC,KAAK;IACrB;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACIpC,cAAcA,CAAA,EAAG;IACb,IAAI,IAAI,CAACR,UAAU,IAAI,IAAI,EAAE;MACzB,IAAI,CAACA,UAAU,CAAC6C,OAAO,CAAC,CAAC;MACzB,IAAI,CAAC7C,UAAU,GAAG,IAAI;IAC1B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI9I,SAASA,CAAA,EAAG;IACR,IAAI,IAAI,CAAChG,KAAK,IAAI,IAAI,EAAE;MACpB,MAAM4R,GAAG,GAAG9Q,QAAQ,CAAC+Q,aAAa,CAAC,KAAK,CAAC;MACzCD,GAAG,CAACvD,KAAK,CAACyD,OAAO,GAAG,KAAK;MACzBF,GAAG,CAACvD,KAAK,CAAC0D,WAAW,GAAG,MAAM;MAC9B,MAAMC,CAAC,GAAGlR,QAAQ,CAACC,IAAI,CAACkR,WAAW;MACnC,MAAMC,GAAG,GAAG,IAAI7W,SAAS,CAACR,YAAY,CAAC4K,GAAG,CAAC,IAAI,CAAC5H,aAAa,CAAC,IAAI,IAAI,CAACA,aAAa,EAAE+T,GAAG,EAAEI,CAAC,GAAG,GAAG,EAAE,IAAI,CAAC9R,QAAQ,EAAE,GAAG,CAAC;MACvHgS,GAAG,CAACC,WAAW,CAAC,IAAI,CAAC;MACrBD,GAAG,CAACE,cAAc,GAAG,KAAK;MAC1B;MACA;MACA;MACA,MAAMvL,KAAK,GAAImD,MAAM,IAAK;QACtBnN,aAAa,CAACwV,OAAO,CAACT,GAAG,CAAC;QAC1BA,GAAG,CAACnF,SAAS,GAAG,EAAE;QAClB,IAAI,CAAC6F,WAAW,CAACV,GAAG,CAAC;MACzB,CAAC;MACD,IAAI,CAAC5Q,KAAK,CAACmI,YAAY,CAAC,CAAC,CAACW,WAAW,CAACjN,aAAa,CAACuO,MAAM,EAAEvE,KAAK,CAAC;MAClE,IAAI,CAAC7F,KAAK,CAACuR,iBAAiB,CAAC,CAAC,CAACzI,WAAW,CAACjN,aAAa,CAACuO,MAAM,EAAEvE,KAAK,CAAC;MACvE,IAAI,CAAC7F,KAAK,CAAC8I,WAAW,CAACjN,aAAa,CAAC+N,IAAI,EAAE/D,KAAK,CAAC;MACjD;MACA,IAAI,IAAI,CAAC5G,gBAAgB,IAAI,IAAI,EAAE;QAC/BiS,GAAG,CAACM,QAAQ,CAAC,IAAI,CAACvS,gBAAgB,CAAC;MACvC;MACA,IAAI,CAACD,KAAK,GAAGkS,GAAG;MAChB,IAAI,CAACI,WAAW,CAACV,GAAG,CAAC;IACzB;IACA,IAAI,CAAC5R,KAAK,CAAC8F,UAAU,CAAC,IAAI,CAAC;EAC/B;EACA;AACJ;AACA;AACA;EACI2M,YAAYA,CAACb,GAAG,EAAE;IACd,IAAI,IAAI,CAAC5R,KAAK,IAAI,IAAI,EAAE;MACpB,MAAM4R,GAAG,GAAG,IAAI,CAAC5R,KAAK,CAAC0S,OAAO;MAC9B7V,aAAa,CAACwV,OAAO,CAACT,GAAG,CAAC;MAC1BA,GAAG,CAACnF,SAAS,GAAG,EAAE;MAClB,IAAI,CAAC6F,WAAW,CAACV,GAAG,CAAC;IACzB;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,WAAWA,CAACV,GAAG,EAAE;IACb;EAAA;EAEJ;AACJ;AACA;AACA;AACA;AACA;AACA;EACI3L,QAAQA,CAACjG,KAAK,GAAG,IAAI,EAAE;IACnB,IAAI,IAAI,CAACG,IAAI,IAAI,IAAI,EAAE;MACnB,MAAMwS,KAAK,GAAG7R,QAAQ,CAAC+Q,aAAa,CAAC,QAAQ,CAAC;MAC9Cc,KAAK,CAAC7C,YAAY,CAAC,KAAK,EAAGjV,YAAY,CAAC4K,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAACpF,OAAQ,CAAC;MACxEsS,KAAK,CAAC7C,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC;MACpC6C,KAAK,CAAC7C,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC;MACnC6C,KAAK,CAAC7C,YAAY,CAAC,aAAa,EAAE,GAAG,CAAC;MACtC6C,KAAK,CAACtE,KAAK,CAACuE,eAAe,GAAG,OAAO;MACrC,MAAMZ,CAAC,GAAGlR,QAAQ,CAACC,IAAI,CAACkR,WAAW;MACnC,MAAMY,CAAC,GAAG/R,QAAQ,CAACC,IAAI,CAAC+R,YAAY,IAAIhS,QAAQ,CAAC0M,eAAe,CAACsF,YAAY;MAC7E,MAAMZ,GAAG,GAAG,IAAI7W,SAAS,CAACR,YAAY,CAAC4K,GAAG,CAAC,IAAI,CAAC3H,YAAY,CAAC,IAAI,IAAI,CAACA,YAAY,EAAE6U,KAAK,EAAE,CAACX,CAAC,GAAG,IAAI,CAAC1R,SAAS,IAAI,CAAC,EAAE,CAACuS,CAAC,GAAG,IAAI,CAACtS,UAAU,IAAI,CAAC,EAAE,IAAI,CAACD,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;MAChL2R,GAAG,CAACa,cAAc,CAAC,IAAI,CAAC;MACxBb,GAAG,CAACC,WAAW,CAAC,IAAI,CAAC;MACrBD,GAAG,CAACE,cAAc,GAAG,KAAK;MAC1BF,GAAG,CAACc,YAAY,CAAC,IAAI,CAAC;MACtB;MACA,IAAI,IAAI,CAAC5S,eAAe,IAAI,IAAI,EAAE;QAC9B8R,GAAG,CAACM,QAAQ,CAAC,IAAI,CAACpS,eAAe,CAAC;MACtC;MACA;MACA,IAAItF,MAAM,CAACmY,KAAK,EAAE;QACd,MAAMC,OAAO,GAAIlJ,MAAM,IAAK;UACxB,MAAM6I,CAAC,GAAGX,GAAG,CAACN,GAAG,CAACuB,YAAY;UAC9BR,KAAK,CAAC7C,YAAY,CAAC,QAAQ,EAAG,GAAE+C,CAAC,GAAG,EAAG,IAAG,CAAC;QAC/C,CAAC;QACDX,GAAG,CAACpI,WAAW,CAACjN,aAAa,CAACuW,UAAU,EAAEF,OAAO,CAAC;QAClDhB,GAAG,CAACpI,WAAW,CAACjN,aAAa,CAACwW,QAAQ,EAAEH,OAAO,CAAC;QAChDhB,GAAG,CAACpI,WAAW,CAACjN,aAAa,CAACyW,SAAS,EAAEJ,OAAO,CAAC;QACjDhB,GAAG,CAACpI,WAAW,CAACjN,aAAa,CAAC0W,IAAI,EAAEL,OAAO,CAAC;MAChD;MACA,IAAI,CAAC/S,IAAI,GAAG+R,GAAG;IACnB;IACA,IAAI,CAAC/R,IAAI,CAAC2F,UAAU,CAAC,IAAI,CAAC;EAC9B;EACA;AACJ;AACA;AACA;EACII,WAAWA,CAAA,EAAG;IACV,MAAMsN,MAAM,GAAG,IAAI,CAACxV,OAAO,IAAI,IAAI;IACnC,IAAIwV,MAAM,EAAE;MACR,MAAM5B,GAAG,GAAG9Q,QAAQ,CAAC+Q,aAAa,CAAC,KAAK,CAAC;MACzCD,GAAG,CAACvD,KAAK,CAACoF,QAAQ,GAAG,QAAQ;MAC7B7B,GAAG,CAACvD,KAAK,CAACqF,QAAQ,GAAG,UAAU;MAC/B9B,GAAG,CAACvD,KAAK,CAACgB,KAAK,GAAG,MAAM;MACxBuC,GAAG,CAACvD,KAAK,CAACiC,MAAM,GAAG,MAAM;MACzBsB,GAAG,CAACvD,KAAK,CAACsF,UAAU,GAAG,OAAO;MAC9B/B,GAAG,CAACvD,KAAK,CAACuF,MAAM,GAAG,MAAM;MACzB,MAAM1B,GAAG,GAAG,IAAI7W,SAAS,CAACR,YAAY,CAAC4K,GAAG,CAAC,IAAI,CAAC1H,eAAe,CAAC,IAAI,IAAI,CAACA,eAAe,EAAE6T,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;MACzH;MACA;MACA,MAAM5T,OAAO,GAAG,IAAIxC,OAAO,CAAC,IAAI,CAACwF,KAAK,EAAE4Q,GAAG,CAAC;MAC5CM,GAAG,CAACC,WAAW,CAAC,IAAI,CAAC;MACrBD,GAAG,CAACc,YAAY,CAAC,IAAI,CAAC;MACtBd,GAAG,CAACE,cAAc,GAAG,KAAK;MAC1BF,GAAG,CAACpI,WAAW,CAACjN,aAAa,CAACuW,UAAU,EAAE,MAAM;QAC5CpV,OAAO,CAAC6V,MAAM,CAAC,CAAC;MACpB,CAAC,CAAC;MACF,IAAI,CAAC7V,OAAO,GAAGkU,GAAG;MAClB,IAAI,CAAClU,OAAO,CAACxC,OAAO,GAAGwC,OAAO;IAClC;IACA;IACA,IAAI,CAACA,OAAO,CAAC8H,UAAU,CAAC,IAAI,CAAC;IAC7B,IAAI,CAAC9H,OAAO,CAACA,OAAO,CAAC6V,MAAM,CAAC,IAAI,CAAC;EACrC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAOA,CAACC,QAAQ,EAAE;IACd,MAAMC,cAAc,GAAI,IAAI,CAAChT,KAAK,CAACkH,SAAS,CAAC,gBAAgB,CAAE;IAC/D,IAAI6L,QAAQ,KAAK,QAAQ,EAAE;MACvBC,cAAc,KAAKA,cAAc,CAACC,uBAAuB,GAAG,KAAK,CAAC;MAClE,IAAI,CAACjT,KAAK,CAACkT,cAAc,CAAC,KAAK,CAAC;IACpC,CAAC,MACI,IAAIH,QAAQ,KAAK,SAAS,EAAE;MAC7BC,cAAc,KAAKA,cAAc,CAACC,uBAAuB,GAAG,KAAK,CAAC;MAClE,IAAI,CAACjT,KAAK,CAACkT,cAAc,CAAC,IAAI,CAAC;IACnC,CAAC,MACI,IAAIH,QAAQ,KAAK,KAAK,EAAE;MACzBC,cAAc,KAAKA,cAAc,CAACC,uBAAuB,GAAG,IAAI,CAAC;MACjE,IAAI,CAACjT,KAAK,CAACkT,cAAc,CAAC,KAAK,CAAC;IACpC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI7L,eAAeA,CAACD,IAAI,EAAE/E,IAAI,EAAEyD,GAAG,EAAE;IAC7B,IAAI,CAAC1I,YAAY,CAAC+V,UAAU,CAAC,IAAI,EAAE/L,IAAI,EAAE/E,IAAI,EAAEyD,GAAG,CAAC;EACvD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2B,UAAUA,CAACF,MAAM,EAAEC,MAAM,EAAE;IACvB;IACA,IAAItB,CAAC;IACL,IAAI,IAAI,CAACpI,WAAW,IAAI,IAAI,EAAE;MAC1B,MAAMoK,KAAK,GAAG,IAAI,CAAClI,KAAK,CAACmI,YAAY,CAAC,CAAC;MACvCjC,CAAC,GAAGgC,KAAK,CAACoE,SAAS,CAAC,IAAI,CAACxO,WAAW,CAAC;IACzC,CAAC,MACI;MACDoI,CAAC,GAAG,IAAIzL,IAAI,CAAC,EAAE,CAAC;MAChByL,CAAC,CAACkN,OAAO,CAAC,IAAI,CAAC;MACf,MAAMrE,GAAG,GAAG,IAAIrU,QAAQ,CAAC,CAAC;MAC1BqU,GAAG,CAACsE,QAAQ,GAAG,IAAI;MACnBnN,CAAC,CAACiK,WAAW,CAACpB,GAAG,CAAC;IACtB;IACA;IACA,MAAM1B,KAAK,GAAG,IAAI,CAACiG,YAAY,CAAC,CAAC;IACjC,IAAIjG,KAAK,IAAI,IAAI,EAAE;MACfnH,CAAC,CAACkK,QAAQ,CAAC/C,KAAK,CAAC;IACrB;IACA,OAAOnH,CAAC;EACZ;EACA;AACJ;AACA;AACA;AACA;EACIoN,YAAYA,CAAA,EAAG;IACX,OAAO,IAAI,CAACvV,gBAAgB;EAChC;EACA;AACJ;AACA;AACA;AACA;EACIwV,qBAAqBA,CAAClR,IAAI,EAAE;IACxB,OAAO,IAAI,CAACxD,oBAAoB,IAAI,IAAI,IACpC,IAAI,CAACA,oBAAoB,CAACoL,MAAM,GAAG,CAAC,IACpC,IAAI,CAACjK,KAAK,CAACqI,UAAU,CAAChG,IAAI,CAAC,GACzB,IAAI,CAACxD,oBAAoB,CAAC,IAAI,CAACC,mBAAmB,EAAE,GAAG,IAAI,CAACD,oBAAoB,CAACoL,MAAM,CAAC,GACxF,IAAI;EACd;EACA;AACJ;AACA;AACA;AACA;EACIuJ,cAAcA,CAACnR,IAAI,EAAE;IACjB,IAAI,IAAI,CAACtD,kBAAkB,IAAI,IAAI,EAAE;MACjC,MAAMwB,KAAK,GAAG,IAAI,CAACgT,qBAAqB,CAAClR,IAAI,CAAC;MAC9C,IAAI9B,KAAK,IAAI,IAAI,EAAE;QACf;QACA8B,IAAI,CAAC+N,QAAQ,CAAE,GAAE/N,IAAI,CAACmN,QAAQ,CAAC,CAAE,IAAG,IAAI,CAACzQ,kBAAmB,IAAGwB,KAAM,EAAC,CAAC;MAC3E;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIkT,SAASA,CAACC,MAAM,EAAEC,MAAM,EAAE/F,CAAC,EAAEC,CAAC,EAAE;IAC5B,MAAM3F,KAAK,GAAG,IAAI,CAAClI,KAAK,CAACmI,YAAY,CAAC,CAAC;IACvC,OAAOuL,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC1T,KAAK,CAAC4T,iBAAiB,CAACF,MAAM,CAAC,EAAE;MAC5DA,MAAM,GAAGA,MAAM,CAACtL,SAAS,CAAC,CAAC;IAC/B;IACAsL,MAAM,GAAGA,MAAM,IAAI,IAAI,GAAGA,MAAM,GAAG,IAAI,CAAC1T,KAAK,CAAC6T,aAAa,CAACjG,CAAC,EAAEC,CAAC,CAAC;IACjE,MAAM;MAAEvJ;IAAM,CAAC,GAAG,IAAI,CAACtE,KAAK,CAACqE,OAAO,CAAC,CAAC;IACtC,IAAI0K,GAAG,GAAG4E,MAAM,CAACtE,WAAW,CAAC,CAAC;IAC9B,MAAMyE,IAAI,GAAGJ,MAAM,CAACrE,WAAW,CAAC,CAAC;IACjC,IAAI,IAAI,CAACrP,KAAK,CAACqI,UAAU,CAACsL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC3T,KAAK,CAAC+T,eAAe,EAAE;MAC9DL,MAAM,GAAG,IAAI;IACjB,CAAC,MACI,IAAIA,MAAM,IAAI,IAAI,IAAI,IAAI,CAACjW,gBAAgB,EAAE;MAC9C,OAAO,IAAI;IACf,CAAC,MACI,IAAIiW,MAAM,IAAI,IAAI,IAAII,IAAI,IAAI,IAAI,EAAE;MACrC;MACA,MAAME,KAAK,GAAG,IAAI,CAAChU,KAAK,CAACqE,OAAO,CAAC,CAAC,CAACoG,QAAQ,CAACiJ,MAAM,CAAC;MACnD,IAAIM,KAAK,IAAI,IAAI,EAAE;QACfpG,CAAC,IAAIoG,KAAK,CAACC,MAAM,CAACrG,CAAC,GAAGtJ,KAAK;QAC3BuJ,CAAC,IAAImG,KAAK,CAACC,MAAM,CAACpG,CAAC,GAAGvJ,KAAK;QAC3B,IAAI,IAAI,CAACtE,KAAK,CAACkU,mBAAmB,EAAE;UAChC,MAAM;YAAE7F;UAAM,CAAC,GAAGU,GAAG;UACrB,MAAM;YAAEO;UAAO,CAAC,GAAGP,GAAG;UACtB,IAAIQ,GAAG,GAAGyE,KAAK,CAACpG,CAAC,GAAGoG,KAAK,CAAC3F,KAAK;UAC/B,IAAIT,CAAC,GAAGS,KAAK,GAAGkB,GAAG,EAAE;YACjB3B,CAAC,IAAIA,CAAC,GAAGS,KAAK,GAAGkB,GAAG;UACxB;UACAA,GAAG,GAAGyE,KAAK,CAACnG,CAAC,GAAGmG,KAAK,CAAC1E,MAAM;UAC5B,IAAIzB,CAAC,GAAGyB,MAAM,GAAGC,GAAG,EAAE;YAClB1B,CAAC,IAAIA,CAAC,GAAGyB,MAAM,GAAGC,GAAG;UACzB;QACJ;MACJ,CAAC,MACI,IAAIuE,IAAI,IAAI,IAAI,EAAE;QACnBlG,CAAC,IAAIkG,IAAI,CAAClG,CAAC,GAAGtJ,KAAK;QACnBuJ,CAAC,IAAIiG,IAAI,CAACjG,CAAC,GAAGvJ,KAAK;MACvB;IACJ;IACAyK,GAAG,GAAGA,GAAG,CAACmB,KAAK,CAAC,CAAC;IACjBnB,GAAG,CAACnB,CAAC,GAAG,IAAI,CAAC5N,KAAK,CAACmU,IAAI,CAACvG,CAAC,GAAGtJ,KAAK,GAAG,IAAI,CAACtE,KAAK,CAACqE,OAAO,CAAC,CAAC,CAAC+P,SAAS,CAACxG,CAAC,GAAG,IAAI,CAAC5N,KAAK,CAACgL,QAAQ,GAAG,CAAC,CAAC;IAC/F+D,GAAG,CAAClB,CAAC,GAAG,IAAI,CAAC7N,KAAK,CAACmU,IAAI,CAACtG,CAAC,GAAGvJ,KAAK,GAAG,IAAI,CAACtE,KAAK,CAACqE,OAAO,CAAC,CAAC,CAAC+P,SAAS,CAACvG,CAAC,GAAG,IAAI,CAAC7N,KAAK,CAACgL,QAAQ,GAAG,CAAC,CAAC;IAC/F2I,MAAM,CAACxD,WAAW,CAACpB,GAAG,CAAC;IACvB,IAAI2E,MAAM,IAAI,IAAI,EAAE;MAChBA,MAAM,GAAG,IAAI,CAAC1T,KAAK,CAACqU,gBAAgB,CAAC,CAAC;IAC1C;IACA,IAAI,CAACb,cAAc,CAACG,MAAM,CAAC;IAC3B,IAAI,CAAChK,SAAS,CAAC,IAAIzP,WAAW,CAAC2B,aAAa,CAACyY,iBAAiB,EAAE;MAAEX,MAAM,EAAEA,MAAM;MAAED,MAAM,EAAEA;IAAO,CAAC,CAAC,CAAC;IACpGxL,KAAK,CAAC+H,WAAW,CAAC,CAAC;IACnB,IAAI;MACA0D,MAAM,GAAG,IAAI,CAAC3T,KAAK,CAACuU,OAAO,CAACZ,MAAM,EAAED,MAAM,CAAC;MAC3C,IAAIC,MAAM,IAAI,IAAI,EAAE;QAChB,IAAI,CAAC3T,KAAK,CAACwU,cAAc,CAACb,MAAM,CAAC;QACjC,IAAI,CAAChK,SAAS,CAAC,IAAIzP,WAAW,CAAC2B,aAAa,CAAC4Y,UAAU,EAAE;UAAEd,MAAM,EAAEA;QAAO,CAAC,CAAC,CAAC;MACjF;IACJ,CAAC,SACO;MACJzL,KAAK,CAACqI,SAAS,CAAC,CAAC;IACrB;IACA,IAAIoD,MAAM,IAAI,IAAI,EAAE;MAChB,IAAI,CAAC3T,KAAK,CAAC0B,gBAAgB,CAACiS,MAAM,CAAC;MACnC,IAAI,CAAC3T,KAAK,CAAC0U,mBAAmB,CAACf,MAAM,CAAC;MACtC,IAAI,CAAChK,SAAS,CAAC,IAAIzP,WAAW,CAAC2B,aAAa,CAAC8Y,gBAAgB,EAAE;QAAEhB,MAAM,EAAEA;MAAO,CAAC,CAAC,CAAC;IACvF;IACA,OAAOA,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;EACIhD,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC,IAAI,CAACpU,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,IAAI,CAACyC,KAAK,IAAI,IAAI,EAAE;QACpB,IAAI,CAACA,KAAK,CAAC2R,OAAO,CAAC,CAAC;MACxB;MACA,IAAI,IAAI,CAAC3T,OAAO,IAAI,IAAI,EAAE;QACtB,IAAI,CAACA,OAAO,CAAC2T,OAAO,CAAC,CAAC;MAC1B;MACA,IAAI,IAAI,CAAC7C,UAAU,IAAI,IAAI,EAAE;QACzB,IAAI,CAACA,UAAU,CAAC6C,OAAO,CAAC,CAAC;MAC7B;MACA,IAAI,IAAI,CAACrT,UAAU,IAAI,IAAI,EAAE;QACzB,IAAI,CAACA,UAAU,CAACqT,OAAO,CAAC,CAAC;MAC7B;MACA,IAAI,IAAI,CAACtU,UAAU,IAAI,IAAI,EAAE;QACzB,IAAI,CAACA,UAAU,CAACuY,SAAS,CAAC,CAAC;MAC/B;MACA,IAAI,IAAI,CAAC1X,OAAO,IAAI,IAAI,EAAE;QACtB,IAAI,CAACA,OAAO,CAACyT,OAAO,CAAC,CAAC;MAC1B;MACA,IAAI,IAAI,CAAC3Q,KAAK,IAAI,IAAI,EAAE;QACpB,IAAI,CAACA,KAAK,CAAC2Q,OAAO,CAAC,CAAC;MACxB;MACA,IAAI,CAACxT,MAAM,GAAG,IAAI;MAClB,IAAI,CAACU,SAAS,GAAG,IAAI;IACzB;EACJ;AACJ;AACA,eAAe9B,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n *\n * To add a new image bundle to an existing graph, the following code is used:\n *\n * ```javascript\n * let bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * ```;\n *\n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n *\n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n *\n * The keys for images are resolved in {@link Graph#postProcessCellStyle} and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n *\n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n *\n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nclass ImageBundle {\n  constructor(alt = false) {\n    this.images = {};\n    this.alt = alt;\n  }\n  /**\n   * Adds the specified entry to the map. The entry is an object with a value and\n   * fallback property as specified in the arguments.\n   */\n  putImage(key, value, fallback) {\n    this.images[key] = {\n      value,\n      fallback\n    };\n  }\n  /**\n   * Returns the value for the given key. This returns the value\n   * or fallback, depending on <alt>. The fallback is returned if\n   * <alt> is true, the value is returned otherwise.\n   */\n  getImage(key) {\n    let result = null;\n    if (key) {\n      const img = this.images[key];\n      if (img) {\n        result = this.alt ? img.fallback : img.value;\n      }\n    }\n    return result;\n  }\n}\nexport default ImageBundle;","map":{"version":3,"names":["ImageBundle","constructor","alt","images","putImage","key","value","fallback","getImage","result","img"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/image/ImageBundle.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n *\n * To add a new image bundle to an existing graph, the following code is used:\n *\n * ```javascript\n * let bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * ```;\n *\n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n *\n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n *\n * The keys for images are resolved in {@link Graph#postProcessCellStyle} and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n *\n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n *\n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nclass ImageBundle {\n    constructor(alt = false) {\n        this.images = {};\n        this.alt = alt;\n    }\n    /**\n     * Adds the specified entry to the map. The entry is an object with a value and\n     * fallback property as specified in the arguments.\n     */\n    putImage(key, value, fallback) {\n        this.images[key] = { value, fallback };\n    }\n    /**\n     * Returns the value for the given key. This returns the value\n     * or fallback, depending on <alt>. The fallback is returned if\n     * <alt> is true, the value is returned otherwise.\n     */\n    getImage(key) {\n        let result = null;\n        if (key) {\n            const img = this.images[key];\n            if (img) {\n                result = this.alt ? img.fallback : img.value;\n            }\n        }\n        return result;\n    }\n}\nexport default ImageBundle;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,CAAC;EACdC,WAAWA,CAACC,GAAG,GAAG,KAAK,EAAE;IACrB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACD,GAAG,GAAGA,GAAG;EAClB;EACA;AACJ;AACA;AACA;EACIE,QAAQA,CAACC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,IAAI,CAACJ,MAAM,CAACE,GAAG,CAAC,GAAG;MAAEC,KAAK;MAAEC;IAAS,CAAC;EAC1C;EACA;AACJ;AACA;AACA;AACA;EACIC,QAAQA,CAACH,GAAG,EAAE;IACV,IAAII,MAAM,GAAG,IAAI;IACjB,IAAIJ,GAAG,EAAE;MACL,MAAMK,GAAG,GAAG,IAAI,CAACP,MAAM,CAACE,GAAG,CAAC;MAC5B,IAAIK,GAAG,EAAE;QACLD,MAAM,GAAG,IAAI,CAACP,GAAG,GAAGQ,GAAG,CAACH,QAAQ,GAAGG,GAAG,CAACJ,KAAK;MAChD;IACJ;IACA,OAAOG,MAAM;EACjB;AACJ;AACA,eAAeT,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../event/InternalEvent';\nimport { isAncestorNode } from '../../util/domUtils';\nimport { getSource, isAltDown, isConsumed, isControlDown as _isControlDown, isShiftDown } from '../../util/EventUtils';\n/**\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n *\n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of {@link Graph#container}\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n *\n * Example:\n *\n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n *\n * ```javascript\n * let keyHandler = new KeyHandler(graph);\n * keyHandler.bindKey(46, (evt)=>\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * ```\n *\n * Keycodes:\n *\n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n *\n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * ```javascript\n * keyHandler.getFunction = (evt)=>\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (Client.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *\n *   return null;\n * };\n * ```\n *\n * Constructor: KeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n *\n * @param graph Reference to the associated {@link Graph}.\n * @param target Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nclass KeyHandler {\n  constructor(graph, target = null) {\n    this.keydownHandler = null;\n    /**\n     * Reference to the {@link Graph} associated with this handler.\n     */\n    this.graph = null;\n    /**\n     * Reference to the target DOM, that is, the DOM node where the key event\n     * listeners are installed.\n     */\n    this.target = null;\n    /**\n     * Maps from keycodes to functions for non-pressed control keys.\n     */\n    this.normalKeys = {};\n    /**\n     * Maps from keycodes to functions for pressed shift keys.\n     */\n    this.shiftKeys = {};\n    /**\n     * Maps from keycodes to functions for pressed control keys.\n     */\n    this.controlKeys = {};\n    /**\n     * Maps from keycodes to functions for pressed control and shift keys.\n     */\n    this.controlShiftKeys = {};\n    /**\n     * Specifies if events are handled. Default is true.\n     */\n    this.enabled = true;\n    if (graph != null) {\n      this.graph = graph;\n      this.target = target || document.documentElement;\n      this.keydownHandler = evt => {\n        this.keyDown(evt);\n      };\n      // Installs the keystroke listener in the target\n      InternalEvent.addListener(this.target, 'keydown', this.keydownHandler);\n    }\n  }\n  /**\n   * Returns true if events are handled. This implementation returns\n   * <enabled>.\n   */\n  isEnabled() {\n    return this.enabled;\n  }\n  /**\n   * Enables or disables event handling by updating <enabled>.\n   *\n   * @param enabled Boolean that specifies the new enabled state.\n   */\n  setEnabled(enabled) {\n    this.enabled = enabled;\n  }\n  /**\n   * Binds the specified keycode to the given function. This binding is used\n   * if the control key is not pressed.\n   *\n   * @param code Integer that specifies the keycode.\n   * @param funct JavaScript function that takes the key event as an argument.\n   */\n  bindKey(code, funct) {\n    this.normalKeys[code] = funct;\n  }\n  /**\n   * Binds the specified keycode to the given function. This binding is used\n   * if the shift key is pressed.\n   *\n   * @param code Integer that specifies the keycode.\n   * @param funct JavaScript function that takes the key event as an argument.\n   */\n  bindShiftKey(code, funct) {\n    this.shiftKeys[code] = funct;\n  }\n  /**\n   * Binds the specified keycode to the given function. This binding is used\n   * if the control key is pressed.\n   *\n   * @param code Integer that specifies the keycode.\n   * @param funct JavaScript function that takes the key event as an argument.\n   */\n  bindControlKey(code, funct) {\n    this.controlKeys[code] = funct;\n  }\n  /**\n   * Binds the specified keycode to the given function. This binding is used\n   * if the control and shift key are pressed.\n   *\n   * @param code Integer that specifies the keycode.\n   * @param funct JavaScript function that takes the key event as an argument.\n   */\n  bindControlShiftKey(code, funct) {\n    this.controlShiftKeys[code] = funct;\n  }\n  /**\n   * Returns true if the control key is pressed. This uses {@link Event#isControlDown}.\n   *\n   * @param evt Key event whose control key pressed state should be returned.\n   */\n  isControlDown(evt) {\n    return _isControlDown(evt);\n  }\n  /**\n   * Returns the function associated with the given key event or null if no\n   * function is associated with the given event.\n   *\n   * @param evt Key event whose associated function should be returned.\n   */\n  getFunction(evt) {\n    if (evt != null && !isAltDown(evt)) {\n      if (this.isControlDown(evt)) {\n        if (isShiftDown(evt)) {\n          return this.controlShiftKeys[evt.keyCode];\n        }\n        return this.controlKeys[evt.keyCode];\n      }\n      if (isShiftDown(evt)) {\n        return this.shiftKeys[evt.keyCode];\n      }\n      return this.normalKeys[evt.keyCode];\n    }\n    return null;\n  }\n  /**\n   * Returns true if the event should be processed by this handler, that is,\n   * if the event source is either the target, one of its direct children, a\n   * descendant of the {@link Graph#container}, or the {@link Graph#cellEditor} of the\n   * <graph>.\n   *\n   * @param evt Key event that represents the keystroke.\n   */\n  isGraphEvent(evt) {\n    const source = getSource(evt);\n    // Accepts events from the target object or in-place editing inside graph\n    const cellEditorHandler = this.graph?.getPlugin('CellEditorHandler');\n    if (source === this.target || source.parentNode === this.target || cellEditorHandler && cellEditorHandler.isEventSource(evt)) {\n      return true;\n    }\n    // Accepts events from inside the container\n    return isAncestorNode(this.graph.container, source);\n  }\n  /**\n   * Handles the event by invoking the function bound to the respective keystroke\n   * if <isEnabledForEvent> returns true for the given event and if\n   * <isEventIgnored> returns false, except for escape for which\n   * <isEventIgnored> is not invoked.\n   *\n   * @param evt Key event that represents the keystroke.\n   */\n  keyDown(evt) {\n    if (this.isEnabledForEvent(evt)) {\n      // Cancels the editing if escape is pressed\n      if (evt.keyCode === 27 /* Escape */) {\n        this.escape(evt);\n      }\n      // Invokes the function for the keystroke\n      else if (!this.isEventIgnored(evt)) {\n        const boundFunction = this.getFunction(evt);\n        if (boundFunction != null) {\n          boundFunction(evt);\n          InternalEvent.consume(evt);\n        }\n      }\n    }\n  }\n  /**\n   * Returns true if the given event should be handled. <isEventIgnored> is\n   * called later if the event is not an escape key stroke, in which case\n   * <escape> is called. This implementation returns true if <isEnabled>\n   * returns true for both, this handler and <graph>, if the event is not\n   * consumed and if <isGraphEvent> returns true.\n   *\n   * @param evt Key event that represents the keystroke.\n   */\n  isEnabledForEvent(evt) {\n    return this.graph.isEnabled() && !isConsumed(evt) && this.isGraphEvent(evt) && this.isEnabled();\n  }\n  /**\n   * Returns true if the given keystroke should be ignored. This returns\n   * graph.isEditing().\n   *\n   * @param evt Key event that represents the keystroke.\n   */\n  isEventIgnored(evt) {\n    return this.graph.isEditing();\n  }\n  /**\n   * Hook to process ESCAPE keystrokes. This implementation invokes\n   * {@link Graph#stopEditing} to cancel the current editing, connecting\n   * and/or other ongoing modifications.\n   *\n   * @param evt Key event that represents the keystroke. Possible keycode in this\n   * case is 27 (ESCAPE).\n   */\n  escape(evt) {\n    if (this.graph.isEscapeEnabled()) {\n      this.graph.escape(evt);\n    }\n  }\n  /**\n   * Destroys the handler and all its references into the DOM. This does\n   * normally not need to be called, it is called automatically when the\n   * window unloads (in IE).\n   */\n  onDestroy() {\n    if (this.target != null && this.keydownHandler != null) {\n      InternalEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n      this.keydownHandler = null;\n    }\n    this.target = null;\n  }\n}\nexport default KeyHandler;","map":{"version":3,"names":["InternalEvent","isAncestorNode","getSource","isAltDown","isConsumed","isControlDown","_isControlDown","isShiftDown","KeyHandler","constructor","graph","target","keydownHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","enabled","document","documentElement","evt","keyDown","addListener","isEnabled","setEnabled","bindKey","code","funct","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","keyCode","isGraphEvent","source","cellEditorHandler","getPlugin","parentNode","isEventSource","container","isEnabledForEvent","escape","isEventIgnored","boundFunction","consume","isEditing","isEscapeEnabled","onDestroy","removeListener"],"sources":["D:/ospanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/handler/KeyHandler.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport InternalEvent from '../event/InternalEvent';\nimport { isAncestorNode } from '../../util/domUtils';\nimport { getSource, isAltDown, isConsumed, isControlDown as _isControlDown, isShiftDown, } from '../../util/EventUtils';\n/**\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n *\n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of {@link Graph#container}\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n *\n * Example:\n *\n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n *\n * ```javascript\n * let keyHandler = new KeyHandler(graph);\n * keyHandler.bindKey(46, (evt)=>\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * ```\n *\n * Keycodes:\n *\n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n *\n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * ```javascript\n * keyHandler.getFunction = (evt)=>\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (Client.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *\n *   return null;\n * };\n * ```\n *\n * Constructor: KeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n *\n * @param graph Reference to the associated {@link Graph}.\n * @param target Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nclass KeyHandler {\n    constructor(graph, target = null) {\n        this.keydownHandler = null;\n        /**\n         * Reference to the {@link Graph} associated with this handler.\n         */\n        this.graph = null;\n        /**\n         * Reference to the target DOM, that is, the DOM node where the key event\n         * listeners are installed.\n         */\n        this.target = null;\n        /**\n         * Maps from keycodes to functions for non-pressed control keys.\n         */\n        this.normalKeys = {};\n        /**\n         * Maps from keycodes to functions for pressed shift keys.\n         */\n        this.shiftKeys = {};\n        /**\n         * Maps from keycodes to functions for pressed control keys.\n         */\n        this.controlKeys = {};\n        /**\n         * Maps from keycodes to functions for pressed control and shift keys.\n         */\n        this.controlShiftKeys = {};\n        /**\n         * Specifies if events are handled. Default is true.\n         */\n        this.enabled = true;\n        if (graph != null) {\n            this.graph = graph;\n            this.target = target || document.documentElement;\n            this.keydownHandler = (evt) => {\n                this.keyDown(evt);\n            };\n            // Installs the keystroke listener in the target\n            InternalEvent.addListener(this.target, 'keydown', this.keydownHandler);\n        }\n    }\n    /**\n     * Returns true if events are handled. This implementation returns\n     * <enabled>.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling by updating <enabled>.\n     *\n     * @param enabled Boolean that specifies the new enabled state.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Binds the specified keycode to the given function. This binding is used\n     * if the control key is not pressed.\n     *\n     * @param code Integer that specifies the keycode.\n     * @param funct JavaScript function that takes the key event as an argument.\n     */\n    bindKey(code, funct) {\n        this.normalKeys[code] = funct;\n    }\n    /**\n     * Binds the specified keycode to the given function. This binding is used\n     * if the shift key is pressed.\n     *\n     * @param code Integer that specifies the keycode.\n     * @param funct JavaScript function that takes the key event as an argument.\n     */\n    bindShiftKey(code, funct) {\n        this.shiftKeys[code] = funct;\n    }\n    /**\n     * Binds the specified keycode to the given function. This binding is used\n     * if the control key is pressed.\n     *\n     * @param code Integer that specifies the keycode.\n     * @param funct JavaScript function that takes the key event as an argument.\n     */\n    bindControlKey(code, funct) {\n        this.controlKeys[code] = funct;\n    }\n    /**\n     * Binds the specified keycode to the given function. This binding is used\n     * if the control and shift key are pressed.\n     *\n     * @param code Integer that specifies the keycode.\n     * @param funct JavaScript function that takes the key event as an argument.\n     */\n    bindControlShiftKey(code, funct) {\n        this.controlShiftKeys[code] = funct;\n    }\n    /**\n     * Returns true if the control key is pressed. This uses {@link Event#isControlDown}.\n     *\n     * @param evt Key event whose control key pressed state should be returned.\n     */\n    isControlDown(evt) {\n        return _isControlDown(evt);\n    }\n    /**\n     * Returns the function associated with the given key event or null if no\n     * function is associated with the given event.\n     *\n     * @param evt Key event whose associated function should be returned.\n     */\n    getFunction(evt) {\n        if (evt != null && !isAltDown(evt)) {\n            if (this.isControlDown(evt)) {\n                if (isShiftDown(evt)) {\n                    return this.controlShiftKeys[evt.keyCode];\n                }\n                return this.controlKeys[evt.keyCode];\n            }\n            if (isShiftDown(evt)) {\n                return this.shiftKeys[evt.keyCode];\n            }\n            return this.normalKeys[evt.keyCode];\n        }\n        return null;\n    }\n    /**\n     * Returns true if the event should be processed by this handler, that is,\n     * if the event source is either the target, one of its direct children, a\n     * descendant of the {@link Graph#container}, or the {@link Graph#cellEditor} of the\n     * <graph>.\n     *\n     * @param evt Key event that represents the keystroke.\n     */\n    isGraphEvent(evt) {\n        const source = getSource(evt);\n        // Accepts events from the target object or in-place editing inside graph\n        const cellEditorHandler = this.graph?.getPlugin('CellEditorHandler');\n        if (source === this.target ||\n            source.parentNode === this.target ||\n            (cellEditorHandler && cellEditorHandler.isEventSource(evt))) {\n            return true;\n        }\n        // Accepts events from inside the container\n        return isAncestorNode(this.graph.container, source);\n    }\n    /**\n     * Handles the event by invoking the function bound to the respective keystroke\n     * if <isEnabledForEvent> returns true for the given event and if\n     * <isEventIgnored> returns false, except for escape for which\n     * <isEventIgnored> is not invoked.\n     *\n     * @param evt Key event that represents the keystroke.\n     */\n    keyDown(evt) {\n        if (this.isEnabledForEvent(evt)) {\n            // Cancels the editing if escape is pressed\n            if (evt.keyCode === 27 /* Escape */) {\n                this.escape(evt);\n            }\n            // Invokes the function for the keystroke\n            else if (!this.isEventIgnored(evt)) {\n                const boundFunction = this.getFunction(evt);\n                if (boundFunction != null) {\n                    boundFunction(evt);\n                    InternalEvent.consume(evt);\n                }\n            }\n        }\n    }\n    /**\n     * Returns true if the given event should be handled. <isEventIgnored> is\n     * called later if the event is not an escape key stroke, in which case\n     * <escape> is called. This implementation returns true if <isEnabled>\n     * returns true for both, this handler and <graph>, if the event is not\n     * consumed and if <isGraphEvent> returns true.\n     *\n     * @param evt Key event that represents the keystroke.\n     */\n    isEnabledForEvent(evt) {\n        return (this.graph.isEnabled() &&\n            !isConsumed(evt) &&\n            this.isGraphEvent(evt) &&\n            this.isEnabled());\n    }\n    /**\n     * Returns true if the given keystroke should be ignored. This returns\n     * graph.isEditing().\n     *\n     * @param evt Key event that represents the keystroke.\n     */\n    isEventIgnored(evt) {\n        return this.graph.isEditing();\n    }\n    /**\n     * Hook to process ESCAPE keystrokes. This implementation invokes\n     * {@link Graph#stopEditing} to cancel the current editing, connecting\n     * and/or other ongoing modifications.\n     *\n     * @param evt Key event that represents the keystroke. Possible keycode in this\n     * case is 27 (ESCAPE).\n     */\n    escape(evt) {\n        if (this.graph.isEscapeEnabled()) {\n            this.graph.escape(evt);\n        }\n    }\n    /**\n     * Destroys the handler and all its references into the DOM. This does\n     * normally not need to be called, it is called automatically when the\n     * window unloads (in IE).\n     */\n    onDestroy() {\n        if (this.target != null && this.keydownHandler != null) {\n            InternalEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n            this.keydownHandler = null;\n        }\n        this.target = null;\n    }\n}\nexport default KeyHandler;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAa,MAAM,wBAAwB;AAClD,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,SAAS,EAAEC,SAAS,EAAEC,UAAU,EAAEC,aAAa,IAAIC,cAAc,EAAEC,WAAW,QAAS,uBAAuB;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACbC,WAAWA,CAACC,KAAK,EAAEC,MAAM,GAAG,IAAI,EAAE;IAC9B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B;AACR;AACA;IACQ,IAAI,CAACF,KAAK,GAAG,IAAI;IACjB;AACR;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB;AACR;AACA;IACQ,IAAI,CAACE,UAAU,GAAG,CAAC,CAAC;IACpB;AACR;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;IACnB;AACR;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,CAAC,CAAC;IACrB;AACR;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;IAC1B;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAIP,KAAK,IAAI,IAAI,EAAE;MACf,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACC,MAAM,GAAGA,MAAM,IAAIO,QAAQ,CAACC,eAAe;MAChD,IAAI,CAACP,cAAc,GAAIQ,GAAG,IAAK;QAC3B,IAAI,CAACC,OAAO,CAACD,GAAG,CAAC;MACrB,CAAC;MACD;MACApB,aAAa,CAACsB,WAAW,CAAC,IAAI,CAACX,MAAM,EAAE,SAAS,EAAE,IAAI,CAACC,cAAc,CAAC;IAC1E;EACJ;EACA;AACJ;AACA;AACA;EACIW,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACN,OAAO;EACvB;EACA;AACJ;AACA;AACA;AACA;EACIO,UAAUA,CAACP,OAAO,EAAE;IAChB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIQ,OAAOA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACjB,IAAI,CAACd,UAAU,CAACa,IAAI,CAAC,GAAGC,KAAK;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAACF,IAAI,EAAEC,KAAK,EAAE;IACtB,IAAI,CAACb,SAAS,CAACY,IAAI,CAAC,GAAGC,KAAK;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,cAAcA,CAACH,IAAI,EAAEC,KAAK,EAAE;IACxB,IAAI,CAACZ,WAAW,CAACW,IAAI,CAAC,GAAGC,KAAK;EAClC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,mBAAmBA,CAACJ,IAAI,EAAEC,KAAK,EAAE;IAC7B,IAAI,CAACX,gBAAgB,CAACU,IAAI,CAAC,GAAGC,KAAK;EACvC;EACA;AACJ;AACA;AACA;AACA;EACItB,aAAaA,CAACe,GAAG,EAAE;IACf,OAAOd,cAAc,CAACc,GAAG,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIW,WAAWA,CAACX,GAAG,EAAE;IACb,IAAIA,GAAG,IAAI,IAAI,IAAI,CAACjB,SAAS,CAACiB,GAAG,CAAC,EAAE;MAChC,IAAI,IAAI,CAACf,aAAa,CAACe,GAAG,CAAC,EAAE;QACzB,IAAIb,WAAW,CAACa,GAAG,CAAC,EAAE;UAClB,OAAO,IAAI,CAACJ,gBAAgB,CAACI,GAAG,CAACY,OAAO,CAAC;QAC7C;QACA,OAAO,IAAI,CAACjB,WAAW,CAACK,GAAG,CAACY,OAAO,CAAC;MACxC;MACA,IAAIzB,WAAW,CAACa,GAAG,CAAC,EAAE;QAClB,OAAO,IAAI,CAACN,SAAS,CAACM,GAAG,CAACY,OAAO,CAAC;MACtC;MACA,OAAO,IAAI,CAACnB,UAAU,CAACO,GAAG,CAACY,OAAO,CAAC;IACvC;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAACb,GAAG,EAAE;IACd,MAAMc,MAAM,GAAGhC,SAAS,CAACkB,GAAG,CAAC;IAC7B;IACA,MAAMe,iBAAiB,GAAG,IAAI,CAACzB,KAAK,EAAE0B,SAAS,CAAC,mBAAmB,CAAC;IACpE,IAAIF,MAAM,KAAK,IAAI,CAACvB,MAAM,IACtBuB,MAAM,CAACG,UAAU,KAAK,IAAI,CAAC1B,MAAM,IAChCwB,iBAAiB,IAAIA,iBAAiB,CAACG,aAAa,CAAClB,GAAG,CAAE,EAAE;MAC7D,OAAO,IAAI;IACf;IACA;IACA,OAAOnB,cAAc,CAAC,IAAI,CAACS,KAAK,CAAC6B,SAAS,EAAEL,MAAM,CAAC;EACvD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIb,OAAOA,CAACD,GAAG,EAAE;IACT,IAAI,IAAI,CAACoB,iBAAiB,CAACpB,GAAG,CAAC,EAAE;MAC7B;MACA,IAAIA,GAAG,CAACY,OAAO,KAAK,EAAE,CAAC,cAAc;QACjC,IAAI,CAACS,MAAM,CAACrB,GAAG,CAAC;MACpB;MACA;MAAA,KACK,IAAI,CAAC,IAAI,CAACsB,cAAc,CAACtB,GAAG,CAAC,EAAE;QAChC,MAAMuB,aAAa,GAAG,IAAI,CAACZ,WAAW,CAACX,GAAG,CAAC;QAC3C,IAAIuB,aAAa,IAAI,IAAI,EAAE;UACvBA,aAAa,CAACvB,GAAG,CAAC;UAClBpB,aAAa,CAAC4C,OAAO,CAACxB,GAAG,CAAC;QAC9B;MACJ;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIoB,iBAAiBA,CAACpB,GAAG,EAAE;IACnB,OAAQ,IAAI,CAACV,KAAK,CAACa,SAAS,CAAC,CAAC,IAC1B,CAACnB,UAAU,CAACgB,GAAG,CAAC,IAChB,IAAI,CAACa,YAAY,CAACb,GAAG,CAAC,IACtB,IAAI,CAACG,SAAS,CAAC,CAAC;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EACImB,cAAcA,CAACtB,GAAG,EAAE;IAChB,OAAO,IAAI,CAACV,KAAK,CAACmC,SAAS,CAAC,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,MAAMA,CAACrB,GAAG,EAAE;IACR,IAAI,IAAI,CAACV,KAAK,CAACoC,eAAe,CAAC,CAAC,EAAE;MAC9B,IAAI,CAACpC,KAAK,CAAC+B,MAAM,CAACrB,GAAG,CAAC;IAC1B;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI2B,SAASA,CAAA,EAAG;IACR,IAAI,IAAI,CAACpC,MAAM,IAAI,IAAI,IAAI,IAAI,CAACC,cAAc,IAAI,IAAI,EAAE;MACpDZ,aAAa,CAACgD,cAAc,CAAC,IAAI,CAACrC,MAAM,EAAE,SAAS,EAAE,IAAI,CAACC,cAAc,CAAC;MACzE,IAAI,CAACA,cAAc,GAAG,IAAI;IAC9B;IACA,IAAI,CAACD,MAAM,GAAG,IAAI;EACtB;AACJ;AACA,eAAeH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _PasteAsAction;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n  constructor() {\n    super({\n      id: changePasteTypeCommandId,\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */\n      }\n    });\n  }\n  runEditorCommand(_accessor, editor) {\n    var _CopyPasteController$;\n    return (_CopyPasteController$ = CopyPasteController.get(editor)) === null || _CopyPasteController$ === void 0 ? void 0 : _CopyPasteController$.changePasteType();\n  }\n}());\nregisterEditorCommand(new class extends EditorCommand {\n  constructor() {\n    super({\n      id: 'editor.hidePasteWidget',\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 9 /* KeyCode.Escape */\n      }\n    });\n  }\n  runEditorCommand(_accessor, editor) {\n    var _CopyPasteController$2;\n    (_CopyPasteController$2 = CopyPasteController.get(editor)) === null || _CopyPasteController$2 === void 0 || _CopyPasteController$2.clearWidgets();\n  }\n}());\nregisterEditorAction((_PasteAsAction = class PasteAsAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.pasteAs',\n      label: nls.localize('pasteAs', \"Paste As...\"),\n      alias: 'Paste As...',\n      precondition: EditorContextKeys.writable,\n      metadata: {\n        description: 'Paste as',\n        args: [{\n          name: 'args',\n          schema: PasteAsAction.argsSchema\n        }]\n      }\n    });\n  }\n  run(_accessor, editor, args) {\n    var _CopyPasteController$3;\n    let kind = typeof (args === null || args === void 0 ? void 0 : args.kind) === 'string' ? args.kind : undefined;\n    if (!kind && args) {\n      // Support old id property\n      // TODO: remove this in the future\n      kind = typeof args.id === 'string' ? args.id : undefined;\n    }\n    return (_CopyPasteController$3 = CopyPasteController.get(editor)) === null || _CopyPasteController$3 === void 0 ? void 0 : _CopyPasteController$3.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n  }\n}, _PasteAsAction.argsSchema = {\n  type: 'object',\n  properties: {\n    kind: {\n      type: 'string',\n      description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\")\n    }\n  }\n}, _PasteAsAction));\nregisterEditorAction(class extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.pasteAsText',\n      label: nls.localize('pasteAsText', \"Paste as Text\"),\n      alias: 'Paste as Text',\n      precondition: EditorContextKeys.writable\n    });\n  }\n  run(_accessor, editor) {\n    var _CopyPasteController$4;\n    return (_CopyPasteController$4 = CopyPasteController.get(editor)) === null || _CopyPasteController$4 === void 0 ? void 0 : _CopyPasteController$4.pasteAs({\n      providerId: DefaultTextPasteOrDropEditProvider.id\n    });\n  }\n});","map":{"version":3,"names":["HierarchicalKind","EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","registerEditorContribution","EditorContextKeys","registerEditorFeature","CopyPasteController","changePasteTypeCommandId","pasteWidgetVisibleCtx","DefaultPasteProvidersFeature","DefaultTextPasteOrDropEditProvider","nls","ID","constructor","id","precondition","kbOpts","weight","primary","runEditorCommand","_accessor","editor","_CopyPasteController$","get","changePasteType","_CopyPasteController$2","clearWidgets","_PasteAsAction","PasteAsAction","label","localize","alias","writable","metadata","description","args","name","schema","argsSchema","run","_CopyPasteController$3","kind","undefined","pasteAs","type","properties","_CopyPasteController$4","providerId"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: changePasteTypeCommandId,\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        return CopyPasteController.get(editor)?.changePasteType();\n    }\n});\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.hidePasteWidget',\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        CopyPasteController.get(editor)?.clearWidgets();\n    }\n});\nregisterEditorAction(class PasteAsAction extends EditorAction {\n    static { this.argsSchema = {\n        type: 'object',\n        properties: {\n            kind: {\n                type: 'string',\n                description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\"),\n            }\n        },\n    }; }\n    constructor() {\n        super({\n            id: 'editor.action.pasteAs',\n            label: nls.localize('pasteAs', \"Paste As...\"),\n            alias: 'Paste As...',\n            precondition: EditorContextKeys.writable,\n            metadata: {\n                description: 'Paste as',\n                args: [{\n                        name: 'args',\n                        schema: PasteAsAction.argsSchema\n                    }]\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        let kind = typeof args?.kind === 'string' ? args.kind : undefined;\n        if (!kind && args) {\n            // Support old id property\n            // TODO: remove this in the future\n            kind = typeof args.id === 'string' ? args.id : undefined;\n        }\n        return CopyPasteController.get(editor)?.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n    }\n});\nregisterEditorAction(class extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.pasteAsText',\n            label: nls.localize('pasteAsText', \"Paste as Text\"),\n            alias: 'Paste as Text',\n            precondition: EditorContextKeys.writable,\n        });\n    }\n    run(_accessor, editor) {\n        return CopyPasteController.get(editor)?.pasteAs({ providerId: DefaultTextPasteOrDropEditProvider.id });\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
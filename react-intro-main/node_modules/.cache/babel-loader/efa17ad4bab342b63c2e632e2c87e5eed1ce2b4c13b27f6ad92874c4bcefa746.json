{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { DisposableStore, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor, isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { OverviewRulerLane } from '../../../common/model.js';\nimport { overviewRulerRangeHighlight } from '../../../common/core/editorColorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { status } from '../../../../base/browser/ui/aria/aria.js';\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport class AbstractEditorNavigationQuickAccessProvider {\n  constructor(options) {\n    this.options = options;\n    //#endregion\n    //#region Decorations Utils\n    this.rangeHighlightDecorationId = undefined;\n  }\n  //#region Provider methods\n  provide(picker, token, runOptions) {\n    var _this$options;\n    const disposables = new DisposableStore();\n    // Apply options if any\n    picker.canAcceptInBackground = !!((_this$options = this.options) !== null && _this$options !== void 0 && _this$options.canAcceptInBackground);\n    // Disable filtering & sorting, we control the results\n    picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n    // Provide based on current active editor\n    const pickerDisposable = disposables.add(new MutableDisposable());\n    pickerDisposable.value = this.doProvide(picker, token, runOptions);\n    // Re-create whenever the active editor changes\n    disposables.add(this.onDidActiveTextEditorControlChange(() => {\n      // Clear old\n      pickerDisposable.value = undefined;\n      // Add new\n      pickerDisposable.value = this.doProvide(picker, token);\n    }));\n    return disposables;\n  }\n  doProvide(picker, token, runOptions) {\n    const disposables = new DisposableStore();\n    // With text control\n    const editor = this.activeTextEditorControl;\n    if (editor && this.canProvideWithTextEditor(editor)) {\n      const context = {\n        editor\n      };\n      // Restore any view state if this picker was closed\n      // without actually going to a line\n      const codeEditor = getCodeEditor(editor);\n      if (codeEditor) {\n        var _editor$saveViewState;\n        // Remember view state and update it when the cursor position\n        // changes even later because it could be that the user has\n        // configured quick access to remain open when focus is lost and\n        // we always want to restore the current location.\n        let lastKnownEditorViewState = (_editor$saveViewState = editor.saveViewState()) !== null && _editor$saveViewState !== void 0 ? _editor$saveViewState : undefined;\n        disposables.add(codeEditor.onDidChangeCursorPosition(() => {\n          var _editor$saveViewState2;\n          lastKnownEditorViewState = (_editor$saveViewState2 = editor.saveViewState()) !== null && _editor$saveViewState2 !== void 0 ? _editor$saveViewState2 : undefined;\n        }));\n        context.restoreViewState = () => {\n          if (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n            editor.restoreViewState(lastKnownEditorViewState);\n          }\n        };\n        disposables.add(createSingleCallFunction(token.onCancellationRequested)(() => {\n          var _context$restoreViewS;\n          return (_context$restoreViewS = context.restoreViewState) === null || _context$restoreViewS === void 0 ? void 0 : _context$restoreViewS.call(context);\n        }));\n      }\n      // Clean up decorations on dispose\n      disposables.add(toDisposable(() => this.clearDecorations(editor)));\n      // Ask subclass for entries\n      disposables.add(this.provideWithTextEditor(context, picker, token, runOptions));\n    }\n    // Without text control\n    else {\n      disposables.add(this.provideWithoutTextEditor(picker, token));\n    }\n    return disposables;\n  }\n  /**\n   * Subclasses to implement if they can operate on the text editor.\n   */\n  canProvideWithTextEditor(editor) {\n    return true;\n  }\n  gotoLocation(_ref, options) {\n    let {\n      editor\n    } = _ref;\n    editor.setSelection(options.range, \"code.jump\" /* TextEditorSelectionSource.JUMP */);\n    editor.revealRangeInCenter(options.range, 0 /* ScrollType.Smooth */);\n    if (!options.preserveFocus) {\n      editor.focus();\n    }\n    const model = editor.getModel();\n    if (model && 'getLineContent' in model) {\n      status(\"\".concat(model.getLineContent(options.range.startLineNumber)));\n    }\n  }\n  getModel(editor) {\n    var _editor$getModel;\n    return isDiffEditor(editor) ? (_editor$getModel = editor.getModel()) === null || _editor$getModel === void 0 ? void 0 : _editor$getModel.modified : editor.getModel();\n  }\n  addDecorations(editor, range) {\n    editor.changeDecorations(changeAccessor => {\n      // Reset old decorations if any\n      const deleteDecorations = [];\n      if (this.rangeHighlightDecorationId) {\n        deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n        deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n        this.rangeHighlightDecorationId = undefined;\n      }\n      // Add new decorations for the range\n      const newDecorations = [\n      // highlight the entire line on the range\n      {\n        range,\n        options: {\n          description: 'quick-access-range-highlight',\n          className: 'rangeHighlight',\n          isWholeLine: true\n        }\n      },\n      // also add overview ruler highlight\n      {\n        range,\n        options: {\n          description: 'quick-access-range-highlight-overview',\n          overviewRuler: {\n            color: themeColorFromId(overviewRulerRangeHighlight),\n            position: OverviewRulerLane.Full\n          }\n        }\n      }];\n      const [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n      this.rangeHighlightDecorationId = {\n        rangeHighlightId,\n        overviewRulerDecorationId\n      };\n    });\n  }\n  clearDecorations(editor) {\n    const rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n    if (rangeHighlightDecorationId) {\n      editor.changeDecorations(changeAccessor => {\n        changeAccessor.deltaDecorations([rangeHighlightDecorationId.overviewRulerDecorationId, rangeHighlightDecorationId.rangeHighlightId], []);\n      });\n      this.rangeHighlightDecorationId = undefined;\n    }\n  }\n}","map":{"version":3,"names":["createSingleCallFunction","DisposableStore","MutableDisposable","toDisposable","getCodeEditor","isDiffEditor","OverviewRulerLane","overviewRulerRangeHighlight","themeColorFromId","status","AbstractEditorNavigationQuickAccessProvider","constructor","options","rangeHighlightDecorationId","undefined","provide","picker","token","runOptions","_this$options","disposables","canAcceptInBackground","matchOnLabel","matchOnDescription","matchOnDetail","sortByLabel","pickerDisposable","add","value","doProvide","onDidActiveTextEditorControlChange","editor","activeTextEditorControl","canProvideWithTextEditor","context","codeEditor","_editor$saveViewState","lastKnownEditorViewState","saveViewState","onDidChangeCursorPosition","_editor$saveViewState2","restoreViewState","onCancellationRequested","_context$restoreViewS","call","clearDecorations","provideWithTextEditor","provideWithoutTextEditor","gotoLocation","_ref","setSelection","range","revealRangeInCenter","preserveFocus","focus","model","getModel","concat","getLineContent","startLineNumber","_editor$getModel","modified","addDecorations","changeDecorations","changeAccessor","deleteDecorations","push","overviewRulerDecorationId","rangeHighlightId","newDecorations","description","className","isWholeLine","overviewRuler","color","position","Full","deltaDecorations"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/quickAccess/browser/editorNavigationQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { DisposableStore, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor, isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { OverviewRulerLane } from '../../../common/model.js';\nimport { overviewRulerRangeHighlight } from '../../../common/core/editorColorRegistry.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { status } from '../../../../base/browser/ui/aria/aria.js';\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport class AbstractEditorNavigationQuickAccessProvider {\n    constructor(options) {\n        this.options = options;\n        //#endregion\n        //#region Decorations Utils\n        this.rangeHighlightDecorationId = undefined;\n    }\n    //#region Provider methods\n    provide(picker, token, runOptions) {\n        const disposables = new DisposableStore();\n        // Apply options if any\n        picker.canAcceptInBackground = !!this.options?.canAcceptInBackground;\n        // Disable filtering & sorting, we control the results\n        picker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n        // Provide based on current active editor\n        const pickerDisposable = disposables.add(new MutableDisposable());\n        pickerDisposable.value = this.doProvide(picker, token, runOptions);\n        // Re-create whenever the active editor changes\n        disposables.add(this.onDidActiveTextEditorControlChange(() => {\n            // Clear old\n            pickerDisposable.value = undefined;\n            // Add new\n            pickerDisposable.value = this.doProvide(picker, token);\n        }));\n        return disposables;\n    }\n    doProvide(picker, token, runOptions) {\n        const disposables = new DisposableStore();\n        // With text control\n        const editor = this.activeTextEditorControl;\n        if (editor && this.canProvideWithTextEditor(editor)) {\n            const context = { editor };\n            // Restore any view state if this picker was closed\n            // without actually going to a line\n            const codeEditor = getCodeEditor(editor);\n            if (codeEditor) {\n                // Remember view state and update it when the cursor position\n                // changes even later because it could be that the user has\n                // configured quick access to remain open when focus is lost and\n                // we always want to restore the current location.\n                let lastKnownEditorViewState = editor.saveViewState() ?? undefined;\n                disposables.add(codeEditor.onDidChangeCursorPosition(() => {\n                    lastKnownEditorViewState = editor.saveViewState() ?? undefined;\n                }));\n                context.restoreViewState = () => {\n                    if (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n                        editor.restoreViewState(lastKnownEditorViewState);\n                    }\n                };\n                disposables.add(createSingleCallFunction(token.onCancellationRequested)(() => context.restoreViewState?.()));\n            }\n            // Clean up decorations on dispose\n            disposables.add(toDisposable(() => this.clearDecorations(editor)));\n            // Ask subclass for entries\n            disposables.add(this.provideWithTextEditor(context, picker, token, runOptions));\n        }\n        // Without text control\n        else {\n            disposables.add(this.provideWithoutTextEditor(picker, token));\n        }\n        return disposables;\n    }\n    /**\n     * Subclasses to implement if they can operate on the text editor.\n     */\n    canProvideWithTextEditor(editor) {\n        return true;\n    }\n    gotoLocation({ editor }, options) {\n        editor.setSelection(options.range, \"code.jump\" /* TextEditorSelectionSource.JUMP */);\n        editor.revealRangeInCenter(options.range, 0 /* ScrollType.Smooth */);\n        if (!options.preserveFocus) {\n            editor.focus();\n        }\n        const model = editor.getModel();\n        if (model && 'getLineContent' in model) {\n            status(`${model.getLineContent(options.range.startLineNumber)}`);\n        }\n    }\n    getModel(editor) {\n        return isDiffEditor(editor) ?\n            editor.getModel()?.modified :\n            editor.getModel();\n    }\n    addDecorations(editor, range) {\n        editor.changeDecorations(changeAccessor => {\n            // Reset old decorations if any\n            const deleteDecorations = [];\n            if (this.rangeHighlightDecorationId) {\n                deleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n                deleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n                this.rangeHighlightDecorationId = undefined;\n            }\n            // Add new decorations for the range\n            const newDecorations = [\n                // highlight the entire line on the range\n                {\n                    range,\n                    options: {\n                        description: 'quick-access-range-highlight',\n                        className: 'rangeHighlight',\n                        isWholeLine: true\n                    }\n                },\n                // also add overview ruler highlight\n                {\n                    range,\n                    options: {\n                        description: 'quick-access-range-highlight-overview',\n                        overviewRuler: {\n                            color: themeColorFromId(overviewRulerRangeHighlight),\n                            position: OverviewRulerLane.Full\n                        }\n                    }\n                }\n            ];\n            const [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n            this.rangeHighlightDecorationId = { rangeHighlightId, overviewRulerDecorationId };\n        });\n    }\n    clearDecorations(editor) {\n        const rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n        if (rangeHighlightDecorationId) {\n            editor.changeDecorations(changeAccessor => {\n                changeAccessor.deltaDecorations([\n                    rangeHighlightDecorationId.overviewRulerDecorationId,\n                    rangeHighlightDecorationId.rangeHighlightId\n                ], []);\n            });\n            this.rangeHighlightDecorationId = undefined;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
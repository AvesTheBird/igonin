{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions } from '../common/quickAccess.js';\nimport { IQuickInputService, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\nlet QuickAccessController = class QuickAccessController extends Disposable {\n  constructor(quickInputService, instantiationService) {\n    super();\n    this.quickInputService = quickInputService;\n    this.instantiationService = instantiationService;\n    this.registry = Registry.as(Extensions.Quickaccess);\n    this.mapProviderToDescriptor = new Map();\n    this.lastAcceptedPickerValues = new Map();\n    this.visibleQuickAccess = undefined;\n  }\n  show() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    this.doShowOrPick(value, false, options);\n  }\n  doShowOrPick(value, pick, options) {\n    var _visibleQuickAccess$p, _visibleQuickAccess$p2, _options$placeholder;\n    // Find provider for the value to show\n    const [provider, descriptor] = this.getOrInstantiateProvider(value, options === null || options === void 0 ? void 0 : options.enabledProviderPrefixes);\n    // Return early if quick access is already showing on that same prefix\n    const visibleQuickAccess = this.visibleQuickAccess;\n    const visibleDescriptor = visibleQuickAccess === null || visibleQuickAccess === void 0 ? void 0 : visibleQuickAccess.descriptor;\n    if (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n      // Apply value only if it is more specific than the prefix\n      // from the provider and we are not instructed to preserve\n      if (value !== descriptor.prefix && !(options !== null && options !== void 0 && options.preserveValue)) {\n        visibleQuickAccess.picker.value = value;\n      }\n      // Always adjust selection\n      this.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n      return;\n    }\n    // Rewrite the filter value based on certain rules unless disabled\n    if (descriptor && !(options !== null && options !== void 0 && options.preserveValue)) {\n      let newValue = undefined;\n      // If we have a visible provider with a value, take it's filter value but\n      // rewrite to new provider prefix in case they differ\n      if (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n        const newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n        if (newValueCandidateWithoutPrefix) {\n          newValue = \"\".concat(descriptor.prefix).concat(newValueCandidateWithoutPrefix);\n        }\n      }\n      // Otherwise, take a default value as instructed\n      if (!newValue) {\n        const defaultFilterValue = provider === null || provider === void 0 ? void 0 : provider.defaultFilterValue;\n        if (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n          newValue = this.lastAcceptedPickerValues.get(descriptor);\n        } else if (typeof defaultFilterValue === 'string') {\n          newValue = \"\".concat(descriptor.prefix).concat(defaultFilterValue);\n        }\n      }\n      if (typeof newValue === 'string') {\n        value = newValue;\n      }\n    }\n    // Store the existing selection if there was one.\n    const visibleSelection = visibleQuickAccess === null || visibleQuickAccess === void 0 || (_visibleQuickAccess$p = visibleQuickAccess.picker) === null || _visibleQuickAccess$p === void 0 ? void 0 : _visibleQuickAccess$p.valueSelection;\n    const visibleValue = visibleQuickAccess === null || visibleQuickAccess === void 0 || (_visibleQuickAccess$p2 = visibleQuickAccess.picker) === null || _visibleQuickAccess$p2 === void 0 ? void 0 : _visibleQuickAccess$p2.value;\n    // Create a picker for the provider to use with the initial value\n    // and adjust the filtering to exclude the prefix from filtering\n    const disposables = new DisposableStore();\n    const picker = disposables.add(this.quickInputService.createQuickPick({\n      useSeparators: true\n    }));\n    picker.value = value;\n    this.adjustValueSelection(picker, descriptor, options);\n    picker.placeholder = (_options$placeholder = options === null || options === void 0 ? void 0 : options.placeholder) !== null && _options$placeholder !== void 0 ? _options$placeholder : descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n    picker.quickNavigate = options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration;\n    picker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n    if (typeof (options === null || options === void 0 ? void 0 : options.itemActivation) === 'number' || options !== null && options !== void 0 && options.quickNavigateConfiguration) {\n      var _options$itemActivati;\n      picker.itemActivation = (_options$itemActivati = options === null || options === void 0 ? void 0 : options.itemActivation) !== null && _options$itemActivati !== void 0 ? _options$itemActivati : ItemActivation.SECOND /* quick nav is always second */;\n    }\n    picker.contextKey = descriptor === null || descriptor === void 0 ? void 0 : descriptor.contextKey;\n    picker.filterValue = value => value.substring(descriptor ? descriptor.prefix.length : 0);\n    // Pick mode: setup a promise that can be resolved\n    // with the selected items and prevent execution\n    let pickPromise = undefined;\n    if (pick) {\n      pickPromise = new DeferredPromise();\n      disposables.add(Event.once(picker.onWillAccept)(e => {\n        e.veto();\n        picker.hide();\n      }));\n    }\n    // Register listeners\n    disposables.add(this.registerPickerListeners(picker, provider, descriptor, value, options));\n    // Ask provider to fill the picker as needed if we have one\n    // and pass over a cancellation token that will indicate when\n    // the picker is hiding without a pick being made.\n    const cts = disposables.add(new CancellationTokenSource());\n    if (provider) {\n      disposables.add(provider.provide(picker, cts.token, options === null || options === void 0 ? void 0 : options.providerOptions));\n    }\n    // Finally, trigger disposal and cancellation when the picker\n    // hides depending on items selected or not.\n    Event.once(picker.onDidHide)(() => {\n      var _pickPromise;\n      if (picker.selectedItems.length === 0) {\n        cts.cancel();\n      }\n      // Start to dispose once picker hides\n      disposables.dispose();\n      // Resolve pick promise with selected items\n      (_pickPromise = pickPromise) === null || _pickPromise === void 0 || _pickPromise.complete(picker.selectedItems.slice(0));\n    });\n    // Finally, show the picker. This is important because a provider\n    // may not call this and then our disposables would leak that rely\n    // on the onDidHide event.\n    picker.show();\n    // If the previous picker had a selection and the value is unchanged, we should set that in the new picker.\n    if (visibleSelection && visibleValue === value) {\n      picker.valueSelection = visibleSelection;\n    }\n    // Pick mode: return with promise\n    if (pick) {\n      var _pickPromise2;\n      return (_pickPromise2 = pickPromise) === null || _pickPromise2 === void 0 ? void 0 : _pickPromise2.p;\n    }\n  }\n  adjustValueSelection(picker, descriptor, options) {\n    let valueSelection;\n    // Preserve: just always put the cursor at the end\n    if (options !== null && options !== void 0 && options.preserveValue) {\n      valueSelection = [picker.value.length, picker.value.length];\n    }\n    // Otherwise: select the value up until the prefix\n    else {\n      var _descriptor$prefix$le;\n      valueSelection = [(_descriptor$prefix$le = descriptor === null || descriptor === void 0 ? void 0 : descriptor.prefix.length) !== null && _descriptor$prefix$le !== void 0 ? _descriptor$prefix$le : 0, picker.value.length];\n    }\n    picker.valueSelection = valueSelection;\n  }\n  registerPickerListeners(picker, provider, descriptor, value, options) {\n    const disposables = new DisposableStore();\n    // Remember as last visible picker and clean up once picker get's disposed\n    const visibleQuickAccess = this.visibleQuickAccess = {\n      picker,\n      descriptor,\n      value\n    };\n    disposables.add(toDisposable(() => {\n      if (visibleQuickAccess === this.visibleQuickAccess) {\n        this.visibleQuickAccess = undefined;\n      }\n    }));\n    // Whenever the value changes, check if the provider has\n    // changed and if so - re-create the picker from the beginning\n    disposables.add(picker.onDidChangeValue(value => {\n      const [providerForValue] = this.getOrInstantiateProvider(value, options === null || options === void 0 ? void 0 : options.enabledProviderPrefixes);\n      if (providerForValue !== provider) {\n        this.show(value, {\n          enabledProviderPrefixes: options === null || options === void 0 ? void 0 : options.enabledProviderPrefixes,\n          // do not rewrite value from user typing!\n          preserveValue: true,\n          // persist the value of the providerOptions from the original showing\n          providerOptions: options === null || options === void 0 ? void 0 : options.providerOptions\n        });\n      } else {\n        visibleQuickAccess.value = value; // remember the value in our visible one\n      }\n    }));\n    // Remember picker input for future use when accepting\n    if (descriptor) {\n      disposables.add(picker.onDidAccept(() => {\n        this.lastAcceptedPickerValues.set(descriptor, picker.value);\n      }));\n    }\n    return disposables;\n  }\n  getOrInstantiateProvider(value, enabledProviderPrefixes) {\n    const providerDescriptor = this.registry.getQuickAccessProvider(value);\n    if (!providerDescriptor || enabledProviderPrefixes && !(enabledProviderPrefixes !== null && enabledProviderPrefixes !== void 0 && enabledProviderPrefixes.includes(providerDescriptor.prefix))) {\n      return [undefined, undefined];\n    }\n    let provider = this.mapProviderToDescriptor.get(providerDescriptor);\n    if (!provider) {\n      provider = this.instantiationService.createInstance(providerDescriptor.ctor);\n      this.mapProviderToDescriptor.set(providerDescriptor, provider);\n    }\n    return [provider, providerDescriptor];\n  }\n};\nQuickAccessController = __decorate([__param(0, IQuickInputService), __param(1, IInstantiationService)], QuickAccessController);\nexport { QuickAccessController };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","DeferredPromise","CancellationTokenSource","Event","Disposable","DisposableStore","toDisposable","IInstantiationService","DefaultQuickAccessFilterValue","Extensions","IQuickInputService","ItemActivation","Registry","QuickAccessController","constructor","quickInputService","instantiationService","registry","as","Quickaccess","mapProviderToDescriptor","Map","lastAcceptedPickerValues","visibleQuickAccess","undefined","show","value","options","doShowOrPick","pick","_visibleQuickAccess$p","_visibleQuickAccess$p2","_options$placeholder","provider","descriptor","getOrInstantiateProvider","enabledProviderPrefixes","visibleDescriptor","prefix","preserveValue","picker","adjustValueSelection","newValue","newValueCandidateWithoutPrefix","substr","concat","defaultFilterValue","LAST","get","visibleSelection","valueSelection","visibleValue","disposables","add","createQuickPick","useSeparators","placeholder","quickNavigate","quickNavigateConfiguration","hideInput","itemActivation","_options$itemActivati","SECOND","contextKey","filterValue","substring","pickPromise","once","onWillAccept","e","veto","hide","registerPickerListeners","cts","provide","token","providerOptions","onDidHide","_pickPromise","selectedItems","cancel","dispose","complete","slice","_pickPromise2","p","_descriptor$prefix$le","onDidChangeValue","providerForValue","onDidAccept","set","providerDescriptor","getQuickAccessProvider","includes","createInstance","ctor"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/quickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions } from '../common/quickAccess.js';\nimport { IQuickInputService, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\nlet QuickAccessController = class QuickAccessController extends Disposable {\n    constructor(quickInputService, instantiationService) {\n        super();\n        this.quickInputService = quickInputService;\n        this.instantiationService = instantiationService;\n        this.registry = Registry.as(Extensions.Quickaccess);\n        this.mapProviderToDescriptor = new Map();\n        this.lastAcceptedPickerValues = new Map();\n        this.visibleQuickAccess = undefined;\n    }\n    show(value = '', options) {\n        this.doShowOrPick(value, false, options);\n    }\n    doShowOrPick(value, pick, options) {\n        // Find provider for the value to show\n        const [provider, descriptor] = this.getOrInstantiateProvider(value, options?.enabledProviderPrefixes);\n        // Return early if quick access is already showing on that same prefix\n        const visibleQuickAccess = this.visibleQuickAccess;\n        const visibleDescriptor = visibleQuickAccess?.descriptor;\n        if (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n            // Apply value only if it is more specific than the prefix\n            // from the provider and we are not instructed to preserve\n            if (value !== descriptor.prefix && !options?.preserveValue) {\n                visibleQuickAccess.picker.value = value;\n            }\n            // Always adjust selection\n            this.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n            return;\n        }\n        // Rewrite the filter value based on certain rules unless disabled\n        if (descriptor && !options?.preserveValue) {\n            let newValue = undefined;\n            // If we have a visible provider with a value, take it's filter value but\n            // rewrite to new provider prefix in case they differ\n            if (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n                const newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n                if (newValueCandidateWithoutPrefix) {\n                    newValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n                }\n            }\n            // Otherwise, take a default value as instructed\n            if (!newValue) {\n                const defaultFilterValue = provider?.defaultFilterValue;\n                if (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n                    newValue = this.lastAcceptedPickerValues.get(descriptor);\n                }\n                else if (typeof defaultFilterValue === 'string') {\n                    newValue = `${descriptor.prefix}${defaultFilterValue}`;\n                }\n            }\n            if (typeof newValue === 'string') {\n                value = newValue;\n            }\n        }\n        // Store the existing selection if there was one.\n        const visibleSelection = visibleQuickAccess?.picker?.valueSelection;\n        const visibleValue = visibleQuickAccess?.picker?.value;\n        // Create a picker for the provider to use with the initial value\n        // and adjust the filtering to exclude the prefix from filtering\n        const disposables = new DisposableStore();\n        const picker = disposables.add(this.quickInputService.createQuickPick({ useSeparators: true }));\n        picker.value = value;\n        this.adjustValueSelection(picker, descriptor, options);\n        picker.placeholder = options?.placeholder ?? descriptor?.placeholder;\n        picker.quickNavigate = options?.quickNavigateConfiguration;\n        picker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n        if (typeof options?.itemActivation === 'number' || options?.quickNavigateConfiguration) {\n            picker.itemActivation = options?.itemActivation ?? ItemActivation.SECOND /* quick nav is always second */;\n        }\n        picker.contextKey = descriptor?.contextKey;\n        picker.filterValue = (value) => value.substring(descriptor ? descriptor.prefix.length : 0);\n        // Pick mode: setup a promise that can be resolved\n        // with the selected items and prevent execution\n        let pickPromise = undefined;\n        if (pick) {\n            pickPromise = new DeferredPromise();\n            disposables.add(Event.once(picker.onWillAccept)(e => {\n                e.veto();\n                picker.hide();\n            }));\n        }\n        // Register listeners\n        disposables.add(this.registerPickerListeners(picker, provider, descriptor, value, options));\n        // Ask provider to fill the picker as needed if we have one\n        // and pass over a cancellation token that will indicate when\n        // the picker is hiding without a pick being made.\n        const cts = disposables.add(new CancellationTokenSource());\n        if (provider) {\n            disposables.add(provider.provide(picker, cts.token, options?.providerOptions));\n        }\n        // Finally, trigger disposal and cancellation when the picker\n        // hides depending on items selected or not.\n        Event.once(picker.onDidHide)(() => {\n            if (picker.selectedItems.length === 0) {\n                cts.cancel();\n            }\n            // Start to dispose once picker hides\n            disposables.dispose();\n            // Resolve pick promise with selected items\n            pickPromise?.complete(picker.selectedItems.slice(0));\n        });\n        // Finally, show the picker. This is important because a provider\n        // may not call this and then our disposables would leak that rely\n        // on the onDidHide event.\n        picker.show();\n        // If the previous picker had a selection and the value is unchanged, we should set that in the new picker.\n        if (visibleSelection && visibleValue === value) {\n            picker.valueSelection = visibleSelection;\n        }\n        // Pick mode: return with promise\n        if (pick) {\n            return pickPromise?.p;\n        }\n    }\n    adjustValueSelection(picker, descriptor, options) {\n        let valueSelection;\n        // Preserve: just always put the cursor at the end\n        if (options?.preserveValue) {\n            valueSelection = [picker.value.length, picker.value.length];\n        }\n        // Otherwise: select the value up until the prefix\n        else {\n            valueSelection = [descriptor?.prefix.length ?? 0, picker.value.length];\n        }\n        picker.valueSelection = valueSelection;\n    }\n    registerPickerListeners(picker, provider, descriptor, value, options) {\n        const disposables = new DisposableStore();\n        // Remember as last visible picker and clean up once picker get's disposed\n        const visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\n        disposables.add(toDisposable(() => {\n            if (visibleQuickAccess === this.visibleQuickAccess) {\n                this.visibleQuickAccess = undefined;\n            }\n        }));\n        // Whenever the value changes, check if the provider has\n        // changed and if so - re-create the picker from the beginning\n        disposables.add(picker.onDidChangeValue(value => {\n            const [providerForValue] = this.getOrInstantiateProvider(value, options?.enabledProviderPrefixes);\n            if (providerForValue !== provider) {\n                this.show(value, {\n                    enabledProviderPrefixes: options?.enabledProviderPrefixes,\n                    // do not rewrite value from user typing!\n                    preserveValue: true,\n                    // persist the value of the providerOptions from the original showing\n                    providerOptions: options?.providerOptions\n                });\n            }\n            else {\n                visibleQuickAccess.value = value; // remember the value in our visible one\n            }\n        }));\n        // Remember picker input for future use when accepting\n        if (descriptor) {\n            disposables.add(picker.onDidAccept(() => {\n                this.lastAcceptedPickerValues.set(descriptor, picker.value);\n            }));\n        }\n        return disposables;\n    }\n    getOrInstantiateProvider(value, enabledProviderPrefixes) {\n        const providerDescriptor = this.registry.getQuickAccessProvider(value);\n        if (!providerDescriptor || enabledProviderPrefixes && !enabledProviderPrefixes?.includes(providerDescriptor.prefix)) {\n            return [undefined, undefined];\n        }\n        let provider = this.mapProviderToDescriptor.get(providerDescriptor);\n        if (!provider) {\n            provider = this.instantiationService.createInstance(providerDescriptor.ctor);\n            this.mapProviderToDescriptor.set(providerDescriptor, provider);\n        }\n        return [provider, providerDescriptor];\n    }\n};\nQuickAccessController = __decorate([\n    __param(0, IQuickInputService),\n    __param(1, IInstantiationService)\n], QuickAccessController);\nexport { QuickAccessController };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
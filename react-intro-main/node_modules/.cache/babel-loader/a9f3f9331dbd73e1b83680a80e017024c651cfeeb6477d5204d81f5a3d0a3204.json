{"ast":null,"code":"import React,{useState}from\"react\";import{popup,ModelXmlSerializer,domUtils,styleUtils,mathUtils,cloneUtils,eventUtils,Graph,InternalEvent,RubberBandHandler,ConnectionHandler,ConnectionConstraint,Point,CylinderShape,CellRenderer,DomHelpers,EdgeStyle,Rectangle,EdgeHandler,StyleRegistry,EdgeSegmentHandler,UndoManager,CellEditorHandler,ConstraintHandler,Guide,ImageBox,GraphView,SelectionHandler,PanningHandler,TooltipHandler,SelectionCellsHandler,PopupMenuHandler,xmlUtils,Codec}from'@maxgraph/core';import{MyCustomGraph,MyCustomEdgeSegmentHandler,MyCustomGraphView,MyCustomConnectionHandler,MyCustomPanningHandler,MyCustomSelectionHandler,MyCustomEdgeHandler,MyCustomConstraintHandler}from'./MyCustomGraph.jsx';import{createGraphContainer}from'./shared/configure.js';import\"./file-uploader.css\";//import { YourComponent } from './GraphComponent'; // Исправлено на импорт по умолчанию\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FileUploader=_ref=>{let{graph2}=_ref;const[xmlContent,setXmlContent]=useState(null);//console.log({graph2});\nconst handleOnChange=event=>{event.preventDefault();if(event.target.files&&event.target.files.length){const file=event.target.files[0];if(file.name.endsWith('.xml')){const reader=new FileReader();reader.onload=event=>{const content=event.target.result;setXmlContent(content);// console.log(content);\n// Switch for black background and bright styles\nlet invert=false;let MyCustomCellEditorHandler;if(invert){container.style.backgroundColor='black';// White in-place editor text color\nMyCustomCellEditorHandler=class extends CellEditorHandler{startEditing(cell,trigger){super.startEditing.apply(this,arguments);if(this.textarea!=null){this.textarea.style.color='#FFFFFF';}}};}else{MyCustomCellEditorHandler=CellEditorHandler;}const container=createGraphContainer({imageUrl:'images/grid.gif'});let graph=new MyCustomGraph(container,null,[MyCustomCellEditorHandler,TooltipHandler,SelectionCellsHandler,PopupMenuHandler,MyCustomConnectionHandler,MyCustomSelectionHandler,MyCustomPanningHandler]);// graph2(content);\n// console.log(\"Graph2\"+graph2);\n// Используем переданный graph здесь\nif(graph){new ModelXmlSerializer(graph.getDataModel()).import(content);console.log(\"XML файл загружен и импортирован в модель данных графа.\");console.log({graph});graph2(graph);}else{console.error(\"ОШИБКА СТОП\");console.log({graph2});}};reader.readAsText(file);}else{console.log(\"Пожалуйста, выберите файл с расширением .xml\");}}};return/*#__PURE__*/_jsxs(\"form\",{className:\"file-uploader\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"file-loader-button\",className:\"file-uploader__custom-button\"}),/*#__PURE__*/_jsx(\"input\",{id:\"file-loader-button\",type:\"file\",accept:\".xml\",className:\"file-uploader__upload-button\",onChange:handleOnChange,style:{display:'none'}}),xmlContent&&/*#__PURE__*/_jsx(\"div\",{className:\"file-uploader__xml-content\"})]});};export default FileUploader;","map":{"version":3,"names":["React","useState","popup","ModelXmlSerializer","domUtils","styleUtils","mathUtils","cloneUtils","eventUtils","Graph","InternalEvent","RubberBandHandler","ConnectionHandler","ConnectionConstraint","Point","CylinderShape","CellRenderer","DomHelpers","EdgeStyle","Rectangle","EdgeHandler","StyleRegistry","EdgeSegmentHandler","UndoManager","CellEditorHandler","ConstraintHandler","Guide","ImageBox","GraphView","SelectionHandler","PanningHandler","TooltipHandler","SelectionCellsHandler","PopupMenuHandler","xmlUtils","Codec","MyCustomGraph","MyCustomEdgeSegmentHandler","MyCustomGraphView","MyCustomConnectionHandler","MyCustomPanningHandler","MyCustomSelectionHandler","MyCustomEdgeHandler","MyCustomConstraintHandler","createGraphContainer","jsx","_jsx","jsxs","_jsxs","FileUploader","_ref","graph2","xmlContent","setXmlContent","handleOnChange","event","preventDefault","target","files","length","file","name","endsWith","reader","FileReader","onload","content","result","invert","MyCustomCellEditorHandler","container","style","backgroundColor","startEditing","cell","trigger","apply","arguments","textarea","color","imageUrl","graph","getDataModel","import","console","log","error","readAsText","className","children","htmlFor","id","type","accept","onChange","display"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/src/components/file-uploader.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  popup,\n  ModelXmlSerializer,\n  domUtils,\n  styleUtils,\n  mathUtils,\n  cloneUtils,\n  eventUtils,\n  Graph,\n  InternalEvent,\n  RubberBandHandler,\n  ConnectionHandler,\n  ConnectionConstraint,\n  Point,\n  CylinderShape,\n  CellRenderer,\n  DomHelpers,\n  EdgeStyle,\n  Rectangle,\n  EdgeHandler,\n  StyleRegistry,\n  EdgeSegmentHandler,\n  UndoManager,\n  CellEditorHandler,\n  ConstraintHandler,\n  Guide,\n  ImageBox,\n  GraphView,\n  SelectionHandler,\n  PanningHandler,\n  TooltipHandler,\n  SelectionCellsHandler,\n  PopupMenuHandler,\n  xmlUtils,\n  Codec,\n} from '@maxgraph/core';\n\nimport {\n  MyCustomGraph, \n  MyCustomEdgeSegmentHandler, \n  MyCustomGraphView, \n  MyCustomConnectionHandler,  \n  MyCustomPanningHandler, \n  MyCustomSelectionHandler,\n  MyCustomEdgeHandler,\n  MyCustomConstraintHandler\n} from './MyCustomGraph.jsx';\n\nimport { createGraphContainer } from './shared/configure.js';\n\nimport \"./file-uploader.css\";\n//import { YourComponent } from './GraphComponent'; // Исправлено на импорт по умолчанию\n\nconst FileUploader = ({ graph2 }) => {\n\n  const [xmlContent, setXmlContent] = useState(null);\n  //console.log({graph2});\n\n  const handleOnChange = (event) => {\n    event.preventDefault();\n    if (event.target.files && event.target.files.length) {\n      const file = event.target.files[0];\n      if (file.name.endsWith('.xml')) {\n          const reader = new FileReader();\n          reader.onload = (event) => {\n            const content = event.target.result;\n            setXmlContent(content);\n            // console.log(content);\n            // Switch for black background and bright styles\n            let invert = false;\n            let MyCustomCellEditorHandler;\n\n            if (invert) {\n              container.style.backgroundColor = 'black';\n\n              // White in-place editor text color\n              MyCustomCellEditorHandler = class extends CellEditorHandler {\n                startEditing(cell, trigger) {\n                  super.startEditing.apply(this, arguments);\n\n                  if (this.textarea != null) {\n                    this.textarea.style.color = '#FFFFFF';\n                  }\n                }\n              };\n            } else {\n              MyCustomCellEditorHandler = CellEditorHandler;\n            }\n            const container = createGraphContainer({\n              imageUrl: 'images/grid.gif'\n            });\n            let graph = new MyCustomGraph(container, null, [\n              MyCustomCellEditorHandler,\n              TooltipHandler,\n              SelectionCellsHandler,\n              PopupMenuHandler,\n              MyCustomConnectionHandler,\n              MyCustomSelectionHandler,\n              MyCustomPanningHandler,\n            ]);\n            // graph2(content);\n            // console.log(\"Graph2\"+graph2);\n            \n            // Используем переданный graph здесь\n            if (graph) {\n              new ModelXmlSerializer(graph.getDataModel()).import(content);\n              console.log(\"XML файл загружен и импортирован в модель данных графа.\");\n              console.log({graph});\n              graph2(graph);\n            } else {\n              console.error(\"ОШИБКА СТОП\");\n              console.log({graph2});\n            }\n          };\n        reader.readAsText(file);\n      } else {\n        console.log(\"Пожалуйста, выберите файл с расширением .xml\");\n      }\n    }\n  };\n\n  return (\n    <form className=\"file-uploader\">\n      <label htmlFor=\"file-loader-button\" className=\"file-uploader__custom-button\">\n        {/* Ваш код для кастомной кнопки */}\n      </label>\n      <input\n        id=\"file-loader-button\"\n        type=\"file\"\n        accept=\".xml\"\n        className=\"file-uploader__upload-button\"\n        onChange={handleOnChange}\n        style={{ display: 'none' }}\n      />\n      {xmlContent && (\n        <div className=\"file-uploader__xml-content\">\n          {/* Ваш код для отображения содержимого XML */}\n        </div>\n      )}\n    </form>\n  );\n};\nexport default FileUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
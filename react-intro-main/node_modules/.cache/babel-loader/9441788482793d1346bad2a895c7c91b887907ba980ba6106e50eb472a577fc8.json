{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DEFAULT_VALID_COLOR, DIALECT, HIGHLIGHT_OPACITY, HIGHLIGHT_STROKEWIDTH } from '../../util/Constants';\nimport InternalEvent from '../event/InternalEvent';\nimport Rectangle from '../geometry/Rectangle';\n/**\n * A helper class to highlight cells. Here is an example for a given cell.\n *\n * ```javascript\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * ```\n */\nclass CellHighlight {\n  constructor(graph, highlightColor, strokeWidth, dashed) {\n    this.strokeWidth = 0;\n    this.dashed = false;\n    this.opacity = 100;\n    this.shape = null;\n    /**\n     * Specifies if the highlights should appear on top of everything else in the overlay pane.\n     * @default false\n     */\n    this.keepOnTop = false;\n    /**\n     * Reference to the {@link CellState}.\n     * @default null\n     */\n    this.state = null;\n    /**\n     * Specifies the spacing between the highlight for vertices and the vertex.\n     * @default 2\n     */\n    this.spacing = 2;\n    this.graph = graph;\n    this.highlightColor = highlightColor !== null && highlightColor !== void 0 ? highlightColor : DEFAULT_VALID_COLOR;\n    this.strokeWidth = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : HIGHLIGHT_STROKEWIDTH;\n    this.dashed = dashed !== null && dashed !== void 0 ? dashed : false;\n    this.opacity = HIGHLIGHT_OPACITY;\n    // Updates the marker if the graph changes\n    this.repaintHandler = () => {\n      // Updates reference to state\n      if (this.state) {\n        const tmp = this.graph.view.getState(this.state.cell);\n        if (!tmp) {\n          this.hide();\n        } else {\n          this.state = tmp;\n          this.repaint();\n        }\n      }\n    };\n    this.graph.getView().addListener(InternalEvent.SCALE, this.repaintHandler);\n    this.graph.getView().addListener(InternalEvent.TRANSLATE, this.repaintHandler);\n    this.graph.getView().addListener(InternalEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n    this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.repaintHandler);\n    // Hides the marker if the current root changes\n    this.resetHandler = () => {\n      this.hide();\n    };\n    this.graph.getView().addListener(InternalEvent.DOWN, this.resetHandler);\n    this.graph.getView().addListener(InternalEvent.UP, this.resetHandler);\n  }\n  /**\n   * Sets the color of the rectangle used to highlight drop targets.\n   *\n   * @param {string} color - String that represents the new highlight color.\n   */\n  setHighlightColor(color) {\n    this.highlightColor = color;\n    if (this.shape) {\n      this.shape.stroke = color;\n    }\n  }\n  /**\n   * Creates and returns the highlight shape for the given state.\n   */\n  drawHighlight() {\n    this.shape = this.createShape();\n    this.repaint();\n    if (this.shape) {\n      var _node$parentNode;\n      const node = this.shape.node;\n      if (!this.keepOnTop && (node === null || node === void 0 || (_node$parentNode = node.parentNode) === null || _node$parentNode === void 0 ? void 0 : _node$parentNode.firstChild) !== node && node.parentNode) {\n        node.parentNode.insertBefore(node, node.parentNode.firstChild);\n      }\n    }\n  }\n  /**\n   * Creates and returns the highlight shape for the given state.\n   */\n  createShape() {\n    if (!this.state) return null;\n    const shape = this.graph.cellRenderer.createShape(this.state);\n    shape.svgStrokeTolerance = this.graph.getEventTolerance();\n    shape.points = this.state.absolutePoints;\n    shape.apply(this.state);\n    shape.stroke = this.highlightColor;\n    shape.opacity = this.opacity;\n    shape.isDashed = this.dashed;\n    shape.isShadow = false;\n    shape.dialect = DIALECT.SVG;\n    shape.init(this.graph.getView().getOverlayPane());\n    InternalEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n    if (this.graph.dialect !== DIALECT.SVG) {\n      shape.pointerEvents = false;\n    } else {\n      shape.svgPointerEvents = 'stroke';\n    }\n    return shape;\n  }\n  /**\n   * Updates the highlight after a change of the model or view.\n   */\n  getStrokeWidth() {\n    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return this.strokeWidth;\n  }\n  /**\n   * Updates the highlight after a change of the model or view.\n   */\n  repaint() {\n    if (this.state && this.shape) {\n      this.shape.scale = this.state.view.scale;\n      if (this.state.cell.isEdge()) {\n        this.shape.strokeWidth = this.getStrokeWidth();\n        this.shape.points = this.state.absolutePoints;\n        this.shape.outline = false;\n      } else {\n        var _this$state$style$rot;\n        this.shape.bounds = new Rectangle(this.state.x - this.spacing, this.state.y - this.spacing, this.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n        this.shape.rotation = (_this$state$style$rot = this.state.style.rotation) !== null && _this$state$style$rot !== void 0 ? _this$state$style$rot : 0;\n        this.shape.strokeWidth = this.getStrokeWidth() / this.state.view.scale;\n        this.shape.outline = true;\n      }\n      // Uses cursor from shape in highlight\n      if (this.state.shape) {\n        this.shape.setCursor(this.state.shape.getCursor());\n      }\n      this.shape.redraw();\n    }\n  }\n  /**\n   * Resets the state of the cell marker.\n   */\n  hide() {\n    this.highlight(null);\n  }\n  /**\n   * Marks the {@link arkedState} and fires a {@link ark} event.\n   */\n  highlight() {\n    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (this.state !== state) {\n      if (this.shape) {\n        this.shape.destroy();\n        this.shape = null;\n      }\n      this.state = state;\n      if (this.state) {\n        this.drawHighlight();\n      }\n    }\n  }\n  /**\n   * Returns true if this highlight is at the given position.\n   */\n  isHighlightAt(x, y) {\n    let hit = false;\n    if (this.shape && document.elementFromPoint) {\n      let elt = document.elementFromPoint(x, y);\n      while (elt) {\n        if (elt === this.shape.node) {\n          hit = true;\n          break;\n        }\n        elt = elt.parentNode;\n      }\n    }\n    return hit;\n  }\n  /**\n   * Destroys the handler and all its resources and DOM nodes.\n   */\n  destroy() {\n    const graph = this.graph;\n    graph.getView().removeListener(this.resetHandler);\n    graph.getView().removeListener(this.repaintHandler);\n    graph.getDataModel().removeListener(this.repaintHandler);\n    if (this.shape) {\n      this.shape.destroy();\n      this.shape = null;\n    }\n  }\n}\nexport default CellHighlight;","map":{"version":3,"names":["DEFAULT_VALID_COLOR","DIALECT","HIGHLIGHT_OPACITY","HIGHLIGHT_STROKEWIDTH","InternalEvent","Rectangle","CellHighlight","constructor","graph","highlightColor","strokeWidth","dashed","opacity","shape","keepOnTop","state","spacing","repaintHandler","tmp","view","getState","cell","hide","repaint","getView","addListener","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","getDataModel","CHANGE","resetHandler","DOWN","UP","setHighlightColor","color","stroke","drawHighlight","createShape","_node$parentNode","node","parentNode","firstChild","insertBefore","cellRenderer","svgStrokeTolerance","getEventTolerance","points","absolutePoints","apply","isDashed","isShadow","dialect","SVG","init","getOverlayPane","redirectMouseEvents","pointerEvents","svgPointerEvents","getStrokeWidth","arguments","length","undefined","scale","isEdge","outline","_this$state$style$rot","bounds","x","y","width","height","rotation","style","setCursor","getCursor","redraw","highlight","destroy","isHighlightAt","hit","document","elementFromPoint","elt","removeListener"],"sources":["D:/OSPanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/cell/CellHighlight.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DEFAULT_VALID_COLOR, DIALECT, HIGHLIGHT_OPACITY, HIGHLIGHT_STROKEWIDTH, } from '../../util/Constants';\nimport InternalEvent from '../event/InternalEvent';\nimport Rectangle from '../geometry/Rectangle';\n/**\n * A helper class to highlight cells. Here is an example for a given cell.\n *\n * ```javascript\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * ```\n */\nclass CellHighlight {\n    constructor(graph, highlightColor, strokeWidth, dashed) {\n        this.strokeWidth = 0;\n        this.dashed = false;\n        this.opacity = 100;\n        this.shape = null;\n        /**\n         * Specifies if the highlights should appear on top of everything else in the overlay pane.\n         * @default false\n         */\n        this.keepOnTop = false;\n        /**\n         * Reference to the {@link CellState}.\n         * @default null\n         */\n        this.state = null;\n        /**\n         * Specifies the spacing between the highlight for vertices and the vertex.\n         * @default 2\n         */\n        this.spacing = 2;\n        this.graph = graph;\n        this.highlightColor = highlightColor ?? DEFAULT_VALID_COLOR;\n        this.strokeWidth = strokeWidth ?? HIGHLIGHT_STROKEWIDTH;\n        this.dashed = dashed ?? false;\n        this.opacity = HIGHLIGHT_OPACITY;\n        // Updates the marker if the graph changes\n        this.repaintHandler = () => {\n            // Updates reference to state\n            if (this.state) {\n                const tmp = this.graph.view.getState(this.state.cell);\n                if (!tmp) {\n                    this.hide();\n                }\n                else {\n                    this.state = tmp;\n                    this.repaint();\n                }\n            }\n        };\n        this.graph.getView().addListener(InternalEvent.SCALE, this.repaintHandler);\n        this.graph.getView().addListener(InternalEvent.TRANSLATE, this.repaintHandler);\n        this.graph\n            .getView()\n            .addListener(InternalEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n        this.graph.getDataModel().addListener(InternalEvent.CHANGE, this.repaintHandler);\n        // Hides the marker if the current root changes\n        this.resetHandler = () => {\n            this.hide();\n        };\n        this.graph.getView().addListener(InternalEvent.DOWN, this.resetHandler);\n        this.graph.getView().addListener(InternalEvent.UP, this.resetHandler);\n    }\n    /**\n     * Sets the color of the rectangle used to highlight drop targets.\n     *\n     * @param {string} color - String that represents the new highlight color.\n     */\n    setHighlightColor(color) {\n        this.highlightColor = color;\n        if (this.shape) {\n            this.shape.stroke = color;\n        }\n    }\n    /**\n     * Creates and returns the highlight shape for the given state.\n     */\n    drawHighlight() {\n        this.shape = this.createShape();\n        this.repaint();\n        if (this.shape) {\n            const node = this.shape.node;\n            if (!this.keepOnTop && node?.parentNode?.firstChild !== node && node.parentNode) {\n                node.parentNode.insertBefore(node, node.parentNode.firstChild);\n            }\n        }\n    }\n    /**\n     * Creates and returns the highlight shape for the given state.\n     */\n    createShape() {\n        if (!this.state)\n            return null;\n        const shape = this.graph.cellRenderer.createShape(this.state);\n        shape.svgStrokeTolerance = this.graph.getEventTolerance();\n        shape.points = this.state.absolutePoints;\n        shape.apply(this.state);\n        shape.stroke = this.highlightColor;\n        shape.opacity = this.opacity;\n        shape.isDashed = this.dashed;\n        shape.isShadow = false;\n        shape.dialect = DIALECT.SVG;\n        shape.init(this.graph.getView().getOverlayPane());\n        InternalEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n        if (this.graph.dialect !== DIALECT.SVG) {\n            shape.pointerEvents = false;\n        }\n        else {\n            shape.svgPointerEvents = 'stroke';\n        }\n        return shape;\n    }\n    /**\n     * Updates the highlight after a change of the model or view.\n     */\n    getStrokeWidth(state = null) {\n        return this.strokeWidth;\n    }\n    /**\n     * Updates the highlight after a change of the model or view.\n     */\n    repaint() {\n        if (this.state && this.shape) {\n            this.shape.scale = this.state.view.scale;\n            if (this.state.cell.isEdge()) {\n                this.shape.strokeWidth = this.getStrokeWidth();\n                this.shape.points = this.state.absolutePoints;\n                this.shape.outline = false;\n            }\n            else {\n                this.shape.bounds = new Rectangle(this.state.x - this.spacing, this.state.y - this.spacing, this.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n                this.shape.rotation = this.state.style.rotation ?? 0;\n                this.shape.strokeWidth = this.getStrokeWidth() / this.state.view.scale;\n                this.shape.outline = true;\n            }\n            // Uses cursor from shape in highlight\n            if (this.state.shape) {\n                this.shape.setCursor(this.state.shape.getCursor());\n            }\n            this.shape.redraw();\n        }\n    }\n    /**\n     * Resets the state of the cell marker.\n     */\n    hide() {\n        this.highlight(null);\n    }\n    /**\n     * Marks the {@link arkedState} and fires a {@link ark} event.\n     */\n    highlight(state = null) {\n        if (this.state !== state) {\n            if (this.shape) {\n                this.shape.destroy();\n                this.shape = null;\n            }\n            this.state = state;\n            if (this.state) {\n                this.drawHighlight();\n            }\n        }\n    }\n    /**\n     * Returns true if this highlight is at the given position.\n     */\n    isHighlightAt(x, y) {\n        let hit = false;\n        if (this.shape && document.elementFromPoint) {\n            let elt = document.elementFromPoint(x, y);\n            while (elt) {\n                if (elt === this.shape.node) {\n                    hit = true;\n                    break;\n                }\n                elt = elt.parentNode;\n            }\n        }\n        return hit;\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    destroy() {\n        const graph = this.graph;\n        graph.getView().removeListener(this.resetHandler);\n        graph.getView().removeListener(this.repaintHandler);\n        graph.getDataModel().removeListener(this.repaintHandler);\n        if (this.shape) {\n            this.shape.destroy();\n            this.shape = null;\n        }\n    }\n}\nexport default CellHighlight;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
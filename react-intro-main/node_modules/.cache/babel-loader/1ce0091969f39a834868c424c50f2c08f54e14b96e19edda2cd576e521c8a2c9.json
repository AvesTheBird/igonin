{"ast":null,"code":"/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../../ObjectCodec';\nimport { EditorToolbar } from '../../../editor/EditorToolbar';\nimport { NODETYPE } from '../../../util/Constants';\nimport MaxLog from '../../../gui/MaxLog';\nimport { convertPoint } from '../../../util/styleUtils';\nimport { getClientX, getClientY } from '../../../util/EventUtils';\nimport InternalEvent from '../../../view/event/InternalEvent';\nimport { getChildNodes, getTextContent } from '../../../util/domUtils';\nimport Translations from '../../../util/Translations';\n/**\n * Custom codec for configuring {@link EditorToolbar}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * This codec only reads configuration data for existing toolbars handlers, it does not encode or create toolbars.\n */\nexport class EditorToolbarCodec extends ObjectCodec {\n  constructor() {\n    super(new EditorToolbar());\n  }\n  /**\n   * Returns `null`.\n   */\n  encode(_enc, _obj) {\n    return null;\n  }\n  /**\n   * Reads a sequence of the following child nodes and attributes:\n   *\n   * Child Nodes:\n   *\n   * add - Adds a new item to the toolbar. See below for attributes.\n   * separator - Adds a vertical separator. No attributes.\n   * hr - Adds a horizontal separator. No attributes.\n   * br - Adds a linefeed. No attributes.\n   *\n   * Attributes:\n   *\n   * as - Resource key for the label.\n   * action - Name of the action to execute in enclosing editor.\n   * mode - Mode name (see below).\n   * template - Template name for cell insertion.\n   * style - Optional style to override the template style.\n   * icon - Icon (relative/absolute URL).\n   * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n   * id - Optional ID to be used for the created DOM element.\n   * toggle - Optional 0 or 1 to disable toggling of the element. Default is 1 (true).\n   *\n   * The action, mode and template attributes are mutually exclusive. The style can only be used with the template attribute.\n   * The add node may contain another sequence of add nodes with \"as\" and action attributes to create a combo box in the toolbar.\n   * If the icon is specified then a list of the child node is expected to have its template attribute set and the action is ignored instead.\n   *\n   * Nodes with a specified template may define a function to be used for inserting the cloned template into the graph.\n   * Here is an example of such a node:\n   *\n   * ```javascript\n   * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n   *   function (editor, cell, evt, targetCell)\n   *   {\n   *     let pt = mxUtils.convertPoint(\n   *       editor.graph.container, mxEvent.getClientX(evt),\n   *         mxEvent.getClientY(evt));\n   *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n   *   }\n   * ]]></add>\n   * ```\n   *\n   * In the above function, editor is the enclosing {@link Editor} instance, cell is the clone of the template, evt is the mouse event that represents the\n   * drop and targetCell is the cell under the mouse pointer where the drop occurred. The targetCell is retrieved using {@link Graph#getCellAt}.\n   *\n   * Furthermore, nodes with the mode attribute may define a function to be executed upon selection of the respective toolbar icon. In the\n   * example below, the default edge style is set when this specific\n   * connect-mode is activated:\n   *\n   * ```javascript\n   * <add as=\"connect\" mode=\"connect\"><![CDATA[\n   *   function (editor)\n   *   {\n   *     if (editor.defaultEdge != null)\n   *     {\n   *       editor.defaultEdge.style = 'straightEdge';\n   *     }\n   *   }\n   * ]]></add>\n   * ```\n   *\n   * Both functions require {@link allowEval} to be set to `true`.\n   *\n   * Modes:\n   *\n   * select - Left mouse button used for rubberband- & cell-selection.\n   * connect - Allows connecting vertices by inserting new edges.\n   * pan - Disables selection and switches to panning on the left button.\n   *\n   * Example:\n   *\n   * To add items to the toolbar:\n   *\n   * ```javascript\n   * <EditorToolbar as=\"toolbar\">\n   *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n   *   <br/><hr/>\n   *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n   *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n   * </EditorToolbar>\n   * ```\n   */\n  decode(dec, _node, into) {\n    if (into != null) {\n      const editor = into.editor;\n      let node = _node.firstChild;\n      while (node != null) {\n        if (node.nodeType === NODETYPE.ELEMENT) {\n          if (!this.processInclude(dec, node, into)) {\n            if (node.nodeName === 'separator') {\n              into.addSeparator();\n            } else if (node.nodeName === 'br') {\n              into.toolbar.addBreak();\n            } else if (node.nodeName === 'hr') {\n              into.toolbar.addLine();\n            } else if (node.nodeName === 'add') {\n              let as = node.getAttribute('as');\n              as = Translations.get(as) || as;\n              const icon = node.getAttribute('icon');\n              const pressedIcon = node.getAttribute('pressedIcon');\n              const action = node.getAttribute('action');\n              const mode = node.getAttribute('mode');\n              const template = node.getAttribute('template');\n              const toggle = node.getAttribute('toggle') != '0';\n              const text = getTextContent(node);\n              let elt = null;\n              let funct;\n              if (action != null) {\n                elt = into.addItem(as, icon, action, pressedIcon);\n              } else if (mode != null) {\n                funct = EditorToolbarCodec.allowEval ? eval(text) : null;\n                elt = into.addMode(as, icon, mode, pressedIcon, funct);\n              } else if (template != null || text != null && text.length > 0) {\n                let cell = template ? editor.templates[template] : null;\n                const style = node.getAttribute('style');\n                if (cell != null && style != null) {\n                  cell = editor.graph.cloneCell(cell);\n                  cell.setStyle(style);\n                }\n                let insertFunction = null;\n                if (text != null && text.length > 0 && EditorToolbarCodec.allowEval) {\n                  insertFunction = eval(text);\n                }\n                elt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n              } else {\n                const children = getChildNodes(node);\n                if (children.length > 0) {\n                  if (icon == null) {\n                    const combo = into.addActionCombo(as);\n                    for (let i = 0; i < children.length; i += 1) {\n                      const child = children[i];\n                      if (child.nodeName === 'separator') {\n                        into.addOption(combo, '---');\n                      } else if (child.nodeName === 'add') {\n                        const lab = child.getAttribute('as');\n                        const act = child.getAttribute('action');\n                        into.addActionOption(combo, lab, act);\n                      }\n                    }\n                  } else {\n                    const select = into.addCombo();\n                    const create = () => {\n                      const template = editor.templates[select.value];\n                      if (template != null) {\n                        const clone = template.clone();\n                        // @ts-ignore\n                        const style = select.options[select.selectedIndex].cellStyle;\n                        if (style != null) {\n                          clone.setStyle(style);\n                        }\n                        return clone;\n                      }\n                      MaxLog.warn(`Template ${template} not found`);\n                      return null;\n                    };\n                    const img = into.addPrototype(as, icon, create, null, null, toggle);\n                    // Selects the toolbar icon if a selection change\n                    // is made in the corresponding combobox.\n                    InternalEvent.addListener(select, 'change', () => {\n                      into.toolbar.selectMode(img, evt => {\n                        const pt = convertPoint(editor.graph.container, getClientX(evt), getClientY(evt));\n                        return editor.addVertex(null, funct(), pt.x, pt.y);\n                      });\n                      into.toolbar.noReset = false;\n                    });\n                    // Adds the entries to the combobox\n                    for (let i = 0; i < children.length; i += 1) {\n                      const child = children[i];\n                      if (child.nodeName === 'separator') {\n                        into.addOption(select, '---');\n                      } else if (child.nodeName === 'add') {\n                        const lab = child.getAttribute('as');\n                        const tmp = child.getAttribute('template');\n                        const option = into.addOption(select, lab, tmp || template);\n                        option.cellStyle = child.getAttribute('style');\n                      }\n                    }\n                  }\n                }\n              }\n              // Assigns an ID to the created element to access it later.\n              if (elt != null) {\n                const id = node.getAttribute('id');\n                if (id != null && id.length > 0) {\n                  elt.setAttribute('id', id);\n                }\n              }\n            }\n          }\n        }\n        node = node.nextSibling;\n      }\n    }\n    return into;\n  }\n}","map":{"version":3,"names":["ObjectCodec","EditorToolbar","NODETYPE","MaxLog","convertPoint","getClientX","getClientY","InternalEvent","getChildNodes","getTextContent","Translations","EditorToolbarCodec","constructor","encode","_enc","_obj","decode","dec","_node","into","editor","node","firstChild","nodeType","ELEMENT","processInclude","nodeName","addSeparator","toolbar","addBreak","addLine","as","getAttribute","get","icon","pressedIcon","action","mode","template","toggle","text","elt","funct","addItem","allowEval","eval","addMode","length","cell","templates","style","graph","cloneCell","setStyle","insertFunction","addPrototype","children","combo","addActionCombo","i","child","addOption","lab","act","addActionOption","select","addCombo","create","value","clone","options","selectedIndex","cellStyle","warn","img","addListener","selectMode","evt","pt","container","addVertex","x","y","noReset","tmp","option","id","setAttribute","nextSibling"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/serialization/codecs/editor/EditorToolbarCodec.js"],"sourcesContent":["/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../../ObjectCodec';\nimport { EditorToolbar } from '../../../editor/EditorToolbar';\nimport { NODETYPE } from '../../../util/Constants';\nimport MaxLog from '../../../gui/MaxLog';\nimport { convertPoint } from '../../../util/styleUtils';\nimport { getClientX, getClientY } from '../../../util/EventUtils';\nimport InternalEvent from '../../../view/event/InternalEvent';\nimport { getChildNodes, getTextContent } from '../../../util/domUtils';\nimport Translations from '../../../util/Translations';\n/**\n * Custom codec for configuring {@link EditorToolbar}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n *\n * This codec only reads configuration data for existing toolbars handlers, it does not encode or create toolbars.\n */\nexport class EditorToolbarCodec extends ObjectCodec {\n    constructor() {\n        super(new EditorToolbar());\n    }\n    /**\n     * Returns `null`.\n     */\n    encode(_enc, _obj) {\n        return null;\n    }\n    /**\n     * Reads a sequence of the following child nodes and attributes:\n     *\n     * Child Nodes:\n     *\n     * add - Adds a new item to the toolbar. See below for attributes.\n     * separator - Adds a vertical separator. No attributes.\n     * hr - Adds a horizontal separator. No attributes.\n     * br - Adds a linefeed. No attributes.\n     *\n     * Attributes:\n     *\n     * as - Resource key for the label.\n     * action - Name of the action to execute in enclosing editor.\n     * mode - Mode name (see below).\n     * template - Template name for cell insertion.\n     * style - Optional style to override the template style.\n     * icon - Icon (relative/absolute URL).\n     * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n     * id - Optional ID to be used for the created DOM element.\n     * toggle - Optional 0 or 1 to disable toggling of the element. Default is 1 (true).\n     *\n     * The action, mode and template attributes are mutually exclusive. The style can only be used with the template attribute.\n     * The add node may contain another sequence of add nodes with \"as\" and action attributes to create a combo box in the toolbar.\n     * If the icon is specified then a list of the child node is expected to have its template attribute set and the action is ignored instead.\n     *\n     * Nodes with a specified template may define a function to be used for inserting the cloned template into the graph.\n     * Here is an example of such a node:\n     *\n     * ```javascript\n     * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n     *   function (editor, cell, evt, targetCell)\n     *   {\n     *     let pt = mxUtils.convertPoint(\n     *       editor.graph.container, mxEvent.getClientX(evt),\n     *         mxEvent.getClientY(evt));\n     *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n     *   }\n     * ]]></add>\n     * ```\n     *\n     * In the above function, editor is the enclosing {@link Editor} instance, cell is the clone of the template, evt is the mouse event that represents the\n     * drop and targetCell is the cell under the mouse pointer where the drop occurred. The targetCell is retrieved using {@link Graph#getCellAt}.\n     *\n     * Furthermore, nodes with the mode attribute may define a function to be executed upon selection of the respective toolbar icon. In the\n     * example below, the default edge style is set when this specific\n     * connect-mode is activated:\n     *\n     * ```javascript\n     * <add as=\"connect\" mode=\"connect\"><![CDATA[\n     *   function (editor)\n     *   {\n     *     if (editor.defaultEdge != null)\n     *     {\n     *       editor.defaultEdge.style = 'straightEdge';\n     *     }\n     *   }\n     * ]]></add>\n     * ```\n     *\n     * Both functions require {@link allowEval} to be set to `true`.\n     *\n     * Modes:\n     *\n     * select - Left mouse button used for rubberband- & cell-selection.\n     * connect - Allows connecting vertices by inserting new edges.\n     * pan - Disables selection and switches to panning on the left button.\n     *\n     * Example:\n     *\n     * To add items to the toolbar:\n     *\n     * ```javascript\n     * <EditorToolbar as=\"toolbar\">\n     *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n     *   <br/><hr/>\n     *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n     *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n     * </EditorToolbar>\n     * ```\n     */\n    decode(dec, _node, into) {\n        if (into != null) {\n            const editor = into.editor;\n            let node = _node.firstChild;\n            while (node != null) {\n                if (node.nodeType === NODETYPE.ELEMENT) {\n                    if (!this.processInclude(dec, node, into)) {\n                        if (node.nodeName === 'separator') {\n                            into.addSeparator();\n                        }\n                        else if (node.nodeName === 'br') {\n                            into.toolbar.addBreak();\n                        }\n                        else if (node.nodeName === 'hr') {\n                            into.toolbar.addLine();\n                        }\n                        else if (node.nodeName === 'add') {\n                            let as = node.getAttribute('as');\n                            as = Translations.get(as) || as;\n                            const icon = node.getAttribute('icon');\n                            const pressedIcon = node.getAttribute('pressedIcon');\n                            const action = node.getAttribute('action');\n                            const mode = node.getAttribute('mode');\n                            const template = node.getAttribute('template');\n                            const toggle = node.getAttribute('toggle') != '0';\n                            const text = getTextContent(node);\n                            let elt = null;\n                            let funct;\n                            if (action != null) {\n                                elt = into.addItem(as, icon, action, pressedIcon);\n                            }\n                            else if (mode != null) {\n                                funct = EditorToolbarCodec.allowEval ? eval(text) : null;\n                                elt = into.addMode(as, icon, mode, pressedIcon, funct);\n                            }\n                            else if (template != null || (text != null && text.length > 0)) {\n                                let cell = template ? editor.templates[template] : null;\n                                const style = node.getAttribute('style');\n                                if (cell != null && style != null) {\n                                    cell = editor.graph.cloneCell(cell);\n                                    cell.setStyle(style);\n                                }\n                                let insertFunction = null;\n                                if (text != null && text.length > 0 && EditorToolbarCodec.allowEval) {\n                                    insertFunction = eval(text);\n                                }\n                                elt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n                            }\n                            else {\n                                const children = getChildNodes(node);\n                                if (children.length > 0) {\n                                    if (icon == null) {\n                                        const combo = into.addActionCombo(as);\n                                        for (let i = 0; i < children.length; i += 1) {\n                                            const child = children[i];\n                                            if (child.nodeName === 'separator') {\n                                                into.addOption(combo, '---');\n                                            }\n                                            else if (child.nodeName === 'add') {\n                                                const lab = child.getAttribute('as');\n                                                const act = child.getAttribute('action');\n                                                into.addActionOption(combo, lab, act);\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        const select = into.addCombo();\n                                        const create = () => {\n                                            const template = editor.templates[select.value];\n                                            if (template != null) {\n                                                const clone = template.clone();\n                                                // @ts-ignore\n                                                const style = select.options[select.selectedIndex].cellStyle;\n                                                if (style != null) {\n                                                    clone.setStyle(style);\n                                                }\n                                                return clone;\n                                            }\n                                            MaxLog.warn(`Template ${template} not found`);\n                                            return null;\n                                        };\n                                        const img = into.addPrototype(as, icon, create, null, null, toggle);\n                                        // Selects the toolbar icon if a selection change\n                                        // is made in the corresponding combobox.\n                                        InternalEvent.addListener(select, 'change', () => {\n                                            into.toolbar.selectMode(img, (evt) => {\n                                                const pt = convertPoint(editor.graph.container, getClientX(evt), getClientY(evt));\n                                                return editor.addVertex(null, funct(), pt.x, pt.y);\n                                            });\n                                            into.toolbar.noReset = false;\n                                        });\n                                        // Adds the entries to the combobox\n                                        for (let i = 0; i < children.length; i += 1) {\n                                            const child = children[i];\n                                            if (child.nodeName === 'separator') {\n                                                into.addOption(select, '---');\n                                            }\n                                            else if (child.nodeName === 'add') {\n                                                const lab = child.getAttribute('as');\n                                                const tmp = child.getAttribute('template');\n                                                const option = into.addOption(select, lab, tmp || template);\n                                                option.cellStyle = child.getAttribute('style');\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            // Assigns an ID to the created element to access it later.\n                            if (elt != null) {\n                                const id = node.getAttribute('id');\n                                if (id != null && id.length > 0) {\n                                    elt.setAttribute('id', id);\n                                }\n                            }\n                        }\n                    }\n                }\n                node = node.nextSibling;\n            }\n        }\n        return into;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,SAASC,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,UAAU,EAAEC,UAAU,QAAQ,0BAA0B;AACjE,OAAOC,aAAa,MAAM,mCAAmC;AAC7D,SAASC,aAAa,EAAEC,cAAc,QAAQ,wBAAwB;AACtE,OAAOC,YAAY,MAAM,4BAA4B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,SAASX,WAAW,CAAC;EAChDY,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,IAAIX,aAAa,CAAC,CAAC,CAAC;EAC9B;EACA;AACJ;AACA;EACIY,MAAMA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACf,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAE;IACrB,IAAIA,IAAI,IAAI,IAAI,EAAE;MACd,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;MAC1B,IAAIC,IAAI,GAAGH,KAAK,CAACI,UAAU;MAC3B,OAAOD,IAAI,IAAI,IAAI,EAAE;QACjB,IAAIA,IAAI,CAACE,QAAQ,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
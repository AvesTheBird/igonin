{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro\\\\src\\\\components\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { DomHelpers, EdgeStyle, Graph, ModelXmlSerializer, Point, popup, RubberBandHandler } from '@maxgraph/core';\nimport { globalValues, rubberBandValues } from './shared/args.js';\nimport { configureImagesBasePath, createGraphContainer } from './shared/configure.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  label,\n  ...args\n}) => {\n  _s();\n  const graphContainerRef = useRef(null);\n  useEffect(() => {\n    configureImagesBasePath();\n    const container = createGraphContainer(args);\n    graphContainerRef.current.appendChild(container);\n\n    // Create a new div for grid background\n    const gridBackground = document.createElement('div');\n    gridBackground.style.position = 'absolute';\n    gridBackground.style.top = 0;\n    gridBackground.style.left = 0;\n    gridBackground.style.width = '100%';\n    gridBackground.style.height = '100%';\n    gridBackground.style.backgroundImage = 'url(\"grid.gif\")'; // Replace with your grid image path\n    container.appendChild(gridBackground);\n\n    // Creates the graph inside the given container\n    const graph = new Graph(container);\n    graph.setConnectable(true);\n    graph.setTooltips(true);\n\n    // Sets the default edge style\n    const style = graph.getStylesheet().getDefaultEdgeStyle();\n    style.edgeStyle = EdgeStyle.ElbowConnector;\n\n    // Ports are not used as terminals for edges, they are\n    // only used to compute the graphical connection point\n    graph.isPort = function (cell) {\n      var _geo$relative;\n      const geo = cell === null || cell === void 0 ? void 0 : cell.getGeometry();\n      return (_geo$relative = geo === null || geo === void 0 ? void 0 : geo.relative) !== null && _geo$relative !== void 0 ? _geo$relative : false;\n    };\n\n    // Implements a tooltip that shows the actual\n    // source and target of an edge\n    graph.getTooltipForCell = function (cell) {\n      if (cell && cell.isEdge()) {\n        const source = cell.getTerminal(true);\n        const target = cell.getTerminal(false);\n        if (source && target) {\n          return `${this.convertValueToString(source)} => ${this.convertValueToString(target)}`;\n        }\n      }\n      return Graph.prototype.getTooltipForCell.apply(this, [cell]);\n    };\n\n    // Removes the folding icon and disables any folding\n    graph.isCellFoldable = _cell => false;\n\n    // Enables rubberband selection\n    if (args.rubberBand) new RubberBandHandler(graph);\n\n    // Gets the default parent for inserting new cells. This\n    // is normally the first child of the root (ie. layer 0).\n    const parent = graph.getDefaultParent();\n\n    // Adds cells to the model in a single step\n    graph.batchUpdate(() => {\n      const v1 = graph.insertVertex(parent, null, 'Hello', 20, 80, 80, 30);\n      v1.setConnectable(false);\n      const v11 = graph.insertVertex(v1, null, '', 1, 1, 10, 10);\n      if (v11.geometry) {\n        v11.geometry.offset = new Point(-5, -5);\n        v11.geometry.relative = true;\n      }\n      const v12 = graph.insertVertex(v1, null, '', 1, 0, 10, 10);\n      if (v12.geometry) {\n        v12.geometry.offset = new Point(-5, -5);\n        v12.geometry.relative = true;\n      }\n      const v2 = graph.insertVertex(parent, null, 'World!', 200, 150, 80, 30);\n      const v3 = graph.insertVertex(parent, null, 'World2', 200, 20, 80, 30);\n      graph.insertEdge(parent, null, '', v11, v2);\n      graph.insertEdge(parent, null, '', v12, v3);\n    });\n    const controller = document.createElement('div');\n    graphContainerRef.current.appendChild(controller);\n    const button = DomHelpers.button('View XML', function () {\n      const xml = new ModelXmlSerializer(graph.getDataModel()).export();\n      popup(xml, true);\n    });\n    controller.appendChild(button);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: graphContainerRef,\n    style: {\n      position: 'relative',\n      width: '600px',\n      // Set your desired width\n      height: '400px',\n      // Set your desired height\n      border: '2px solid gray' // Set gray border\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"T2LhyAvPiiq95tTQ9P6wK78bc+c=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useRef","DomHelpers","EdgeStyle","Graph","ModelXmlSerializer","Point","popup","RubberBandHandler","globalValues","rubberBandValues","configureImagesBasePath","createGraphContainer","jsxDEV","_jsxDEV","GraphComponent","label","args","_s","graphContainerRef","container","current","appendChild","gridBackground","document","createElement","style","position","top","left","width","height","backgroundImage","graph","setConnectable","setTooltips","getStylesheet","getDefaultEdgeStyle","edgeStyle","ElbowConnector","isPort","cell","_geo$relative","geo","getGeometry","relative","getTooltipForCell","isEdge","source","getTerminal","target","convertValueToString","prototype","apply","isCellFoldable","_cell","rubberBand","parent","getDefaultParent","batchUpdate","v1","insertVertex","v11","geometry","offset","v12","v2","v3","insertEdge","controller","button","xml","getDataModel","export","ref","border","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro/src/components/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport {\r\n  DomHelpers,\r\n  EdgeStyle,\r\n  Graph,\r\n  ModelXmlSerializer,\r\n  Point,\r\n  popup,\r\n  RubberBandHandler,\r\n} from '@maxgraph/core';\r\n\r\nimport {\r\n  globalValues,\r\n  rubberBandValues,\r\n} from './shared/args.js';\r\nimport { configureImagesBasePath, createGraphContainer } from './shared/configure.js';\r\n\r\nconst GraphComponent = ({ label, ...args }) => {\r\n  const graphContainerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    configureImagesBasePath();\r\n\r\n    const container = createGraphContainer(args);\r\n    graphContainerRef.current.appendChild(container);\r\n\r\n    // Create a new div for grid background\r\n    const gridBackground = document.createElement('div');\r\n    gridBackground.style.position = 'absolute';\r\n    gridBackground.style.top = 0;\r\n    gridBackground.style.left = 0;\r\n    gridBackground.style.width = '100%';\r\n    gridBackground.style.height = '100%';\r\n    gridBackground.style.backgroundImage = 'url(\"grid.gif\")'; // Replace with your grid image path\r\n    container.appendChild(gridBackground);\r\n\r\n    // Creates the graph inside the given container\r\n    const graph = new Graph(container);\r\n    graph.setConnectable(true);\r\n    graph.setTooltips(true);\r\n\r\n    // Sets the default edge style\r\n    const style = graph.getStylesheet().getDefaultEdgeStyle();\r\n    style.edgeStyle = EdgeStyle.ElbowConnector;\r\n\r\n    // Ports are not used as terminals for edges, they are\r\n    // only used to compute the graphical connection point\r\n    graph.isPort = function (cell) {\r\n      const geo = cell?.getGeometry();\r\n      return geo?.relative ?? false;\r\n    };\r\n\r\n    // Implements a tooltip that shows the actual\r\n    // source and target of an edge\r\n    graph.getTooltipForCell = function (cell) {\r\n      if (cell && cell.isEdge()) {\r\n        const source = cell.getTerminal(true);\r\n        const target = cell.getTerminal(false);\r\n        if (source && target) {\r\n          return `${this.convertValueToString(source)} => ${this.convertValueToString(\r\n            target\r\n          )}`;\r\n        }\r\n      }\r\n\r\n      return Graph.prototype.getTooltipForCell.apply(this, [cell]);\r\n    };\r\n\r\n    // Removes the folding icon and disables any folding\r\n    graph.isCellFoldable = (_cell) => false;\r\n\r\n    // Enables rubberband selection\r\n    if (args.rubberBand) new RubberBandHandler(graph);\r\n\r\n    // Gets the default parent for inserting new cells. This\r\n    // is normally the first child of the root (ie. layer 0).\r\n    const parent = graph.getDefaultParent();\r\n\r\n    // Adds cells to the model in a single step\r\n    graph.batchUpdate(() => {\r\n      const v1 = graph.insertVertex(parent, null, 'Hello', 20, 80, 80, 30);\r\n      v1.setConnectable(false);\r\n      const v11 = graph.insertVertex(v1, null, '', 1, 1, 10, 10);\r\n      if (v11.geometry) {\r\n        v11.geometry.offset = new Point(-5, -5);\r\n        v11.geometry.relative = true;\r\n      }\r\n      const v12 = graph.insertVertex(v1, null, '', 1, 0, 10, 10);\r\n      if (v12.geometry) {\r\n        v12.geometry.offset = new Point(-5, -5);\r\n        v12.geometry.relative = true;\r\n      }\r\n      const v2 = graph.insertVertex(parent, null, 'World!', 200, 150, 80, 30);\r\n      const v3 = graph.insertVertex(parent, null, 'World2', 200, 20, 80, 30);\r\n      graph.insertEdge(parent, null, '', v11, v2);\r\n      graph.insertEdge(parent, null, '', v12, v3);\r\n    });\r\n\r\n    const controller = document.createElement('div');\r\n    graphContainerRef.current.appendChild(controller);\r\n\r\n    const button = DomHelpers.button('View XML', function () {\r\n      const xml = new ModelXmlSerializer(graph.getDataModel()).export();\r\n      popup(xml, true);\r\n    });\r\n\r\n    controller.appendChild(button);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={graphContainerRef}\r\n      style={{\r\n        position: 'relative',\r\n        width: '600px', // Set your desired width\r\n        height: '400px', // Set your desired height\r\n        border: '2px solid gray', // Set gray border\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { setOpacity } from '../../util/styleUtils';\nimport GeometryChange from '../undoable_changes/GeometryChange';\nimport TerminalChange from '../undoable_changes/TerminalChange';\nimport ValueChange from '../undoable_changes/ValueChange';\nimport ChildChange from '../undoable_changes/ChildChange';\nimport StyleChange from '../undoable_changes/StyleChange';\n/**\n * Provides animation effects.\n *\n * @class Effects\n */\nclass Effects {\n  /**\n   * Asynchronous animated move operation. See also: <Morphing>.\n   *\n   * @example\n   * ```javascript\n   * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n   * {\n   *   var changes = evt.getProperty('edit').changes;\n   *\n   *   if (changes.length < 10)\n   *   {\n   *     Effects.animateChanges(graph, changes);\n   *   }\n   * });\n   * ```\n   *\n   * @param graph - {@link Graph} that received the changes.\n   * @param changes - Array of changes to be animated.\n   * @param done - Optional function argument that is invoked after the\n   * last step of the animation.\n   */\n  static animateChanges(graph, changes, done) {\n    const maxStep = 10;\n    let step = 0;\n    const animate = () => {\n      let isRequired = false;\n      for (let i = 0; i < changes.length; i += 1) {\n        const change = changes[i];\n        if (change instanceof GeometryChange || change instanceof TerminalChange || change instanceof ValueChange || change instanceof ChildChange || change instanceof StyleChange) {\n          // @ts-ignore\n          const state = graph.getView().getState(change.cell || change.child, false);\n          if (state != null) {\n            isRequired = true;\n            if (change.constructor !== GeometryChange || change.cell.isEdge()) {\n              setOpacity(state.shape.node, 100 * step / maxStep);\n            } else {\n              const {\n                scale\n              } = graph.getView();\n              const geometry = change.geometry;\n              const previous = change.previous;\n              const dx = (geometry.x - previous.x) * scale;\n              const dy = (geometry.y - previous.y) * scale;\n              const sx = (geometry.width - previous.width) * scale;\n              const sy = (geometry.height - previous.height) * scale;\n              if (step === 0) {\n                state.x -= dx;\n                state.y -= dy;\n                state.width -= sx;\n                state.height -= sy;\n              } else {\n                state.x += dx / maxStep;\n                state.y += dy / maxStep;\n                state.width += sx / maxStep;\n                state.height += sy / maxStep;\n              }\n              graph.cellRenderer.redraw(state);\n              // Fades all connected edges and children\n              Effects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n            }\n          }\n        }\n      }\n      if (step < maxStep && isRequired) {\n        step++;\n        window.setTimeout(animate, delay);\n      } else if (done != null) {\n        done();\n      }\n    };\n    const delay = 30;\n    animate();\n  }\n  /**\n   * Sets the opacity on the given cell and its descendants.\n   *\n   * @param graph - {@link Graph} that contains the cells.\n   * @param cell - <Cell> to set the opacity for.\n   * @param opacity - New value for the opacity in %.\n   */\n  static cascadeOpacity(graph, cell, opacity) {\n    // Fades all children\n    const childCount = cell.getChildCount();\n    for (let i = 0; i < childCount; i += 1) {\n      const child = cell.getChildAt(i);\n      const childState = graph.getView().getState(child);\n      if (childState != null) {\n        setOpacity(childState.shape.node, opacity);\n        Effects.cascadeOpacity(graph, child, opacity);\n      }\n    }\n    // Fades all connected edges\n    const edges = cell.getEdges();\n    if (edges != null) {\n      for (let i = 0; i < edges.length; i += 1) {\n        const edgeState = graph.getView().getState(edges[i]);\n        if (edgeState != null) {\n          setOpacity(edgeState.shape.node, opacity);\n        }\n      }\n    }\n  }\n  /**\n   * Asynchronous fade-out operation.\n   */\n  static fadeOut(node, from, remove, step, delay, isEnabled) {\n    step = step || 40;\n    delay = delay || 30;\n    let opacity = from || 100;\n    setOpacity(node, opacity);\n    if (isEnabled || isEnabled == null) {\n      const f = () => {\n        opacity = Math.max(opacity - step, 0);\n        setOpacity(node, opacity);\n        if (opacity > 0) {\n          window.setTimeout(f, delay);\n        } else {\n          node.style.visibility = 'hidden';\n          if (remove && node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        }\n      };\n      window.setTimeout(f, delay);\n    } else {\n      node.style.visibility = 'hidden';\n      if (remove && node.parentNode) {\n        node.parentNode.removeChild(node);\n      }\n    }\n  }\n}\nexport default Effects;","map":{"version":3,"names":["setOpacity","GeometryChange","TerminalChange","ValueChange","ChildChange","StyleChange","Effects","animateChanges","graph","changes","done","maxStep","step","animate","isRequired","i","length","change","state","getView","getState","cell","child","constructor","isEdge","shape","node","scale","geometry","previous","dx","x","dy","y","sx","width","sy","height","cellRenderer","redraw","cascadeOpacity","window","setTimeout","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","remove","isEnabled","f","Math","max","style","visibility","parentNode","removeChild"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/animate/Effects.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { setOpacity } from '../../util/styleUtils';\nimport GeometryChange from '../undoable_changes/GeometryChange';\nimport TerminalChange from '../undoable_changes/TerminalChange';\nimport ValueChange from '../undoable_changes/ValueChange';\nimport ChildChange from '../undoable_changes/ChildChange';\nimport StyleChange from '../undoable_changes/StyleChange';\n/**\n * Provides animation effects.\n *\n * @class Effects\n */\nclass Effects {\n    /**\n     * Asynchronous animated move operation. See also: <Morphing>.\n     *\n     * @example\n     * ```javascript\n     * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n     * {\n     *   var changes = evt.getProperty('edit').changes;\n     *\n     *   if (changes.length < 10)\n     *   {\n     *     Effects.animateChanges(graph, changes);\n     *   }\n     * });\n     * ```\n     *\n     * @param graph - {@link Graph} that received the changes.\n     * @param changes - Array of changes to be animated.\n     * @param done - Optional function argument that is invoked after the\n     * last step of the animation.\n     */\n    static animateChanges(graph, changes, done) {\n        const maxStep = 10;\n        let step = 0;\n        const animate = () => {\n            let isRequired = false;\n            for (let i = 0; i < changes.length; i += 1) {\n                const change = changes[i];\n                if (change instanceof GeometryChange ||\n                    change instanceof TerminalChange ||\n                    change instanceof ValueChange ||\n                    change instanceof ChildChange ||\n                    change instanceof StyleChange) {\n                    // @ts-ignore\n                    const state = graph.getView().getState(change.cell || change.child, false);\n                    if (state != null) {\n                        isRequired = true;\n                        if (change.constructor !== GeometryChange || change.cell.isEdge()) {\n                            setOpacity(state.shape.node, (100 * step) / maxStep);\n                        }\n                        else {\n                            const { scale } = graph.getView();\n                            const geometry = change.geometry;\n                            const previous = change.previous;\n                            const dx = (geometry.x - previous.x) * scale;\n                            const dy = (geometry.y - previous.y) * scale;\n                            const sx = (geometry.width - previous.width) * scale;\n                            const sy = (geometry.height - previous.height) * scale;\n                            if (step === 0) {\n                                state.x -= dx;\n                                state.y -= dy;\n                                state.width -= sx;\n                                state.height -= sy;\n                            }\n                            else {\n                                state.x += dx / maxStep;\n                                state.y += dy / maxStep;\n                                state.width += sx / maxStep;\n                                state.height += sy / maxStep;\n                            }\n                            graph.cellRenderer.redraw(state);\n                            // Fades all connected edges and children\n                            Effects.cascadeOpacity(graph, change.cell, (100 * step) / maxStep);\n                        }\n                    }\n                }\n            }\n            if (step < maxStep && isRequired) {\n                step++;\n                window.setTimeout(animate, delay);\n            }\n            else if (done != null) {\n                done();\n            }\n        };\n        const delay = 30;\n        animate();\n    }\n    /**\n     * Sets the opacity on the given cell and its descendants.\n     *\n     * @param graph - {@link Graph} that contains the cells.\n     * @param cell - <Cell> to set the opacity for.\n     * @param opacity - New value for the opacity in %.\n     */\n    static cascadeOpacity(graph, cell, opacity) {\n        // Fades all children\n        const childCount = cell.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = cell.getChildAt(i);\n            const childState = graph.getView().getState(child);\n            if (childState != null) {\n                setOpacity(childState.shape.node, opacity);\n                Effects.cascadeOpacity(graph, child, opacity);\n            }\n        }\n        // Fades all connected edges\n        const edges = cell.getEdges();\n        if (edges != null) {\n            for (let i = 0; i < edges.length; i += 1) {\n                const edgeState = graph.getView().getState(edges[i]);\n                if (edgeState != null) {\n                    setOpacity(edgeState.shape.node, opacity);\n                }\n            }\n        }\n    }\n    /**\n     * Asynchronous fade-out operation.\n     */\n    static fadeOut(node, from, remove, step, delay, isEnabled) {\n        step = step || 40;\n        delay = delay || 30;\n        let opacity = from || 100;\n        setOpacity(node, opacity);\n        if (isEnabled || isEnabled == null) {\n            const f = () => {\n                opacity = Math.max(opacity - step, 0);\n                setOpacity(node, opacity);\n                if (opacity > 0) {\n                    window.setTimeout(f, delay);\n                }\n                else {\n                    node.style.visibility = 'hidden';\n                    if (remove && node.parentNode) {\n                        node.parentNode.removeChild(node);\n                    }\n                }\n            };\n            window.setTimeout(f, delay);\n        }\n        else {\n            node.style.visibility = 'hidden';\n            if (remove && node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        }\n    }\n}\nexport default Effects;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
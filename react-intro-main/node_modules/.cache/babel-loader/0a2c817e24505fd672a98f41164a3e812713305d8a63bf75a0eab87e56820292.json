{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\nimport { ALIGN, DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, FONT, LINE_HEIGHT } from './Constants';\nimport Point from '../view/geometry/Point';\nimport Dictionary from './Dictionary';\nimport CellPath from '../view/cell/CellPath';\nimport Rectangle from '../view/geometry/Rectangle';\n/**\n * Removes the cursors from the style of the given DOM node and its\n * descendants.\n *\n * @param element DOM node to remove the cursor style from.\n */\nexport const removeCursors = element => {\n  if (element.style) {\n    element.style.cursor = '';\n  }\n  const children = element.children;\n  if (children) {\n    const childCount = children.length;\n    for (let i = 0; i < childCount; i += 1) {\n      removeCursors(children[i]);\n    }\n  }\n};\n/**\n * Returns the current style of the specified element.\n *\n * @param element DOM node whose current style should be returned.\n */\nexport const getCurrentStyle = element => {\n  return !element || element.toString() === '[object ShadowRoot]' ? null : window.getComputedStyle(element, '');\n};\n/**\n * Function: parseCssNumber\n *\n * Parses the given CSS numeric value adding handling for the values thin,\n * medium and thick (2, 4 and 6).\n */\nexport const parseCssNumber = value => {\n  if (value === 'thin') {\n    value = '2';\n  } else if (value === 'medium') {\n    value = '4';\n  } else if (value === 'thick') {\n    value = '6';\n  }\n  let n = parseFloat(value);\n  if (Number.isNaN(n)) {\n    n = 0;\n  }\n  return n;\n};\n/**\n * Function: setPrefixedStyle\n *\n * Adds the given style with the standard name and an optional vendor prefix for the current\n * browser.\n *\n * ```javascript\n * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n * ```\n */\nexport const setPrefixedStyle = (style, name, value) => {\n  let prefix = null;\n  if (Client.IS_SF || Client.IS_GC) {\n    prefix = 'Webkit';\n  } else if (Client.IS_MT) {\n    prefix = 'Moz';\n  }\n  style.setProperty(name, value);\n  if (prefix !== null && name.length > 0) {\n    name = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n    style.setProperty(name, value);\n  }\n};\n/**\n * Function: hasScrollbars\n *\n * Returns true if the overflow CSS property of the given node is either\n * scroll or auto.\n *\n * @param node DOM node whose style should be checked for scrollbars.\n */\nexport const hasScrollbars = node => {\n  const style = getCurrentStyle(node);\n  return !!style && (style.overflow === 'scroll' || style.overflow === 'auto');\n};\n/**\n * Returns the client size for the current document as an {@link Rectangle}.\n */\nexport const getDocumentSize = () => {\n  const b = document.body;\n  const d = document.documentElement;\n  try {\n    var _b$clientWidth, _b$clientHeight;\n    return new Rectangle(0, 0, (_b$clientWidth = b.clientWidth) !== null && _b$clientWidth !== void 0 ? _b$clientWidth : d.clientWidth, Math.max((_b$clientHeight = b.clientHeight) !== null && _b$clientHeight !== void 0 ? _b$clientHeight : 0, d.clientHeight));\n  } catch (e) {\n    return new Rectangle();\n  }\n};\n/**\n * Makes sure the given node is inside the visible area of the window. This\n * is done by setting the left and top in the style.\n */\nexport const fit = node => {\n  const ds = getDocumentSize();\n  const left = node.offsetLeft;\n  const width = node.offsetWidth;\n  const offset = getDocumentScrollOrigin(node.ownerDocument);\n  const sl = offset.x;\n  const st = offset.y;\n  const right = sl + ds.width;\n  if (left + width > right) {\n    node.style.left = \"\".concat(Math.max(sl, right - width), \"px\");\n  }\n  const top = node.offsetTop;\n  const height = node.offsetHeight;\n  const bottom = st + ds.height;\n  if (top + height > bottom) {\n    node.style.top = \"\".concat(Math.max(st, bottom - height), \"px\");\n  }\n};\n/**\n * Returns the offset for the specified container as an {@link Point}. The\n * offset is the distance from the top left corner of the container to the\n * top left corner of the document.\n *\n * @param container DOM node to return the offset for.\n * @param scollOffset Optional boolean to add the scroll offset of the document.\n * Default is false.\n */\nexport const getOffset = function (container) {\n  let scrollOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let offsetLeft = 0;\n  let offsetTop = 0;\n  // Ignores document scroll origin for fixed elements\n  let fixed = false;\n  let node = container;\n  const b = document.body;\n  const d = document.documentElement;\n  while (node != null && node != b && node != d && !fixed) {\n    const style = getCurrentStyle(node);\n    if (style != null) {\n      fixed = fixed || style.position == 'fixed';\n    }\n    node = node.parentNode;\n  }\n  if (!scrollOffset && !fixed) {\n    const offset = getDocumentScrollOrigin(container.ownerDocument);\n    offsetLeft += offset.x;\n    offsetTop += offset.y;\n  }\n  const r = container.getBoundingClientRect();\n  if (r != null) {\n    offsetLeft += r.left;\n    offsetTop += r.top;\n  }\n  return new Point(offsetLeft, offsetTop);\n};\n/**\n * Returns the scroll origin of the given document or the current document\n * if no document is given.\n */\nexport const getDocumentScrollOrigin = doc => {\n  // @ts-ignore 'parentWindow' is an unknown property.\n  const wnd = doc.defaultView || doc.parentWindow;\n  const x = wnd != null && window.pageXOffset !== undefined ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n  const y = wnd != null && window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n  return new Point(x, y);\n};\n/**\n * Returns the top, left corner of the viewrect as an {@link Point}.\n *\n * @param node DOM node whose scroll origin should be returned.\n * @param includeAncestors Whether the scroll origin of the ancestors should be\n * included. Default is false.\n * @param includeDocument Whether the scroll origin of the document should be\n * included. Default is true.\n */\nexport const getScrollOrigin = function () {\n  let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let includeAncestors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let includeDocument = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const doc = node != null ? node.ownerDocument : document;\n  const b = doc.body;\n  const d = doc.documentElement;\n  const result = new Point();\n  let fixed = false;\n  while (node != null && node != b && node != d) {\n    if (!Number.isNaN(node.scrollLeft) && !Number.isNaN(node.scrollTop)) {\n      result.x += node.scrollLeft;\n      result.y += node.scrollTop;\n    }\n    const style = getCurrentStyle(node);\n    if (style != null) {\n      fixed = fixed || style.position == 'fixed';\n    }\n    node = includeAncestors ? node.parentNode : null;\n  }\n  if (!fixed && includeDocument) {\n    const origin = getDocumentScrollOrigin(doc);\n    result.x += origin.x;\n    result.y += origin.y;\n  }\n  return result;\n};\n/**\n * Converts the specified point (x, y) using the offset of the specified\n * container and returns a new {@link Point} with the result.\n *\n * ```javascript\n * let pt = mxUtils.convertPoint(graph.container,\n *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n * ```\n *\n * @param container DOM node to use for the offset.\n * @param x X-coordinate of the point to be converted.\n * @param y Y-coordinate of the point to be converted.\n */\nexport const convertPoint = (container, x, y) => {\n  const origin = getScrollOrigin(container, false);\n  const offset = getOffset(container);\n  offset.x -= origin.x;\n  offset.y -= origin.y;\n  return new Point(x - offset.x, y - offset.y);\n};\n/**\n * Assigns the value for the given key in the styles of the given cells, or\n * removes the key from the styles if the value is null.\n *\n * @param model <Transactions> to execute the transaction in.\n * @param cells Array of {@link Cells} to be updated.\n * @param key Key of the style to be changed.\n * @param value New value for the given key.\n */\nexport const setCellStyles = (model, cells, key, value) => {\n  if (cells.length > 0) {\n    model.batchUpdate(() => {\n      for (let i = 0; i < cells.length; i += 1) {\n        const cell = cells[i];\n        if (cell) {\n          const style = cell.getStyle();\n          style[key] = value;\n          model.setStyle(cell, style);\n        }\n      }\n    });\n  }\n};\n/**\n * Sets or toggles the flag bit for the given key in the cell's styles.\n * If value is null then the flag is toggled.\n *\n * Example:\n *\n * ```javascript\n * let cells = graph.getSelectionCells();\n * mxUtils.setCellStyleFlags(graph.model,\n *       cells,\n *       mxConstants.STYLE_FONTSTYLE,\n *       mxConstants.FONT_BOLD);\n * ```\n *\n * Toggles the bold font style.\n *\n * @param model <Transactions> that contains the cells.\n * @param cells Array of {@link Cells} to change the style for.\n * @param key Key of the style to be changed.\n * @param flag Integer for the bit to be changed.\n * @param value Optional boolean value for the flag.\n */\nexport const setCellStyleFlags = (model, cells, key, flag, value) => {\n  if (cells.length > 0) {\n    model.batchUpdate(() => {\n      for (let i = 0; i < cells.length; i += 1) {\n        const cell = cells[i];\n        if (cell) {\n          const style = setStyleFlag(cell.getStyle(), key, flag, value);\n          model.setStyle(cell, style);\n        }\n      }\n    });\n  }\n};\n/**\n * Sets or removes the given key from the specified style and returns the\n * new style. If value is null then the flag is toggled.\n *\n * @param style The style of the Cell.\n * @param key Key of the style to be changed.\n * @param flag Integer for the bit to be changed.\n * @param value Optional boolean value for the given flag.\n */\nexport const setStyleFlag = (style, key, flag, value) => {\n  const v = style[key];\n  if (v === undefined) {\n    style[key] = value === undefined ? flag : 0;\n  } else {\n    if (value === undefined) {\n      style[key] = v ^ flag;\n    } else if (value) {\n      style[key] = v | flag;\n    } else {\n      style[key] = v & ~flag;\n    }\n  }\n  return style;\n};\n/**\n * Sets the opacity of the specified DOM node to the given value in %.\n *\n * @param node DOM node to set the opacity for.\n * @param value Opacity in %. Possible values are between 0 and 100.\n */\nexport const setOpacity = (node, value) => {\n  node.style.opacity = String(value / 100);\n};\n/**\n * @param value the value to check.\n * @param mask the binary mask to apply.\n * @returns `true` if the value matches the binary mask.\n * @private Subject to change prior being part of the public API.\n */\nexport const matchBinaryMask = (value, mask) => {\n  return (value & mask) === mask;\n};\n/**\n * Returns an {@link Rectangle} with the size (width and height in pixels) of\n * the given string. The string may contain HTML markup. Newlines should be\n * converted to <br> before calling this method. The caller is responsible\n * for sanitizing the HTML markup.\n *\n * Example:\n *\n * ```javascript\n * let label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n * let size = graph.getSizeForString(label);\n * ```\n *\n * @param text String whose size should be returned.\n * @param fontSize Integer that specifies the font size in pixels. Default is\n * {@link Constants#DEFAULT_FONTSIZE}.\n * @param fontFamily String that specifies the name of the font family. Default\n * is {@link Constants#DEFAULT_FONTFAMILY}.\n * @param textWidth Optional width for text wrapping.\n * @param fontStyle Optional font style.\n */\nexport const getSizeForString = function (text) {\n  let fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_FONTSIZE;\n  let fontFamily = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_FONTFAMILY;\n  let textWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let fontStyle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  const div = document.createElement('div');\n  // Sets the font size and family\n  div.style.fontFamily = fontFamily;\n  div.style.fontSize = \"\".concat(Math.round(fontSize), \"px\");\n  div.style.lineHeight = \"\".concat(Math.round(fontSize * LINE_HEIGHT), \"px\");\n  // Sets the font style\n  if (fontStyle !== null) {\n    matchBinaryMask(fontStyle, FONT.BOLD) && (div.style.fontWeight = 'bold');\n    matchBinaryMask(fontStyle, FONT.ITALIC) && (div.style.fontWeight = 'italic');\n    const txtDecor = [];\n    matchBinaryMask(fontStyle, FONT.UNDERLINE) && txtDecor.push('underline');\n    matchBinaryMask(fontStyle, FONT.STRIKETHROUGH) && txtDecor.push('line-through');\n    txtDecor.length > 0 && (div.style.textDecoration = txtDecor.join(' '));\n  }\n  // Disables block layout and outside wrapping and hides the div\n  div.style.position = 'absolute';\n  div.style.visibility = 'hidden';\n  div.style.display = 'inline-block';\n  if (textWidth !== null) {\n    div.style.width = \"\".concat(textWidth, \"px\");\n    div.style.whiteSpace = 'normal';\n  } else {\n    div.style.whiteSpace = 'nowrap';\n  }\n  // Adds the text and inserts into DOM for updating of size\n  div.innerHTML = text;\n  document.body.appendChild(div);\n  // Gets the size and removes from DOM\n  const size = new Rectangle(0, 0, div.offsetWidth, div.offsetHeight);\n  document.body.removeChild(div);\n  return size;\n};\n/**\n * Sorts the given cells according to the order in the cell hierarchy.\n * Ascending is optional and defaults to true.\n */\nexport const sortCells = function (cells) {\n  let ascending = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const lookup = new Dictionary();\n  cells.sort((o1, o2) => {\n    let p1 = lookup.get(o1);\n    if (p1 == null) {\n      p1 = CellPath.create(o1).split(CellPath.PATH_SEPARATOR);\n      lookup.put(o1, p1);\n    }\n    let p2 = lookup.get(o2);\n    if (p2 == null) {\n      p2 = CellPath.create(o2).split(CellPath.PATH_SEPARATOR);\n      lookup.put(o2, p2);\n    }\n    const comp = CellPath.compare(p1, p2);\n    return comp == 0 ? 0 : comp > 0 == ascending ? 1 : -1;\n  });\n  return cells;\n};\n/**\n * Returns an {@link Point} that represents the horizontal and vertical alignment\n * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n * alignment. Default values for missing arguments is top, left.\n */\nexport const getAlignmentAsPoint = (align, valign) => {\n  let dx = -0.5;\n  let dy = -0.5;\n  // Horizontal alignment\n  if (align === ALIGN.LEFT) {\n    dx = 0;\n  } else if (align === ALIGN.RIGHT) {\n    dx = -1;\n  }\n  // Vertical alignment\n  if (valign === ALIGN.TOP) {\n    dy = 0;\n  } else if (valign === ALIGN.BOTTOM) {\n    dy = -1;\n  }\n  return new Point(dx, dy);\n};","map":{"version":3,"names":["Client","ALIGN","DEFAULT_FONTFAMILY","DEFAULT_FONTSIZE","FONT","LINE_HEIGHT","Point","Dictionary","CellPath","Rectangle","removeCursors","element","style","cursor","children","childCount","length","i","getCurrentStyle","toString","window","getComputedStyle","parseCssNumber","value","n","parseFloat","Number","isNaN","setPrefixedStyle","name","prefix","IS_SF","IS_GC","IS_MT","setProperty","substring","toUpperCase","hasScrollbars","node","overflow","getDocumentSize","b","document","body","d","documentElement","_b$clientWidth","_b$clientHeight","clientWidth","Math","max","clientHeight","e","fit","ds","left","offsetLeft","width","offsetWidth","offset","getDocumentScrollOrigin","ownerDocument","sl","x","st","y","right","concat","top","offsetTop","height","offsetHeight","bottom","getOffset","container","scrollOffset","arguments","undefined","fixed","position","parentNode","r","getBoundingClientRect","doc","wnd","defaultView","parentWindow","pageXOffset","scrollLeft","pageYOffset","scrollTop","getScrollOrigin","includeAncestors","includeDocument","result","origin","convertPoint","setCellStyles","model","cells","key","batchUpdate","cell","getStyle","setStyle","setCellStyleFlags","flag","setStyleFlag","v","setOpacity","opacity","String","matchBinaryMask","mask","getSizeForString","text","fontSize","fontFamily","textWidth","fontStyle","div","createElement","round","lineHeight","BOLD","fontWeight","ITALIC","txtDecor","UNDERLINE","push","STRIKETHROUGH","textDecoration","join","visibility","display","whiteSpace","innerHTML","appendChild","size","removeChild","sortCells","ascending","lookup","sort","o1","o2","p1","get","create","split","PATH_SEPARATOR","put","p2","comp","compare","getAlignmentAsPoint","align","valign","dx","dy","LEFT","RIGHT","TOP","BOTTOM"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/util/styleUtils.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\nimport { ALIGN, DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, FONT, LINE_HEIGHT, } from './Constants';\nimport Point from '../view/geometry/Point';\nimport Dictionary from './Dictionary';\nimport CellPath from '../view/cell/CellPath';\nimport Rectangle from '../view/geometry/Rectangle';\n/**\n * Removes the cursors from the style of the given DOM node and its\n * descendants.\n *\n * @param element DOM node to remove the cursor style from.\n */\nexport const removeCursors = (element) => {\n    if (element.style) {\n        element.style.cursor = '';\n    }\n    const children = element.children;\n    if (children) {\n        const childCount = children.length;\n        for (let i = 0; i < childCount; i += 1) {\n            removeCursors(children[i]);\n        }\n    }\n};\n/**\n * Returns the current style of the specified element.\n *\n * @param element DOM node whose current style should be returned.\n */\nexport const getCurrentStyle = (element) => {\n    return !element || element.toString() === '[object ShadowRoot]' ? null : window.getComputedStyle(element, '');\n};\n/**\n * Function: parseCssNumber\n *\n * Parses the given CSS numeric value adding handling for the values thin,\n * medium and thick (2, 4 and 6).\n */\nexport const parseCssNumber = (value) => {\n    if (value === 'thin') {\n        value = '2';\n    }\n    else if (value === 'medium') {\n        value = '4';\n    }\n    else if (value === 'thick') {\n        value = '6';\n    }\n    let n = parseFloat(value);\n    if (Number.isNaN(n)) {\n        n = 0;\n    }\n    return n;\n};\n/**\n * Function: setPrefixedStyle\n *\n * Adds the given style with the standard name and an optional vendor prefix for the current\n * browser.\n *\n * ```javascript\n * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n * ```\n */\nexport const setPrefixedStyle = (style, name, value) => {\n    let prefix = null;\n    if (Client.IS_SF || Client.IS_GC) {\n        prefix = 'Webkit';\n    }\n    else if (Client.IS_MT) {\n        prefix = 'Moz';\n    }\n    style.setProperty(name, value);\n    if (prefix !== null && name.length > 0) {\n        name = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n        style.setProperty(name, value);\n    }\n};\n/**\n * Function: hasScrollbars\n *\n * Returns true if the overflow CSS property of the given node is either\n * scroll or auto.\n *\n * @param node DOM node whose style should be checked for scrollbars.\n */\nexport const hasScrollbars = (node) => {\n    const style = getCurrentStyle(node);\n    return !!style && (style.overflow === 'scroll' || style.overflow === 'auto');\n};\n/**\n * Returns the client size for the current document as an {@link Rectangle}.\n */\nexport const getDocumentSize = () => {\n    const b = document.body;\n    const d = document.documentElement;\n    try {\n        return new Rectangle(0, 0, b.clientWidth ?? d.clientWidth, Math.max(b.clientHeight ?? 0, d.clientHeight));\n    }\n    catch (e) {\n        return new Rectangle();\n    }\n};\n/**\n * Makes sure the given node is inside the visible area of the window. This\n * is done by setting the left and top in the style.\n */\nexport const fit = (node) => {\n    const ds = getDocumentSize();\n    const left = node.offsetLeft;\n    const width = node.offsetWidth;\n    const offset = getDocumentScrollOrigin(node.ownerDocument);\n    const sl = offset.x;\n    const st = offset.y;\n    const right = sl + ds.width;\n    if (left + width > right) {\n        node.style.left = `${Math.max(sl, right - width)}px`;\n    }\n    const top = node.offsetTop;\n    const height = node.offsetHeight;\n    const bottom = st + ds.height;\n    if (top + height > bottom) {\n        node.style.top = `${Math.max(st, bottom - height)}px`;\n    }\n};\n/**\n * Returns the offset for the specified container as an {@link Point}. The\n * offset is the distance from the top left corner of the container to the\n * top left corner of the document.\n *\n * @param container DOM node to return the offset for.\n * @param scollOffset Optional boolean to add the scroll offset of the document.\n * Default is false.\n */\nexport const getOffset = (container, scrollOffset = false) => {\n    let offsetLeft = 0;\n    let offsetTop = 0;\n    // Ignores document scroll origin for fixed elements\n    let fixed = false;\n    let node = container;\n    const b = document.body;\n    const d = document.documentElement;\n    while (node != null && node != b && node != d && !fixed) {\n        const style = getCurrentStyle(node);\n        if (style != null) {\n            fixed = fixed || style.position == 'fixed';\n        }\n        node = node.parentNode;\n    }\n    if (!scrollOffset && !fixed) {\n        const offset = getDocumentScrollOrigin(container.ownerDocument);\n        offsetLeft += offset.x;\n        offsetTop += offset.y;\n    }\n    const r = container.getBoundingClientRect();\n    if (r != null) {\n        offsetLeft += r.left;\n        offsetTop += r.top;\n    }\n    return new Point(offsetLeft, offsetTop);\n};\n/**\n * Returns the scroll origin of the given document or the current document\n * if no document is given.\n */\nexport const getDocumentScrollOrigin = (doc) => {\n    // @ts-ignore 'parentWindow' is an unknown property.\n    const wnd = doc.defaultView || doc.parentWindow;\n    const x = wnd != null && window.pageXOffset !== undefined\n        ? window.pageXOffset\n        : (document.documentElement || document.body.parentNode || document.body)\n            .scrollLeft;\n    const y = wnd != null && window.pageYOffset !== undefined\n        ? window.pageYOffset\n        : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n    return new Point(x, y);\n};\n/**\n * Returns the top, left corner of the viewrect as an {@link Point}.\n *\n * @param node DOM node whose scroll origin should be returned.\n * @param includeAncestors Whether the scroll origin of the ancestors should be\n * included. Default is false.\n * @param includeDocument Whether the scroll origin of the document should be\n * included. Default is true.\n */\nexport const getScrollOrigin = (node = null, includeAncestors = false, includeDocument = true) => {\n    const doc = node != null ? node.ownerDocument : document;\n    const b = doc.body;\n    const d = doc.documentElement;\n    const result = new Point();\n    let fixed = false;\n    while (node != null && node != b && node != d) {\n        if (!Number.isNaN(node.scrollLeft) && !Number.isNaN(node.scrollTop)) {\n            result.x += node.scrollLeft;\n            result.y += node.scrollTop;\n        }\n        const style = getCurrentStyle(node);\n        if (style != null) {\n            fixed = fixed || style.position == 'fixed';\n        }\n        node = includeAncestors ? node.parentNode : null;\n    }\n    if (!fixed && includeDocument) {\n        const origin = getDocumentScrollOrigin(doc);\n        result.x += origin.x;\n        result.y += origin.y;\n    }\n    return result;\n};\n/**\n * Converts the specified point (x, y) using the offset of the specified\n * container and returns a new {@link Point} with the result.\n *\n * ```javascript\n * let pt = mxUtils.convertPoint(graph.container,\n *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n * ```\n *\n * @param container DOM node to use for the offset.\n * @param x X-coordinate of the point to be converted.\n * @param y Y-coordinate of the point to be converted.\n */\nexport const convertPoint = (container, x, y) => {\n    const origin = getScrollOrigin(container, false);\n    const offset = getOffset(container);\n    offset.x -= origin.x;\n    offset.y -= origin.y;\n    return new Point(x - offset.x, y - offset.y);\n};\n/**\n * Assigns the value for the given key in the styles of the given cells, or\n * removes the key from the styles if the value is null.\n *\n * @param model <Transactions> to execute the transaction in.\n * @param cells Array of {@link Cells} to be updated.\n * @param key Key of the style to be changed.\n * @param value New value for the given key.\n */\nexport const setCellStyles = (model, cells, key, value) => {\n    if (cells.length > 0) {\n        model.batchUpdate(() => {\n            for (let i = 0; i < cells.length; i += 1) {\n                const cell = cells[i];\n                if (cell) {\n                    const style = cell.getStyle();\n                    style[key] = value;\n                    model.setStyle(cell, style);\n                }\n            }\n        });\n    }\n};\n/**\n * Sets or toggles the flag bit for the given key in the cell's styles.\n * If value is null then the flag is toggled.\n *\n * Example:\n *\n * ```javascript\n * let cells = graph.getSelectionCells();\n * mxUtils.setCellStyleFlags(graph.model,\n *       cells,\n *       mxConstants.STYLE_FONTSTYLE,\n *       mxConstants.FONT_BOLD);\n * ```\n *\n * Toggles the bold font style.\n *\n * @param model <Transactions> that contains the cells.\n * @param cells Array of {@link Cells} to change the style for.\n * @param key Key of the style to be changed.\n * @param flag Integer for the bit to be changed.\n * @param value Optional boolean value for the flag.\n */\nexport const setCellStyleFlags = (model, cells, key, flag, value) => {\n    if (cells.length > 0) {\n        model.batchUpdate(() => {\n            for (let i = 0; i < cells.length; i += 1) {\n                const cell = cells[i];\n                if (cell) {\n                    const style = setStyleFlag(cell.getStyle(), key, flag, value);\n                    model.setStyle(cell, style);\n                }\n            }\n        });\n    }\n};\n/**\n * Sets or removes the given key from the specified style and returns the\n * new style. If value is null then the flag is toggled.\n *\n * @param style The style of the Cell.\n * @param key Key of the style to be changed.\n * @param flag Integer for the bit to be changed.\n * @param value Optional boolean value for the given flag.\n */\nexport const setStyleFlag = (style, key, flag, value) => {\n    const v = style[key];\n    if (v === undefined) {\n        style[key] = value === undefined ? flag : 0;\n    }\n    else {\n        if (value === undefined) {\n            style[key] = v ^ flag;\n        }\n        else if (value) {\n            style[key] = v | flag;\n        }\n        else {\n            style[key] = v & ~flag;\n        }\n    }\n    return style;\n};\n/**\n * Sets the opacity of the specified DOM node to the given value in %.\n *\n * @param node DOM node to set the opacity for.\n * @param value Opacity in %. Possible values are between 0 and 100.\n */\nexport const setOpacity = (node, value) => {\n    node.style.opacity = String(value / 100);\n};\n/**\n * @param value the value to check.\n * @param mask the binary mask to apply.\n * @returns `true` if the value matches the binary mask.\n * @private Subject to change prior being part of the public API.\n */\nexport const matchBinaryMask = (value, mask) => {\n    return (value & mask) === mask;\n};\n/**\n * Returns an {@link Rectangle} with the size (width and height in pixels) of\n * the given string. The string may contain HTML markup. Newlines should be\n * converted to <br> before calling this method. The caller is responsible\n * for sanitizing the HTML markup.\n *\n * Example:\n *\n * ```javascript\n * let label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n * let size = graph.getSizeForString(label);\n * ```\n *\n * @param text String whose size should be returned.\n * @param fontSize Integer that specifies the font size in pixels. Default is\n * {@link Constants#DEFAULT_FONTSIZE}.\n * @param fontFamily String that specifies the name of the font family. Default\n * is {@link Constants#DEFAULT_FONTFAMILY}.\n * @param textWidth Optional width for text wrapping.\n * @param fontStyle Optional font style.\n */\nexport const getSizeForString = (text, fontSize = DEFAULT_FONTSIZE, fontFamily = DEFAULT_FONTFAMILY, textWidth = null, fontStyle = null) => {\n    const div = document.createElement('div');\n    // Sets the font size and family\n    div.style.fontFamily = fontFamily;\n    div.style.fontSize = `${Math.round(fontSize)}px`;\n    div.style.lineHeight = `${Math.round(fontSize * LINE_HEIGHT)}px`;\n    // Sets the font style\n    if (fontStyle !== null) {\n        matchBinaryMask(fontStyle, FONT.BOLD) && (div.style.fontWeight = 'bold');\n        matchBinaryMask(fontStyle, FONT.ITALIC) && (div.style.fontWeight = 'italic');\n        const txtDecor = [];\n        matchBinaryMask(fontStyle, FONT.UNDERLINE) && txtDecor.push('underline');\n        matchBinaryMask(fontStyle, FONT.STRIKETHROUGH) && txtDecor.push('line-through');\n        txtDecor.length > 0 && (div.style.textDecoration = txtDecor.join(' '));\n    }\n    // Disables block layout and outside wrapping and hides the div\n    div.style.position = 'absolute';\n    div.style.visibility = 'hidden';\n    div.style.display = 'inline-block';\n    if (textWidth !== null) {\n        div.style.width = `${textWidth}px`;\n        div.style.whiteSpace = 'normal';\n    }\n    else {\n        div.style.whiteSpace = 'nowrap';\n    }\n    // Adds the text and inserts into DOM for updating of size\n    div.innerHTML = text;\n    document.body.appendChild(div);\n    // Gets the size and removes from DOM\n    const size = new Rectangle(0, 0, div.offsetWidth, div.offsetHeight);\n    document.body.removeChild(div);\n    return size;\n};\n/**\n * Sorts the given cells according to the order in the cell hierarchy.\n * Ascending is optional and defaults to true.\n */\nexport const sortCells = (cells, ascending = true) => {\n    const lookup = new Dictionary();\n    cells.sort((o1, o2) => {\n        let p1 = lookup.get(o1);\n        if (p1 == null) {\n            p1 = CellPath.create(o1).split(CellPath.PATH_SEPARATOR);\n            lookup.put(o1, p1);\n        }\n        let p2 = lookup.get(o2);\n        if (p2 == null) {\n            p2 = CellPath.create(o2).split(CellPath.PATH_SEPARATOR);\n            lookup.put(o2, p2);\n        }\n        const comp = CellPath.compare(p1, p2);\n        return comp == 0 ? 0 : comp > 0 == ascending ? 1 : -1;\n    });\n    return cells;\n};\n/**\n * Returns an {@link Point} that represents the horizontal and vertical alignment\n * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n * alignment. Default values for missing arguments is top, left.\n */\nexport const getAlignmentAsPoint = (align, valign) => {\n    let dx = -0.5;\n    let dy = -0.5;\n    // Horizontal alignment\n    if (align === ALIGN.LEFT) {\n        dx = 0;\n    }\n    else if (align === ALIGN.RIGHT) {\n        dx = -1;\n    }\n    // Vertical alignment\n    if (valign === ALIGN.TOP) {\n        dy = 0;\n    }\n    else if (valign === ALIGN.BOTTOM) {\n        dy = -1;\n    }\n    return new Point(dx, dy);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
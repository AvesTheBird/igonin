{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NODETYPE, NONE } from './Constants';\nimport { getTextContent } from './domUtils';\n/**\n * Strips all whitespaces from the beginning of the string. Without the\n * second parameter, this will trim these characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const ltrim = (str, chars = '\\\\s') => str != null ? str.replace(new RegExp(`^[${chars}]+`, 'g'), '') : null;\n/**\n * Strips all whitespaces from the end of the string. Without the second\n * parameter, this will trim these characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const rtrim = (str, chars = '\\\\s') => str != null ? str.replace(new RegExp(`[${chars}]+$`, 'g'), '') : null;\n/**\n * Strips all whitespaces from both end of the string.\n * Without the second parameter, Javascript function will trim these\n * characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const trim = (str, chars) => ltrim(rtrim(str, chars), chars);\n/**\n * Returns the name for the given function.\n *\n * @param f JavaScript object that represents a function.\n */\nexport const getFunctionName = f => {\n  let str = null;\n  if (f != null) {\n    if (f.name != null) {\n      str = f.name;\n    } else {\n      str = trim(f.toString());\n      if (str !== null && /^function\\s/.test(str)) {\n        str = ltrim(str.substring(9));\n        if (str !== null) {\n          const idx2 = str.indexOf('(');\n          if (idx2 > 0) {\n            str = str.substring(0, idx2);\n          }\n        }\n      }\n    }\n  }\n  return str;\n};\n/**\n * Replaces each trailing newline with the given pattern.\n */\nexport const replaceTrailingNewlines = (str, pattern) => {\n  // LATER: Check is this can be done with a regular expression\n  let postfix = '';\n  while (str.length > 0 && str.charAt(str.length - 1) == '\\n') {\n    str = str.substring(0, str.length - 1);\n    postfix += pattern;\n  }\n  return str + postfix;\n};\n/**\n * Removes the sibling text nodes for the given node that only consists\n * of tabs, newlines and spaces.\n *\n * @param node DOM node whose siblings should be removed.\n * @param before Optional boolean that specifies the direction of the traversal.\n */\nexport const removeWhitespace = (node, before) => {\n  let tmp = before ? node.previousSibling : node.nextSibling;\n  while (tmp != null && tmp.nodeType === NODETYPE.TEXT) {\n    const next = before ? tmp.previousSibling : tmp.nextSibling;\n    const text = getTextContent(tmp);\n    if (trim(text)?.length === 0) {\n      tmp.parentNode?.removeChild(tmp);\n    }\n    tmp = next;\n  }\n};\n/**\n * Replaces characters (less than, greater than, newlines and quotes) with\n * their HTML entities in the given string and returns the result.\n *\n * @param {string} s String that contains the characters to be converted.\n * @param {boolean} newline If newlines should be replaced. Default is true.\n */\nexport const htmlEntities = (s, newline = true) => {\n  s = String(s || '');\n  s = s.replace(/&/g, '&amp;'); // 38 26\n  s = s.replace(/\"/g, '&quot;'); // 34 22\n  s = s.replace(/'/g, '&#39;'); // 39 27\n  s = s.replace(/</g, '&lt;'); // 60 3C\n  s = s.replace(/>/g, '&gt;'); // 62 3E\n  if (newline) {\n    s = s.replace(/\\n/g, '&#xa;');\n  }\n  return s;\n};\nexport const getStringValue = (array, key, defaultValue) => {\n  let value = array != null ? array[key] : null;\n  if (value == null) {\n    value = defaultValue;\n  }\n  return value == null ? null : String(value);\n};\n/**\n * Returns the numeric value for the given key in the given associative\n * array or the given default value (or 0) if the value is null. The value\n * is converted to a numeric value using the Number function.\n *\n * @param array Associative array that contains the value for the key.\n * @param key Key whose value should be returned.\n * @param defaultValue Value to be returned if the value for the given\n * key is null. Default is 0.\n */\nexport const getNumber = (array, key, defaultValue) => {\n  let value = array != null ? array[key] : null;\n  if (value == null) {\n    value = defaultValue || 0;\n  }\n  return Number(value);\n};\n/**\n * Returns the color value for the given key in the given associative\n * array or the given default value if the value is null. If the value\n * is {@link Constants#NONE} then null is returned.\n *\n * @param array Associative array that contains the value for the key.\n * @param key Key whose value should be returned.\n * @param defaultValue Value to be returned if the value for the given\n * key is null. Default is null.\n */\nexport const getColor = (array, key, defaultValue) => {\n  let value = array != null ? array[key] : null;\n  if (value == null) {\n    value = defaultValue;\n  } else if (value === NONE) {\n    value = null;\n  }\n  return value;\n};\n/**\n * Returns a textual representation of the specified object.\n *\n * @param obj Object to return the string representation for.\n */\nexport const toString = obj => {\n  let output = '';\n  for (const i in obj) {\n    try {\n      if (obj[i] == null) {\n        output += `${i} = [null]\\n`;\n      } else if (typeof obj[i] === 'function') {\n        output += `${i} => [Function]\\n`;\n      } else if (typeof obj[i] === 'object') {\n        const ctor = getFunctionName(obj[i].constructor);\n        output += `${i} => [${ctor}]\\n`;\n      } else {\n        output += `${i} = ${obj[i]}\\n`;\n      }\n    } catch (e) {\n      output += `${i}=${e.message}`;\n    }\n  }\n  return output;\n};","map":{"version":3,"names":["NODETYPE","NONE","getTextContent","ltrim","str","chars","replace","RegExp","rtrim","trim","getFunctionName","f","name","toString","test","substring","idx2","indexOf","replaceTrailingNewlines","pattern","postfix","length","charAt","removeWhitespace","node","before","tmp","previousSibling","nextSibling","nodeType","TEXT","next","text","parentNode","removeChild","htmlEntities","s","newline","String","getStringValue","array","key","defaultValue","value","getNumber","Number","getColor","obj","output","i","ctor","constructor","e","message"],"sources":["D:/OSPanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/util/StringUtils.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NODETYPE, NONE } from './Constants';\nimport { getTextContent } from './domUtils';\n/**\n * Strips all whitespaces from the beginning of the string. Without the\n * second parameter, this will trim these characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const ltrim = (str, chars = '\\\\s') => str != null ? str.replace(new RegExp(`^[${chars}]+`, 'g'), '') : null;\n/**\n * Strips all whitespaces from the end of the string. Without the second\n * parameter, this will trim these characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const rtrim = (str, chars = '\\\\s') => str != null ? str.replace(new RegExp(`[${chars}]+$`, 'g'), '') : null;\n/**\n * Strips all whitespaces from both end of the string.\n * Without the second parameter, Javascript function will trim these\n * characters:\n *\n * - \" \" (ASCII 32 (0x20)), an ordinary space\n * - \"\\t\" (ASCII 9 (0x09)), a tab\n * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n */\nexport const trim = (str, chars) => ltrim(rtrim(str, chars), chars);\n/**\n * Returns the name for the given function.\n *\n * @param f JavaScript object that represents a function.\n */\nexport const getFunctionName = (f) => {\n    let str = null;\n    if (f != null) {\n        if (f.name != null) {\n            str = f.name;\n        }\n        else {\n            str = trim(f.toString());\n            if (str !== null && /^function\\s/.test(str)) {\n                str = ltrim(str.substring(9));\n                if (str !== null) {\n                    const idx2 = str.indexOf('(');\n                    if (idx2 > 0) {\n                        str = str.substring(0, idx2);\n                    }\n                }\n            }\n        }\n    }\n    return str;\n};\n/**\n * Replaces each trailing newline with the given pattern.\n */\nexport const replaceTrailingNewlines = (str, pattern) => {\n    // LATER: Check is this can be done with a regular expression\n    let postfix = '';\n    while (str.length > 0 && str.charAt(str.length - 1) == '\\n') {\n        str = str.substring(0, str.length - 1);\n        postfix += pattern;\n    }\n    return str + postfix;\n};\n/**\n * Removes the sibling text nodes for the given node that only consists\n * of tabs, newlines and spaces.\n *\n * @param node DOM node whose siblings should be removed.\n * @param before Optional boolean that specifies the direction of the traversal.\n */\nexport const removeWhitespace = (node, before) => {\n    let tmp = before ? node.previousSibling : node.nextSibling;\n    while (tmp != null && tmp.nodeType === NODETYPE.TEXT) {\n        const next = before ? tmp.previousSibling : tmp.nextSibling;\n        const text = getTextContent(tmp);\n        if (trim(text)?.length === 0) {\n            tmp.parentNode?.removeChild(tmp);\n        }\n        tmp = next;\n    }\n};\n/**\n * Replaces characters (less than, greater than, newlines and quotes) with\n * their HTML entities in the given string and returns the result.\n *\n * @param {string} s String that contains the characters to be converted.\n * @param {boolean} newline If newlines should be replaced. Default is true.\n */\nexport const htmlEntities = (s, newline = true) => {\n    s = String(s || '');\n    s = s.replace(/&/g, '&amp;'); // 38 26\n    s = s.replace(/\"/g, '&quot;'); // 34 22\n    s = s.replace(/'/g, '&#39;'); // 39 27\n    s = s.replace(/</g, '&lt;'); // 60 3C\n    s = s.replace(/>/g, '&gt;'); // 62 3E\n    if (newline) {\n        s = s.replace(/\\n/g, '&#xa;');\n    }\n    return s;\n};\nexport const getStringValue = (array, key, defaultValue) => {\n    let value = array != null ? array[key] : null;\n    if (value == null) {\n        value = defaultValue;\n    }\n    return value == null ? null : String(value);\n};\n/**\n * Returns the numeric value for the given key in the given associative\n * array or the given default value (or 0) if the value is null. The value\n * is converted to a numeric value using the Number function.\n *\n * @param array Associative array that contains the value for the key.\n * @param key Key whose value should be returned.\n * @param defaultValue Value to be returned if the value for the given\n * key is null. Default is 0.\n */\nexport const getNumber = (array, key, defaultValue) => {\n    let value = array != null ? array[key] : null;\n    if (value == null) {\n        value = defaultValue || 0;\n    }\n    return Number(value);\n};\n/**\n * Returns the color value for the given key in the given associative\n * array or the given default value if the value is null. If the value\n * is {@link Constants#NONE} then null is returned.\n *\n * @param array Associative array that contains the value for the key.\n * @param key Key whose value should be returned.\n * @param defaultValue Value to be returned if the value for the given\n * key is null. Default is null.\n */\nexport const getColor = (array, key, defaultValue) => {\n    let value = array != null ? array[key] : null;\n    if (value == null) {\n        value = defaultValue;\n    }\n    else if (value === NONE) {\n        value = null;\n    }\n    return value;\n};\n/**\n * Returns a textual representation of the specified object.\n *\n * @param obj Object to return the string representation for.\n */\nexport const toString = (obj) => {\n    let output = '';\n    for (const i in obj) {\n        try {\n            if (obj[i] == null) {\n                output += `${i} = [null]\\n`;\n            }\n            else if (typeof obj[i] === 'function') {\n                output += `${i} => [Function]\\n`;\n            }\n            else if (typeof obj[i] === 'object') {\n                const ctor = getFunctionName(obj[i].constructor);\n                output += `${i} => [${ctor}]\\n`;\n            }\n            else {\n                output += `${i} = ${obj[i]}\\n`;\n            }\n        }\n        catch (e) {\n            output += `${i}=${e.message}`;\n        }\n    }\n    return output;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
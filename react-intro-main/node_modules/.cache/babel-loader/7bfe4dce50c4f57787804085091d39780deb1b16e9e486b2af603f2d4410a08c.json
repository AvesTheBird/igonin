{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\old\\\\react\\\\react-intro-main\\\\src\\\\components\\\\file-uploader.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { popup, ModelXmlSerializer, domUtils, styleUtils, mathUtils, cloneUtils, eventUtils, Graph, InternalEvent, RubberBandHandler, ConnectionHandler, ConnectionConstraint, Point, CylinderShape, CellRenderer, DomHelpers, EdgeStyle, Rectangle, EdgeHandler, StyleRegistry, EdgeSegmentHandler, UndoManager, CellEditorHandler, ConstraintHandler, Guide, ImageBox, GraphView, SelectionHandler, PanningHandler, TooltipHandler, SelectionCellsHandler, PopupMenuHandler, xmlUtils, Codec } from '@maxgraph/core';\nimport { MyCustomGraph, MyCustomEdgeSegmentHandler, MyCustomGraphView, MyCustomConnectionHandler, MyCustomPanningHandler, MyCustomSelectionHandler, MyCustomEdgeHandler, MyCustomConstraintHandler } from './MyCustomGraph.jsx';\nimport { createGraphContainer } from './shared/configure.js';\nimport \"./file-uploader.css\";\n//import { YourComponent } from './GraphComponent'; // Исправлено на импорт по умолчанию\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUploader = ({\n  graph2,\n  newgraph\n}) => {\n  _s();\n  const [xmlContent, setXmlContent] = useState(null);\n  //console.log({graph2});\n\n  const handleOnChange = event => {\n    event.preventDefault();\n    if (event.target.files && event.target.files.length) {\n      const file = event.target.files[0];\n      if (file.name.endsWith('.xml')) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          const content = event.target.result;\n          setXmlContent(content);\n          // console.log(content);\n          // Switch for black background and bright styles\n          let invert = false;\n          let MyCustomCellEditorHandler;\n          if (invert) {\n            container.style.backgroundColor = 'black';\n\n            // White in-place editor text color\n            MyCustomCellEditorHandler = class extends CellEditorHandler {\n              startEditing(cell, trigger) {\n                super.startEditing.apply(this, arguments);\n                if (this.textarea != null) {\n                  this.textarea.style.color = '#FFFFFF';\n                }\n              }\n            };\n          } else {\n            MyCustomCellEditorHandler = CellEditorHandler;\n          }\n          const container = createGraphContainer({\n            imageUrl: 'images/grid.gif'\n          });\n          let graph = new MyCustomGraph(container, null, [MyCustomCellEditorHandler, TooltipHandler, SelectionCellsHandler, PopupMenuHandler, MyCustomConnectionHandler, MyCustomSelectionHandler, MyCustomPanningHandler]);\n          // graph2(content);\n          // console.log(\"Graph2\"+graph2);\n\n          // Используем переданный graph здесь\n          if (graph) {\n            let newGraph = new ModelXmlSerializer(graph.getDataModel()).import(content);\n            console.log(\"XML файл загружен и импортирован в модель данных графа.\");\n            console.log({\n              graph\n            });\n            graph2(graph);\n          } else {\n            console.error(\"ОШИБКА СТОП\");\n            console.log({\n              graph2\n            });\n          }\n        };\n        reader.readAsText(file);\n      } else {\n        console.log(\"Пожалуйста, выберите файл с расширением .xml\");\n      }\n    }\n    newgraph = newGraph;\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"file-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file-loader-button\",\n      className: \"file-uploader__custom-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"file-loader-button\",\n      type: \"file\",\n      accept: \".xml\",\n      className: \"file-uploader__upload-button\",\n      onChange: handleOnChange,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), xmlContent && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-uploader__xml-content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUploader, \"siRdDXlOmpULsO/ORFJyUVnsUCw=\");\n_c = FileUploader;\nexport default FileUploader;\nvar _c;\n$RefreshReg$(_c, \"FileUploader\");","map":{"version":3,"names":["React","useState","popup","ModelXmlSerializer","domUtils","styleUtils","mathUtils","cloneUtils","eventUtils","Graph","InternalEvent","RubberBandHandler","ConnectionHandler","ConnectionConstraint","Point","CylinderShape","CellRenderer","DomHelpers","EdgeStyle","Rectangle","EdgeHandler","StyleRegistry","EdgeSegmentHandler","UndoManager","CellEditorHandler","ConstraintHandler","Guide","ImageBox","GraphView","SelectionHandler","PanningHandler","TooltipHandler","SelectionCellsHandler","PopupMenuHandler","xmlUtils","Codec","MyCustomGraph","MyCustomEdgeSegmentHandler","MyCustomGraphView","MyCustomConnectionHandler","MyCustomPanningHandler","MyCustomSelectionHandler","MyCustomEdgeHandler","MyCustomConstraintHandler","createGraphContainer","jsxDEV","_jsxDEV","FileUploader","graph2","newgraph","_s","xmlContent","setXmlContent","handleOnChange","event","preventDefault","target","files","length","file","name","endsWith","reader","FileReader","onload","content","result","invert","MyCustomCellEditorHandler","container","style","backgroundColor","startEditing","cell","trigger","apply","arguments","textarea","color","imageUrl","graph","newGraph","getDataModel","import","console","log","error","readAsText","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","accept","onChange","display","_c","$RefreshReg$"],"sources":["D:/ospanel/domains/old/react/react-intro-main/src/components/file-uploader.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  popup,\n  ModelXmlSerializer,\n  domUtils,\n  styleUtils,\n  mathUtils,\n  cloneUtils,\n  eventUtils,\n  Graph,\n  InternalEvent,\n  RubberBandHandler,\n  ConnectionHandler,\n  ConnectionConstraint,\n  Point,\n  CylinderShape,\n  CellRenderer,\n  DomHelpers,\n  EdgeStyle,\n  Rectangle,\n  EdgeHandler,\n  StyleRegistry,\n  EdgeSegmentHandler,\n  UndoManager,\n  CellEditorHandler,\n  ConstraintHandler,\n  Guide,\n  ImageBox,\n  GraphView,\n  SelectionHandler,\n  PanningHandler,\n  TooltipHandler,\n  SelectionCellsHandler,\n  PopupMenuHandler,\n  xmlUtils,\n  Codec,\n} from '@maxgraph/core';\n\nimport {\n  MyCustomGraph, \n  MyCustomEdgeSegmentHandler, \n  MyCustomGraphView, \n  MyCustomConnectionHandler,  \n  MyCustomPanningHandler, \n  MyCustomSelectionHandler,\n  MyCustomEdgeHandler,\n  MyCustomConstraintHandler\n} from './MyCustomGraph.jsx';\n\nimport { createGraphContainer } from './shared/configure.js';\n\nimport \"./file-uploader.css\";\n//import { YourComponent } from './GraphComponent'; // Исправлено на импорт по умолчанию\n\nconst FileUploader = ({ graph2, newgraph }) => {\n\n  const [xmlContent, setXmlContent] = useState(null);\n  //console.log({graph2});\n\n  const handleOnChange = (event) => {\n    event.preventDefault();\n    if (event.target.files && event.target.files.length) {\n      const file = event.target.files[0];\n      if (file.name.endsWith('.xml')) {\n          const reader = new FileReader();\n          reader.onload = (event) => {\n            const content = event.target.result;\n            setXmlContent(content);\n            // console.log(content);\n            // Switch for black background and bright styles\n            let invert = false;\n            let MyCustomCellEditorHandler;\n\n            if (invert) {\n              container.style.backgroundColor = 'black';\n\n              // White in-place editor text color\n              MyCustomCellEditorHandler = class extends CellEditorHandler {\n                startEditing(cell, trigger) {\n                  super.startEditing.apply(this, arguments);\n\n                  if (this.textarea != null) {\n                    this.textarea.style.color = '#FFFFFF';\n                  }\n                }\n              };\n            } else {\n              MyCustomCellEditorHandler = CellEditorHandler;\n            }\n            const container = createGraphContainer({\n              imageUrl: 'images/grid.gif'\n            });\n            let graph = new MyCustomGraph(container, null, [\n              MyCustomCellEditorHandler,\n              TooltipHandler,\n              SelectionCellsHandler,\n              PopupMenuHandler,\n              MyCustomConnectionHandler,\n              MyCustomSelectionHandler,\n              MyCustomPanningHandler,\n            ]);\n            // graph2(content);\n            // console.log(\"Graph2\"+graph2);\n            \n            // Используем переданный graph здесь\n            if (graph) {\n              let newGraph = new ModelXmlSerializer(graph.getDataModel()).import(content);\n              console.log(\"XML файл загружен и импортирован в модель данных графа.\");\n              console.log({graph});\n              graph2(graph);\n            } else {\n              console.error(\"ОШИБКА СТОП\");\n              console.log({graph2});\n            }\n          };\n        reader.readAsText(file);\n      } else {\n        console.log(\"Пожалуйста, выберите файл с расширением .xml\");\n      }\n    }\n    newgraph = newGraph;\n\n  };\n\n  return (\n    <form className=\"file-uploader\">\n      <label htmlFor=\"file-loader-button\" className=\"file-uploader__custom-button\">\n        {/* Ваш код для кастомной кнопки */}\n      </label>\n      <input\n        id=\"file-loader-button\"\n        type=\"file\"\n        accept=\".xml\"\n        className=\"file-uploader__upload-button\"\n        onChange={handleOnChange}\n        style={{ display: 'none' }}\n      />\n      {xmlContent && (\n        <div className=\"file-uploader__xml-content\">\n          {/* Ваш код для отображения содержимого XML */}\n        </div>\n      )}\n    </form>\n  );\n};\nexport default FileUploader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
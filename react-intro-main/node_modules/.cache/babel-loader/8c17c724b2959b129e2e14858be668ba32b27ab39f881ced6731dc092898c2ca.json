{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * @class WeightedCellSorter\n *\n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n */\nclass WeightedCellSorter {\n  constructor(cell) {\n    let weightedValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    /**\n     * The weighted value of the cell stored.\n     */\n    this.weightedValue = 0;\n    /**\n     * Whether or not to flip equal weight values.\n     */\n    this.nudge = false;\n    /**\n     * Whether or not this cell has been visited in the current assignment.\n     */\n    this.visited = false;\n    /**\n     * The index this cell is in the model rank.\n     */\n    this.rankIndex = null;\n    this.cell = cell;\n    this.weightedValue = weightedValue;\n  }\n  /**\n   * Compares two WeightedCellSorters.\n   */\n  static compare(a, b) {\n    if (a != null && b != null) {\n      if (b.weightedValue > a.weightedValue) {\n        return -1;\n      }\n      if (b.weightedValue < a.weightedValue) {\n        return 1;\n      }\n      if (b.nudge) {\n        return -1;\n      }\n      return 1;\n    }\n    return 0;\n  }\n}\nexport default WeightedCellSorter;","map":{"version":3,"names":["WeightedCellSorter","constructor","cell","weightedValue","arguments","length","undefined","nudge","visited","rankIndex","compare","a","b"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/view/layout/util/WeightedCellSorter.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * @class WeightedCellSorter\n *\n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n */\nclass WeightedCellSorter {\n    constructor(cell, weightedValue = 0) {\n        /**\n         * The weighted value of the cell stored.\n         */\n        this.weightedValue = 0;\n        /**\n         * Whether or not to flip equal weight values.\n         */\n        this.nudge = false;\n        /**\n         * Whether or not this cell has been visited in the current assignment.\n         */\n        this.visited = false;\n        /**\n         * The index this cell is in the model rank.\n         */\n        this.rankIndex = null;\n        this.cell = cell;\n        this.weightedValue = weightedValue;\n    }\n    /**\n     * Compares two WeightedCellSorters.\n     */\n    static compare(a, b) {\n        if (a != null && b != null) {\n            if (b.weightedValue > a.weightedValue) {\n                return -1;\n            }\n            if (b.weightedValue < a.weightedValue) {\n                return 1;\n            }\n            if (b.nudge) {\n                return -1;\n            }\n            return 1;\n        }\n        return 0;\n    }\n}\nexport default WeightedCellSorter;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,kBAAkB,CAAC;EACrBC,WAAWA,CAACC,IAAI,EAAqB;IAAA,IAAnBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAC/B;AACR;AACA;IACQ,IAAI,CAACD,aAAa,GAAG,CAAC;IACtB;AACR;AACA;IACQ,IAAI,CAACI,KAAK,GAAG,KAAK;IAClB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB;AACR;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACP,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,aAAa,GAAGA,aAAa;EACtC;EACA;AACJ;AACA;EACI,OAAOO,OAAOA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACjB,IAAID,CAAC,IAAI,IAAI,IAAIC,CAAC,IAAI,IAAI,EAAE;MACxB,IAAIA,CAAC,CAACT,aAAa,GAAGQ,CAAC,CAACR,aAAa,EAAE;QACnC,OAAO,CAAC,CAAC;MACb;MACA,IAAIS,CAAC,CAACT,aAAa,GAAGQ,CAAC,CAACR,aAAa,EAAE;QACnC,OAAO,CAAC;MACZ;MACA,IAAIS,CAAC,CAACL,KAAK,EAAE;QACT,OAAO,CAAC,CAAC;MACb;MACA,OAAO,CAAC;IACZ;IACA,OAAO,CAAC;EACZ;AACJ;AACA,eAAeP,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
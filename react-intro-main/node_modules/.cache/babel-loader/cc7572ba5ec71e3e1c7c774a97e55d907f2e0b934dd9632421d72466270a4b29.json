{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { mixInto } from '../../util/Utils';\nimport { Graph } from '../Graph';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst SnapMixin = {\n  // TODO: Document me!\n  snapTolerance: 0,\n  getSnapTolerance() {\n    return this.snapTolerance;\n  },\n  /**\n   * Specifies the grid size.\n   * @default 10\n   */\n  gridSize: 10,\n  /**\n   * Specifies if the grid is enabled. This is used in {@link snap}.\n   * @default true\n   */\n  gridEnabled: true,\n  /*****************************************************************************\n   * Group: Graph display\n   *****************************************************************************/\n  /**\n   * Snaps the given numeric value to the grid if {@link gridEnabled} is true.\n   *\n   * @param value Numeric value to be snapped to the grid.\n   */\n  snap(value) {\n    if (this.gridEnabled) {\n      value = Math.round(value / this.gridSize) * this.gridSize;\n    }\n    return value;\n  },\n  /**\n   * Snaps the given delta with the given scaled bounds.\n   */\n  snapDelta(delta, bounds, ignoreGrid = false, ignoreHorizontal = false, ignoreVertical = false) {\n    const t = this.getView().translate;\n    const s = this.getView().scale;\n    if (!ignoreGrid && this.gridEnabled) {\n      const tol = this.gridSize * s * 0.5;\n      if (!ignoreHorizontal) {\n        const tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n        if (Math.abs(delta.x - tx) < tol) {\n          delta.x = 0;\n        } else {\n          delta.x = this.snap(delta.x / s) * s - tx;\n        }\n      }\n      if (!ignoreVertical) {\n        const ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n        if (Math.abs(delta.y - ty) < tol) {\n          delta.y = 0;\n        } else {\n          delta.y = this.snap(delta.y / s) * s - ty;\n        }\n      }\n    } else {\n      const tol = 0.5 * s;\n      if (!ignoreHorizontal) {\n        const tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n        if (Math.abs(delta.x - tx) < tol) {\n          delta.x = 0;\n        } else {\n          delta.x = Math.round(delta.x / s) * s - tx;\n        }\n      }\n      if (!ignoreVertical) {\n        const ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n        if (Math.abs(delta.y - ty) < tol) {\n          delta.y = 0;\n        } else {\n          delta.y = Math.round(delta.y / s) * s - ty;\n        }\n      }\n    }\n    return delta;\n  },\n  /*****************************************************************************\n   * Group: Graph behaviour\n   *****************************************************************************/\n  /**\n   * Returns {@link gridEnabled} as a boolean.\n   */\n  isGridEnabled() {\n    return this.gridEnabled;\n  },\n  /**\n   * Specifies if the grid should be enabled.\n   *\n   * @param value Boolean indicating if the grid should be enabled.\n   */\n  setGridEnabled(value) {\n    this.gridEnabled = value;\n  },\n  /**\n   * Returns {@link gridSize}.\n   */\n  getGridSize() {\n    return this.gridSize;\n  },\n  /**\n   * Sets {@link gridSize}.\n   */\n  setGridSize(value) {\n    this.gridSize = value;\n  }\n};\nmixInto(Graph)(SnapMixin);","map":{"version":3,"names":["mixInto","Graph","SnapMixin","snapTolerance","getSnapTolerance","gridSize","gridEnabled","snap","value","Math","round","snapDelta","delta","bounds","ignoreGrid","ignoreHorizontal","ignoreVertical","t","getView","translate","s","scale","tol","tx","x","abs","ty","y","isGridEnabled","setGridEnabled","getGridSize","setGridSize"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/view/mixins/SnapMixin.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { mixInto } from '../../util/Utils';\nimport { Graph } from '../Graph';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst SnapMixin = {\n    // TODO: Document me!\n    snapTolerance: 0,\n    getSnapTolerance() {\n        return this.snapTolerance;\n    },\n    /**\n     * Specifies the grid size.\n     * @default 10\n     */\n    gridSize: 10,\n    /**\n     * Specifies if the grid is enabled. This is used in {@link snap}.\n     * @default true\n     */\n    gridEnabled: true,\n    /*****************************************************************************\n     * Group: Graph display\n     *****************************************************************************/\n    /**\n     * Snaps the given numeric value to the grid if {@link gridEnabled} is true.\n     *\n     * @param value Numeric value to be snapped to the grid.\n     */\n    snap(value) {\n        if (this.gridEnabled) {\n            value = Math.round(value / this.gridSize) * this.gridSize;\n        }\n        return value;\n    },\n    /**\n     * Snaps the given delta with the given scaled bounds.\n     */\n    snapDelta(delta, bounds, ignoreGrid = false, ignoreHorizontal = false, ignoreVertical = false) {\n        const t = this.getView().translate;\n        const s = this.getView().scale;\n        if (!ignoreGrid && this.gridEnabled) {\n            const tol = this.gridSize * s * 0.5;\n            if (!ignoreHorizontal) {\n                const tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n                if (Math.abs(delta.x - tx) < tol) {\n                    delta.x = 0;\n                }\n                else {\n                    delta.x = this.snap(delta.x / s) * s - tx;\n                }\n            }\n            if (!ignoreVertical) {\n                const ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n                if (Math.abs(delta.y - ty) < tol) {\n                    delta.y = 0;\n                }\n                else {\n                    delta.y = this.snap(delta.y / s) * s - ty;\n                }\n            }\n        }\n        else {\n            const tol = 0.5 * s;\n            if (!ignoreHorizontal) {\n                const tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n                if (Math.abs(delta.x - tx) < tol) {\n                    delta.x = 0;\n                }\n                else {\n                    delta.x = Math.round(delta.x / s) * s - tx;\n                }\n            }\n            if (!ignoreVertical) {\n                const ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n                if (Math.abs(delta.y - ty) < tol) {\n                    delta.y = 0;\n                }\n                else {\n                    delta.y = Math.round(delta.y / s) * s - ty;\n                }\n            }\n        }\n        return delta;\n    },\n    /*****************************************************************************\n     * Group: Graph behaviour\n     *****************************************************************************/\n    /**\n     * Returns {@link gridEnabled} as a boolean.\n     */\n    isGridEnabled() {\n        return this.gridEnabled;\n    },\n    /**\n     * Specifies if the grid should be enabled.\n     *\n     * @param value Boolean indicating if the grid should be enabled.\n     */\n    setGridEnabled(value) {\n        this.gridEnabled = value;\n    },\n    /**\n     * Returns {@link gridSize}.\n     */\n    getGridSize() {\n        return this.gridSize;\n    },\n    /**\n     * Sets {@link gridSize}.\n     */\n    setGridSize(value) {\n        this.gridSize = value;\n    },\n};\nmixInto(Graph)(SnapMixin);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
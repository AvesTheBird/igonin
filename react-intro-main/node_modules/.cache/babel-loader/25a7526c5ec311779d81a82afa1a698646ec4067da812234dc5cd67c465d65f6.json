{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B open server\\\\old\\\\react\\\\react-intro-main\\\\src\\\\components\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { popup, ModelXmlSerializer, domUtils, styleUtils, mathUtils, cloneUtils, eventUtils, Graph, InternalEvent, RubberBandHandler, ConnectionHandler, ConnectionConstraint, Point, CylinderShape, CellRenderer, DomHelpers, EdgeStyle, Rectangle, EdgeHandler, StyleRegistry, EdgeSegmentHandler, UndoManager, CellEditorHandler, ConstraintHandler, Guide, ImageBox, GraphView, SelectionHandler, PanningHandler, TooltipHandler, SelectionCellsHandler, PopupMenuHandler, xmlUtils, Codec } from '@maxgraph/core';\nimport { contextMenuTypes, contextMenuValues, globalTypes, globalValues, rubberBandTypes, rubberBandValues } from './shared/args.js';\nimport { createGraphContainer } from './shared/configure.js';\n\n// style required by RubberBand\nimport '@maxgraph/core/css/common.css';\nimport { render } from 'react-dom';\nimport { MyCustomGraph, MyCustomEdgeSegmentHandler, MyCustomGraphView, MyCustomConnectionHandler, MyCustomPanningHandler, MyCustomSelectionHandler, MyCustomEdgeHandler, MyCustomConstraintHandler } from './MyCustomGraph.jsx';\n\n// Добавим функцию для чтения файла\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction readXMLFile(file, callback) {\n  const reader = new FileReader();\n  reader.onload = function (event) {\n    const xmlContent = event.target.result;\n    callback(xmlContent);\n  };\n  reader.readAsText(file);\n}\nfunction parseAndLoadXML(xmlContent, graph) {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xmlContent, \"text/xml\");\n\n  // Используем модель данных графа, если она поддерживается\n  const codec = new Codec();\n  const node = xmlDoc.documentElement;\n\n  // Проверяем, что у графа есть метод getDataModel или другой метод для получения модели\n  if (typeof graph.getDataModel === 'function') {\n    codec.decode(node, graph.getDataModel());\n  } else if (typeof graph.getModel === 'function') {\n    codec.decode(node, graph.getModel());\n  } else {\n    console.error(\"Не удалось найти подходящий метод для работы с моделью графа.\");\n  }\n}\nexport const YourComponent = () => {\n  _s();\n  const importFileInputRef = useRef(null);\n  const graphContainerRef = useRef(null);\n  const [graph, setGraph] = useState(null);\n  useEffect(() => {\n    if (graphContainerRef.current) {\n      // Инициализация графа\n      const newGraph = new MyCustomGraph(graphContainerRef.current);\n      setGraph(newGraph); // Сохраняем граф в состояние\n    }\n    const importButton = document.getElementById(\"import\");\n    importButton.onclick = () => {\n      const fileInput = importFileInputRef.current;\n      if (fileInput) {\n        fileInput.click(); // Открываем диалог выбора файла\n\n        // Добавляем обработку файла при выборе\n        fileInput.onchange = event => {\n          const file = event.target.files[0];\n          if (file && graph) {\n            readXMLFile(file, xmlContent => {\n              const cells = graph.getChildVertices(graph.getDefaultParent());\n              graph.removeCells(cells, true); // Очищаем граф\n              parseAndLoadXML(xmlContent, graph); // Загружаем схему\n            });\n          }\n        };\n      }\n    };\n\n    ////\n    const parentContainer = document.createElement('div');\n    const container = createGraphContainer({\n      imageUrl: 'images/grid.gif'\n    });\n    parentContainer.appendChild(container);\n    //console.log({graph})\n    // Changes some default colors\n    // TODO Find a way of modifying globally or setting locally! See https://github.com/maxGraph/maxGraph/issues/192\n    //constants.SHADOWCOLOR = '#C0C0C0';\n\n    let joinNodeSize = 7;\n    let strokeWidth = 2;\n\n    // Switch for black background and bright styles\n    let invert = false;\n    let MyCustomCellEditorHandler;\n    if (!graphInstance) {\n      const newGraph = new MyCustomGraph(graphContainer, null, []);\n      setGraphInstance(newGraph);\n    }\n    if (invert) {\n      container.style.backgroundColor = 'black';\n\n      // White in-place editor text color\n      MyCustomCellEditorHandler = class extends CellEditorHandler {\n        startEditing(cell, trigger) {\n          super.startEditing.apply(this, arguments);\n          if (this.textarea != null) {\n            this.textarea.style.color = '#FFFFFF';\n          }\n        }\n      };\n    } else {\n      MyCustomCellEditorHandler = CellEditorHandler;\n    }\n\n    // Imlements a custom resistor shape. Direction currently ignored here.\n\n    class ResistorShape extends CylinderShape {\n      constructor() {\n        // TODO: The original didn't seem to call the super\n        super(null, null, null, null);\n      }\n      redrawPath(path, x, y, w, h, isForeground) {\n        let dx = w / 16;\n        if (isForeground) {\n          path.moveTo(0, h / 2);\n          path.lineTo(2 * dx, h / 2);\n          path.lineTo(3 * dx, 0);\n          path.lineTo(5 * dx, h);\n          path.lineTo(7 * dx, 0);\n          path.lineTo(9 * dx, h);\n          path.lineTo(11 * dx, 0);\n          path.lineTo(13 * dx, h);\n          path.lineTo(14 * dx, h / 2);\n          path.lineTo(16 * dx, h / 2);\n          path.end();\n        }\n      }\n    }\n    CellRenderer.registerShape('resistor', ResistorShape);\n\n    // Imlements a custom resistor shape. Direction currently ignored here.\n\n    EdgeStyle.WireConnector = function (state, source, target, hints, result) {\n      // Creates array of all way- and terminalpoints\n      let pts = state.absolutePoints;\n      let horizontal = true;\n      let hint = null;\n\n      // Gets the initial connection from the source terminal or edge\n      if (source != null && source.cell.isEdge()) {\n        horizontal = state.style.sourceConstraint == 'horizontal';\n      } else if (source != null) {\n        horizontal = source.style.portConstraint != 'vertical';\n\n        // Checks the direction of the shape and rotates\n        let direction = source.style.direction;\n        if (direction == 'north' || direction == 'south') {\n          horizontal = !horizontal;\n        }\n      }\n\n      // Adds the first point\n      // TODO: Should move along connected segment\n      let pt = pts[0];\n      if (pt == null && source != null) {\n        pt = new Point(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n      } else if (pt != null) {\n        pt = pt.clone();\n      }\n      let first = pt;\n\n      // Adds the waypoints\n      if (hints != null && hints.length > 0) {\n        // FIXME: First segment not movable\n        /*hint = state.view.transformControlPoint(state, hints[0]);\n        MaxLog.show();\n        MaxLog.debug(hints.length,'hints0.y='+hint.y, pt.y)\n         if (horizontal && Math.floor(hint.y) != Math.floor(pt.y))\n        {\n          MaxLog.show();\n          MaxLog.debug('add waypoint');\n           pt = new Point(pt.x, hint.y);\n          result.push(pt);\n          pt = pt.clone();\n          //horizontal = !horizontal;\n        }*/\n\n        for (let i = 0; i < hints.length; i++) {\n          horizontal = !horizontal;\n          hint = state.view.transformControlPoint(state, hints[i]);\n          if (horizontal) {\n            if (pt.y !== hint.y) {\n              pt.y = hint.y;\n              result.push(pt.clone());\n            }\n          } else if (pt.x !== hint.x) {\n            pt.x = hint.x;\n            result.push(pt.clone());\n          }\n        }\n      } else {\n        hint = pt;\n      }\n\n      // Adds the last point\n      pt = pts[pts.length - 1];\n\n      // TODO: Should move along connected segment\n      if (pt == null && target != null) {\n        pt = new Point(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n      }\n      if (horizontal) {\n        if (pt.y !== hint.y && first.x !== pt.x) {\n          result.push(new Point(pt.x, hint.y));\n        }\n      } else if (pt.x !== hint.x && first.y !== pt.y) {\n        result.push(new Point(hint.x, pt.y));\n      }\n    };\n    StyleRegistry.putValue('wireEdgeStyle', EdgeStyle.WireConnector);\n    let graph = new MyCustomGraph(container, null, [MyCustomCellEditorHandler, TooltipHandler, SelectionCellsHandler, PopupMenuHandler, MyCustomConnectionHandler, MyCustomSelectionHandler, MyCustomPanningHandler]);\n    setVariableFromEffect(graph);\n    let labelBackground = invert ? '#000000' : '#FFFFFF';\n    let fontColor = invert ? '#FFFFFF' : '#000000';\n    let strokeColor = invert ? '#C0C0C0' : '#000000';\n    let fillColor = invert ? 'none' : '#FFFFFF';\n    graph.view.scale = 1;\n    graph.setPanning(true);\n    graph.setConnectable(true);\n    graph.setConnectableEdges(true);\n    graph.setDisconnectOnMove(false);\n    graph.foldingEnabled = false;\n\n    //Maximum size\n    graph.maximumGraphBounds = new Rectangle(0, 0, 1000, 1000);\n    graph.border = 50;\n    graph.spacingLeft = 30;\n\n    // Enables return key to stop editing (use shift-enter for newlines)\n    graph.setEnterStopsCellEditing(true);\n\n    // Adds rubberband selection\n    new RubberBandHandler(graph);\n\n    // Adds a special tooltip for edges\n    graph.setTooltips(true);\n    let style = graph.getStylesheet().getDefaultEdgeStyle();\n    delete style.endArrow;\n    style.strokeColor = strokeColor;\n    style.labelBackgroundColor = labelBackground;\n    style.edgeStyle = 'wireEdgeStyle';\n    style.fontColor = fontColor;\n    style.fontSize = '9';\n    style.movable = '0';\n    style.strokeWidth = strokeWidth;\n    //style.rounded = '1';\n\n    // Sets join node size\n    style.startSize = joinNodeSize;\n    style.endSize = joinNodeSize;\n    style = graph.getStylesheet().getDefaultVertexStyle();\n    style.gradientDirection = 'south';\n    //style.gradientColor = '#909090';\n    style.strokeColor = strokeColor;\n    //style.fillColor = '#e0e0e0';\n    style.fillColor = 'none';\n    style.fontColor = fontColor;\n    style.fontStyle = '1';\n    style.fontSize = '12';\n    style.resizable = '0';\n    style.rounded = '1';\n    style.strokeWidth = strokeWidth;\n\n    // инородное дерьмо\n\n    const btn1 = document.getElementById('btn1');\n    const btn2 = document.getElementById('btn2');\n    const btn3 = document.getElementById('btn3');\n    const btn4 = document.getElementById('btn4');\n    const btn5 = document.getElementById('btn5');\n    const update = event => {\n      var parent = graph.getDefaultParent();\n      var doc = xmlUtils.createXmlDocument();\n      graph.batchUpdate(() => {\n        const targetId = event.target.id;\n        if (targetId === 'btn3') {\n          var v1 = graph.insertVertex(parent, null, '', 80, 40, 40, 80, 'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n          v1.setConnectable(false);\n          var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor,\n            strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = 'Y';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(5, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '○', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 30,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(49, 34);\n          v1.insert(v16);\n        } else if (targetId === 'btn1') {\n          var v1 = graph.insertVertex(parent, null, '', 180, 40, 40, 80, 'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n          v1.setConnectable(false);\n          var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = 'Y';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(0, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '&', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 20,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(28.5, 37);\n          v1.insert(v16);\n        } else if (targetId === 'btn2') {\n          var v1 = graph.insertVertex(parent, null, '', 250, 40, 40, 80, 'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n          v1.setConnectable(false);\n          var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = 'Y';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(0, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '|', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 20,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(24, 37);\n          v1.insert(v16);\n        } else if (targetId === 'btn5') {\n          var v1 = graph.insertVertex(parent, null, '', 180, 140, 40, 80, 'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n          v1.setConnectable(false);\n          var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = 'Y';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(0, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '==', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 15,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(30, 38);\n          v1.insert(v16);\n        } else if (targetId === 'btn4') {\n          var v1 = graph.insertVertex(parent, null, '', 80, 140, 40, 80, 'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n          v1.setConnectable(false);\n          var v11 = graph.insertVertex(v1, null, '', 0, 0, 14, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = '';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(0, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '○', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 25,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(8, 15);\n          v1.insert(v16);\n          var v17 = graph.insertVertex(v1, null, 'X', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v17.geometry.x = 1;\n          v17.geometry.offset = new Point(14, 20);\n          v1.insert(v17);\n          var v18 = graph.insertVertex(v1, null, 'Y', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v18.geometry.x = 1;\n          v18.geometry.offset = new Point(14, 59);\n          v1.insert(v18);\n        }\n      });\n    };\n    btn1.addEventListener('click', update);\n    btn2.addEventListener('click', update);\n    btn3.addEventListener('click', update);\n    btn4.addEventListener('click', update);\n    btn5.addEventListener('click', update);\n\n    ////////////////////////////////////////////////////////\n    // XML \n\n    document.getElementById(\"xml\").onclick = () => {\n      // Получаем XML данные\n      const xml = new ModelXmlSerializer(graph.getDataModel()).export();\n\n      // Создаем новый Blob объект с XML данными\n      const blob = new Blob([xml], {\n        type: 'text/xml'\n      });\n\n      // Создаем ссылку на Blob объект\n      const url = window.URL.createObjectURL(blob);\n\n      // Создаем ссылку для скачивания\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'data.xml'; // Имя файла для скачивания\n      document.body.appendChild(a);\n\n      // Инициируем скачивание файла\n      a.click();\n\n      // Освобождаем ресурсы\n      window.URL.revokeObjectURL(url);\n    };\n\n    ///////////////////////////////////////////////////////////\n\n    document.getElementById(\"zoom\").onclick = () => graph.zoomIn();\n    document.getElementById(\"zoomout\").onclick = () => graph.zoomOut();\n\n    // Undo/redo\n    let undoManager = new UndoManager();\n    let listener = function (sender, evt) {\n      undoManager.undoableEditHappened(evt.getProperty('edit'));\n    };\n    graph.getDataModel().addListener(InternalEvent.UNDO, listener);\n    graph.getView().addListener(InternalEvent.UNDO, listener);\n    document.getElementById(\"undo\").onclick = () => undoManager.undo();\n    document.getElementById(\"redo\").onclick = () => undoManager.redo();\n    document.getElementById(\"delete\").onclick = () => graph.removeCells();\n\n    // Wire-mode\n    let checkbox = document.getElementById(\"wire\");\n\n    // Grid\n    let checkbox2 = document.getElementById(\"grid\");\n    checkbox2.setAttribute('checked', 'true');\n    InternalEvent.addListener(checkbox2, 'click', function (evt) {\n      if (checkbox2.checked) {\n        container.style.background = 'url(./images/grid.gif)';\n      } else {\n        container.style.background = '';\n      }\n      container.style.backgroundColor = invert ? 'black' : 'white';\n    });\n    InternalEvent.disableContextMenu(container);\n    graphContainer.appendChild(parentContainer);\n    return () => {\n      // Clean up if needed\n    };\n  }, [graph]);\n  const handleFileImport = event => {\n    const file = event.target.files[0];\n    if (file && graph) {\n      readXMLFile(file, xmlContent => {\n        graph.removeCells(); // Очищаем граф перед загрузкой новой схемы\n        parseAndLoadXML(xmlContent, graph); // Загружаем новую схему\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xml\",\n      ref: importFileInputRef,\n      style: {\n        display: 'none'\n      },\n      onChange: handleFileImport\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"import\",\n      children: \"\\u0418\\u043C\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0441\\u0445\\u0435\\u043C\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: graphContainerRef,\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 750,\n    columnNumber: 5\n  }, this);\n};\n// Функция для чтения XML файла\n_s(YourComponent, \"pt1e4qlJzYSDhfzmynM4VersLQ4=\");\n_c = YourComponent;\nvar _c;\n$RefreshReg$(_c, \"YourComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","axios","popup","ModelXmlSerializer","domUtils","styleUtils","mathUtils","cloneUtils","eventUtils","Graph","InternalEvent","RubberBandHandler","ConnectionHandler","ConnectionConstraint","Point","CylinderShape","CellRenderer","DomHelpers","EdgeStyle","Rectangle","EdgeHandler","StyleRegistry","EdgeSegmentHandler","UndoManager","CellEditorHandler","ConstraintHandler","Guide","ImageBox","GraphView","SelectionHandler","PanningHandler","TooltipHandler","SelectionCellsHandler","PopupMenuHandler","xmlUtils","Codec","contextMenuTypes","contextMenuValues","globalTypes","globalValues","rubberBandTypes","rubberBandValues","createGraphContainer","render","MyCustomGraph","MyCustomEdgeSegmentHandler","MyCustomGraphView","MyCustomConnectionHandler","MyCustomPanningHandler","MyCustomSelectionHandler","MyCustomEdgeHandler","MyCustomConstraintHandler","jsxDEV","_jsxDEV","readXMLFile","file","callback","reader","FileReader","onload","event","xmlContent","target","result","readAsText","parseAndLoadXML","graph","parser","DOMParser","xmlDoc","parseFromString","codec","node","documentElement","getDataModel","decode","getModel","console","error","YourComponent","_s","importFileInputRef","graphContainerRef","setGraph","current","newGraph","importButton","document","getElementById","onclick","fileInput","click","onchange","files","cells","getChildVertices","getDefaultParent","removeCells","parentContainer","createElement","container","imageUrl","appendChild","joinNodeSize","strokeWidth","invert","MyCustomCellEditorHandler","graphInstance","graphContainer","setGraphInstance","style","backgroundColor","startEditing","cell","trigger","apply","arguments","textarea","color","ResistorShape","constructor","redrawPath","path","x","y","w","h","isForeground","dx","moveTo","lineTo","end","registerShape","WireConnector","state","source","hints","pts","absolutePoints","horizontal","hint","isEdge","sourceConstraint","portConstraint","direction","pt","view","getRoutingCenterX","getRoutingCenterY","clone","first","length","i","transformControlPoint","push","putValue","setVariableFromEffect","labelBackground","fontColor","strokeColor","fillColor","scale","setPanning","setConnectable","setConnectableEdges","setDisconnectOnMove","foldingEnabled","maximumGraphBounds","border","spacingLeft","setEnterStopsCellEditing","setTooltips","getStylesheet","getDefaultEdgeStyle","endArrow","labelBackgroundColor","edgeStyle","fontSize","movable","startSize","endSize","getDefaultVertexStyle","gradientDirection","fontStyle","resizable","rounded","btn1","btn2","btn3","btn4","btn5","update","parent","doc","createXmlDocument","batchUpdate","targetId","id","v1","insertVertex","v11","shape","align","verticalAlign","routingCenterX","geometry","relative","offset","width","v12","value","insert","v15","spacingRight","v16","v17","v18","addEventListener","xml","export","blob","Blob","type","url","window","URL","createObjectURL","a","href","download","body","revokeObjectURL","zoomIn","zoomOut","undoManager","listener","sender","evt","undoableEditHappened","getProperty","addListener","UNDO","getView","undo","redo","checkbox","checkbox2","setAttribute","checked","background","disableContextMenu","handleFileImport","children","accept","ref","display","onChange","fileName","_jsxFileName","lineNumber","columnNumber","height","_c","$RefreshReg$"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/src/components/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport axios from 'axios';\nimport {\n  popup,\n  ModelXmlSerializer,\n  domUtils,\n  styleUtils,\n  mathUtils,\n  cloneUtils,\n  eventUtils,\n  Graph,\n  InternalEvent,\n  RubberBandHandler,\n  ConnectionHandler,\n  ConnectionConstraint,\n  Point,\n  CylinderShape,\n  CellRenderer,\n  DomHelpers,\n  EdgeStyle,\n  Rectangle,\n  EdgeHandler,\n  StyleRegistry,\n  EdgeSegmentHandler,\n  UndoManager,\n  CellEditorHandler,\n  ConstraintHandler,\n  Guide,\n  ImageBox,\n  GraphView,\n  SelectionHandler,\n  PanningHandler,\n  TooltipHandler,\n  SelectionCellsHandler,\n  PopupMenuHandler,\n  xmlUtils,\n  Codec,\n} from '@maxgraph/core';\n\nimport {\n  contextMenuTypes,\n  contextMenuValues,\n  globalTypes,\n  globalValues,\n  rubberBandTypes,\n  rubberBandValues,\n} from './shared/args.js';\n\nimport { createGraphContainer } from './shared/configure.js';\n\n// style required by RubberBand\nimport '@maxgraph/core/css/common.css';\n\nimport { render } from 'react-dom';\n\nimport {\n  MyCustomGraph, \n  MyCustomEdgeSegmentHandler, \n  MyCustomGraphView, \n  MyCustomConnectionHandler,  \n  MyCustomPanningHandler, \n  MyCustomSelectionHandler,\n  MyCustomEdgeHandler,\n  MyCustomConstraintHandler\n} from './MyCustomGraph.jsx';\n\n// Добавим функцию для чтения файла\nfunction readXMLFile(file, callback) {\n  const reader = new FileReader();\n  reader.onload = function(event) {\n    const xmlContent = event.target.result;\n    callback(xmlContent);\n  };\n  reader.readAsText(file);\n}\n\nfunction parseAndLoadXML(xmlContent, graph) {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xmlContent, \"text/xml\");\n\n  // Используем модель данных графа, если она поддерживается\n  const codec = new Codec();\n  const node = xmlDoc.documentElement;\n\n  // Проверяем, что у графа есть метод getDataModel или другой метод для получения модели\n  if (typeof graph.getDataModel === 'function') {\n    codec.decode(node, graph.getDataModel());\n  } else if (typeof graph.getModel === 'function') {\n    codec.decode(node, graph.getModel());\n  } else {\n    console.error(\"Не удалось найти подходящий метод для работы с моделью графа.\");\n  }\n}\n\nexport const YourComponent = () => {\n  const importFileInputRef = useRef(null);\n  const graphContainerRef = useRef(null);\n  const [graph, setGraph] = useState(null);\n\n  useEffect(() => {\n    if (graphContainerRef.current) {\n      // Инициализация графа\n      const newGraph = new MyCustomGraph(graphContainerRef.current);\n      setGraph(newGraph);  // Сохраняем граф в состояние\n    }\n    \n    const importButton = document.getElementById(\"import\");\n    importButton.onclick = () => {\n      const fileInput = importFileInputRef.current;\n      if (fileInput) {\n        fileInput.click();  // Открываем диалог выбора файла\n\n        // Добавляем обработку файла при выборе\n        fileInput.onchange = (event) => {\n          const file = event.target.files[0];\n          if (file && graph) {\n            readXMLFile(file, (xmlContent) => {\n              const cells = graph.getChildVertices(graph.getDefaultParent());\n              graph.removeCells(cells, true);  // Очищаем граф\n              parseAndLoadXML(xmlContent, graph);  // Загружаем схему\n            });\n          }\n        };\n      }\n    };\n    \n////\n    const parentContainer = document.createElement('div');\n    const container = createGraphContainer({\n      imageUrl: 'images/grid.gif'\n    });\n    parentContainer.appendChild(container);\n    //console.log({graph})\n      // Changes some default colors\n  // TODO Find a way of modifying globally or setting locally! See https://github.com/maxGraph/maxGraph/issues/192\n  //constants.SHADOWCOLOR = '#C0C0C0';\n\n  let joinNodeSize = 7;\n  let strokeWidth = 2;\n\n  // Switch for black background and bright styles\n  let invert = false;\n  let MyCustomCellEditorHandler;\n\n  if (!graphInstance) {\n    const newGraph = new MyCustomGraph(graphContainer, null, []);\n    setGraphInstance(newGraph);\n  }\n\n  if (invert) {\n    container.style.backgroundColor = 'black';\n\n    // White in-place editor text color\n    MyCustomCellEditorHandler = class extends CellEditorHandler {\n      startEditing(cell, trigger) {\n        super.startEditing.apply(this, arguments);\n\n        if (this.textarea != null) {\n          this.textarea.style.color = '#FFFFFF';\n        }\n      }\n    };\n  } else {\n    MyCustomCellEditorHandler = CellEditorHandler;\n  }\n\n  // Imlements a custom resistor shape. Direction currently ignored here.\n\n  class ResistorShape extends CylinderShape {\n    constructor() {\n      // TODO: The original didn't seem to call the super\n      super(null, null, null, null);\n    }\n\n    redrawPath(path, x, y, w, h, isForeground) {\n      let dx = w / 16;\n\n      if (isForeground) {\n        path.moveTo(0, h / 2);\n        path.lineTo(2 * dx, h / 2);\n        path.lineTo(3 * dx, 0);\n        path.lineTo(5 * dx, h);\n        path.lineTo(7 * dx, 0);\n        path.lineTo(9 * dx, h);\n        path.lineTo(11 * dx, 0);\n        path.lineTo(13 * dx, h);\n        path.lineTo(14 * dx, h / 2);\n        path.lineTo(16 * dx, h / 2);\n        path.end();\n      }\n    }\n  }\n\n  CellRenderer.registerShape('resistor', ResistorShape);\n\n  // Imlements a custom resistor shape. Direction currently ignored here.\n\n  EdgeStyle.WireConnector = function (state, source, target, hints, result) {\n    // Creates array of all way- and terminalpoints\n    let pts = state.absolutePoints;\n    let horizontal = true;\n    let hint = null;\n\n    // Gets the initial connection from the source terminal or edge\n    if (source != null && source.cell.isEdge()) {\n      horizontal = state.style.sourceConstraint == 'horizontal';\n    } else if (source != null) {\n      horizontal = source.style.portConstraint != 'vertical';\n\n      // Checks the direction of the shape and rotates\n      let direction = source.style.direction;\n\n      if (direction == 'north' || direction == 'south') {\n        horizontal = !horizontal;\n      }\n    }\n\n    // Adds the first point\n    // TODO: Should move along connected segment\n    let pt = pts[0];\n\n    if (pt == null && source != null) {\n      pt = new Point(\n        state.view.getRoutingCenterX(source),\n        state.view.getRoutingCenterY(source)\n      );\n    } else if (pt != null) {\n      pt = pt.clone();\n    }\n\n    let first = pt;\n\n    // Adds the waypoints\n    if (hints != null && hints.length > 0) {\n      // FIXME: First segment not movable\n      /*hint = state.view.transformControlPoint(state, hints[0]);\n      MaxLog.show();\n      MaxLog.debug(hints.length,'hints0.y='+hint.y, pt.y)\n\n      if (horizontal && Math.floor(hint.y) != Math.floor(pt.y))\n      {\n        MaxLog.show();\n        MaxLog.debug('add waypoint');\n\n        pt = new Point(pt.x, hint.y);\n        result.push(pt);\n        pt = pt.clone();\n        //horizontal = !horizontal;\n      }*/\n\n      for (let i = 0; i < hints.length; i++) {\n        horizontal = !horizontal;\n        hint = state.view.transformControlPoint(state, hints[i]);\n\n        if (horizontal) {\n          if (pt.y !== hint.y) {\n            pt.y = hint.y;\n            result.push(pt.clone());\n          }\n        } else if (pt.x !== hint.x) {\n          pt.x = hint.x;\n          result.push(pt.clone());\n        }\n      }\n    } else {\n      hint = pt;\n    }\n\n    // Adds the last point\n    pt = pts[pts.length - 1];\n\n    // TODO: Should move along connected segment\n    if (pt == null && target != null) {\n      pt = new Point(\n        state.view.getRoutingCenterX(target),\n        state.view.getRoutingCenterY(target)\n      );\n    }\n\n    if (horizontal) {\n      if (pt.y !== hint.y && first.x !== pt.x) {\n        result.push(new Point(pt.x, hint.y));\n      }\n    } else if (pt.x !== hint.x && first.y !== pt.y) {\n      result.push(new Point(hint.x, pt.y));\n    }\n  };\n\n  StyleRegistry.putValue('wireEdgeStyle', EdgeStyle.WireConnector);\n\n\n    let graph = new MyCustomGraph(container, null, [\n      MyCustomCellEditorHandler,\n      TooltipHandler,\n      SelectionCellsHandler,\n      PopupMenuHandler,\n      MyCustomConnectionHandler,\n      MyCustomSelectionHandler,\n      MyCustomPanningHandler,\n    ]);\n    setVariableFromEffect(graph);\n\n  let labelBackground = invert ? '#000000' : '#FFFFFF';\n  let fontColor = invert ? '#FFFFFF' : '#000000';\n  let strokeColor = invert ? '#C0C0C0' : '#000000';\n  let fillColor = invert ? 'none' : '#FFFFFF';\n\n  graph.view.scale = 1;\n  graph.setPanning(true);\n  graph.setConnectable(true);\n  graph.setConnectableEdges(true);\n  graph.setDisconnectOnMove(false);\n  graph.foldingEnabled = false;\n\n  //Maximum size\n  graph.maximumGraphBounds = new Rectangle(0, 0, 1000, 1000);\n  graph.border = 50;\n  graph.spacingLeft = 30;\n\n  // Enables return key to stop editing (use shift-enter for newlines)\n  graph.setEnterStopsCellEditing(true);\n\n  // Adds rubberband selection\n  new RubberBandHandler(graph);\n\n  // Adds a special tooltip for edges\n  graph.setTooltips(true);\n\n  let style = graph.getStylesheet().getDefaultEdgeStyle();\n  delete style.endArrow;\n  style.strokeColor = strokeColor;\n  style.labelBackgroundColor = labelBackground;\n  style.edgeStyle = 'wireEdgeStyle';\n  style.fontColor = fontColor;\n  style.fontSize = '9';\n  style.movable = '0';\n  style.strokeWidth = strokeWidth;\n  //style.rounded = '1';\n\n  // Sets join node size\n  style.startSize = joinNodeSize;\n  style.endSize = joinNodeSize;\n\n  style = graph.getStylesheet().getDefaultVertexStyle();\n  style.gradientDirection = 'south';\n  //style.gradientColor = '#909090';\n  style.strokeColor = strokeColor;\n  //style.fillColor = '#e0e0e0';\n  style.fillColor = 'none';\n  style.fontColor = fontColor;\n  style.fontStyle = '1';\n  style.fontSize = '12';\n  style.resizable = '0';\n  style.rounded = '1';\n  style.strokeWidth = strokeWidth;\n\n  // инородное дерьмо\n\n  const btn1 = document.getElementById('btn1');\n  const btn2 = document.getElementById('btn2');\n  const btn3 = document.getElementById('btn3');\n  const btn4 = document.getElementById('btn4');\n  const btn5 = document.getElementById('btn5');\n\n  const update = (event) => {\n    var parent = graph.getDefaultParent();\n    var doc = xmlUtils.createXmlDocument();\n    graph.batchUpdate(() => {\n      const targetId = event.target.id;\n      if (targetId === 'btn3') {\n        var v1 = graph.insertVertex(parent, null, '', 80, 40, 40, 80,\n          'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n        v1.setConnectable(false);\n\n        var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n          shape: 'line',\n          align: 'left',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: -0.5,\n          spacingLeft: 12,\n          fontColor,\n          strokeColor,\n        });\n        v11.geometry.relative = true;\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\n        var v12 = v11.clone();\n        v12.value = 'Y';\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\n        v1.insert(v12);\n        var v15 = v11.clone();\n        v15.value = '';\n        v15.geometry.x = 1;\n        v15.style = {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: 0.5,\n          spacingRight: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        }\n\n        v15.geometry.offset = new Point(5, 32);\n        v1.insert(v15);\n\n        var v16 = graph.insertVertex(v1, null, '○', 0, 0, 0, 0, {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 30,\n          routingCenterX: 0.5,\n          spacingLeft: 6,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v16.geometry.x = 1;\n        v16.geometry.offset = new Point(49, 34);\n        v1.insert(v16);\n      } else if (targetId === 'btn1') {\n        var v1 = graph.insertVertex(parent, null, '', 180, 40, 40, 80,\n          'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n        v1.setConnectable(false);\n\n        var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n          shape: 'line',\n          align: 'left',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: -0.5,\n          spacingLeft: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v11.geometry.relative = true;\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\n        var v12 = v11.clone();\n        v12.value = 'Y';\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\n        v1.insert(v12);\n        var v15 = v11.clone();\n        v15.value = '';\n        v15.geometry.x = 1;\n        v15.style = {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: 0.5,\n          spacingRight: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        };\n        v15.geometry.offset = new Point(0, 32);\n        v1.insert(v15);\n\n        var v16 = graph.insertVertex(v1, null, '&', 0, 0, 0, 0, {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 20,\n          routingCenterX: 0.5,\n          spacingLeft: 6,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v16.geometry.x = 1;\n        v16.geometry.offset = new Point(28.5, 37);\n        v1.insert(v16);\n      } else if (targetId === 'btn2') {\n        var v1 = graph.insertVertex(parent, null, '', 250, 40, 40, 80,\n          'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n        v1.setConnectable(false);\n\n        var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n          shape: 'line',\n          align: 'left',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: -0.5,\n          spacingLeft: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v11.geometry.relative = true;\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\n        var v12 = v11.clone();\n        v12.value = 'Y';\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\n        v1.insert(v12);\n        var v15 = v11.clone();\n        v15.value = '';\n        v15.geometry.x = 1;\n        v15.style = {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: 0.5,\n          spacingRight: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        };\n        v15.geometry.offset = new Point(0, 32);\n        v1.insert(v15);\n\n        var v16 = graph.insertVertex(v1, null, '|', 0, 0, 0, 0, {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 20,\n          routingCenterX: 0.5,\n          spacingLeft: 6,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v16.geometry.x = 1;\n        v16.geometry.offset = new Point(24, 37);\n        v1.insert(v16);\n      } else if (targetId === 'btn5') {\n        var v1 = graph.insertVertex(parent, null, '', 180, 140, 40, 80,\n          'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n        v1.setConnectable(false);\n\n        var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n          shape: 'line',\n          align: 'left',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: -0.5,\n          spacingLeft: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v11.geometry.relative = true;\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\n        var v12 = v11.clone();\n        v12.value = 'Y';\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\n        v1.insert(v12);\n        var v15 = v11.clone();\n        v15.value = '';\n        v15.geometry.x = 1;\n        v15.style = {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: 0.5,\n          spacingRight: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        };\n        v15.geometry.offset = new Point(0, 32);\n        v1.insert(v15);\n\n        var v16 = graph.insertVertex(v1, null, '==', 0, 0, 0, 0, {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 15,\n          routingCenterX: 0.5,\n          spacingLeft: 6,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v16.geometry.x = 1;\n        v16.geometry.offset = new Point(30, 38);\n        v1.insert(v16);\n      } else if (targetId === 'btn4') {\n        var v1 = graph.insertVertex(parent, null, '', 80, 140, 40, 80,\n          'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n        v1.setConnectable(false);\n\n        var v11 = graph.insertVertex(v1, null, '', 0, 0, 14, 16, {\n          shape: 'line',\n          align: 'left',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: -0.5,\n          spacingLeft: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v11.geometry.relative = true;\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\n        var v12 = v11.clone();\n        v12.value = '';\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\n        v1.insert(v12);\n        var v15 = v11.clone();\n        v15.value = '';\n        v15.geometry.x = 1;\n        v15.style = {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: 0.5,\n          spacingRight: 12,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        };\n        v15.geometry.offset = new Point(0, 32);\n        v1.insert(v15);\n\n        var v16 = graph.insertVertex(v1, null, '○', 0, 0, 0, 0, {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 25,\n          routingCenterX: 0.5,\n          spacingLeft: 6,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v16.geometry.x = 1;\n        v16.geometry.offset = new Point(8, 15);\n        v1.insert(v16);\n        var v17 = graph.insertVertex(v1, null, 'X', 0, 0, 0, 0, {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: 0.5,\n          spacingLeft: 6,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v17.geometry.x = 1;\n        v17.geometry.offset = new Point(14, 20);\n        v1.insert(v17);\n        var v18 = graph.insertVertex(v1, null, 'Y', 0, 0, 0, 0, {\n          shape: 'line',\n          align: 'right',\n          verticalAlign: 'middle',\n          fontSize: 10,\n          routingCenterX: 0.5,\n          spacingLeft: 6,\n          fontColor: fontColor,\n          strokeColor: strokeColor\n        });\n        v18.geometry.x = 1;\n        v18.geometry.offset = new Point(14, 59);\n        v1.insert(v18);\n      }\n    });\n  };\n\n\n  btn1.addEventListener('click', update);\n  btn2.addEventListener('click', update);\n  btn3.addEventListener('click', update);\n  btn4.addEventListener('click', update);\n  btn5.addEventListener('click', update);\n\n  ////////////////////////////////////////////////////////\n// XML \n\ndocument.getElementById(\"xml\").onclick = () => {\n  // Получаем XML данные\n  const xml = new ModelXmlSerializer(graph.getDataModel()).export();\n  \n  // Создаем новый Blob объект с XML данными\n  const blob = new Blob([xml], { type: 'text/xml' });\n  \n  // Создаем ссылку на Blob объект\n  const url = window.URL.createObjectURL(blob);\n  \n  // Создаем ссылку для скачивания\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'data.xml'; // Имя файла для скачивания\n  document.body.appendChild(a);\n  \n  // Инициируем скачивание файла\n  a.click();\n  \n  // Освобождаем ресурсы\n  window.URL.revokeObjectURL(url);\n};\n\n\n\n\n\n\n\n\n\n///////////////////////////////////////////////////////////\n\n\n    document.getElementById(\"zoom\").onclick = () => graph.zoomIn();\n    document.getElementById(\"zoomout\").onclick = () => graph.zoomOut();\n\n  // Undo/redo\n  let undoManager = new UndoManager();\n  let listener = function (sender, evt) {\n    undoManager.undoableEditHappened(evt.getProperty('edit'));\n  };\n  graph.getDataModel().addListener(InternalEvent.UNDO, listener);\n  graph.getView().addListener(InternalEvent.UNDO, listener);\n\n  document.getElementById(\"undo\").onclick = () => undoManager.undo();\n  document.getElementById(\"redo\").onclick = () => undoManager.redo();\n\n\n  document.getElementById(\"delete\").onclick = () => graph.removeCells();\n\n  // Wire-mode\n  let checkbox = document.getElementById(\"wire\");\n\n  // Grid\n  let checkbox2 = document.getElementById(\"grid\");\n  checkbox2.setAttribute('checked', 'true');\n\n\n  InternalEvent.addListener(checkbox2, 'click', function (evt) {\n    if (checkbox2.checked) {\n      container.style.background = 'url(./images/grid.gif)';\n    } else {\n      container.style.background = '';\n    }\n    container.style.backgroundColor = invert ? 'black' : 'white';\n  });\n  InternalEvent.disableContextMenu(container);\n\n\n    graphContainer.appendChild(parentContainer);\n  \n    return () => {\n      // Clean up if needed\n    }; \n  }, [graph]);\n  \n  const handleFileImport = (event) => {\n    const file = event.target.files[0];\n    if (file && graph) {\n      readXMLFile(file, (xmlContent) => {\n        graph.removeCells(); // Очищаем граф перед загрузкой новой схемы\n        parseAndLoadXML(xmlContent, graph); // Загружаем новую схему\n      });\n    }\n  };\n\n  return (\n    <div>\n      {/* Скрытый input для выбора XML файла */}\n      <input \n        type=\"file\" \n        accept=\".xml\" \n        ref={importFileInputRef} \n        style={{ display: 'none' }} \n        onChange={handleFileImport} \n      />\n  \n      {/* Кнопка импорта */}\n      <button id=\"import\">Импортировать схему</button>\n      \n      {/* Контейнер для графа */}\n      <div ref={graphContainerRef} style={{ width: '100%', height: '100%' }} />\n    </div>\n  );\n  \n};\n// Функция для чтения XML файла\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\OSPanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\LogicElementManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LogicElementManager = ({\n  onGenerateCode\n}) => {\n  _s();\n  const [elements, setElements] = useState([]);\n  useEffect(() => {\n    const handleElementAdded = event => {\n      const newElement = event.detail;\n      setElements(prevElements => [...prevElements, newElement]);\n    };\n    window.addEventListener('elementAdded', handleElementAdded);\n    return () => window.removeEventListener('elementAdded', handleElementAdded);\n  }, []);\n  useEffect(() => {\n    let vhdlCode = `library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\n`;\n    vhdlCode += `entity adder is\\nend adder;\\n\\narchitecture rtl of adder is\\n`;\n    elements.forEach((element, index) => {\n      switch (element.type) {\n        case 'AND':\n          vhdlCode += `AND_GATE_${index}: entity work.and_gate\\n`;\n          vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\n          break;\n        case 'OR':\n          vhdlCode += `OR_GATE_${index}: entity work.or_gate\\n`;\n          vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\n          break;\n        case 'NOT':\n          vhdlCode += `NOT_GATE_${index}: entity work.not_gate\\n`;\n          vhdlCode += `port map (A => ${element.inputs[0]}, Y => ${element.output});\\n`;\n          break;\n        case 'INPUT':\n          vhdlCode += `signal ${element.inputs[0]} : std_logic;\\n`;\n          break;\n        case 'OUTPUT':\n          vhdlCode += `signal ${element.output} : std_logic;\\n`;\n          break;\n        default:\n          vhdlCode += `-- Неизвестный элемент: ${element.type}\\n`;\n      }\n    });\n    vhdlCode += `begin\\n-- Добавьте свою логику здесь\\nend rtl;\\n`;\n    onGenerateCode(vhdlCode); // Передача кода в редактор\n  }, [elements]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u043D\\u044B\\u0435 \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\\u044B:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: elements.map((el, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [el.type, \" \\u2014 \", el.inputs.join(', '), \" \\u2794 \", el.output]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(LogicElementManager, \"tZwa6oWmA+aeqKemK9M90QcIDxc=\");\n_c = LogicElementManager;\nexport default LogicElementManager;\nvar _c;\n$RefreshReg$(_c, \"LogicElementManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LogicElementManager","onGenerateCode","_s","elements","setElements","handleElementAdded","event","newElement","detail","prevElements","window","addEventListener","removeEventListener","vhdlCode","forEach","element","index","type","inputs","output","children","fileName","_jsxFileName","lineNumber","columnNumber","map","el","join","_c","$RefreshReg$"],"sources":["D:/OSPanel/domains/react/react-intro-main/src/components/LogicElementManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst LogicElementManager = ({ onGenerateCode }) => {\r\n  const [elements, setElements] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const handleElementAdded = (event) => {\r\n      const newElement = event.detail;\r\n      setElements((prevElements) => [...prevElements, newElement]);\r\n    };\r\n\r\n    window.addEventListener('elementAdded', handleElementAdded);\r\n    return () => window.removeEventListener('elementAdded', handleElementAdded);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let vhdlCode = `library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\n`;\r\n    vhdlCode += `entity adder is\\nend adder;\\n\\narchitecture rtl of adder is\\n`;\r\n    elements.forEach((element, index) => {\r\n      switch (element.type) {\r\n        case 'AND':\r\n          vhdlCode += `AND_GATE_${index}: entity work.and_gate\\n`;\r\n          vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\r\n          break;\r\n\r\n        case 'OR':\r\n          vhdlCode += `OR_GATE_${index}: entity work.or_gate\\n`;\r\n          vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\r\n          break;\r\n\r\n        case 'NOT':\r\n          vhdlCode += `NOT_GATE_${index}: entity work.not_gate\\n`;\r\n          vhdlCode += `port map (A => ${element.inputs[0]}, Y => ${element.output});\\n`;\r\n          break;\r\n\r\n        case 'INPUT':\r\n          vhdlCode += `signal ${element.inputs[0]} : std_logic;\\n`;\r\n          break;\r\n\r\n        case 'OUTPUT':\r\n          vhdlCode += `signal ${element.output} : std_logic;\\n`;\r\n          break;\r\n\r\n        default:\r\n          vhdlCode += `-- Неизвестный элемент: ${element.type}\\n`;\r\n      }\r\n    });\r\n\r\n    vhdlCode += `begin\\n-- Добавьте свою логику здесь\\nend rtl;\\n`;\r\n\r\n    onGenerateCode(vhdlCode); // Передача кода в редактор\r\n  }, [elements]);\r\n\r\n  return (\r\n    <div>\r\n      <h4>Добавленные элементы:</h4>\r\n      <ul>\r\n        {elements.map((el, index) => (\r\n          <li key={index}>\r\n            {el.type} — {el.inputs.join(', ')} ➔ {el.output}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogicElementManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
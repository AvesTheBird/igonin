{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport MonacoEditor from '@monaco-editor/react'; // Импортируем компонент\nimport './monaco-vhdl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditor = ({\n  id,\n  onCodeChange,\n  initialCode\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  useEffect(() => {\n    if (editorRef.current) {\n      const editorInstance = editorRef.current.editor;\n\n      // Handle content change and debounce to reduce state updates\n      const onContentChange = () => {\n        const code = editorInstance.getValue();\n        onCodeChange(code);\n      };\n      const debouncedChangeHandler = debounce(onContentChange, 300);\n      const contentChangeListener = editorInstance.onDidChangeModelContent(debouncedChangeHandler);\n      return () => {\n        contentChangeListener.dispose();\n      };\n    }\n  }, [initialCode, onCodeChange]);\n  return /*#__PURE__*/_jsxDEV(MonacoEditor, {\n    id: id,\n    value: initialCode,\n    language: \"vhdl\",\n    theme: \"my-custom-dark\",\n    height: \"400px\",\n    options: {\n      automaticLayout: true\n    },\n    onChange: onCodeChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(VHDLEditor, \"FXGU5sRik9TpAO5B+Yli91RwFDk=\");\n_c = VHDLEditor;\nfunction debounce(func, wait) {\n  let timeout;\n  return function (...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}\nconst VHDLEditorWithCompiler = () => {\n  _s2();\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity adder is\n  generic (\n    operand_width_g: natural\n  );\n\n  port (\n    clk : in std_logic;\n    rst_n : in std_logic;\n    a_in : in std_logic_vector(operand_width_g - 1 downto 0);\n    b_in : in std_logic_vector(operand_width_g - 1 downto 0);\n    sum_out : out std_logic_vector(operand_width_g downto 0)\n  );\nend entity;\n\narchitecture rtl of adder is\n  constant outw: natural := operand_width_g + 1;\n  signal result_r: signed(operand_width_g downto 0);\nbegin\n  sum_out <= std_logic_vector(result_r);\n  sync: process(rst_n, clk)\n  begin\n    if (rst_n = '0') then\n      result_r <= to_signed(0, outw);\n    elsif rising_edge(clk) then\n      result_r <= resize(signed(a_in), outw) + resize(signed(b_in), outw);\n    end if;\n  end process;\nend architecture;`);\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity tb_adder is\nend tb_adder;\n\narchitecture testbench of tb_adder is\n  constant input_w_c : integer := 8;\n  constant output_w_c : integer := 9;\n  constant clk_period_c : time := 100 ns;\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\n\n  component adder\n    generic (\n      operand_width_g : integer\n    );\n    port (\n      clk : in std_logic;\n      rst_n : in std_logic;\n      a_in : in std_logic_vector(operand_width_g-1 downto 0);\n      b_in : in std_logic_vector(operand_width_g-1 downto 0);\n      sum_out : out std_logic_vector(operand_width_g downto 0)\n    );\n  end component;\n\n  signal clk : std_logic := '0';\n  signal rst_n : std_logic := '0';\n  signal term1_r : signed(input_w_c-1 downto 0);\n  signal term2_r : signed(input_w_c-1 downto 0);\n  signal sum : std_logic_vector(output_w_c-1 downto 0);\n  signal expected_sum_r : signed(output_w_c-1 downto 0);\n  signal end_simulation_r : std_logic;\n\nbegin\n  adder_1 : adder\n    generic map (\n      operand_width_g => input_w_c)\n    port map (\n      clk => clk,\n      rst_n => rst_n,\n      a_in => std_logic_vector(term1_r),\n      b_in => std_logic_vector(term2_r),\n      sum_out => sum);\n\n  rst_n <= '1' after clk_period_c*2;\n\n  clk_gen : process (clk)\n  begin\n    clk <= not clk after clk_period_c/2;\n  end process clk_gen;\n\n  input_gen_output_check : process (clk, rst_n)\n  begin\n    if rst_n = '0' then\n      term1_r <= min_value_c;\n      term2_r <= min_value_c;\n      expected_sum_r <= (others => '0');\n      end_simulation_r <= '0';\n    elsif clk'event and clk = '1' then\n      if ( term1_r = max_value_c ) then\n        term1_r <= min_value_c;\n        if ( term2_r = max_value_c ) then\n          term2_r <= min_value_c;\n          end_simulation_r <= '1';\n        else\n          term2_r <= term2_r + to_signed(1, input_w_c);\n        end if;\n      else\n        term1_r <= term1_r + to_signed(1, input_w_c);\n      end if;\n      expected_sum_r <= resize(term1_r, output_w_c) + resize(term2_r, output_w_c);\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\n        report \"output signal is not equal to the sum of the inputs\"\n        severity failure;\n      assert end_simulation_r = '0'\n        report \"Simulation ended!\" severity failure;\n    end if;\n  end process input_gen_output_check;\n\nend testbench;\n`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"architecture-editor\",\n      onCodeChange: setArchitectureCode,\n      initialCode: architectureCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"testbench-editor\",\n      onCodeChange: setTestbenchCode,\n      initialCode: testbenchCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s2(VHDLEditorWithCompiler, \"gkR9W+Sl3Yb6wzpU3+JqB51EZFs=\");\n_c2 = VHDLEditorWithCompiler;\nexport default VHDLEditorWithCompiler;\nvar _c, _c2;\n$RefreshReg$(_c, \"VHDLEditor\");\n$RefreshReg$(_c2, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["React","useState","useEffect","useRef","MonacoEditor","jsxDEV","_jsxDEV","VHDLEditor","id","onCodeChange","initialCode","_s","editorRef","current","editorInstance","editor","onContentChange","code","getValue","debouncedChangeHandler","debounce","contentChangeListener","onDidChangeModelContent","dispose","value","language","theme","height","options","automaticLayout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","func","wait","timeout","args","clearTimeout","setTimeout","apply","VHDLEditorWithCompiler","_s2","architectureCode","setArchitectureCode","testbenchCode","setTestbenchCode","children","_c2","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport MonacoEditor from '@monaco-editor/react'; // Импортируем компонент\r\nimport './monaco-vhdl';\r\n\r\nconst VHDLEditor = ({ id, onCodeChange, initialCode }) => {\r\n  const editorRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (editorRef.current) {\r\n      const editorInstance = editorRef.current.editor;\r\n\r\n      // Handle content change and debounce to reduce state updates\r\n      const onContentChange = () => {\r\n        const code = editorInstance.getValue();\r\n        onCodeChange(code);\r\n      };\r\n\r\n      const debouncedChangeHandler = debounce(onContentChange, 300);\r\n      const contentChangeListener = editorInstance.onDidChangeModelContent(debouncedChangeHandler);\r\n\r\n      return () => {\r\n        contentChangeListener.dispose();\r\n      };\r\n    }\r\n  }, [initialCode, onCodeChange]);\r\n\r\n  return (\r\n    <MonacoEditor\r\n      id={id}\r\n      value={initialCode}\r\n      language=\"vhdl\"\r\n      theme=\"my-custom-dark\"\r\n      height=\"400px\"\r\n      options={{\r\n        automaticLayout: true,\r\n      }}\r\n      onChange={onCodeChange}\r\n    />\r\n  );\r\n};\r\n\r\nfunction debounce(func, wait) {\r\n  let timeout;\r\n  return function (...args) {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(this, args), wait);\r\n  };\r\n}\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity adder is\r\n  generic (\r\n    operand_width_g: natural\r\n  );\r\n\r\n  port (\r\n    clk : in std_logic;\r\n    rst_n : in std_logic;\r\n    a_in : in std_logic_vector(operand_width_g - 1 downto 0);\r\n    b_in : in std_logic_vector(operand_width_g - 1 downto 0);\r\n    sum_out : out std_logic_vector(operand_width_g downto 0)\r\n  );\r\nend entity;\r\n\r\narchitecture rtl of adder is\r\n  constant outw: natural := operand_width_g + 1;\r\n  signal result_r: signed(operand_width_g downto 0);\r\nbegin\r\n  sum_out <= std_logic_vector(result_r);\r\n  sync: process(rst_n, clk)\r\n  begin\r\n    if (rst_n = '0') then\r\n      result_r <= to_signed(0, outw);\r\n    elsif rising_edge(clk) then\r\n      result_r <= resize(signed(a_in), outw) + resize(signed(b_in), outw);\r\n    end if;\r\n  end process;\r\nend architecture;`);\r\n\r\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity tb_adder is\r\nend tb_adder;\r\n\r\narchitecture testbench of tb_adder is\r\n  constant input_w_c : integer := 8;\r\n  constant output_w_c : integer := 9;\r\n  constant clk_period_c : time := 100 ns;\r\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\r\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\r\n\r\n  component adder\r\n    generic (\r\n      operand_width_g : integer\r\n    );\r\n    port (\r\n      clk : in std_logic;\r\n      rst_n : in std_logic;\r\n      a_in : in std_logic_vector(operand_width_g-1 downto 0);\r\n      b_in : in std_logic_vector(operand_width_g-1 downto 0);\r\n      sum_out : out std_logic_vector(operand_width_g downto 0)\r\n    );\r\n  end component;\r\n\r\n  signal clk : std_logic := '0';\r\n  signal rst_n : std_logic := '0';\r\n  signal term1_r : signed(input_w_c-1 downto 0);\r\n  signal term2_r : signed(input_w_c-1 downto 0);\r\n  signal sum : std_logic_vector(output_w_c-1 downto 0);\r\n  signal expected_sum_r : signed(output_w_c-1 downto 0);\r\n  signal end_simulation_r : std_logic;\r\n\r\nbegin\r\n  adder_1 : adder\r\n    generic map (\r\n      operand_width_g => input_w_c)\r\n    port map (\r\n      clk => clk,\r\n      rst_n => rst_n,\r\n      a_in => std_logic_vector(term1_r),\r\n      b_in => std_logic_vector(term2_r),\r\n      sum_out => sum);\r\n\r\n  rst_n <= '1' after clk_period_c*2;\r\n\r\n  clk_gen : process (clk)\r\n  begin\r\n    clk <= not clk after clk_period_c/2;\r\n  end process clk_gen;\r\n\r\n  input_gen_output_check : process (clk, rst_n)\r\n  begin\r\n    if rst_n = '0' then\r\n      term1_r <= min_value_c;\r\n      term2_r <= min_value_c;\r\n      expected_sum_r <= (others => '0');\r\n      end_simulation_r <= '0';\r\n    elsif clk'event and clk = '1' then\r\n      if ( term1_r = max_value_c ) then\r\n        term1_r <= min_value_c;\r\n        if ( term2_r = max_value_c ) then\r\n          term2_r <= min_value_c;\r\n          end_simulation_r <= '1';\r\n        else\r\n          term2_r <= term2_r + to_signed(1, input_w_c);\r\n        end if;\r\n      else\r\n        term1_r <= term1_r + to_signed(1, input_w_c);\r\n      end if;\r\n      expected_sum_r <= resize(term1_r, output_w_c) + resize(term2_r, output_w_c);\r\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\r\n        report \"output signal is not equal to the sum of the inputs\"\r\n        severity failure;\r\n      assert end_simulation_r = '0'\r\n        report \"Simulation ended!\" severity failure;\r\n    end if;\r\n  end process input_gen_output_check;\r\n\r\nend testbench;\r\n`);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Архитектура</h3>\r\n      <VHDLEditor id=\"architecture-editor\" onCodeChange={setArchitectureCode} initialCode={architectureCode} />\r\n      <h3>Тестовый стенд</h3>\r\n      <VHDLEditor id=\"testbench-editor\" onCodeChange={setTestbenchCode} initialCode={testbenchCode} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VHDLEditorWithCompiler;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { getTopmostCells } from './cellArrayUtils';\n/**\n * @class\n *\n * Singleton that implements a clipboard for graph cells.\n *\n * ### Example:\n *\n * ```javascript\n * Clipboard.copy(graph);\n * Clipboard.paste(graph2);\n * ```\n *\n * This copies the selection cells from the graph to the clipboard and\n * pastes them into graph2.\n *\n * For fine-grained control of the clipboard data the {@link graph.canExportCell}\n * and {@link graph.canImportCell} functions can be overridden.\n *\n * To restore previous parents for pasted cells, the implementation for\n * {@link copy} and {@link paste} can be changed as follows.\n *\n * ```javascript\n * Clipboard.copy = function(graph, cells)\n * {\n *   cells = cells || graph.getSelectionCells();\n *   var result = graph.getExportableCells(cells);\n *\n *   Clipboard.parents = new Object();\n *\n *   for (var i = 0; i < result.length; i++)\n *   {\n *     Clipboard.parents[i] = graph.model.getParent(cells[i]);\n *   }\n *\n *   Clipboard.insertCount = 1;\n *   Clipboard.setCells(graph.cloneCells(result));\n *\n *   return result;\n * };\n *\n * Clipboard.paste = function(graph)\n * {\n *   if (!Clipboard.isEmpty())\n *   {\n *     var cells = graph.getImportableCells(Clipboard.getCells());\n *     var delta = Clipboard.insertCount * Clipboard.STEPSIZE;\n *     var parent = graph.getDefaultParent();\n *\n *     graph.model.beginUpdate();\n *     try\n *     {\n *       for (var i = 0; i < cells.length; i++)\n *       {\n *         var tmp = (Clipboard.parents != null && graph.model.contains(Clipboard.parents[i])) ?\n *              Clipboard.parents[i] : parent;\n *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n *       }\n *     }\n *     finally\n *     {\n *       graph.model.endUpdate();\n *     }\n *\n *     // Increments the counter and selects the inserted cells\n *     Clipboard.insertCount++;\n *     graph.setSelectionCells(cells);\n *   }\n * };\n * ```\n */\nclass Clipboard {\n  /**\n   * Sets the cells in the clipboard. Fires a {@link mxEvent.CHANGE} event.\n   */\n  static setCells(cells) {\n    Clipboard.cells = cells;\n  }\n  /**\n   * Returns  the cells in the clipboard.\n   */\n  static getCells() {\n    return Clipboard.cells;\n  }\n  /**\n   * Returns true if the clipboard currently has not data stored.\n   */\n  static isEmpty() {\n    return !Clipboard.getCells();\n  }\n  /**\n   * Cuts the given array of {@link mxCell} from the specified graph.\n   * If cells is null then the selection cells of the graph will\n   * be used. Returns the cells that have been cut from the graph.\n   *\n   * @param graph - {@link graph} that contains the cells to be cut.\n   * @param cells - Optional array of {@link mxCell} to be cut.\n   */\n  static cut(graph) {\n    let cells = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    cells = Clipboard.copy(graph, cells);\n    Clipboard.insertCount = 0;\n    Clipboard.removeCells(graph, cells);\n    return cells;\n  }\n  /**\n   * Hook to remove the given cells from the given graph after\n   * a cut operation.\n   *\n   * @param graph - {@link graph} that contains the cells to be cut.\n   * @param cells - Array of {@link mxCell} to be cut.\n   */\n  static removeCells(graph, cells) {\n    graph.removeCells(cells);\n  }\n  /**\n   * Copies the given array of {@link mxCell} from the specified\n   * graph to {@link cells}. Returns the original array of cells that has\n   * been cloned. Descendants of cells in the array are ignored.\n   *\n   * @param graph - {@link graph} that contains the cells to be copied.\n   * @param cells - Optional array of {@link mxCell} to be copied.\n   */\n  static copy(graph, cells) {\n    cells = cells || graph.getSelectionCells();\n    const result = getTopmostCells(graph.getExportableCells(cells));\n    Clipboard.insertCount = 1;\n    Clipboard.setCells(graph.cloneCells(result));\n    return result;\n  }\n  /**\n   * Pastes the {@link cells} into the specified graph restoring\n   * the relation to {@link parents}, if possible. If the parents\n   * are no longer in the graph or invisible then the\n   * cells are added to the graph's default or into the\n   * swimlane under the cell's new location if one exists.\n   * The cells are added to the graph using {@link graph.importCells}\n   * and returned.\n   *\n   * @param graph - {@link graph} to paste the {@link cells} into.\n   */\n  static paste(graph) {\n    let cells = null;\n    if (!Clipboard.isEmpty() && Clipboard.getCells()) {\n      cells = graph.getImportableCells(Clipboard.getCells());\n      const delta = Clipboard.insertCount * Clipboard.STEPSIZE;\n      const parent = graph.getDefaultParent();\n      cells = graph.importCells(cells, delta, delta, parent);\n      // Increments the counter and selects the inserted cells\n      Clipboard.insertCount++;\n      graph.setSelectionCells(cells);\n    }\n    return cells;\n  }\n}\n/**\n * Defines the step size to offset the cells after each paste operation.\n * Default is 10.\n */\nClipboard.STEPSIZE = 10;\n/**\n * Counts the number of times the clipboard data has been inserted.\n */\nClipboard.insertCount = 1;\nexport default Clipboard;","map":{"version":3,"names":["getTopmostCells","Clipboard","setCells","cells","getCells","isEmpty","cut","graph","arguments","length","undefined","copy","insertCount","removeCells","getSelectionCells","result","getExportableCells","cloneCells","paste","getImportableCells","delta","STEPSIZE","parent","getDefaultParent","importCells","setSelectionCells"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/util/Clipboard.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { getTopmostCells } from './cellArrayUtils';\n/**\n * @class\n *\n * Singleton that implements a clipboard for graph cells.\n *\n * ### Example:\n *\n * ```javascript\n * Clipboard.copy(graph);\n * Clipboard.paste(graph2);\n * ```\n *\n * This copies the selection cells from the graph to the clipboard and\n * pastes them into graph2.\n *\n * For fine-grained control of the clipboard data the {@link graph.canExportCell}\n * and {@link graph.canImportCell} functions can be overridden.\n *\n * To restore previous parents for pasted cells, the implementation for\n * {@link copy} and {@link paste} can be changed as follows.\n *\n * ```javascript\n * Clipboard.copy = function(graph, cells)\n * {\n *   cells = cells || graph.getSelectionCells();\n *   var result = graph.getExportableCells(cells);\n *\n *   Clipboard.parents = new Object();\n *\n *   for (var i = 0; i < result.length; i++)\n *   {\n *     Clipboard.parents[i] = graph.model.getParent(cells[i]);\n *   }\n *\n *   Clipboard.insertCount = 1;\n *   Clipboard.setCells(graph.cloneCells(result));\n *\n *   return result;\n * };\n *\n * Clipboard.paste = function(graph)\n * {\n *   if (!Clipboard.isEmpty())\n *   {\n *     var cells = graph.getImportableCells(Clipboard.getCells());\n *     var delta = Clipboard.insertCount * Clipboard.STEPSIZE;\n *     var parent = graph.getDefaultParent();\n *\n *     graph.model.beginUpdate();\n *     try\n *     {\n *       for (var i = 0; i < cells.length; i++)\n *       {\n *         var tmp = (Clipboard.parents != null && graph.model.contains(Clipboard.parents[i])) ?\n *              Clipboard.parents[i] : parent;\n *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n *       }\n *     }\n *     finally\n *     {\n *       graph.model.endUpdate();\n *     }\n *\n *     // Increments the counter and selects the inserted cells\n *     Clipboard.insertCount++;\n *     graph.setSelectionCells(cells);\n *   }\n * };\n * ```\n */\nclass Clipboard {\n    /**\n     * Sets the cells in the clipboard. Fires a {@link mxEvent.CHANGE} event.\n     */\n    static setCells(cells) {\n        Clipboard.cells = cells;\n    }\n    /**\n     * Returns  the cells in the clipboard.\n     */\n    static getCells() {\n        return Clipboard.cells;\n    }\n    /**\n     * Returns true if the clipboard currently has not data stored.\n     */\n    static isEmpty() {\n        return !Clipboard.getCells();\n    }\n    /**\n     * Cuts the given array of {@link mxCell} from the specified graph.\n     * If cells is null then the selection cells of the graph will\n     * be used. Returns the cells that have been cut from the graph.\n     *\n     * @param graph - {@link graph} that contains the cells to be cut.\n     * @param cells - Optional array of {@link mxCell} to be cut.\n     */\n    static cut(graph, cells = []) {\n        cells = Clipboard.copy(graph, cells);\n        Clipboard.insertCount = 0;\n        Clipboard.removeCells(graph, cells);\n        return cells;\n    }\n    /**\n     * Hook to remove the given cells from the given graph after\n     * a cut operation.\n     *\n     * @param graph - {@link graph} that contains the cells to be cut.\n     * @param cells - Array of {@link mxCell} to be cut.\n     */\n    static removeCells(graph, cells) {\n        graph.removeCells(cells);\n    }\n    /**\n     * Copies the given array of {@link mxCell} from the specified\n     * graph to {@link cells}. Returns the original array of cells that has\n     * been cloned. Descendants of cells in the array are ignored.\n     *\n     * @param graph - {@link graph} that contains the cells to be copied.\n     * @param cells - Optional array of {@link mxCell} to be copied.\n     */\n    static copy(graph, cells) {\n        cells = cells || graph.getSelectionCells();\n        const result = getTopmostCells(graph.getExportableCells(cells));\n        Clipboard.insertCount = 1;\n        Clipboard.setCells(graph.cloneCells(result));\n        return result;\n    }\n    /**\n     * Pastes the {@link cells} into the specified graph restoring\n     * the relation to {@link parents}, if possible. If the parents\n     * are no longer in the graph or invisible then the\n     * cells are added to the graph's default or into the\n     * swimlane under the cell's new location if one exists.\n     * The cells are added to the graph using {@link graph.importCells}\n     * and returned.\n     *\n     * @param graph - {@link graph} to paste the {@link cells} into.\n     */\n    static paste(graph) {\n        let cells = null;\n        if (!Clipboard.isEmpty() && Clipboard.getCells()) {\n            cells = graph.getImportableCells(Clipboard.getCells());\n            const delta = Clipboard.insertCount * Clipboard.STEPSIZE;\n            const parent = graph.getDefaultParent();\n            cells = graph.importCells(cells, delta, delta, parent);\n            // Increments the counter and selects the inserted cells\n            Clipboard.insertCount++;\n            graph.setSelectionCells(cells);\n        }\n        return cells;\n    }\n}\n/**\n * Defines the step size to offset the cells after each paste operation.\n * Default is 10.\n */\nClipboard.STEPSIZE = 10;\n/**\n * Counts the number of times the clipboard data has been inserted.\n */\nClipboard.insertCount = 1;\nexport default Clipboard;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,CAAC;EACZ;AACJ;AACA;EACI,OAAOC,QAAQA,CAACC,KAAK,EAAE;IACnBF,SAAS,CAACE,KAAK,GAAGA,KAAK;EAC3B;EACA;AACJ;AACA;EACI,OAAOC,QAAQA,CAAA,EAAG;IACd,OAAOH,SAAS,CAACE,KAAK;EAC1B;EACA;AACJ;AACA;EACI,OAAOE,OAAOA,CAAA,EAAG;IACb,OAAO,CAACJ,SAAS,CAACG,QAAQ,CAAC,CAAC;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOE,GAAGA,CAACC,KAAK,EAAc;IAAA,IAAZJ,KAAK,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IACxBL,KAAK,GAAGF,SAAS,CAACU,IAAI,CAACJ,KAAK,EAAEJ,KAAK,CAAC;IACpCF,SAAS,CAACW,WAAW,GAAG,CAAC;IACzBX,SAAS,CAACY,WAAW,CAACN,KAAK,EAAEJ,KAAK,CAAC;IACnC,OAAOA,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOU,WAAWA,CAACN,KAAK,EAAEJ,KAAK,EAAE;IAC7BI,KAAK,CAACM,WAAW,CAACV,KAAK,CAAC;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOQ,IAAIA,CAACJ,KAAK,EAAEJ,KAAK,EAAE;IACtBA,KAAK,GAAGA,KAAK,IAAII,KAAK,CAACO,iBAAiB,CAAC,CAAC;IAC1C,MAAMC,MAAM,GAAGf,eAAe,CAACO,KAAK,CAACS,kBAAkB,CAACb,KAAK,CAAC,CAAC;IAC/DF,SAAS,CAACW,WAAW,GAAG,CAAC;IACzBX,SAAS,CAACC,QAAQ,CAACK,KAAK,CAACU,UAAU,CAACF,MAAM,CAAC,CAAC;IAC5C,OAAOA,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,KAAKA,CAACX,KAAK,EAAE;IAChB,IAAIJ,KAAK,GAAG,IAAI;IAChB,IAAI,CAACF,SAAS,CAACI,OAAO,CAAC,CAAC,IAAIJ,SAAS,CAACG,QAAQ,CAAC,CAAC,EAAE;MAC9CD,KAAK,GAAGI,KAAK,CAACY,kBAAkB,CAAClB,SAAS,CAACG,QAAQ,CAAC,CAAC,CAAC;MACtD,MAAMgB,KAAK,GAAGnB,SAAS,CAACW,WAAW,GAAGX,SAAS,CAACoB,QAAQ;MACxD,MAAMC,MAAM,GAAGf,KAAK,CAACgB,gBAAgB,CAAC,CAAC;MACvCpB,KAAK,GAAGI,KAAK,CAACiB,WAAW,CAACrB,KAAK,EAAEiB,KAAK,EAAEA,KAAK,EAAEE,MAAM,CAAC;MACtD;MACArB,SAAS,CAACW,WAAW,EAAE;MACvBL,KAAK,CAACkB,iBAAiB,CAACtB,KAAK,CAAC;IAClC;IACA,OAAOA,KAAK;EAChB;AACJ;AACA;AACA;AACA;AACA;AACAF,SAAS,CAACoB,QAAQ,GAAG,EAAE;AACvB;AACA;AACA;AACApB,SAAS,CAACW,WAAW,GAAG,CAAC;AACzB,eAAeX,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
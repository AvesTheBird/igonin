{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { Extensions, overrideIdentifiersFromKey, OVERRIDE_PROPERTY_REGEX } from './configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nfunction freeze(data) {\n  return Object.isFrozen(data) ? data : objects.deepFreeze(data);\n}\nexport class ConfigurationModel {\n  static createEmptyModel(logService) {\n    return new ConfigurationModel({}, [], [], undefined, logService);\n  }\n  constructor(_contents, _keys, _overrides, raw, logService) {\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.raw = raw;\n    this.logService = logService;\n    this.overrideConfigurations = new Map();\n  }\n  get rawConfiguration() {\n    if (!this._rawConfiguration) {\n      var _this$raw;\n      if ((_this$raw = this.raw) !== null && _this$raw !== void 0 && _this$raw.length) {\n        const rawConfigurationModels = this.raw.map(raw => {\n          if (raw instanceof ConfigurationModel) {\n            return raw;\n          }\n          const parser = new ConfigurationModelParser('', this.logService);\n          parser.parseRaw(raw);\n          return parser.configurationModel;\n        });\n        this._rawConfiguration = rawConfigurationModels.reduce((previous, current) => current === previous ? current : previous.merge(current), rawConfigurationModels[0]);\n      } else {\n        // raw is same as current\n        this._rawConfiguration = this;\n      }\n    }\n    return this._rawConfiguration;\n  }\n  get contents() {\n    return this._contents;\n  }\n  get overrides() {\n    return this._overrides;\n  }\n  get keys() {\n    return this._keys;\n  }\n  isEmpty() {\n    return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n  }\n  getValue(section) {\n    return section ? getConfigurationValue(this.contents, section) : this.contents;\n  }\n  inspect(section, overrideIdentifier) {\n    const that = this;\n    return {\n      get value() {\n        return freeze(that.rawConfiguration.getValue(section));\n      },\n      get override() {\n        return overrideIdentifier ? freeze(that.rawConfiguration.getOverrideValue(section, overrideIdentifier)) : undefined;\n      },\n      get merged() {\n        return freeze(overrideIdentifier ? that.rawConfiguration.override(overrideIdentifier).getValue(section) : that.rawConfiguration.getValue(section));\n      },\n      get overrides() {\n        const overrides = [];\n        for (const {\n          contents,\n          identifiers,\n          keys\n        } of that.rawConfiguration.overrides) {\n          const value = new ConfigurationModel(contents, keys, [], undefined, that.logService).getValue(section);\n          if (value !== undefined) {\n            overrides.push({\n              identifiers,\n              value\n            });\n          }\n        }\n        return overrides.length ? freeze(overrides) : undefined;\n      }\n    };\n  }\n  getOverrideValue(section, overrideIdentifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n    return overrideContents ? section ? getConfigurationValue(overrideContents, section) : overrideContents : undefined;\n  }\n  override(identifier) {\n    let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n    if (!overrideConfigurationModel) {\n      overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n      this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n    }\n    return overrideConfigurationModel;\n  }\n  merge() {\n    var _this$raw2;\n    const contents = objects.deepClone(this.contents);\n    const overrides = objects.deepClone(this.overrides);\n    const keys = [...this.keys];\n    const raws = (_this$raw2 = this.raw) !== null && _this$raw2 !== void 0 && _this$raw2.length ? [...this.raw] : [this];\n    for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n      others[_key] = arguments[_key];\n    }\n    for (const other of others) {\n      var _other$raw;\n      raws.push(...((_other$raw = other.raw) !== null && _other$raw !== void 0 && _other$raw.length ? other.raw : [other]));\n      if (other.isEmpty()) {\n        continue;\n      }\n      this.mergeContents(contents, other.contents);\n      for (const otherOverride of other.overrides) {\n        const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n        if (override) {\n          this.mergeContents(override.contents, otherOverride.contents);\n          override.keys.push(...otherOverride.keys);\n          override.keys = arrays.distinct(override.keys);\n        } else {\n          overrides.push(objects.deepClone(otherOverride));\n        }\n      }\n      for (const key of other.keys) {\n        if (keys.indexOf(key) === -1) {\n          keys.push(key);\n        }\n      }\n    }\n    return new ConfigurationModel(contents, keys, overrides, raws.every(raw => raw instanceof ConfigurationModel) ? undefined : raws, this.logService);\n  }\n  createOverrideConfigurationModel(identifier) {\n    const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n    if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n      // If there are no valid overrides, return self\n      return this;\n    }\n    const contents = {};\n    for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n      let contentsForKey = this.contents[key];\n      const overrideContentsForKey = overrideContents[key];\n      // If there are override contents for the key, clone and merge otherwise use base contents\n      if (overrideContentsForKey) {\n        // Clone and merge only if base contents and override contents are of type object otherwise just override\n        if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n          contentsForKey = objects.deepClone(contentsForKey);\n          this.mergeContents(contentsForKey, overrideContentsForKey);\n        } else {\n          contentsForKey = overrideContentsForKey;\n        }\n      }\n      contents[key] = contentsForKey;\n    }\n    return new ConfigurationModel(contents, this.keys, this.overrides, undefined, this.logService);\n  }\n  mergeContents(source, target) {\n    for (const key of Object.keys(target)) {\n      if (key in source) {\n        if (types.isObject(source[key]) && types.isObject(target[key])) {\n          this.mergeContents(source[key], target[key]);\n          continue;\n        }\n      }\n      source[key] = objects.deepClone(target[key]);\n    }\n  }\n  getContentsForOverrideIdentifer(identifier) {\n    let contentsForIdentifierOnly = null;\n    let contents = null;\n    const mergeContents = contentsToMerge => {\n      if (contentsToMerge) {\n        if (contents) {\n          this.mergeContents(contents, contentsToMerge);\n        } else {\n          contents = objects.deepClone(contentsToMerge);\n        }\n      }\n    };\n    for (const override of this.overrides) {\n      if (override.identifiers.length === 1 && override.identifiers[0] === identifier) {\n        contentsForIdentifierOnly = override.contents;\n      } else if (override.identifiers.includes(identifier)) {\n        mergeContents(override.contents);\n      }\n    }\n    // Merge contents of the identifier only at the end to take precedence.\n    mergeContents(contentsForIdentifierOnly);\n    return contents;\n  }\n  toJSON() {\n    return {\n      contents: this.contents,\n      overrides: this.overrides,\n      keys: this.keys\n    };\n  }\n  setValue(key, value) {\n    this.updateValue(key, value, false);\n  }\n  removeValue(key) {\n    const index = this.keys.indexOf(key);\n    if (index === -1) {\n      return;\n    }\n    this.keys.splice(index, 1);\n    removeFromValueTree(this.contents, key);\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n      this.overrides.splice(this.overrides.findIndex(o => arrays.equals(o.identifiers, overrideIdentifiersFromKey(key))), 1);\n    }\n  }\n  updateValue(key, value, add) {\n    addToValueTree(this.contents, key, value, e => this.logService.error(e));\n    add = add || this.keys.indexOf(key) === -1;\n    if (add) {\n      this.keys.push(key);\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n      const identifiers = overrideIdentifiersFromKey(key);\n      const override = {\n        identifiers,\n        keys: Object.keys(this.contents[key]),\n        contents: toValuesTree(this.contents[key], message => this.logService.error(message))\n      };\n      const index = this.overrides.findIndex(o => arrays.equals(o.identifiers, identifiers));\n      if (index !== -1) {\n        this.overrides[index] = override;\n      } else {\n        this.overrides.push(override);\n      }\n    }\n  }\n}\nexport class ConfigurationModelParser {\n  constructor(_name, logService) {\n    this._name = _name;\n    this.logService = logService;\n    this._raw = null;\n    this._configurationModel = null;\n    this._restrictedConfigurations = [];\n  }\n  get configurationModel() {\n    return this._configurationModel || ConfigurationModel.createEmptyModel(this.logService);\n  }\n  parseRaw(raw, options) {\n    this._raw = raw;\n    const {\n      contents,\n      keys,\n      overrides,\n      restricted,\n      hasExcludedProperties\n    } = this.doParseRaw(raw, options);\n    this._configurationModel = new ConfigurationModel(contents, keys, overrides, hasExcludedProperties ? [raw] : undefined /* raw has not changed */, this.logService);\n    this._restrictedConfigurations = restricted || [];\n  }\n  doParseRaw(raw, options) {\n    const configurationProperties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n    const filtered = this.filter(raw, configurationProperties, true, options);\n    raw = filtered.raw;\n    const contents = toValuesTree(raw, message => this.logService.error(\"Conflict in settings file \".concat(this._name, \": \").concat(message)));\n    const keys = Object.keys(raw);\n    const overrides = this.toOverrides(raw, message => this.logService.error(\"Conflict in settings file \".concat(this._name, \": \").concat(message)));\n    return {\n      contents,\n      keys,\n      overrides,\n      restricted: filtered.restricted,\n      hasExcludedProperties: filtered.hasExcludedProperties\n    };\n  }\n  filter(properties, configurationProperties, filterOverriddenProperties, options) {\n    var _options$exclude;\n    let hasExcludedProperties = false;\n    if (!(options !== null && options !== void 0 && options.scopes) && !(options !== null && options !== void 0 && options.skipRestricted) && !(options !== null && options !== void 0 && (_options$exclude = options.exclude) !== null && _options$exclude !== void 0 && _options$exclude.length)) {\n      return {\n        raw: properties,\n        restricted: [],\n        hasExcludedProperties\n      };\n    }\n    const raw = {};\n    const restricted = [];\n    for (const key in properties) {\n      if (OVERRIDE_PROPERTY_REGEX.test(key) && filterOverriddenProperties) {\n        const result = this.filter(properties[key], configurationProperties, false, options);\n        raw[key] = result.raw;\n        hasExcludedProperties = hasExcludedProperties || result.hasExcludedProperties;\n        restricted.push(...result.restricted);\n      } else {\n        var _options$exclude2, _options$include;\n        const propertySchema = configurationProperties[key];\n        const scope = propertySchema ? typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : 3 /* ConfigurationScope.WINDOW */ : undefined;\n        if (propertySchema !== null && propertySchema !== void 0 && propertySchema.restricted) {\n          restricted.push(key);\n        }\n        if (!((_options$exclude2 = options.exclude) !== null && _options$exclude2 !== void 0 && _options$exclude2.includes(key)) /* Check exclude */ && ((_options$include = options.include) !== null && _options$include !== void 0 && _options$include.includes(key) /* Check include */ || (scope === undefined || options.scopes === undefined || options.scopes.includes(scope) /* Check scopes */) && !(options.skipRestricted && propertySchema !== null && propertySchema !== void 0 && propertySchema.restricted))) /* Check restricted */{\n            raw[key] = properties[key];\n          } else {\n          hasExcludedProperties = true;\n        }\n      }\n    }\n    return {\n      raw,\n      restricted,\n      hasExcludedProperties\n    };\n  }\n  toOverrides(raw, conflictReporter) {\n    const overrides = [];\n    for (const key of Object.keys(raw)) {\n      if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        const overrideRaw = {};\n        for (const keyInOverrideRaw in raw[key]) {\n          overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n        }\n        overrides.push({\n          identifiers: overrideIdentifiersFromKey(key),\n          keys: Object.keys(overrideRaw),\n          contents: toValuesTree(overrideRaw, conflictReporter)\n        });\n      }\n    }\n    return overrides;\n  }\n}\nclass ConfigurationInspectValue {\n  constructor(key, overrides, _value, overrideIdentifiers, defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, localUserConfiguration, remoteUserConfiguration, workspaceConfiguration, folderConfigurationModel, memoryConfigurationModel) {\n    this.key = key;\n    this.overrides = overrides;\n    this._value = _value;\n    this.overrideIdentifiers = overrideIdentifiers;\n    this.defaultConfiguration = defaultConfiguration;\n    this.policyConfiguration = policyConfiguration;\n    this.applicationConfiguration = applicationConfiguration;\n    this.userConfiguration = userConfiguration;\n    this.localUserConfiguration = localUserConfiguration;\n    this.remoteUserConfiguration = remoteUserConfiguration;\n    this.workspaceConfiguration = workspaceConfiguration;\n    this.folderConfigurationModel = folderConfigurationModel;\n    this.memoryConfigurationModel = memoryConfigurationModel;\n  }\n  toInspectValue(inspectValue) {\n    return (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.value) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.override) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.overrides) !== undefined ? inspectValue : undefined;\n  }\n  get userInspectValue() {\n    if (!this._userInspectValue) {\n      this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier);\n    }\n    return this._userInspectValue;\n  }\n  get user() {\n    return this.toInspectValue(this.userInspectValue);\n  }\n}\nexport class Configuration {\n  constructor(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration, _remoteUserConfiguration, _workspaceConfiguration, _folderConfigurations, _memoryConfiguration, _memoryConfigurationByResource, logService) {\n    this._defaultConfiguration = _defaultConfiguration;\n    this._policyConfiguration = _policyConfiguration;\n    this._applicationConfiguration = _applicationConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this.logService = logService;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n    this._userConfiguration = null;\n  }\n  getValue(section, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);\n    return consolidateConfigurationModel.getValue(section);\n  }\n  updateValue(key, value) {\n    let overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let memoryConfiguration;\n    if (overrides.resource) {\n      memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n      if (!memoryConfiguration) {\n        memoryConfiguration = ConfigurationModel.createEmptyModel(this.logService);\n        this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n      }\n    } else {\n      memoryConfiguration = this._memoryConfiguration;\n    }\n    if (value === undefined) {\n      memoryConfiguration.removeValue(key);\n    } else {\n      memoryConfiguration.setValue(key, value);\n    }\n    if (!overrides.resource) {\n      this._workspaceConsolidatedConfiguration = null;\n    }\n  }\n  inspect(key, overrides, workspace) {\n    const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);\n    const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n    const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n    const overrideIdentifiers = new Set();\n    for (const override of consolidateConfigurationModel.overrides) {\n      for (const overrideIdentifier of override.identifiers) {\n        if (consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined) {\n          overrideIdentifiers.add(overrideIdentifier);\n        }\n      }\n    }\n    return new ConfigurationInspectValue(key, overrides, consolidateConfigurationModel.getValue(key), overrideIdentifiers.size ? [...overrideIdentifiers] : undefined, this._defaultConfiguration, this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration, this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration, this.userConfiguration, this.localUserConfiguration, this.remoteUserConfiguration, workspace ? this._workspaceConfiguration : undefined, folderConfigurationModel ? folderConfigurationModel : undefined, memoryConfigurationModel);\n  }\n  get applicationConfiguration() {\n    return this._applicationConfiguration;\n  }\n  get userConfiguration() {\n    if (!this._userConfiguration) {\n      this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n    }\n    return this._userConfiguration;\n  }\n  get localUserConfiguration() {\n    return this._localUserConfiguration;\n  }\n  get remoteUserConfiguration() {\n    return this._remoteUserConfiguration;\n  }\n  getConsolidatedConfigurationModel(section, overrides, workspace) {\n    let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n    if (overrides.overrideIdentifier) {\n      configurationModel = configurationModel.override(overrides.overrideIdentifier);\n    }\n    if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {\n      configurationModel = configurationModel.merge(this._policyConfiguration);\n    }\n    return configurationModel;\n  }\n  getConsolidatedConfigurationModelForResource(_ref, workspace) {\n    let {\n      resource\n    } = _ref;\n    let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n      if (root) {\n        consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n      }\n      const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n      if (memoryConfigurationForResource) {\n        consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n      }\n    }\n    return consolidateConfiguration;\n  }\n  getWorkspaceConsolidatedConfiguration() {\n    if (!this._workspaceConsolidatedConfiguration) {\n      this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n    }\n    return this._workspaceConsolidatedConfiguration;\n  }\n  getFolderConsolidatedConfiguration(folder) {\n    let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n    if (!folderConsolidatedConfiguration) {\n      const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n      const folderConfiguration = this._folderConfigurations.get(folder);\n      if (folderConfiguration) {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n        this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n      } else {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n      }\n    }\n    return folderConsolidatedConfiguration;\n  }\n  getFolderConfigurationModelForResource(resource, workspace) {\n    if (workspace && resource) {\n      const root = workspace.getFolder(resource);\n      if (root) {\n        return this._folderConfigurations.get(root.uri);\n      }\n    }\n    return undefined;\n  }\n  toData() {\n    return {\n      defaults: {\n        contents: this._defaultConfiguration.contents,\n        overrides: this._defaultConfiguration.overrides,\n        keys: this._defaultConfiguration.keys\n      },\n      policy: {\n        contents: this._policyConfiguration.contents,\n        overrides: this._policyConfiguration.overrides,\n        keys: this._policyConfiguration.keys\n      },\n      application: {\n        contents: this.applicationConfiguration.contents,\n        overrides: this.applicationConfiguration.overrides,\n        keys: this.applicationConfiguration.keys\n      },\n      user: {\n        contents: this.userConfiguration.contents,\n        overrides: this.userConfiguration.overrides,\n        keys: this.userConfiguration.keys\n      },\n      workspace: {\n        contents: this._workspaceConfiguration.contents,\n        overrides: this._workspaceConfiguration.overrides,\n        keys: this._workspaceConfiguration.keys\n      },\n      folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n        const {\n          contents,\n          overrides,\n          keys\n        } = this._folderConfigurations.get(folder);\n        result.push([folder, {\n          contents,\n          overrides,\n          keys\n        }]);\n        return result;\n      }, [])\n    };\n  }\n  static parse(data, logService) {\n    const defaultConfiguration = this.parseConfigurationModel(data.defaults, logService);\n    const policyConfiguration = this.parseConfigurationModel(data.policy, logService);\n    const applicationConfiguration = this.parseConfigurationModel(data.application, logService);\n    const userConfiguration = this.parseConfigurationModel(data.user, logService);\n    const workspaceConfiguration = this.parseConfigurationModel(data.workspace, logService);\n    const folders = data.folders.reduce((result, value) => {\n      result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1], logService));\n      return result;\n    }, new ResourceMap());\n    return new Configuration(defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, ConfigurationModel.createEmptyModel(logService), workspaceConfiguration, folders, ConfigurationModel.createEmptyModel(logService), new ResourceMap(), logService);\n  }\n  static parseConfigurationModel(model, logService) {\n    return new ConfigurationModel(model.contents, model.keys, model.overrides, undefined, logService);\n  }\n}\nexport class ConfigurationChangeEvent {\n  constructor(change, previous, currentConfiguraiton, currentWorkspace, logService) {\n    this.change = change;\n    this.previous = previous;\n    this.currentConfiguraiton = currentConfiguraiton;\n    this.currentWorkspace = currentWorkspace;\n    this.logService = logService;\n    this._marker = '\\n';\n    this._markerCode1 = this._marker.charCodeAt(0);\n    this._markerCode2 = '.'.charCodeAt(0);\n    this.affectedKeys = new Set();\n    this._previousConfiguration = undefined;\n    for (const key of change.keys) {\n      this.affectedKeys.add(key);\n    }\n    for (const [, keys] of change.overrides) {\n      for (const key of keys) {\n        this.affectedKeys.add(key);\n      }\n    }\n    // Example: '\\nfoo.bar\\nabc.def\\n'\n    this._affectsConfigStr = this._marker;\n    for (const key of this.affectedKeys) {\n      this._affectsConfigStr += key + this._marker;\n    }\n  }\n  get previousConfiguration() {\n    if (!this._previousConfiguration && this.previous) {\n      this._previousConfiguration = Configuration.parse(this.previous.data, this.logService);\n    }\n    return this._previousConfiguration;\n  }\n  affectsConfiguration(section, overrides) {\n    // we have one large string with all keys that have changed. we pad (marker) the section\n    // and check that either find it padded or before a segment character\n    const needle = this._marker + section;\n    const idx = this._affectsConfigStr.indexOf(needle);\n    if (idx < 0) {\n      // NOT: (marker + section)\n      return false;\n    }\n    const pos = idx + needle.length;\n    if (pos >= this._affectsConfigStr.length) {\n      return false;\n    }\n    const code = this._affectsConfigStr.charCodeAt(pos);\n    if (code !== this._markerCode1 && code !== this._markerCode2) {\n      // NOT: section + (marker | segment)\n      return false;\n    }\n    if (overrides) {\n      var _this$previous;\n      const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_this$previous = this.previous) === null || _this$previous === void 0 ? void 0 : _this$previous.workspace) : undefined;\n      const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n      return !objects.equals(value1, value2);\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["arrays","ResourceMap","objects","types","URI","addToValueTree","getConfigurationValue","removeFromValueTree","toValuesTree","Extensions","overrideIdentifiersFromKey","OVERRIDE_PROPERTY_REGEX","Registry","freeze","data","Object","isFrozen","deepFreeze","ConfigurationModel","createEmptyModel","logService","undefined","constructor","_contents","_keys","_overrides","raw","overrideConfigurations","Map","rawConfiguration","_rawConfiguration","_this$raw","length","rawConfigurationModels","map","parser","ConfigurationModelParser","parseRaw","configurationModel","reduce","previous","current","merge","contents","overrides","keys","isEmpty","getValue","section","inspect","overrideIdentifier","that","value","override","getOverrideValue","merged","identifiers","push","overrideContents","getContentsForOverrideIdentifer","identifier","overrideConfigurationModel","get","createOverrideConfigurationModel","set","_this$raw2","deepClone","raws","_len","arguments","others","Array","_key","other","_other$raw","mergeContents","otherOverride","filter","o","equals","distinct","key","indexOf","every","contentsForKey","overrideContentsForKey","source","target","isObject","contentsForIdentifierOnly","contentsToMerge","includes","toJSON","setValue","updateValue","removeValue","index","splice","test","findIndex","add","e","error","message","_name","_raw","_configurationModel","_restrictedConfigurations","options","restricted","hasExcludedProperties","doParseRaw","configurationProperties","as","Configuration","getConfigurationProperties","filtered","concat","toOverrides","properties","filterOverriddenProperties","_options$exclude","scopes","skipRestricted","exclude","result","_options$exclude2","_options$include","propertySchema","scope","include","conflictReporter","overrideRaw","keyInOverrideRaw","ConfigurationInspectValue","_value","overrideIdentifiers","defaultConfiguration","policyConfiguration","applicationConfiguration","userConfiguration","localUserConfiguration","remoteUserConfiguration","workspaceConfiguration","folderConfigurationModel","memoryConfigurationModel","toInspectValue","inspectValue","userInspectValue","_userInspectValue","user","_defaultConfiguration","_policyConfiguration","_applicationConfiguration","_localUserConfiguration","_remoteUserConfiguration","_workspaceConfiguration","_folderConfigurations","_memoryConfiguration","_memoryConfigurationByResource","_workspaceConsolidatedConfiguration","_foldersConsolidatedConfigurations","_userConfiguration","workspace","consolidateConfigurationModel","getConsolidatedConfigurationModel","memoryConfiguration","resource","getFolderConfigurationModelForResource","Set","size","getConsolidatedConfigurationModelForResource","_ref","consolidateConfiguration","getWorkspaceConsolidatedConfiguration","root","getFolder","getFolderConsolidatedConfiguration","uri","memoryConfigurationForResource","folder","folderConsolidatedConfiguration","workspaceConsolidateConfiguration","folderConfiguration","toData","defaults","policy","application","folders","parse","parseConfigurationModel","revive","model","ConfigurationChangeEvent","change","currentConfiguraiton","currentWorkspace","_marker","_markerCode1","charCodeAt","_markerCode2","affectedKeys","_previousConfiguration","_affectsConfigStr","previousConfiguration","affectsConfiguration","needle","idx","pos","code","_this$previous","value1","value2"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { Extensions, overrideIdentifiersFromKey, OVERRIDE_PROPERTY_REGEX } from './configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nfunction freeze(data) {\n    return Object.isFrozen(data) ? data : objects.deepFreeze(data);\n}\nexport class ConfigurationModel {\n    static createEmptyModel(logService) {\n        return new ConfigurationModel({}, [], [], undefined, logService);\n    }\n    constructor(_contents, _keys, _overrides, raw, logService) {\n        this._contents = _contents;\n        this._keys = _keys;\n        this._overrides = _overrides;\n        this.raw = raw;\n        this.logService = logService;\n        this.overrideConfigurations = new Map();\n    }\n    get rawConfiguration() {\n        if (!this._rawConfiguration) {\n            if (this.raw?.length) {\n                const rawConfigurationModels = this.raw.map(raw => {\n                    if (raw instanceof ConfigurationModel) {\n                        return raw;\n                    }\n                    const parser = new ConfigurationModelParser('', this.logService);\n                    parser.parseRaw(raw);\n                    return parser.configurationModel;\n                });\n                this._rawConfiguration = rawConfigurationModels.reduce((previous, current) => current === previous ? current : previous.merge(current), rawConfigurationModels[0]);\n            }\n            else {\n                // raw is same as current\n                this._rawConfiguration = this;\n            }\n        }\n        return this._rawConfiguration;\n    }\n    get contents() {\n        return this._contents;\n    }\n    get overrides() {\n        return this._overrides;\n    }\n    get keys() {\n        return this._keys;\n    }\n    isEmpty() {\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    }\n    getValue(section) {\n        return section ? getConfigurationValue(this.contents, section) : this.contents;\n    }\n    inspect(section, overrideIdentifier) {\n        const that = this;\n        return {\n            get value() {\n                return freeze(that.rawConfiguration.getValue(section));\n            },\n            get override() {\n                return overrideIdentifier ? freeze(that.rawConfiguration.getOverrideValue(section, overrideIdentifier)) : undefined;\n            },\n            get merged() {\n                return freeze(overrideIdentifier ? that.rawConfiguration.override(overrideIdentifier).getValue(section) : that.rawConfiguration.getValue(section));\n            },\n            get overrides() {\n                const overrides = [];\n                for (const { contents, identifiers, keys } of that.rawConfiguration.overrides) {\n                    const value = new ConfigurationModel(contents, keys, [], undefined, that.logService).getValue(section);\n                    if (value !== undefined) {\n                        overrides.push({ identifiers, value });\n                    }\n                }\n                return overrides.length ? freeze(overrides) : undefined;\n            }\n        };\n    }\n    getOverrideValue(section, overrideIdentifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n        return overrideContents\n            ? section ? getConfigurationValue(overrideContents, section) : overrideContents\n            : undefined;\n    }\n    override(identifier) {\n        let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n        if (!overrideConfigurationModel) {\n            overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n            this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n        }\n        return overrideConfigurationModel;\n    }\n    merge(...others) {\n        const contents = objects.deepClone(this.contents);\n        const overrides = objects.deepClone(this.overrides);\n        const keys = [...this.keys];\n        const raws = this.raw?.length ? [...this.raw] : [this];\n        for (const other of others) {\n            raws.push(...(other.raw?.length ? other.raw : [other]));\n            if (other.isEmpty()) {\n                continue;\n            }\n            this.mergeContents(contents, other.contents);\n            for (const otherOverride of other.overrides) {\n                const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n                if (override) {\n                    this.mergeContents(override.contents, otherOverride.contents);\n                    override.keys.push(...otherOverride.keys);\n                    override.keys = arrays.distinct(override.keys);\n                }\n                else {\n                    overrides.push(objects.deepClone(otherOverride));\n                }\n            }\n            for (const key of other.keys) {\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n            }\n        }\n        return new ConfigurationModel(contents, keys, overrides, raws.every(raw => raw instanceof ConfigurationModel) ? undefined : raws, this.logService);\n    }\n    createOverrideConfigurationModel(identifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n            // If there are no valid overrides, return self\n            return this;\n        }\n        const contents = {};\n        for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n            let contentsForKey = this.contents[key];\n            const overrideContentsForKey = overrideContents[key];\n            // If there are override contents for the key, clone and merge otherwise use base contents\n            if (overrideContentsForKey) {\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n                    contentsForKey = objects.deepClone(contentsForKey);\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\n                }\n                else {\n                    contentsForKey = overrideContentsForKey;\n                }\n            }\n            contents[key] = contentsForKey;\n        }\n        return new ConfigurationModel(contents, this.keys, this.overrides, undefined, this.logService);\n    }\n    mergeContents(source, target) {\n        for (const key of Object.keys(target)) {\n            if (key in source) {\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\n                    this.mergeContents(source[key], target[key]);\n                    continue;\n                }\n            }\n            source[key] = objects.deepClone(target[key]);\n        }\n    }\n    getContentsForOverrideIdentifer(identifier) {\n        let contentsForIdentifierOnly = null;\n        let contents = null;\n        const mergeContents = (contentsToMerge) => {\n            if (contentsToMerge) {\n                if (contents) {\n                    this.mergeContents(contents, contentsToMerge);\n                }\n                else {\n                    contents = objects.deepClone(contentsToMerge);\n                }\n            }\n        };\n        for (const override of this.overrides) {\n            if (override.identifiers.length === 1 && override.identifiers[0] === identifier) {\n                contentsForIdentifierOnly = override.contents;\n            }\n            else if (override.identifiers.includes(identifier)) {\n                mergeContents(override.contents);\n            }\n        }\n        // Merge contents of the identifier only at the end to take precedence.\n        mergeContents(contentsForIdentifierOnly);\n        return contents;\n    }\n    toJSON() {\n        return {\n            contents: this.contents,\n            overrides: this.overrides,\n            keys: this.keys\n        };\n    }\n    setValue(key, value) {\n        this.updateValue(key, value, false);\n    }\n    removeValue(key) {\n        const index = this.keys.indexOf(key);\n        if (index === -1) {\n            return;\n        }\n        this.keys.splice(index, 1);\n        removeFromValueTree(this.contents, key);\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n            this.overrides.splice(this.overrides.findIndex(o => arrays.equals(o.identifiers, overrideIdentifiersFromKey(key))), 1);\n        }\n    }\n    updateValue(key, value, add) {\n        addToValueTree(this.contents, key, value, e => this.logService.error(e));\n        add = add || this.keys.indexOf(key) === -1;\n        if (add) {\n            this.keys.push(key);\n        }\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n            const identifiers = overrideIdentifiersFromKey(key);\n            const override = {\n                identifiers,\n                keys: Object.keys(this.contents[key]),\n                contents: toValuesTree(this.contents[key], message => this.logService.error(message)),\n            };\n            const index = this.overrides.findIndex(o => arrays.equals(o.identifiers, identifiers));\n            if (index !== -1) {\n                this.overrides[index] = override;\n            }\n            else {\n                this.overrides.push(override);\n            }\n        }\n    }\n}\nexport class ConfigurationModelParser {\n    constructor(_name, logService) {\n        this._name = _name;\n        this.logService = logService;\n        this._raw = null;\n        this._configurationModel = null;\n        this._restrictedConfigurations = [];\n    }\n    get configurationModel() {\n        return this._configurationModel || ConfigurationModel.createEmptyModel(this.logService);\n    }\n    parseRaw(raw, options) {\n        this._raw = raw;\n        const { contents, keys, overrides, restricted, hasExcludedProperties } = this.doParseRaw(raw, options);\n        this._configurationModel = new ConfigurationModel(contents, keys, overrides, hasExcludedProperties ? [raw] : undefined /* raw has not changed */, this.logService);\n        this._restrictedConfigurations = restricted || [];\n    }\n    doParseRaw(raw, options) {\n        const configurationProperties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n        const filtered = this.filter(raw, configurationProperties, true, options);\n        raw = filtered.raw;\n        const contents = toValuesTree(raw, message => this.logService.error(`Conflict in settings file ${this._name}: ${message}`));\n        const keys = Object.keys(raw);\n        const overrides = this.toOverrides(raw, message => this.logService.error(`Conflict in settings file ${this._name}: ${message}`));\n        return { contents, keys, overrides, restricted: filtered.restricted, hasExcludedProperties: filtered.hasExcludedProperties };\n    }\n    filter(properties, configurationProperties, filterOverriddenProperties, options) {\n        let hasExcludedProperties = false;\n        if (!options?.scopes && !options?.skipRestricted && !options?.exclude?.length) {\n            return { raw: properties, restricted: [], hasExcludedProperties };\n        }\n        const raw = {};\n        const restricted = [];\n        for (const key in properties) {\n            if (OVERRIDE_PROPERTY_REGEX.test(key) && filterOverriddenProperties) {\n                const result = this.filter(properties[key], configurationProperties, false, options);\n                raw[key] = result.raw;\n                hasExcludedProperties = hasExcludedProperties || result.hasExcludedProperties;\n                restricted.push(...result.restricted);\n            }\n            else {\n                const propertySchema = configurationProperties[key];\n                const scope = propertySchema ? typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : 3 /* ConfigurationScope.WINDOW */ : undefined;\n                if (propertySchema?.restricted) {\n                    restricted.push(key);\n                }\n                if (!options.exclude?.includes(key) /* Check exclude */\n                    && (options.include?.includes(key) /* Check include */\n                        || ((scope === undefined || options.scopes === undefined || options.scopes.includes(scope)) /* Check scopes */\n                            && !(options.skipRestricted && propertySchema?.restricted)))) /* Check restricted */ {\n                    raw[key] = properties[key];\n                }\n                else {\n                    hasExcludedProperties = true;\n                }\n            }\n        }\n        return { raw, restricted, hasExcludedProperties };\n    }\n    toOverrides(raw, conflictReporter) {\n        const overrides = [];\n        for (const key of Object.keys(raw)) {\n            if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                const overrideRaw = {};\n                for (const keyInOverrideRaw in raw[key]) {\n                    overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n                }\n                overrides.push({\n                    identifiers: overrideIdentifiersFromKey(key),\n                    keys: Object.keys(overrideRaw),\n                    contents: toValuesTree(overrideRaw, conflictReporter)\n                });\n            }\n        }\n        return overrides;\n    }\n}\nclass ConfigurationInspectValue {\n    constructor(key, overrides, _value, overrideIdentifiers, defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, localUserConfiguration, remoteUserConfiguration, workspaceConfiguration, folderConfigurationModel, memoryConfigurationModel) {\n        this.key = key;\n        this.overrides = overrides;\n        this._value = _value;\n        this.overrideIdentifiers = overrideIdentifiers;\n        this.defaultConfiguration = defaultConfiguration;\n        this.policyConfiguration = policyConfiguration;\n        this.applicationConfiguration = applicationConfiguration;\n        this.userConfiguration = userConfiguration;\n        this.localUserConfiguration = localUserConfiguration;\n        this.remoteUserConfiguration = remoteUserConfiguration;\n        this.workspaceConfiguration = workspaceConfiguration;\n        this.folderConfigurationModel = folderConfigurationModel;\n        this.memoryConfigurationModel = memoryConfigurationModel;\n    }\n    toInspectValue(inspectValue) {\n        return inspectValue?.value !== undefined || inspectValue?.override !== undefined || inspectValue?.overrides !== undefined ? inspectValue : undefined;\n    }\n    get userInspectValue() {\n        if (!this._userInspectValue) {\n            this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier);\n        }\n        return this._userInspectValue;\n    }\n    get user() {\n        return this.toInspectValue(this.userInspectValue);\n    }\n}\nexport class Configuration {\n    constructor(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration, _remoteUserConfiguration, _workspaceConfiguration, _folderConfigurations, _memoryConfiguration, _memoryConfigurationByResource, logService) {\n        this._defaultConfiguration = _defaultConfiguration;\n        this._policyConfiguration = _policyConfiguration;\n        this._applicationConfiguration = _applicationConfiguration;\n        this._localUserConfiguration = _localUserConfiguration;\n        this._remoteUserConfiguration = _remoteUserConfiguration;\n        this._workspaceConfiguration = _workspaceConfiguration;\n        this._folderConfigurations = _folderConfigurations;\n        this._memoryConfiguration = _memoryConfiguration;\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\n        this.logService = logService;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations = new ResourceMap();\n        this._userConfiguration = null;\n    }\n    getValue(section, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);\n        return consolidateConfigurationModel.getValue(section);\n    }\n    updateValue(key, value, overrides = {}) {\n        let memoryConfiguration;\n        if (overrides.resource) {\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n            if (!memoryConfiguration) {\n                memoryConfiguration = ConfigurationModel.createEmptyModel(this.logService);\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n            }\n        }\n        else {\n            memoryConfiguration = this._memoryConfiguration;\n        }\n        if (value === undefined) {\n            memoryConfiguration.removeValue(key);\n        }\n        else {\n            memoryConfiguration.setValue(key, value);\n        }\n        if (!overrides.resource) {\n            this._workspaceConsolidatedConfiguration = null;\n        }\n    }\n    inspect(key, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);\n        const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n        const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n        const overrideIdentifiers = new Set();\n        for (const override of consolidateConfigurationModel.overrides) {\n            for (const overrideIdentifier of override.identifiers) {\n                if (consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined) {\n                    overrideIdentifiers.add(overrideIdentifier);\n                }\n            }\n        }\n        return new ConfigurationInspectValue(key, overrides, consolidateConfigurationModel.getValue(key), overrideIdentifiers.size ? [...overrideIdentifiers] : undefined, this._defaultConfiguration, this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration, this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration, this.userConfiguration, this.localUserConfiguration, this.remoteUserConfiguration, workspace ? this._workspaceConfiguration : undefined, folderConfigurationModel ? folderConfigurationModel : undefined, memoryConfigurationModel);\n    }\n    get applicationConfiguration() {\n        return this._applicationConfiguration;\n    }\n    get userConfiguration() {\n        if (!this._userConfiguration) {\n            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n        }\n        return this._userConfiguration;\n    }\n    get localUserConfiguration() {\n        return this._localUserConfiguration;\n    }\n    get remoteUserConfiguration() {\n        return this._remoteUserConfiguration;\n    }\n    getConsolidatedConfigurationModel(section, overrides, workspace) {\n        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n        if (overrides.overrideIdentifier) {\n            configurationModel = configurationModel.override(overrides.overrideIdentifier);\n        }\n        if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {\n            configurationModel = configurationModel.merge(this._policyConfiguration);\n        }\n        return configurationModel;\n    }\n    getConsolidatedConfigurationModelForResource({ resource }, workspace) {\n        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n            }\n            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n            if (memoryConfigurationForResource) {\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n            }\n        }\n        return consolidateConfiguration;\n    }\n    getWorkspaceConsolidatedConfiguration() {\n        if (!this._workspaceConsolidatedConfiguration) {\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n        }\n        return this._workspaceConsolidatedConfiguration;\n    }\n    getFolderConsolidatedConfiguration(folder) {\n        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n        if (!folderConsolidatedConfiguration) {\n            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n            const folderConfiguration = this._folderConfigurations.get(folder);\n            if (folderConfiguration) {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n            }\n            else {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n            }\n        }\n        return folderConsolidatedConfiguration;\n    }\n    getFolderConfigurationModelForResource(resource, workspace) {\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                return this._folderConfigurations.get(root.uri);\n            }\n        }\n        return undefined;\n    }\n    toData() {\n        return {\n            defaults: {\n                contents: this._defaultConfiguration.contents,\n                overrides: this._defaultConfiguration.overrides,\n                keys: this._defaultConfiguration.keys\n            },\n            policy: {\n                contents: this._policyConfiguration.contents,\n                overrides: this._policyConfiguration.overrides,\n                keys: this._policyConfiguration.keys\n            },\n            application: {\n                contents: this.applicationConfiguration.contents,\n                overrides: this.applicationConfiguration.overrides,\n                keys: this.applicationConfiguration.keys\n            },\n            user: {\n                contents: this.userConfiguration.contents,\n                overrides: this.userConfiguration.overrides,\n                keys: this.userConfiguration.keys\n            },\n            workspace: {\n                contents: this._workspaceConfiguration.contents,\n                overrides: this._workspaceConfiguration.overrides,\n                keys: this._workspaceConfiguration.keys\n            },\n            folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n                const { contents, overrides, keys } = this._folderConfigurations.get(folder);\n                result.push([folder, { contents, overrides, keys }]);\n                return result;\n            }, [])\n        };\n    }\n    static parse(data, logService) {\n        const defaultConfiguration = this.parseConfigurationModel(data.defaults, logService);\n        const policyConfiguration = this.parseConfigurationModel(data.policy, logService);\n        const applicationConfiguration = this.parseConfigurationModel(data.application, logService);\n        const userConfiguration = this.parseConfigurationModel(data.user, logService);\n        const workspaceConfiguration = this.parseConfigurationModel(data.workspace, logService);\n        const folders = data.folders.reduce((result, value) => {\n            result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1], logService));\n            return result;\n        }, new ResourceMap());\n        return new Configuration(defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, ConfigurationModel.createEmptyModel(logService), workspaceConfiguration, folders, ConfigurationModel.createEmptyModel(logService), new ResourceMap(), logService);\n    }\n    static parseConfigurationModel(model, logService) {\n        return new ConfigurationModel(model.contents, model.keys, model.overrides, undefined, logService);\n    }\n}\nexport class ConfigurationChangeEvent {\n    constructor(change, previous, currentConfiguraiton, currentWorkspace, logService) {\n        this.change = change;\n        this.previous = previous;\n        this.currentConfiguraiton = currentConfiguraiton;\n        this.currentWorkspace = currentWorkspace;\n        this.logService = logService;\n        this._marker = '\\n';\n        this._markerCode1 = this._marker.charCodeAt(0);\n        this._markerCode2 = '.'.charCodeAt(0);\n        this.affectedKeys = new Set();\n        this._previousConfiguration = undefined;\n        for (const key of change.keys) {\n            this.affectedKeys.add(key);\n        }\n        for (const [, keys] of change.overrides) {\n            for (const key of keys) {\n                this.affectedKeys.add(key);\n            }\n        }\n        // Example: '\\nfoo.bar\\nabc.def\\n'\n        this._affectsConfigStr = this._marker;\n        for (const key of this.affectedKeys) {\n            this._affectsConfigStr += key + this._marker;\n        }\n    }\n    get previousConfiguration() {\n        if (!this._previousConfiguration && this.previous) {\n            this._previousConfiguration = Configuration.parse(this.previous.data, this.logService);\n        }\n        return this._previousConfiguration;\n    }\n    affectsConfiguration(section, overrides) {\n        // we have one large string with all keys that have changed. we pad (marker) the section\n        // and check that either find it padded or before a segment character\n        const needle = this._marker + section;\n        const idx = this._affectsConfigStr.indexOf(needle);\n        if (idx < 0) {\n            // NOT: (marker + section)\n            return false;\n        }\n        const pos = idx + needle.length;\n        if (pos >= this._affectsConfigStr.length) {\n            return false;\n        }\n        const code = this._affectsConfigStr.charCodeAt(pos);\n        if (code !== this._markerCode1 && code !== this._markerCode2) {\n            // NOT: section + (marker | segment)\n            return false;\n        }\n        if (overrides) {\n            const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, this.previous?.workspace) : undefined;\n            const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n            return !objects.equals(value1, value2);\n        }\n        return true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
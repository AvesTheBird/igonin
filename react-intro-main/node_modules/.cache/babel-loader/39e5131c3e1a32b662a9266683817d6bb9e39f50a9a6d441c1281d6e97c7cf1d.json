{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\old\\\\react\\\\react-intro\\\\src\\\\components\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { popup, ModelXmlSerializer, domUtils, styleUtils, mathUtils, cloneUtils, eventUtils, Graph, InternalEvent, RubberBandHandler, ConnectionHandler, ConnectionConstraint, Point, CylinderShape, CellRenderer, DomHelpers, EdgeStyle, Rectangle, EdgeHandler, StyleRegistry, EdgeSegmentHandler, UndoManager, CellEditorHandler, ConstraintHandler, Guide, ImageBox, GraphView, SelectionHandler, PanningHandler, TooltipHandler, SelectionCellsHandler, PopupMenuHandler, xmlUtils, Codec } from '@maxgraph/core';\nimport { contextMenuTypes, contextMenuValues, globalTypes, globalValues, rubberBandTypes, rubberBandValues } from './shared/args.js';\nimport { createGraphContainer } from './shared/configure.js';\nimport { useState } from 'react';\n// style required by RubberBand\nimport '@maxgraph/core/css/common.css';\nimport \"./file-uploader.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FileUploader = () => {\n  _s();\n  const [xmlContent, setXmlContent] = useState(null);\n  const handleOnChange = event => {\n    event.preventDefault();\n    if (event.target.files && event.target.files.length) {\n      const file = event.target.files[0];\n      if (file.name.endsWith('.xml')) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          const content = event.target.result;\n          setXmlContent(content);\n          console.log(\"XML файл загружен и сохранен внутри компонента.\");\n        };\n        reader.readAsText(file);\n      } else {\n        console.log(\"Пожалуйста, выберите файл с расширением .xml\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"file-uploader\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"file-loader-button\",\n      className: \"file-uploader__custom-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"file-loader-button\",\n      type: \"file\",\n      accept: \".xml\",\n      className: \"file-uploader__upload-button\",\n      onChange: handleOnChange,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), xmlContent && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-uploader__xml-content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUploader, \"siRdDXlOmpULsO/ORFJyUVnsUCw=\");\n_c = FileUploader;\nfunction YourComponent() {\n  _s2();\n  const graphContainerRef = useRef(null);\n  useEffect(() => {\n    const graphContainer = graphContainerRef.current;\n    const parentContainer = document.createElement('div');\n    const container = createGraphContainer({\n      imageUrl: 'images/grid.gif'\n    });\n    parentContainer.appendChild(container);\n\n    // Changes some default colors\n    // TODO Find a way of modifying globally or setting locally! See https://github.com/maxGraph/maxGraph/issues/192\n    //constants.SHADOWCOLOR = '#C0C0C0';\n\n    let joinNodeSize = 7;\n    let strokeWidth = 2;\n    class MyCustomGraph extends Graph {\n      constructor(...args) {\n        super(...args);\n        this.resetEdgesOnConnect = false;\n      }\n      createEdgeSegmentHandler(state) {\n        return new MyCustomEdgeSegmentHandler(state);\n      }\n      createGraphView() {\n        return new MyCustomGraphView(this);\n      }\n      createEdgeHandler(state) {\n        return new MyCustomEdgeHandler(state);\n      }\n      createHandler(state) {\n        let result = null;\n        if (state != null) {\n          if (state.cell.isEdge()) {\n            let style = this.view.getEdgeStyle(state);\n            if (style == EdgeStyle.WireConnector) {\n              return new EdgeSegmentHandler(state);\n            }\n          }\n        }\n        return super.createHandler.apply(this, arguments);\n      }\n\n      // Adds oval markers for edge-to-edge connections.\n      getCellStyle(cell) {\n        let style = super.getCellStyle.apply(this, arguments);\n        if (style != null && cell !== null && cell !== void 0 && cell.isEdge()) {\n          var _cell$getTerminal, _cell$getTerminal2;\n          style = cloneUtils.clone(style);\n          if ((_cell$getTerminal = cell.getTerminal(true)) !== null && _cell$getTerminal !== void 0 && _cell$getTerminal.isEdge()) {\n            style.startArrow = 'oval';\n          }\n          if ((_cell$getTerminal2 = cell.getTerminal(false)) !== null && _cell$getTerminal2 !== void 0 && _cell$getTerminal2.isEdge()) {\n            style.endArrow = 'oval';\n          }\n        }\n        return style;\n      }\n      getTooltipForCell(cell) {\n        let tip = '';\n        if (cell != null) {\n          let src = cell.getTerminal(true);\n          if (src != null) {\n            tip += this.getTooltipForCell(src) + ' ';\n          }\n          let parent = cell.getParent();\n          if (parent.isVertex()) {\n            tip += this.getTooltipForCell(parent) + '.';\n          }\n          tip += super.getTooltipForCell.apply(this, arguments);\n          let trg = cell.getTerminal(false);\n          if (trg != null) {\n            tip += ' ' + this.getTooltipForCell(trg);\n          }\n        }\n        return tip;\n      }\n\n      // Alternative solution for implementing connection points without child cells.\n      // This can be extended as shown in portrefs.html example to allow for per-port\n      // incoming/outgoing direction.\n      getAllConnectionConstraints(terminal) {\n        let geo = terminal != null ? terminal.cell.getGeometry() : null;\n        if ((geo != null ? !geo.relative : false) && terminal.cell.isVertex() && terminal.cell.getChildCount() === 0) {\n          return [new ConnectionConstraint(new Point(0, 0.5), false), new ConnectionConstraint(new Point(1, 0.5), false)];\n        }\n        return null;\n      }\n    }\n\n    // FIXME: Provide means to make EdgeHandler and ConnectionHandler instantiate this subclass!\n    class MyCustomConstraintHandler extends ConstraintHandler {\n      constructor(...args) {\n        super(...args);\n        // Replaces the port image\n        this.pointImage = new ImageBox('images/dot.gif', 10, 10);\n      }\n    }\n    class MyCustomGuide extends Guide {\n      // Alt disables guides\n      isEnabledForEvent(evt) {\n        return !eventUtils.isAltDown(evt);\n      }\n    }\n    class MyCustomEdgeHandler extends EdgeHandler {\n      constructor(...args) {\n        super(...args);\n        // Enables snapping waypoints to terminals\n        this.snapToTerminals = true;\n      }\n      isConnectableCell(cell) {\n        return graph.getPlugin('ConnectionHandler').isConnectableCell(cell);\n      }\n      connect(edge, terminal, isSource, isClone, me) {\n        let result = null;\n        let model = this.graph.getDataModel();\n        let parent = model.getParent(edge);\n        model.beginUpdate();\n        try {\n          result = super.connect.apply(this, arguments);\n          let geo = model.getGeometry(result);\n          if (geo != null) {\n            geo = geo.clone();\n            let pt = null;\n            if (terminal && terminal.isEdge) {\n              if (terminal.isEdge()) {\n                pt = this.abspoints[this.isSource ? 0 : this.abspoints.length - 1];\n                pt.x = pt.x / this.graph.view.scale - this.graph.view.translate.x;\n                pt.y = pt.y / this.graph.view.scale - this.graph.view.translate.y;\n                let pstate = this.graph.getView().getState(edge.getParent());\n                if (pstate != null) {\n                  pt.x -= pstate.origin.x;\n                  pt.y -= pstate.origin.y;\n                }\n                pt.x -= this.graph.panDx / this.graph.view.scale;\n                pt.y -= this.graph.panDy / this.graph.view.scale;\n              }\n            }\n            geo.setTerminalPoint(pt, isSource);\n            model.setGeometry(edge, geo);\n          }\n        } finally {\n          model.endUpdate();\n        }\n        return result;\n      }\n      createMarker() {\n        let marker = super.createMarker.apply(this, arguments);\n        // Adds in-place highlighting when reconnecting existing edges\n        marker.highlight.highlight = this.graph.getPlugin('ConnectionHandler').marker.highlight.highlight;\n        return marker;\n      }\n    }\n\n    // Switch for black background and bright styles\n    let invert = false;\n    let MyCustomCellEditorHandler;\n    if (invert) {\n      container.style.backgroundColor = 'black';\n\n      // White in-place editor text color\n      MyCustomCellEditorHandler = class extends CellEditorHandler {\n        startEditing(cell, trigger) {\n          super.startEditing.apply(this, arguments);\n          if (this.textarea != null) {\n            this.textarea.style.color = '#FFFFFF';\n          }\n        }\n      };\n    } else {\n      MyCustomCellEditorHandler = CellEditorHandler;\n    }\n    class MyCustomSelectionHandler extends SelectionHandler {\n      constructor(...args) {\n        super(...args);\n        this.previewColor = invert ? 'white' : 'black';\n        // Enables guides\n        this.guidesEnabled = true;\n      }\n      createGuide() {\n        return new MyCustomGuide(this.graph, this.getGuideStates());\n      }\n    }\n    class MyCustomPanningHandler extends PanningHandler {\n      // Panning handler consumed right click so this must be\n      // disabled if right click should stop connection handler.\n      isPopupTrigger() {\n        return false;\n      }\n    }\n    class MyCustomConnectionHandler extends ConnectionHandler {\n      constructor(...args) {\n        super(...args);\n        // If connect preview is not moved away then getCellAt is used to detect the cell under\n        // the mouse if the mouse is over the preview shape in IE (no event transparency), ie.\n        // the built-in hit-detection of the HTML document will not be used in this case.\n        this.movePreviewAway = false;\n        this.waypointsEnabled = true;\n      }\n      // Starts connections on the background in wire-mode\n      isStartEvent(me) {\n        return checkbox.checked || super.isStartEvent.apply(this, arguments);\n      }\n\n      // Avoids any connections for gestures within tolerance except when in wire-mode\n      // or when over a port\n      mouseUp(sender, me) {\n        if (this.first != null && this.previous != null) {\n          let point = styleUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n          let dx = Math.abs(point.x - this.first.x);\n          let dy = Math.abs(point.y - this.first.y);\n          if (dx < this.graph.tolerance && dy < this.graph.tolerance) {\n            // Selects edges in non-wire mode for single clicks, but starts\n            // connecting for non-edges regardless of wire-mode\n            if (!checkbox.checked && this.previous.cell.isEdge()) {\n              this.reset();\n            }\n            return;\n          }\n        }\n        super.mouseUp.apply(this, arguments);\n      }\n\n      // Overrides methods to preview and create new edges.\n\n      // Sets source terminal point for edge-to-edge connections.\n      createEdgeState(me) {\n        let edge = this.graph.createEdge();\n        if (this.sourceConstraint != null && this.previous != null) {\n          edge.style = 'exitX' + '=' + this.sourceConstraint.point.x + ';' + 'exitY' + '=' + this.sourceConstraint.point.y + ';';\n        } else if (me.getCell().isEdge()) {\n          let scale = this.graph.view.scale;\n          let tr = this.graph.view.translate;\n          let pt = new Point(this.graph.snap(me.getGraphX() / scale) - tr.x, this.graph.snap(me.getGraphY() / scale) - tr.y);\n          edge.geometry.setTerminalPoint(pt, true);\n        }\n        return this.graph.view.createState(edge);\n      }\n\n      // Uses right mouse button to create edges on background (see also: lines 67 ff)\n      isStopEvent(me) {\n        return me.getState() != null || eventUtils.isRightMouseButton(me.getEvent());\n      }\n\n      // Updates target terminal point for edge-to-edge connections.\n      updateCurrentState(me, point) {\n        super.updateCurrentState.apply(this, arguments);\n        if (this.edgeState != null) {\n          this.edgeState.cell.geometry.setTerminalPoint(null, false);\n          if (this.shape != null && this.currentState != null && this.currentState.cell.isEdge()) {\n            let scale = this.graph.view.scale;\n            let tr = this.graph.view.translate;\n            let pt = new Point(this.graph.snap(me.getGraphX() / scale) - tr.x, this.graph.snap(me.getGraphY() / scale) - tr.y);\n            this.edgeState.cell.geometry.setTerminalPoint(pt, false);\n          }\n        }\n      }\n\n      // Adds in-place highlighting for complete cell area (no hotspot).\n      createMarker() {\n        let marker = super.createMarker.apply(this, arguments);\n\n        // Uses complete area of cell for new connections (no hotspot)\n        marker.intersects = function (state, evt) {\n          return true;\n        };\n\n        // Adds in-place highlighting\n        //const mxCellHighlightHighlight = mxCellHighlight.prototype.highlight;\n        marker.highlight.highlight = function (state) {\n          // TODO: Should this be a subclass of marker rather than assigning directly?\n          if (this.state != state) {\n            if (this.state != null) {\n              this.state.style = this.lastStyle;\n\n              // Workaround for shape using current stroke width if no strokewidth defined\n              this.state.style.strokeWidth = this.state.style.strokeWidth || '1';\n              this.state.style.strokeColor = this.state.style.strokeColor || 'none';\n              if (this.state.shape != null) {\n                this.state.view.graph.cellRenderer.configureShape(this.state);\n                this.state.shape.redraw();\n              }\n            }\n            if (state != null) {\n              this.lastStyle = state.style;\n              state.style = cloneUtils.clone(state.style);\n              state.style.strokeColor = '#00ff00';\n              state.style.strokeWidth = '3';\n              if (state.shape != null) {\n                state.view.graph.cellRenderer.configureShape(state);\n                state.shape.redraw();\n              }\n            }\n            this.state = state;\n          }\n        };\n        return marker;\n      }\n\n      // Makes sure non-relative cells can only be connected via constraints\n      isConnectableCell(cell) {\n        if (cell.isEdge()) {\n          return true;\n        } else {\n          let geo = cell != null ? cell.getGeometry() : null;\n          return geo != null ? geo.relative : false;\n        }\n      }\n    }\n\n    // Updates connection points before the routing is called.\n\n    class MyCustomGraphView extends GraphView {\n      // Computes the position of edge to edge connection points.\n      updateFixedTerminalPoint(edge, terminal, source, constraint) {\n        let pt = null;\n        if (constraint != null) {\n          pt = this.graph.getConnectionPoint(terminal, constraint);\n        }\n        if (source) {\n          edge.sourceSegment = null;\n        } else {\n          edge.targetSegment = null;\n        }\n        if (pt == null) {\n          let s = this.scale;\n          let tr = this.translate;\n          let orig = edge.origin;\n          let geo = edge.cell.getGeometry();\n          pt = geo.getTerminalPoint(source);\n\n          // Computes edge-to-edge connection point\n          if (pt != null) {\n            pt = new Point(s * (tr.x + pt.x + orig.x), s * (tr.y + pt.y + orig.y));\n\n            // Finds nearest segment on edge and computes intersection\n            if (terminal != null && terminal.absolutePoints != null) {\n              let seg = mathUtils.findNearestSegment(terminal, pt.x, pt.y);\n\n              // Finds orientation of the segment\n              let p0 = terminal.absolutePoints[seg];\n              let pe = terminal.absolutePoints[seg + 1];\n              let horizontal = p0.x - pe.x === 0;\n\n              // Stores the segment in the edge state\n              let key = source ? 'sourceConstraint' : 'targetConstraint';\n              let value = horizontal ? 'horizontal' : 'vertical';\n              edge.style[key] = value;\n\n              // Keeps the coordinate within the segment bounds\n              if (horizontal) {\n                pt.x = p0.x;\n                pt.y = Math.min(pt.y, Math.max(p0.y, pe.y));\n                pt.y = Math.max(pt.y, Math.min(p0.y, pe.y));\n              } else {\n                pt.y = p0.y;\n                pt.x = Math.min(pt.x, Math.max(p0.x, pe.x));\n                pt.x = Math.max(pt.x, Math.min(p0.x, pe.x));\n              }\n            }\n          }\n          // Computes constraint connection points on vertices and ports\n          else if (terminal != null && terminal.cell.geometry.relative) {\n            pt = new Point(this.getRoutingCenterX(terminal), this.getRoutingCenterY(terminal));\n          }\n\n          // Snaps point to grid\n          /*if (pt != null)\r\n          {\r\n            let tr = this.graph.view.translate;\r\n            let s = this.graph.view.scale;\r\n              pt.x = (this.graph.snap(pt.x / s - tr.x) + tr.x) * s;\r\n            pt.y = (this.graph.snap(pt.y / s - tr.y) + tr.y) * s;\r\n          }*/\n        }\n        edge.setAbsoluteTerminalPoint(pt, source);\n      }\n    }\n\n    // Updates the terminal and control points in the cloned preview.\n    class MyCustomEdgeSegmentHandler extends EdgeSegmentHandler {\n      clonePreviewState(point, terminal) {\n        let clone = super.clonePreviewState.apply(this, arguments);\n        clone.cell = clone.cell.clone();\n        if (this.isSource || this.isTarget) {\n          clone.cell.geometry = clone.cell.geometry.clone();\n\n          // Sets the terminal point of an edge if we're moving one of the endpoints\n          if (clone.cell.isEdge()) {\n            // TODO: Only set this if the target or source terminal is an edge\n            clone.cell.geometry.setTerminalPoint(point, this.isSource);\n          } else {\n            clone.cell.geometry.setTerminalPoint(null, this.isSource);\n          }\n        }\n        return clone;\n      }\n    }\n\n    // Imlements a custom resistor shape. Direction currently ignored here.\n\n    class ResistorShape extends CylinderShape {\n      constructor() {\n        // TODO: The original didn't seem to call the super\n        super(null, null, null, null);\n      }\n      redrawPath(path, x, y, w, h, isForeground) {\n        let dx = w / 16;\n        if (isForeground) {\n          path.moveTo(0, h / 2);\n          path.lineTo(2 * dx, h / 2);\n          path.lineTo(3 * dx, 0);\n          path.lineTo(5 * dx, h);\n          path.lineTo(7 * dx, 0);\n          path.lineTo(9 * dx, h);\n          path.lineTo(11 * dx, 0);\n          path.lineTo(13 * dx, h);\n          path.lineTo(14 * dx, h / 2);\n          path.lineTo(16 * dx, h / 2);\n          path.end();\n        }\n      }\n    }\n    CellRenderer.registerShape('resistor', ResistorShape);\n\n    // Imlements a custom resistor shape. Direction currently ignored here.\n\n    EdgeStyle.WireConnector = function (state, source, target, hints, result) {\n      // Creates array of all way- and terminalpoints\n      let pts = state.absolutePoints;\n      let horizontal = true;\n      let hint = null;\n\n      // Gets the initial connection from the source terminal or edge\n      if (source != null && source.cell.isEdge()) {\n        horizontal = state.style.sourceConstraint == 'horizontal';\n      } else if (source != null) {\n        horizontal = source.style.portConstraint != 'vertical';\n\n        // Checks the direction of the shape and rotates\n        let direction = source.style.direction;\n        if (direction == 'north' || direction == 'south') {\n          horizontal = !horizontal;\n        }\n      }\n\n      // Adds the first point\n      // TODO: Should move along connected segment\n      let pt = pts[0];\n      if (pt == null && source != null) {\n        pt = new Point(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n      } else if (pt != null) {\n        pt = pt.clone();\n      }\n      let first = pt;\n\n      // Adds the waypoints\n      if (hints != null && hints.length > 0) {\n        // FIXME: First segment not movable\n        /*hint = state.view.transformControlPoint(state, hints[0]);\r\n        MaxLog.show();\r\n        MaxLog.debug(hints.length,'hints0.y='+hint.y, pt.y)\r\n          if (horizontal && Math.floor(hint.y) != Math.floor(pt.y))\r\n        {\r\n          MaxLog.show();\r\n          MaxLog.debug('add waypoint');\r\n            pt = new Point(pt.x, hint.y);\r\n          result.push(pt);\r\n          pt = pt.clone();\r\n          //horizontal = !horizontal;\r\n        }*/\n\n        for (let i = 0; i < hints.length; i++) {\n          horizontal = !horizontal;\n          hint = state.view.transformControlPoint(state, hints[i]);\n          if (horizontal) {\n            if (pt.y !== hint.y) {\n              pt.y = hint.y;\n              result.push(pt.clone());\n            }\n          } else if (pt.x !== hint.x) {\n            pt.x = hint.x;\n            result.push(pt.clone());\n          }\n        }\n      } else {\n        hint = pt;\n      }\n\n      // Adds the last point\n      pt = pts[pts.length - 1];\n\n      // TODO: Should move along connected segment\n      if (pt == null && target != null) {\n        pt = new Point(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n      }\n      if (horizontal) {\n        if (pt.y !== hint.y && first.x !== pt.x) {\n          result.push(new Point(pt.x, hint.y));\n        }\n      } else if (pt.x !== hint.x && first.y !== pt.y) {\n        result.push(new Point(hint.x, pt.y));\n      }\n    };\n    StyleRegistry.putValue('wireEdgeStyle', EdgeStyle.WireConnector);\n    let graph = new MyCustomGraph(container, null, [MyCustomCellEditorHandler, TooltipHandler, SelectionCellsHandler, PopupMenuHandler, MyCustomConnectionHandler, MyCustomSelectionHandler, MyCustomPanningHandler]);\n    let labelBackground = invert ? '#000000' : '#FFFFFF';\n    let fontColor = invert ? '#FFFFFF' : '#000000';\n    let strokeColor = invert ? '#C0C0C0' : '#000000';\n    let fillColor = invert ? 'none' : '#FFFFFF';\n    graph.view.scale = 1;\n    graph.setPanning(true);\n    graph.setConnectable(true);\n    graph.setConnectableEdges(true);\n    graph.setDisconnectOnMove(false);\n    graph.foldingEnabled = false;\n\n    //Maximum size\n    graph.maximumGraphBounds = new Rectangle(0, 0, 1000, 1000);\n    graph.border = 50;\n    graph.spacingLeft = 30;\n\n    // Enables return key to stop editing (use shift-enter for newlines)\n    graph.setEnterStopsCellEditing(true);\n\n    // Adds rubberband selection\n    new RubberBandHandler(graph);\n\n    // Adds a special tooltip for edges\n    graph.setTooltips(true);\n    let style = graph.getStylesheet().getDefaultEdgeStyle();\n    delete style.endArrow;\n    style.strokeColor = strokeColor;\n    style.labelBackgroundColor = labelBackground;\n    style.edgeStyle = 'wireEdgeStyle';\n    style.fontColor = fontColor;\n    style.fontSize = '9';\n    style.movable = '0';\n    style.strokeWidth = strokeWidth;\n    //style.rounded = '1';\n\n    // Sets join node size\n    style.startSize = joinNodeSize;\n    style.endSize = joinNodeSize;\n    style = graph.getStylesheet().getDefaultVertexStyle();\n    style.gradientDirection = 'south';\n    //style.gradientColor = '#909090';\n    style.strokeColor = strokeColor;\n    //style.fillColor = '#e0e0e0';\n    style.fillColor = 'none';\n    style.fontColor = fontColor;\n    style.fontStyle = '1';\n    style.fontSize = '12';\n    style.resizable = '0';\n    style.rounded = '1';\n    style.strokeWidth = strokeWidth;\n\n    // инородное дерьмо\n    const buttons = document.querySelectorAll('.bth');\n    const update = event => {\n      var parent = graph.getDefaultParent();\n      var doc = xmlUtils.createXmlDocument();\n      graph.batchUpdate(() => {\n        if (event.target.textContent == 'not x') {\n          //прямоугольник\n          var v1 = graph.insertVertex(parent, null, '', 80, 40, 40, 80, 'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\n          v1.setConnectable(false);\n\n          //выходы прямоугольника\n          var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor,\n            strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = 'Y';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(5, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '○', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 30,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(49, 34);\n          v1.insert(v16);\n        }\n        if (event.target.textContent == 'x * y') {\n          //прямоугольник\n          var v1 = graph.insertVertex(parent, null, '', 180, 40, 40, 80, {\n            verticalLabelPosition: 'top',\n            verticalAlign: 'bottom',\n            shadow: 1,\n            fillColor: fillColor\n          });\n          v1.setConnectable(false);\n\n          //выходы прямоугольника\n          var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = 'Y';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(0, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '&', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 20,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(28.5, 37);\n          v1.insert(v16);\n        }\n        if (event.target.textContent == 'x + y') {\n          //прямоугольник\n          var v1 = graph.insertVertex(parent, null, '', 250, 40, 40, 80, {\n            verticalLabelPosition: 'top',\n            verticalAlign: 'bottom',\n            shadow: 1,\n            fillColor: fillColor\n          });\n          v1.setConnectable(false);\n\n          //выходы прямоугольника\n          var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = 'Y';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(0, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '|', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 20,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(24, 37);\n          v1.insert(v16);\n        }\n        if (event.target.textContent == 'x == y') {\n          //прямоугольник\n          var v1 = graph.insertVertex(parent, null, '', 180, 140, 40, 80, {\n            verticalLabelPosition: 'top',\n            verticalAlign: 'bottom',\n            shadow: 1,\n            fillColor: fillColor\n          });\n          v1.setConnectable(false);\n\n          //выходы прямоугольника\n          var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = 'Y';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(0, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '==', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 15,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(30, 38);\n          v1.insert(v16);\n        }\n        if (event.target.textContent == 'x => y') {\n          //прямоугольник\n          var v1 = graph.insertVertex(parent, null, '', 80, 140, 40, 80, {\n            verticalLabelPosition: 'top',\n            verticalAlign: 'bottom',\n            shadow: 1,\n            fillColor: fillColor\n          });\n          v1.setConnectable(false);\n\n          //выходы прямоугольника\n          var v11 = graph.insertVertex(v1, null, '', 0, 0, 14, 16, {\n            shape: 'line',\n            align: 'left',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: -0.5,\n            spacingLeft: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v11.geometry.relative = true;\n          v11.geometry.offset = new Point(-v11.geometry.width, 12);\n          var v12 = v11.clone();\n          v12.value = '';\n          v12.geometry.offset = new Point(-v11.geometry.width, 52);\n          v1.insert(v12);\n          var v15 = v11.clone();\n          v15.value = '';\n          v15.geometry.x = 1;\n          v15.style = {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingRight: 12,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          };\n          v15.geometry.offset = new Point(0, 32);\n          v1.insert(v15);\n          var v16 = graph.insertVertex(v1, null, '○', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 25,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v16.geometry.x = 1;\n          v16.geometry.offset = new Point(8, 15);\n          v1.insert(v16);\n          var v17 = graph.insertVertex(v1, null, 'X', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v17.geometry.x = 1;\n          v17.geometry.offset = new Point(14, 20);\n          v1.insert(v17);\n          var v18 = graph.insertVertex(v1, null, 'Y', 0, 0, 0, 0, {\n            shape: 'line',\n            align: 'right',\n            verticalAlign: 'middle',\n            fontSize: 10,\n            routingCenterX: 0.5,\n            spacingLeft: 6,\n            fontColor: fontColor,\n            strokeColor: strokeColor\n          });\n          v18.geometry.x = 1;\n          v18.geometry.offset = new Point(14, 59);\n          v1.insert(v18);\n        }\n      });\n    };\n    buttons.forEach(button => {\n      button.addEventListener('click', update);\n    });\n\n    ////////////////////////////////////////////////////////\n    // XML \n\n    document.getElementById(\"xml\").onclick = () => {\n      // Получаем XML данные\n      const xml = new ModelXmlSerializer(graph.getDataModel()).export();\n\n      // Создаем новый Blob объект с XML данными\n      const blob = new Blob([xml], {\n        type: 'text/xml'\n      });\n\n      // Создаем ссылку на Blob объект\n      const url = window.URL.createObjectURL(blob);\n\n      // Создаем ссылку для скачивания\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'data.xml'; // Имя файла для скачивания\n      document.body.appendChild(a);\n\n      // Инициируем скачивание файла\n      a.click();\n\n      // Освобождаем ресурсы\n      window.URL.revokeObjectURL(url);\n    };\n    document.getElementById(\"import\").onclick = () => {\n      input.click();\n    };\n\n    ///////////////////////////////////////////////////////////\n\n    document.getElementById(\"zoom\").onclick = () => graph.zoomIn();\n    document.getElementById(\"zoomout\").onclick = () => graph.zoomOut();\n\n    // Undo/redo\n    let undoManager = new UndoManager();\n    let listener = function (sender, evt) {\n      undoManager.undoableEditHappened(evt.getProperty('edit'));\n    };\n    graph.getDataModel().addListener(InternalEvent.UNDO, listener);\n    graph.getView().addListener(InternalEvent.UNDO, listener);\n    document.getElementById(\"undo\").onclick = () => undoManager.undo();\n    document.getElementById(\"redo\").onclick = () => undoManager.redo();\n    document.getElementById(\"delete\").onclick = () => graph.removeCells();\n\n    // Wire-mode\n    let checkbox = document.getElementById(\"wire\");\n\n    // Grid\n    let checkbox2 = document.getElementById(\"grid\");\n    checkbox2.setAttribute('checked', 'true');\n    InternalEvent.addListener(checkbox2, 'click', function (evt) {\n      if (checkbox2.checked) {\n        container.style.background = 'url(./images/grid.gif)';\n      } else {\n        container.style.background = '';\n      }\n      container.style.backgroundColor = invert ? 'black' : 'white';\n    });\n    InternalEvent.disableContextMenu(container);\n    graphContainer.appendChild(parentContainer);\n    return () => {\n      // Clean up if needed\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: graphContainerRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1194,\n    columnNumber: 10\n  }, this);\n}\n_s2(YourComponent, \"T2LhyAvPiiq95tTQ9P6wK78bc+c=\");\n_c2 = YourComponent;\n;\nexport default YourComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"FileUploader\");\n$RefreshReg$(_c2, \"YourComponent\");","map":{"version":3,"names":["React","useEffect","useRef","axios","popup","ModelXmlSerializer","domUtils","styleUtils","mathUtils","cloneUtils","eventUtils","Graph","InternalEvent","RubberBandHandler","ConnectionHandler","ConnectionConstraint","Point","CylinderShape","CellRenderer","DomHelpers","EdgeStyle","Rectangle","EdgeHandler","StyleRegistry","EdgeSegmentHandler","UndoManager","CellEditorHandler","ConstraintHandler","Guide","ImageBox","GraphView","SelectionHandler","PanningHandler","TooltipHandler","SelectionCellsHandler","PopupMenuHandler","xmlUtils","Codec","contextMenuTypes","contextMenuValues","globalTypes","globalValues","rubberBandTypes","rubberBandValues","createGraphContainer","useState","jsxDEV","_jsxDEV","FileUploader","_s","xmlContent","setXmlContent","handleOnChange","event","preventDefault","target","files","length","file","name","endsWith","reader","FileReader","onload","content","result","console","log","readAsText","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","accept","onChange","style","display","_c","YourComponent","_s2","graphContainerRef","graphContainer","current","parentContainer","document","createElement","container","imageUrl","appendChild","joinNodeSize","strokeWidth","MyCustomGraph","constructor","args","resetEdgesOnConnect","createEdgeSegmentHandler","state","MyCustomEdgeSegmentHandler","createGraphView","MyCustomGraphView","createEdgeHandler","MyCustomEdgeHandler","createHandler","cell","isEdge","view","getEdgeStyle","WireConnector","apply","arguments","getCellStyle","_cell$getTerminal","_cell$getTerminal2","clone","getTerminal","startArrow","endArrow","getTooltipForCell","tip","src","parent","getParent","isVertex","trg","getAllConnectionConstraints","terminal","geo","getGeometry","relative","getChildCount","MyCustomConstraintHandler","pointImage","MyCustomGuide","isEnabledForEvent","evt","isAltDown","snapToTerminals","isConnectableCell","graph","getPlugin","connect","edge","isSource","isClone","me","model","getDataModel","beginUpdate","pt","abspoints","x","scale","translate","y","pstate","getView","getState","origin","panDx","panDy","setTerminalPoint","setGeometry","endUpdate","createMarker","marker","highlight","invert","MyCustomCellEditorHandler","backgroundColor","startEditing","trigger","textarea","color","MyCustomSelectionHandler","previewColor","guidesEnabled","createGuide","getGuideStates","MyCustomPanningHandler","isPopupTrigger","MyCustomConnectionHandler","movePreviewAway","waypointsEnabled","isStartEvent","checkbox","checked","mouseUp","sender","first","previous","point","convertPoint","getX","getY","dx","Math","abs","dy","tolerance","reset","createEdgeState","createEdge","sourceConstraint","getCell","tr","snap","getGraphX","getGraphY","geometry","createState","isStopEvent","isRightMouseButton","getEvent","updateCurrentState","edgeState","shape","currentState","intersects","lastStyle","strokeColor","cellRenderer","configureShape","redraw","updateFixedTerminalPoint","source","constraint","getConnectionPoint","sourceSegment","targetSegment","s","orig","getTerminalPoint","absolutePoints","seg","findNearestSegment","p0","pe","horizontal","key","value","min","max","getRoutingCenterX","getRoutingCenterY","setAbsoluteTerminalPoint","clonePreviewState","isTarget","ResistorShape","redrawPath","path","w","h","isForeground","moveTo","lineTo","end","registerShape","hints","pts","hint","portConstraint","direction","i","transformControlPoint","push","putValue","labelBackground","fontColor","fillColor","setPanning","setConnectable","setConnectableEdges","setDisconnectOnMove","foldingEnabled","maximumGraphBounds","border","spacingLeft","setEnterStopsCellEditing","setTooltips","getStylesheet","getDefaultEdgeStyle","labelBackgroundColor","edgeStyle","fontSize","movable","startSize","endSize","getDefaultVertexStyle","gradientDirection","fontStyle","resizable","rounded","buttons","querySelectorAll","update","getDefaultParent","doc","createXmlDocument","batchUpdate","textContent","v1","insertVertex","v11","align","verticalAlign","routingCenterX","offset","width","v12","insert","v15","spacingRight","v16","verticalLabelPosition","shadow","v17","v18","forEach","button","addEventListener","getElementById","onclick","xml","export","blob","Blob","url","window","URL","createObjectURL","a","href","download","body","click","revokeObjectURL","input","zoomIn","zoomOut","undoManager","listener","undoableEditHappened","getProperty","addListener","UNDO","undo","redo","removeCells","checkbox2","setAttribute","background","disableContextMenu","ref","height","_c2","$RefreshReg$"],"sources":["D:/ospanel/domains/old/react/react-intro/src/components/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n  popup,\r\n  ModelXmlSerializer,\r\n  domUtils,\r\n  styleUtils,\r\n  mathUtils,\r\n  cloneUtils,\r\n  eventUtils,\r\n  Graph,\r\n  InternalEvent,\r\n  RubberBandHandler,\r\n  ConnectionHandler,\r\n  ConnectionConstraint,\r\n  Point,\r\n  CylinderShape,\r\n  CellRenderer,\r\n  DomHelpers,\r\n  EdgeStyle,\r\n  Rectangle,\r\n  EdgeHandler,\r\n  StyleRegistry,\r\n  EdgeSegmentHandler,\r\n  UndoManager,\r\n  CellEditorHandler,\r\n  ConstraintHandler,\r\n  Guide,\r\n  ImageBox,\r\n  GraphView,\r\n  SelectionHandler,\r\n  PanningHandler,\r\n  TooltipHandler,\r\n  SelectionCellsHandler,\r\n  PopupMenuHandler,\r\n  xmlUtils,\r\n  Codec,\r\n} from '@maxgraph/core';\r\n\r\nimport {\r\n  contextMenuTypes,\r\n  contextMenuValues,\r\n  globalTypes,\r\n  globalValues,\r\n  rubberBandTypes,\r\n  rubberBandValues,\r\n} from './shared/args.js';\r\nimport { createGraphContainer } from './shared/configure.js';\r\nimport { useState} from 'react';\r\n// style required by RubberBand\r\nimport '@maxgraph/core/css/common.css';\r\n\r\nimport \"./file-uploader.css\";\r\n\r\nexport const FileUploader = () => {\r\n  const [xmlContent, setXmlContent] = useState(null);\r\n\r\n  const handleOnChange = (event) => {\r\n    event.preventDefault();\r\n    if (event.target.files && event.target.files.length) {\r\n      const file = event.target.files[0];\r\n      if (file.name.endsWith('.xml')) {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          const content = event.target.result;\r\n          setXmlContent(content);\r\n          console.log(\"XML файл загружен и сохранен внутри компонента.\");\r\n        };\r\n        reader.readAsText(file);\r\n      } else {\r\n        console.log(\"Пожалуйста, выберите файл с расширением .xml\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"file-uploader\">\r\n      <label htmlFor=\"file-loader-button\" className=\"file-uploader__custom-button\">\r\n      </label>\r\n      <input\r\n        id=\"file-loader-button\"\r\n        type=\"file\"\r\n        accept=\".xml\"\r\n        className=\"file-uploader__upload-button\"\r\n        onChange={handleOnChange}\r\n        style={{ display: 'none' }}\r\n      />\r\n      {xmlContent && (\r\n        <div className=\"file-uploader__xml-content\">\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\n  function YourComponent() {\r\n  const graphContainerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const graphContainer = graphContainerRef.current;\r\n\r\n    const parentContainer = document.createElement('div');\r\n    const container = createGraphContainer({\r\n      imageUrl: 'images/grid.gif'\r\n    });\r\n    parentContainer.appendChild(container);\r\n\r\n      // Changes some default colors\r\n  // TODO Find a way of modifying globally or setting locally! See https://github.com/maxGraph/maxGraph/issues/192\r\n  //constants.SHADOWCOLOR = '#C0C0C0';\r\n\r\n  let joinNodeSize = 7;\r\n  let strokeWidth = 2;\r\n\r\n  class MyCustomGraph extends Graph {\r\n    resetEdgesOnConnect = false;\r\n\r\n    createEdgeSegmentHandler(state) {\r\n      return new MyCustomEdgeSegmentHandler(state);\r\n    }\r\n\r\n    createGraphView() {\r\n      return new MyCustomGraphView(this);\r\n    }\r\n\r\n    createEdgeHandler(state) {\r\n      return new MyCustomEdgeHandler(state);\r\n    }\r\n\r\n    createHandler(state) {\r\n      let result = null;\r\n\r\n      if (state != null) {\r\n        if (state.cell.isEdge()) {\r\n          let style = this.view.getEdgeStyle(state);\r\n\r\n          if (style == EdgeStyle.WireConnector) {\r\n            return new EdgeSegmentHandler(state);\r\n          }\r\n        }\r\n      }\r\n\r\n      return super.createHandler.apply(this, arguments);\r\n    }\r\n\r\n    // Adds oval markers for edge-to-edge connections.\r\n    getCellStyle(cell) {\r\n      let style = super.getCellStyle.apply(this, arguments);\r\n\r\n      if (style != null && cell?.isEdge()) {\r\n        style = cloneUtils.clone(style);\r\n\r\n        if (cell.getTerminal(true)?.isEdge()) {\r\n          style.startArrow = 'oval';\r\n        }\r\n\r\n        if (cell.getTerminal(false)?.isEdge()) {\r\n          style.endArrow = 'oval';\r\n        }\r\n      }\r\n      return style;\r\n    }\r\n\r\n    getTooltipForCell(cell) {\r\n      let tip = '';\r\n\r\n      if (cell != null) {\r\n        let src = cell.getTerminal(true);\r\n        if (src != null) {\r\n          tip += this.getTooltipForCell(src) + ' ';\r\n        }\r\n\r\n        let parent = cell.getParent();\r\n        if (parent.isVertex()) {\r\n          tip += this.getTooltipForCell(parent) + '.';\r\n        }\r\n\r\n        tip += super.getTooltipForCell.apply(this, arguments);\r\n\r\n        let trg = cell.getTerminal(false);\r\n        if (trg != null) {\r\n          tip += ' ' + this.getTooltipForCell(trg);\r\n        }\r\n      }\r\n      return tip;\r\n    }\r\n\r\n    // Alternative solution for implementing connection points without child cells.\r\n    // This can be extended as shown in portrefs.html example to allow for per-port\r\n    // incoming/outgoing direction.\r\n    getAllConnectionConstraints(terminal) {\r\n      let geo = terminal != null ? terminal.cell.getGeometry() : null;\r\n\r\n      if (\r\n        (geo != null ? !geo.relative : false) &&\r\n        terminal.cell.isVertex() &&\r\n        terminal.cell.getChildCount() === 0\r\n      ) {\r\n        return [\r\n          new ConnectionConstraint(new Point(0, 0.5), false),\r\n          new ConnectionConstraint(new Point(1, 0.5), false),\r\n        ];\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // FIXME: Provide means to make EdgeHandler and ConnectionHandler instantiate this subclass!\r\n  class MyCustomConstraintHandler extends ConstraintHandler {\r\n    // Replaces the port image\r\n    pointImage = new ImageBox('images/dot.gif', 10, 10);\r\n  }\r\n\r\n  class MyCustomGuide extends Guide {\r\n    // Alt disables guides\r\n    isEnabledForEvent(evt) {\r\n      return !eventUtils.isAltDown(evt);\r\n    }\r\n  }\r\n\r\n  class MyCustomEdgeHandler extends EdgeHandler {\r\n    // Enables snapping waypoints to terminals\r\n    snapToTerminals = true;\r\n\r\n    isConnectableCell(cell) {\r\n      return graph.getPlugin('ConnectionHandler').isConnectableCell(cell);\r\n    }\r\n\r\n    connect(edge, terminal, isSource, isClone, me) {\r\n      let result = null;\r\n      let model = this.graph.getDataModel();\r\n      let parent = model.getParent(edge);\r\n\r\n      model.beginUpdate();\r\n      try {\r\n        result = super.connect.apply(this, arguments);\r\n        let geo = model.getGeometry(result);\r\n\r\n        if (geo != null) {\r\n          geo = geo.clone();\r\n          let pt = null;\r\n          if (terminal && terminal.isEdge) {\r\n            if (terminal.isEdge()) {\r\n              pt = this.abspoints[this.isSource ? 0 : this.abspoints.length - 1];\r\n              pt.x = pt.x / this.graph.view.scale - this.graph.view.translate.x;\r\n              pt.y = pt.y / this.graph.view.scale - this.graph.view.translate.y;\r\n\r\n              let pstate = this.graph.getView().getState(edge.getParent());\r\n\r\n              if (pstate != null) {\r\n                pt.x -= pstate.origin.x;\r\n                pt.y -= pstate.origin.y;\r\n              }\r\n\r\n              pt.x -= this.graph.panDx / this.graph.view.scale;\r\n              pt.y -= this.graph.panDy / this.graph.view.scale;\r\n            }\r\n          }\r\n\r\n          geo.setTerminalPoint(pt, isSource);\r\n          model.setGeometry(edge, geo);\r\n        }\r\n      } finally {\r\n        model.endUpdate();\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    createMarker() {\r\n      let marker = super.createMarker.apply(this, arguments);\r\n      // Adds in-place highlighting when reconnecting existing edges\r\n      marker.highlight.highlight =\r\n        this.graph.getPlugin('ConnectionHandler').marker.highlight.highlight;\r\n      return marker;\r\n    }\r\n  }\r\n\r\n  // Switch for black background and bright styles\r\n  let invert = false;\r\n  let MyCustomCellEditorHandler;\r\n\r\n  if (invert) {\r\n    container.style.backgroundColor = 'black';\r\n\r\n    // White in-place editor text color\r\n    MyCustomCellEditorHandler = class extends CellEditorHandler {\r\n      startEditing(cell, trigger) {\r\n        super.startEditing.apply(this, arguments);\r\n\r\n        if (this.textarea != null) {\r\n          this.textarea.style.color = '#FFFFFF';\r\n        }\r\n      }\r\n    };\r\n  } else {\r\n    MyCustomCellEditorHandler = CellEditorHandler;\r\n  }\r\n\r\n  class MyCustomSelectionHandler extends SelectionHandler {\r\n    previewColor = invert ? 'white' : 'black';\r\n    // Enables guides\r\n    guidesEnabled = true;\r\n\r\n    createGuide() {\r\n      return new MyCustomGuide(this.graph, this.getGuideStates());\r\n    }\r\n  }\r\n\r\n  class MyCustomPanningHandler extends PanningHandler {\r\n    // Panning handler consumed right click so this must be\r\n    // disabled if right click should stop connection handler.\r\n    isPopupTrigger() {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  class MyCustomConnectionHandler extends ConnectionHandler {\r\n    // If connect preview is not moved away then getCellAt is used to detect the cell under\r\n    // the mouse if the mouse is over the preview shape in IE (no event transparency), ie.\r\n    // the built-in hit-detection of the HTML document will not be used in this case.\r\n    movePreviewAway = false;\r\n    waypointsEnabled = true;\r\n\r\n    // Starts connections on the background in wire-mode\r\n    isStartEvent(me) {\r\n      return checkbox.checked || super.isStartEvent.apply(this, arguments);\r\n    }\r\n\r\n    // Avoids any connections for gestures within tolerance except when in wire-mode\r\n    // or when over a port\r\n    mouseUp(sender, me) {\r\n      if (this.first != null && this.previous != null) {\r\n        let point = styleUtils.convertPoint(this.graph.container, me.getX(), me.getY());\r\n        let dx = Math.abs(point.x - this.first.x);\r\n        let dy = Math.abs(point.y - this.first.y);\r\n\r\n        if (dx < this.graph.tolerance && dy < this.graph.tolerance) {\r\n          // Selects edges in non-wire mode for single clicks, but starts\r\n          // connecting for non-edges regardless of wire-mode\r\n          if (!checkbox.checked && this.previous.cell.isEdge()) {\r\n            this.reset();\r\n          }\r\n          return;\r\n        }\r\n      }\r\n      super.mouseUp.apply(this, arguments);\r\n    }\r\n\r\n    // Overrides methods to preview and create new edges.\r\n\r\n    // Sets source terminal point for edge-to-edge connections.\r\n    createEdgeState(me) {\r\n      let edge = this.graph.createEdge();\r\n\r\n      if (this.sourceConstraint != null && this.previous != null) {\r\n        edge.style =\r\n          'exitX' +\r\n          '=' +\r\n          this.sourceConstraint.point.x +\r\n          ';' +\r\n          'exitY' +\r\n          '=' +\r\n          this.sourceConstraint.point.y +\r\n          ';';\r\n      } else if (me.getCell().isEdge()) {\r\n        let scale = this.graph.view.scale;\r\n        let tr = this.graph.view.translate;\r\n        let pt = new Point(\r\n          this.graph.snap(me.getGraphX() / scale) - tr.x,\r\n          this.graph.snap(me.getGraphY() / scale) - tr.y\r\n        );\r\n        edge.geometry.setTerminalPoint(pt, true);\r\n      }\r\n\r\n      return this.graph.view.createState(edge);\r\n    }\r\n\r\n    // Uses right mouse button to create edges on background (see also: lines 67 ff)\r\n    isStopEvent(me) {\r\n      return me.getState() != null || eventUtils.isRightMouseButton(me.getEvent());\r\n    }\r\n\r\n    // Updates target terminal point for edge-to-edge connections.\r\n    updateCurrentState(me, point) {\r\n      super.updateCurrentState.apply(this, arguments);\r\n\r\n      if (this.edgeState != null) {\r\n        this.edgeState.cell.geometry.setTerminalPoint(null, false);\r\n\r\n        if (\r\n          this.shape != null &&\r\n          this.currentState != null &&\r\n          this.currentState.cell.isEdge()\r\n        ) {\r\n          let scale = this.graph.view.scale;\r\n          let tr = this.graph.view.translate;\r\n          let pt = new Point(\r\n            this.graph.snap(me.getGraphX() / scale) - tr.x,\r\n            this.graph.snap(me.getGraphY() / scale) - tr.y\r\n          );\r\n          this.edgeState.cell.geometry.setTerminalPoint(pt, false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Adds in-place highlighting for complete cell area (no hotspot).\r\n    createMarker() {\r\n      let marker = super.createMarker.apply(this, arguments);\r\n\r\n      // Uses complete area of cell for new connections (no hotspot)\r\n      marker.intersects = function (state, evt) {\r\n        return true;\r\n      };\r\n\r\n      // Adds in-place highlighting\r\n      //const mxCellHighlightHighlight = mxCellHighlight.prototype.highlight;\r\n      marker.highlight.highlight = function (state) {\r\n        // TODO: Should this be a subclass of marker rather than assigning directly?\r\n        if (this.state != state) {\r\n          if (this.state != null) {\r\n            this.state.style = this.lastStyle;\r\n\r\n            // Workaround for shape using current stroke width if no strokewidth defined\r\n            this.state.style.strokeWidth = this.state.style.strokeWidth || '1';\r\n            this.state.style.strokeColor = this.state.style.strokeColor || 'none';\r\n\r\n            if (this.state.shape != null) {\r\n              this.state.view.graph.cellRenderer.configureShape(this.state);\r\n              this.state.shape.redraw();\r\n            }\r\n          }\r\n\r\n          if (state != null) {\r\n            this.lastStyle = state.style;\r\n            state.style = cloneUtils.clone(state.style);\r\n            state.style.strokeColor = '#00ff00';\r\n            state.style.strokeWidth = '3';\r\n\r\n            if (state.shape != null) {\r\n              state.view.graph.cellRenderer.configureShape(state);\r\n              state.shape.redraw();\r\n            }\r\n          }\r\n          this.state = state;\r\n        }\r\n      };\r\n\r\n      return marker;\r\n    }\r\n\r\n    // Makes sure non-relative cells can only be connected via constraints\r\n    isConnectableCell(cell) {\r\n      if (cell.isEdge()) {\r\n        return true;\r\n      } else {\r\n        let geo = cell != null ? cell.getGeometry() : null;\r\n        return geo != null ? geo.relative : false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Updates connection points before the routing is called.\r\n\r\n  class MyCustomGraphView extends GraphView {\r\n    // Computes the position of edge to edge connection points.\r\n    updateFixedTerminalPoint(edge, terminal, source, constraint) {\r\n      let pt = null;\r\n\r\n      if (constraint != null) {\r\n        pt = this.graph.getConnectionPoint(terminal, constraint);\r\n      }\r\n\r\n      if (source) {\r\n        edge.sourceSegment = null;\r\n      } else {\r\n        edge.targetSegment = null;\r\n      }\r\n\r\n      if (pt == null) {\r\n        let s = this.scale;\r\n        let tr = this.translate;\r\n        let orig = edge.origin;\r\n        let geo = edge.cell.getGeometry();\r\n        pt = geo.getTerminalPoint(source);\r\n\r\n        // Computes edge-to-edge connection point\r\n        if (pt != null) {\r\n          pt = new Point(s * (tr.x + pt.x + orig.x), s * (tr.y + pt.y + orig.y));\r\n\r\n          // Finds nearest segment on edge and computes intersection\r\n          if (terminal != null && terminal.absolutePoints != null) {\r\n            let seg = mathUtils.findNearestSegment(terminal, pt.x, pt.y);\r\n\r\n            // Finds orientation of the segment\r\n            let p0 = terminal.absolutePoints[seg];\r\n            let pe = terminal.absolutePoints[seg + 1];\r\n            let horizontal = p0.x - pe.x === 0;\r\n\r\n            // Stores the segment in the edge state\r\n            let key = source ? 'sourceConstraint' : 'targetConstraint';\r\n            let value = horizontal ? 'horizontal' : 'vertical';\r\n            edge.style[key] = value;\r\n\r\n            // Keeps the coordinate within the segment bounds\r\n            if (horizontal) {\r\n              pt.x = p0.x;\r\n              pt.y = Math.min(pt.y, Math.max(p0.y, pe.y));\r\n              pt.y = Math.max(pt.y, Math.min(p0.y, pe.y));\r\n            } else {\r\n              pt.y = p0.y;\r\n              pt.x = Math.min(pt.x, Math.max(p0.x, pe.x));\r\n              pt.x = Math.max(pt.x, Math.min(p0.x, pe.x));\r\n            }\r\n          }\r\n        }\r\n        // Computes constraint connection points on vertices and ports\r\n        else if (terminal != null && terminal.cell.geometry.relative) {\r\n          pt = new Point(\r\n            this.getRoutingCenterX(terminal),\r\n            this.getRoutingCenterY(terminal)\r\n          );\r\n        }\r\n\r\n        // Snaps point to grid\r\n        /*if (pt != null)\r\n        {\r\n          let tr = this.graph.view.translate;\r\n          let s = this.graph.view.scale;\r\n\r\n          pt.x = (this.graph.snap(pt.x / s - tr.x) + tr.x) * s;\r\n          pt.y = (this.graph.snap(pt.y / s - tr.y) + tr.y) * s;\r\n        }*/\r\n      }\r\n\r\n      edge.setAbsoluteTerminalPoint(pt, source);\r\n    }\r\n  }\r\n\r\n  // Updates the terminal and control points in the cloned preview.\r\n  class MyCustomEdgeSegmentHandler extends EdgeSegmentHandler {\r\n    clonePreviewState(point, terminal) {\r\n      let clone = super.clonePreviewState.apply(this, arguments);\r\n      clone.cell = clone.cell.clone();\r\n\r\n      if (this.isSource || this.isTarget) {\r\n        clone.cell.geometry = clone.cell.geometry.clone();\r\n\r\n        // Sets the terminal point of an edge if we're moving one of the endpoints\r\n        if (clone.cell.isEdge()) {\r\n          // TODO: Only set this if the target or source terminal is an edge\r\n          clone.cell.geometry.setTerminalPoint(point, this.isSource);\r\n        } else {\r\n          clone.cell.geometry.setTerminalPoint(null, this.isSource);\r\n        }\r\n      }\r\n\r\n      return clone;\r\n    }\r\n  }\r\n\r\n  // Imlements a custom resistor shape. Direction currently ignored here.\r\n\r\n  class ResistorShape extends CylinderShape {\r\n    constructor() {\r\n      // TODO: The original didn't seem to call the super\r\n      super(null, null, null, null);\r\n    }\r\n\r\n    redrawPath(path, x, y, w, h, isForeground) {\r\n      let dx = w / 16;\r\n\r\n      if (isForeground) {\r\n        path.moveTo(0, h / 2);\r\n        path.lineTo(2 * dx, h / 2);\r\n        path.lineTo(3 * dx, 0);\r\n        path.lineTo(5 * dx, h);\r\n        path.lineTo(7 * dx, 0);\r\n        path.lineTo(9 * dx, h);\r\n        path.lineTo(11 * dx, 0);\r\n        path.lineTo(13 * dx, h);\r\n        path.lineTo(14 * dx, h / 2);\r\n        path.lineTo(16 * dx, h / 2);\r\n        path.end();\r\n      }\r\n    }\r\n  }\r\n\r\n  CellRenderer.registerShape('resistor', ResistorShape);\r\n\r\n  // Imlements a custom resistor shape. Direction currently ignored here.\r\n\r\n  EdgeStyle.WireConnector = function (state, source, target, hints, result) {\r\n    // Creates array of all way- and terminalpoints\r\n    let pts = state.absolutePoints;\r\n    let horizontal = true;\r\n    let hint = null;\r\n\r\n    // Gets the initial connection from the source terminal or edge\r\n    if (source != null && source.cell.isEdge()) {\r\n      horizontal = state.style.sourceConstraint == 'horizontal';\r\n    } else if (source != null) {\r\n      horizontal = source.style.portConstraint != 'vertical';\r\n\r\n      // Checks the direction of the shape and rotates\r\n      let direction = source.style.direction;\r\n\r\n      if (direction == 'north' || direction == 'south') {\r\n        horizontal = !horizontal;\r\n      }\r\n    }\r\n\r\n    // Adds the first point\r\n    // TODO: Should move along connected segment\r\n    let pt = pts[0];\r\n\r\n    if (pt == null && source != null) {\r\n      pt = new Point(\r\n        state.view.getRoutingCenterX(source),\r\n        state.view.getRoutingCenterY(source)\r\n      );\r\n    } else if (pt != null) {\r\n      pt = pt.clone();\r\n    }\r\n\r\n    let first = pt;\r\n\r\n    // Adds the waypoints\r\n    if (hints != null && hints.length > 0) {\r\n      // FIXME: First segment not movable\r\n      /*hint = state.view.transformControlPoint(state, hints[0]);\r\n      MaxLog.show();\r\n      MaxLog.debug(hints.length,'hints0.y='+hint.y, pt.y)\r\n\r\n      if (horizontal && Math.floor(hint.y) != Math.floor(pt.y))\r\n      {\r\n        MaxLog.show();\r\n        MaxLog.debug('add waypoint');\r\n\r\n        pt = new Point(pt.x, hint.y);\r\n        result.push(pt);\r\n        pt = pt.clone();\r\n        //horizontal = !horizontal;\r\n      }*/\r\n\r\n      for (let i = 0; i < hints.length; i++) {\r\n        horizontal = !horizontal;\r\n        hint = state.view.transformControlPoint(state, hints[i]);\r\n\r\n        if (horizontal) {\r\n          if (pt.y !== hint.y) {\r\n            pt.y = hint.y;\r\n            result.push(pt.clone());\r\n          }\r\n        } else if (pt.x !== hint.x) {\r\n          pt.x = hint.x;\r\n          result.push(pt.clone());\r\n        }\r\n      }\r\n    } else {\r\n      hint = pt;\r\n    }\r\n\r\n    // Adds the last point\r\n    pt = pts[pts.length - 1];\r\n\r\n    // TODO: Should move along connected segment\r\n    if (pt == null && target != null) {\r\n      pt = new Point(\r\n        state.view.getRoutingCenterX(target),\r\n        state.view.getRoutingCenterY(target)\r\n      );\r\n    }\r\n\r\n    if (horizontal) {\r\n      if (pt.y !== hint.y && first.x !== pt.x) {\r\n        result.push(new Point(pt.x, hint.y));\r\n      }\r\n    } else if (pt.x !== hint.x && first.y !== pt.y) {\r\n      result.push(new Point(hint.x, pt.y));\r\n    }\r\n  };\r\n\r\n  StyleRegistry.putValue('wireEdgeStyle', EdgeStyle.WireConnector);\r\n\r\n\r\n    let graph = new MyCustomGraph(container, null, [\r\n      MyCustomCellEditorHandler,\r\n      TooltipHandler,\r\n      SelectionCellsHandler,\r\n      PopupMenuHandler,\r\n      MyCustomConnectionHandler,\r\n      MyCustomSelectionHandler,\r\n      MyCustomPanningHandler,\r\n    ]);\r\n\r\n    let labelBackground = invert ? '#000000' : '#FFFFFF';\r\n  let fontColor = invert ? '#FFFFFF' : '#000000';\r\n  let strokeColor = invert ? '#C0C0C0' : '#000000';\r\n  let fillColor = invert ? 'none' : '#FFFFFF';\r\n\r\n  graph.view.scale = 1;\r\n  graph.setPanning(true);\r\n  graph.setConnectable(true);\r\n  graph.setConnectableEdges(true);\r\n  graph.setDisconnectOnMove(false);\r\n  graph.foldingEnabled = false;\r\n\r\n  //Maximum size\r\n  graph.maximumGraphBounds = new Rectangle(0, 0, 1000, 1000);\r\n  graph.border = 50;\r\n  graph.spacingLeft = 30;\r\n\r\n  // Enables return key to stop editing (use shift-enter for newlines)\r\n  graph.setEnterStopsCellEditing(true);\r\n\r\n  // Adds rubberband selection\r\n  new RubberBandHandler(graph);\r\n\r\n  // Adds a special tooltip for edges\r\n  graph.setTooltips(true);\r\n\r\n  let style = graph.getStylesheet().getDefaultEdgeStyle();\r\n  delete style.endArrow;\r\n  style.strokeColor = strokeColor;\r\n  style.labelBackgroundColor = labelBackground;\r\n  style.edgeStyle = 'wireEdgeStyle';\r\n  style.fontColor = fontColor;\r\n  style.fontSize = '9';\r\n  style.movable = '0';\r\n  style.strokeWidth = strokeWidth;\r\n  //style.rounded = '1';\r\n\r\n  // Sets join node size\r\n  style.startSize = joinNodeSize;\r\n  style.endSize = joinNodeSize;\r\n\r\n  style = graph.getStylesheet().getDefaultVertexStyle();\r\n  style.gradientDirection = 'south';\r\n  //style.gradientColor = '#909090';\r\n  style.strokeColor = strokeColor;\r\n  //style.fillColor = '#e0e0e0';\r\n  style.fillColor = 'none';\r\n  style.fontColor = fontColor;\r\n  style.fontStyle = '1';\r\n  style.fontSize = '12';\r\n  style.resizable = '0';\r\n  style.rounded = '1';\r\n  style.strokeWidth = strokeWidth;\r\n\r\n  // инородное дерьмо\r\n  const buttons = document.querySelectorAll('.bth');\r\n  const update = (event) => {\r\n    var parent = graph.getDefaultParent();\r\n    var doc = xmlUtils.createXmlDocument();\r\n    graph.batchUpdate(() => {\r\n      if ((event.target.textContent) == 'not x') {\r\n        //прямоугольник\r\n        var v1 = graph.insertVertex(parent, null, '', 80, 40, 40, 80,\r\n          'verticalLabelPosition=top;verticalAlign=bottom;shadow=1;fillColor=' + fillColor);\r\n        v1.setConnectable(false);\r\n\r\n\r\n        //выходы прямоугольника\r\n        var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16, {\r\n          shape: 'line',\r\n          align: 'left',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: -0.5,\r\n          spacingLeft: 12,\r\n          fontColor,\r\n          strokeColor,\r\n        });\r\n        v11.geometry.relative = true;\r\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\r\n        var v12 = v11.clone();\r\n        v12.value = 'Y';\r\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\r\n        v1.insert(v12);\r\n        var v15 = v11.clone();\r\n        v15.value = '';\r\n        v15.geometry.x = 1;\r\n        v15.style = {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: 0.5,\r\n          spacingRight: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n         \r\n        v15.geometry.offset = new Point(5, 32);\r\n        v1.insert(v15);\r\n\r\n\r\n        var v16 = graph.insertVertex(v1, null, '○', 0, 0, 0, 0,\r\n        {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 30,\r\n          routingCenterX: 0.5,\r\n          spacingLeft: 6,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v16.geometry.x = 1;\r\n        v16.geometry.offset = new Point(49, 34);\r\n        v1.insert(v16);\r\n      }\r\n      if ((event.target.textContent) == 'x * y') {\r\n        //прямоугольник\r\n        var v1 = graph.insertVertex(parent, null, '', 180, 40, 40, 80,\r\n        {\r\n          verticalLabelPosition: 'top',\r\n          verticalAlign: 'bottom',\r\n          shadow: 1,\r\n          fillColor: fillColor\r\n        }\r\n        );\r\n        v1.setConnectable(false);\r\n\r\n        //выходы прямоугольника\r\n        var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16,\r\n        {\r\n          shape: 'line',\r\n          align: 'left',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: -0.5,\r\n          spacingLeft: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v11.geometry.relative = true;\r\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\r\n        var v12 = v11.clone();\r\n        v12.value = 'Y';\r\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\r\n        v1.insert(v12);\r\n        var v15 = v11.clone();\r\n        v15.value = '';\r\n        v15.geometry.x = 1;\r\n        v15.style = {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: 0.5,\r\n          spacingRight: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        ;\r\n        v15.geometry.offset = new Point(0, 32);\r\n        v1.insert(v15);\r\n\r\n\r\n        var v16 = graph.insertVertex(v1, null, '&', 0, 0, 0, 0,\r\n        {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 20,\r\n          routingCenterX: 0.5,\r\n          spacingLeft: 6,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v16.geometry.x = 1;\r\n        v16.geometry.offset = new Point(28.5, 37);\r\n        v1.insert(v16);\r\n      }\r\n      if ((event.target.textContent) == 'x + y') {\r\n        //прямоугольник\r\n        var v1 = graph.insertVertex(parent, null, '', 250, 40, 40, 80,\r\n        {\r\n          verticalLabelPosition: 'top',\r\n          verticalAlign: 'bottom',\r\n          shadow: 1,\r\n          fillColor: fillColor\r\n        }\r\n        );\r\n        v1.setConnectable(false);\r\n\r\n        //выходы прямоугольника\r\n        var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16,\r\n        {\r\n          shape: 'line',\r\n          align: 'left',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: -0.5,\r\n          spacingLeft: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v11.geometry.relative = true;\r\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\r\n        var v12 = v11.clone();\r\n        v12.value = 'Y';\r\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\r\n        v1.insert(v12);\r\n        var v15 = v11.clone();\r\n        v15.value = '';\r\n        v15.geometry.x = 1;\r\n        v15.style = {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: 0.5,\r\n          spacingRight: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        ;\r\n        v15.geometry.offset = new Point(0, 32);\r\n        v1.insert(v15);\r\n\r\n        var v16 = graph.insertVertex(v1, null, '|', 0, 0, 0, 0,\r\n        {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 20,\r\n          routingCenterX: 0.5,\r\n          spacingLeft: 6,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v16.geometry.x = 1;\r\n        v16.geometry.offset = new Point(24, 37);\r\n        v1.insert(v16);\r\n      }\r\n      if ((event.target.textContent) == 'x == y') {\r\n        //прямоугольник\r\n        var v1 = graph.insertVertex(parent, null, '', 180, 140, 40, 80,\r\n        {\r\n          verticalLabelPosition: 'top',\r\n          verticalAlign: 'bottom',\r\n          shadow: 1,\r\n          fillColor: fillColor\r\n        }\r\n        );\r\n        v1.setConnectable(false);\r\n\r\n        //выходы прямоугольника\r\n        var v11 = graph.insertVertex(v1, null, 'X', 0, 0, 10, 16,\r\n        {\r\n          shape: 'line',\r\n          align: 'left',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: -0.5,\r\n          spacingLeft: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v11.geometry.relative = true;\r\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\r\n        var v12 = v11.clone();\r\n        v12.value = 'Y';\r\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\r\n        v1.insert(v12);\r\n        var v15 = v11.clone();\r\n        v15.value = '';\r\n        v15.geometry.x = 1;\r\n        v15.style = {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: 0.5,\r\n          spacingRight: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        ;\r\n        v15.geometry.offset = new Point(0, 32);\r\n        v1.insert(v15);\r\n\r\n        var v16 = graph.insertVertex(v1, null, '==', 0, 0, 0, 0,\r\n        {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 15,\r\n          routingCenterX: 0.5,\r\n          spacingLeft: 6,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v16.geometry.x = 1;\r\n        v16.geometry.offset = new Point(30, 38);\r\n        v1.insert(v16);\r\n      }\r\n      if ((event.target.textContent) == 'x => y') {\r\n        //прямоугольник\r\n        var v1 = graph.insertVertex(parent, null, '', 80, 140, 40, 80,\r\n        {\r\n          verticalLabelPosition: 'top',\r\n          verticalAlign: 'bottom',\r\n          shadow: 1,\r\n          fillColor: fillColor\r\n        }\r\n        );\r\n        v1.setConnectable(false);\r\n\r\n        //выходы прямоугольника\r\n        var v11 = graph.insertVertex(v1, null, '', 0, 0, 14, 16,\r\n        {\r\n          shape: 'line',\r\n          align: 'left',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: -0.5,\r\n          spacingLeft: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v11.geometry.relative = true;\r\n        v11.geometry.offset = new Point(-v11.geometry.width, 12);\r\n        var v12 = v11.clone();\r\n        v12.value = '';\r\n        v12.geometry.offset = new Point(-v11.geometry.width, 52);\r\n        v1.insert(v12);\r\n        var v15 = v11.clone();\r\n        v15.value = '';\r\n        v15.geometry.x = 1;\r\n        v15.style = {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: 0.5,\r\n          spacingRight: 12,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        ;\r\n        v15.geometry.offset = new Point(0, 32);\r\n        v1.insert(v15);\r\n\r\n        var v16 = graph.insertVertex(v1, null, '○', 0, 0, 0, 0,\r\n        {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 25,\r\n          routingCenterX: 0.5,\r\n          spacingLeft: 6,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v16.geometry.x = 1;\r\n        v16.geometry.offset = new Point(8, 15);\r\n        v1.insert(v16);\r\n        var v17 = graph.insertVertex(v1, null, 'X', 0, 0, 0, 0,\r\n        {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: 0.5,\r\n          spacingLeft: 6,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v17.geometry.x = 1;\r\n        v17.geometry.offset = new Point(14, 20);\r\n        v1.insert(v17);\r\n        var v18 = graph.insertVertex(v1, null, 'Y', 0, 0, 0, 0,\r\n        {\r\n          shape: 'line',\r\n          align: 'right',\r\n          verticalAlign: 'middle',\r\n          fontSize: 10,\r\n          routingCenterX: 0.5,\r\n          spacingLeft: 6,\r\n          fontColor: fontColor,\r\n          strokeColor: strokeColor\r\n        }\r\n        );\r\n        v18.geometry.x = 1;\r\n        v18.geometry.offset = new Point(14, 59);\r\n        v1.insert(v18);\r\n      }\r\n    })\r\n  }\r\n\r\n  buttons.forEach((button) => {\r\n    button.addEventListener('click', update);\r\n  });\r\n\r\n  ////////////////////////////////////////////////////////\r\n// XML \r\n\r\ndocument.getElementById(\"xml\").onclick = () => {\r\n  // Получаем XML данные\r\n  const xml = new ModelXmlSerializer(graph.getDataModel()).export();\r\n  \r\n  // Создаем новый Blob объект с XML данными\r\n  const blob = new Blob([xml], { type: 'text/xml' });\r\n  \r\n  // Создаем ссылку на Blob объект\r\n  const url = window.URL.createObjectURL(blob);\r\n  \r\n  // Создаем ссылку для скачивания\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = 'data.xml'; // Имя файла для скачивания\r\n  document.body.appendChild(a);\r\n  \r\n  // Инициируем скачивание файла\r\n  a.click();\r\n  \r\n  // Освобождаем ресурсы\r\n  window.URL.revokeObjectURL(url);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\ndocument.getElementById(\"import\").onclick = () => {\r\n  input.click();\r\n}\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n\r\n    document.getElementById(\"zoom\").onclick = () => graph.zoomIn();\r\n    document.getElementById(\"zoomout\").onclick = () => graph.zoomOut();\r\n\r\n      // Undo/redo\r\n  let undoManager = new UndoManager();\r\n  let listener = function (sender, evt) {\r\n    undoManager.undoableEditHappened(evt.getProperty('edit'));\r\n  };\r\n  graph.getDataModel().addListener(InternalEvent.UNDO, listener);\r\n  graph.getView().addListener(InternalEvent.UNDO, listener);\r\n\r\n  document.getElementById(\"undo\").onclick = () => undoManager.undo();\r\n  document.getElementById(\"redo\").onclick = () => undoManager.redo();\r\n\r\n\r\n  document.getElementById(\"delete\").onclick = () => graph.removeCells();\r\n\r\n  // Wire-mode\r\n  let checkbox = document.getElementById(\"wire\");\r\n\r\n  // Grid\r\n  let checkbox2 = document.getElementById(\"grid\");\r\n  checkbox2.setAttribute('checked', 'true');\r\n\r\n\r\n  InternalEvent.addListener(checkbox2, 'click', function (evt) {\r\n    if (checkbox2.checked) {\r\n      container.style.background = 'url(./images/grid.gif)';\r\n    } else {\r\n      container.style.background = '';\r\n    }\r\n    container.style.backgroundColor = invert ? 'black' : 'white';\r\n  });\r\n  InternalEvent.disableContextMenu(container);\r\n\r\n\r\n    graphContainer.appendChild(parentContainer);\r\n\r\n    return () => {\r\n      // Clean up if needed\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={graphContainerRef} style={{ width: '100%', height: '100%'}} />;\r\n};\r\n\r\nexport default YourComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
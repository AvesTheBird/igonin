{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { ARROW } from '../../../util/Constants';\n/**\n * A static class that implements all markers for VML and SVG using a registry.\n * NOTE: The signatures in this class will change.\n * @class MarkerShape\n */\nclass MarkerShape {\n  /**\n   * Adds a factory method that updates a given endpoint and returns a\n   * function to paint the marker onto the given canvas.\n   */\n  static addMarker(type, funct) {\n    MarkerShape.markers[type] = funct;\n  }\n  /**\n   * Returns a function to paint the given marker.\n   */\n  static createMarker(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {\n    const funct = MarkerShape.markers[type];\n    return funct ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n  }\n}\n/**\n * Maps from markers names to functions to paint the markers.\n *\n * Mapping: the attribute name on the object is the marker type, the associated value is the function to paint the marker\n */\nMarkerShape.markers = {};\n/**\n * Adds the classic and block marker factory method.\n */\n(() => {\n  function createArrow(widthFactor = 2) {\n    return (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) => {\n      // The angle of the forward facing arrow sides against the x axis is\n      // 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n      // only half the strokewidth is processed ).\n      const endOffsetX = unitX * sw * 1.118;\n      const endOffsetY = unitY * sw * 1.118;\n      unitX *= size + sw;\n      unitY *= size + sw;\n      const pt = pe.clone();\n      pt.x -= endOffsetX;\n      pt.y -= endOffsetY;\n      const f = type !== ARROW.CLASSIC && type !== ARROW.CLASSIC_THIN ? 1 : 3 / 4;\n      pe.x += -unitX * f - endOffsetX;\n      pe.y += -unitY * f - endOffsetY;\n      return () => {\n        canvas.begin();\n        canvas.moveTo(pt.x, pt.y);\n        canvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n        if (type === ARROW.CLASSIC || type === ARROW.CLASSIC_THIN) {\n          canvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n        }\n        canvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n        canvas.close();\n        if (filled) {\n          canvas.fillAndStroke();\n        } else {\n          canvas.stroke();\n        }\n      };\n    };\n  }\n  MarkerShape.addMarker('classic', createArrow(2));\n  MarkerShape.addMarker('classicThin', createArrow(3));\n  MarkerShape.addMarker('block', createArrow(2));\n  MarkerShape.addMarker('blockThin', createArrow(3));\n  function createOpenArrow(widthFactor = 2) {\n    return (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) => {\n      // The angle of the forward facing arrow sides against the x axis is\n      // 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n      // only half the strokewidth is processed ).\n      const endOffsetX = unitX * sw * 1.118;\n      const endOffsetY = unitY * sw * 1.118;\n      unitX *= size + sw;\n      unitY *= size + sw;\n      const pt = pe.clone();\n      pt.x -= endOffsetX;\n      pt.y -= endOffsetY;\n      pe.x += -endOffsetX * 2;\n      pe.y += -endOffsetY * 2;\n      return () => {\n        canvas.begin();\n        canvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n        canvas.lineTo(pt.x, pt.y);\n        canvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n        canvas.stroke();\n      };\n    };\n  }\n  MarkerShape.addMarker('open', createOpenArrow(2));\n  MarkerShape.addMarker('openThin', createOpenArrow(3));\n  MarkerShape.addMarker('oval', (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) => {\n    const a = size / 2;\n    const pt = pe.clone();\n    pe.x -= unitX * a;\n    pe.y -= unitY * a;\n    return () => {\n      canvas.ellipse(pt.x - a, pt.y - a, size, size);\n      if (filled) {\n        canvas.fillAndStroke();\n      } else {\n        canvas.stroke();\n      }\n    };\n  });\n  function diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {\n    // The angle of the forward facing arrow sides against the x axis is\n    // 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n    // only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n    // Note these values and the tk variable below are dependent, update\n    // both together (saves trig hard coding it).\n    const swFactor = type === ARROW.DIAMOND ? 0.7071 : 0.9862;\n    const endOffsetX = unitX * sw * swFactor;\n    const endOffsetY = unitY * sw * swFactor;\n    unitX *= size + sw;\n    unitY *= size + sw;\n    const pt = pe.clone();\n    pt.x -= endOffsetX;\n    pt.y -= endOffsetY;\n    pe.x += -unitX - endOffsetX;\n    pe.y += -unitY - endOffsetY;\n    // thickness factor for diamond\n    const tk = type === ARROW.DIAMOND ? 2 : 3.4;\n    return () => {\n      canvas.begin();\n      canvas.moveTo(pt.x, pt.y);\n      canvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n      canvas.lineTo(pt.x - unitX, pt.y - unitY);\n      canvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n      canvas.close();\n      if (filled) {\n        canvas.fillAndStroke();\n      } else {\n        canvas.stroke();\n      }\n    };\n  }\n  MarkerShape.addMarker('diamond', diamond);\n  MarkerShape.addMarker('diamondThin', diamond);\n})();\nexport default MarkerShape;","map":{"version":3,"names":["ARROW","MarkerShape","addMarker","type","funct","markers","createMarker","canvas","shape","pe","unitX","unitY","size","source","sw","filled","createArrow","widthFactor","endOffsetX","endOffsetY","pt","clone","x","y","f","CLASSIC","CLASSIC_THIN","begin","moveTo","lineTo","close","fillAndStroke","stroke","createOpenArrow","a","ellipse","diamond","swFactor","DIAMOND","tk"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/geometry/edge/MarkerShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { ARROW } from '../../../util/Constants';\n/**\n * A static class that implements all markers for VML and SVG using a registry.\n * NOTE: The signatures in this class will change.\n * @class MarkerShape\n */\nclass MarkerShape {\n    /**\n     * Adds a factory method that updates a given endpoint and returns a\n     * function to paint the marker onto the given canvas.\n     */\n    static addMarker(type, funct) {\n        MarkerShape.markers[type] = funct;\n    }\n    /**\n     * Returns a function to paint the given marker.\n     */\n    static createMarker(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {\n        const funct = MarkerShape.markers[type];\n        return funct\n            ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n            : null;\n    }\n}\n/**\n * Maps from markers names to functions to paint the markers.\n *\n * Mapping: the attribute name on the object is the marker type, the associated value is the function to paint the marker\n */\nMarkerShape.markers = {};\n/**\n * Adds the classic and block marker factory method.\n */\n(() => {\n    function createArrow(widthFactor = 2) {\n        return (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) => {\n            // The angle of the forward facing arrow sides against the x axis is\n            // 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n            // only half the strokewidth is processed ).\n            const endOffsetX = unitX * sw * 1.118;\n            const endOffsetY = unitY * sw * 1.118;\n            unitX *= size + sw;\n            unitY *= size + sw;\n            const pt = pe.clone();\n            pt.x -= endOffsetX;\n            pt.y -= endOffsetY;\n            const f = type !== ARROW.CLASSIC && type !== ARROW.CLASSIC_THIN ? 1 : 3 / 4;\n            pe.x += -unitX * f - endOffsetX;\n            pe.y += -unitY * f - endOffsetY;\n            return () => {\n                canvas.begin();\n                canvas.moveTo(pt.x, pt.y);\n                canvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n                if (type === ARROW.CLASSIC || type === ARROW.CLASSIC_THIN) {\n                    canvas.lineTo(pt.x - (unitX * 3) / 4, pt.y - (unitY * 3) / 4);\n                }\n                canvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n                canvas.close();\n                if (filled) {\n                    canvas.fillAndStroke();\n                }\n                else {\n                    canvas.stroke();\n                }\n            };\n        };\n    }\n    MarkerShape.addMarker('classic', createArrow(2));\n    MarkerShape.addMarker('classicThin', createArrow(3));\n    MarkerShape.addMarker('block', createArrow(2));\n    MarkerShape.addMarker('blockThin', createArrow(3));\n    function createOpenArrow(widthFactor = 2) {\n        return (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) => {\n            // The angle of the forward facing arrow sides against the x axis is\n            // 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n            // only half the strokewidth is processed ).\n            const endOffsetX = unitX * sw * 1.118;\n            const endOffsetY = unitY * sw * 1.118;\n            unitX *= size + sw;\n            unitY *= size + sw;\n            const pt = pe.clone();\n            pt.x -= endOffsetX;\n            pt.y -= endOffsetY;\n            pe.x += -endOffsetX * 2;\n            pe.y += -endOffsetY * 2;\n            return () => {\n                canvas.begin();\n                canvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n                canvas.lineTo(pt.x, pt.y);\n                canvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n                canvas.stroke();\n            };\n        };\n    }\n    MarkerShape.addMarker('open', createOpenArrow(2));\n    MarkerShape.addMarker('openThin', createOpenArrow(3));\n    MarkerShape.addMarker('oval', (canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) => {\n        const a = size / 2;\n        const pt = pe.clone();\n        pe.x -= unitX * a;\n        pe.y -= unitY * a;\n        return () => {\n            canvas.ellipse(pt.x - a, pt.y - a, size, size);\n            if (filled) {\n                canvas.fillAndStroke();\n            }\n            else {\n                canvas.stroke();\n            }\n        };\n    });\n    function diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) {\n        // The angle of the forward facing arrow sides against the x axis is\n        // 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n        // only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n        // Note these values and the tk variable below are dependent, update\n        // both together (saves trig hard coding it).\n        const swFactor = type === ARROW.DIAMOND ? 0.7071 : 0.9862;\n        const endOffsetX = unitX * sw * swFactor;\n        const endOffsetY = unitY * sw * swFactor;\n        unitX *= size + sw;\n        unitY *= size + sw;\n        const pt = pe.clone();\n        pt.x -= endOffsetX;\n        pt.y -= endOffsetY;\n        pe.x += -unitX - endOffsetX;\n        pe.y += -unitY - endOffsetY;\n        // thickness factor for diamond\n        const tk = type === ARROW.DIAMOND ? 2 : 3.4;\n        return () => {\n            canvas.begin();\n            canvas.moveTo(pt.x, pt.y);\n            canvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n            canvas.lineTo(pt.x - unitX, pt.y - unitY);\n            canvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n            canvas.close();\n            if (filled) {\n                canvas.fillAndStroke();\n            }\n            else {\n                canvas.stroke();\n            }\n        };\n    }\n    MarkerShape.addMarker('diamond', diamond);\n    MarkerShape.addMarker('diamondThin', diamond);\n})();\nexport default MarkerShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
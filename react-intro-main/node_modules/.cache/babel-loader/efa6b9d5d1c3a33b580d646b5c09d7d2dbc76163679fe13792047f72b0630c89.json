{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst LogicElementManager = ({\n  onGenerateCode\n}) => {\n  _s();\n  const [elements, setElements] = useState([]);\n  useEffect(() => {\n    const handleElementAdded = event => {\n      const newElement = event.detail;\n      setElements(prevElements => [...prevElements, newElement]);\n    };\n    window.addEventListener('elementAdded', handleElementAdded);\n    return () => window.removeEventListener('elementAdded', handleElementAdded);\n  }, []);\n  useEffect(() => {\n    let vhdlCode = `library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\n`;\n    vhdlCode += `entity adder is\\n`;\n    vhdlCode += `  port (\\n`;\n    vhdlCode += `    clk   : in std_logic;\\n`;\n    vhdlCode += `    rst_n : in std_logic;\\n`;\n\n    // Добавляем порты на основе элементов\n    const inputs = [];\n    const outputs = [];\n    elements.forEach(element => {\n      if (element.type === 'INPUT') {\n        inputs.push(element.inputs[0]);\n      }\n      if (element.type === 'OUTPUT') {\n        outputs.push(element.output);\n      }\n    });\n\n    // Добавляем входы\n    inputs.forEach((input, index) => {\n      vhdlCode += `    ${input} : in std_logic${index < inputs.length - 1 || outputs.length > 0 ? ';' : ''}\\n`;\n    });\n\n    // Добавляем выходы\n    outputs.forEach((output, index) => {\n      vhdlCode += `    ${output} : out std_logic${index < outputs.length - 1 ? ';' : ''}\\n`;\n    });\n    vhdlCode += `  );\\nend adder;\\n\\n`;\n    vhdlCode += `architecture rtl of adder is\\n`;\n\n    // Сигналы для внутренних соединений\n    elements.forEach(element => {\n      if (['AND', 'OR', 'NOT'].includes(element.type)) {\n        vhdlCode += `  signal ${element.output} : std_logic;\\n`;\n      }\n    });\n    vhdlCode += `begin\\n`;\n\n    // Логические элементы\n    elements.forEach((element, index) => {\n      switch (element.type) {\n        case 'AND':\n          vhdlCode += `  AND_GATE_${index}: entity work.and_gate\\n`;\n          vhdlCode += `    port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\n          break;\n        case 'OR':\n          vhdlCode += `  OR_GATE_${index}: entity work.or_gate\\n`;\n          vhdlCode += `    port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\n          break;\n        case 'NOT':\n          vhdlCode += `  NOT_GATE_${index}: entity work.not_gate\\n`;\n          vhdlCode += `    port map (A => ${element.inputs[0]}, Y => ${element.output});\\n`;\n          break;\n        default:\n          vhdlCode += `  -- Неизвестный элемент: ${element.type}\\n`;\n      }\n    });\n    vhdlCode += `end rtl;\\n`;\n    onGenerateCode(vhdlCode); // Передача кода в редактор\n  }, [elements]);\n};\n_s(LogicElementManager, \"tZwa6oWmA+aeqKemK9M90QcIDxc=\");\n_c = LogicElementManager;\nexport default LogicElementManager;\nvar _c;\n$RefreshReg$(_c, \"LogicElementManager\");","map":{"version":3,"names":["React","useState","useEffect","LogicElementManager","onGenerateCode","_s","elements","setElements","handleElementAdded","event","newElement","detail","prevElements","window","addEventListener","removeEventListener","vhdlCode","inputs","outputs","forEach","element","type","push","output","input","index","length","includes","_c","$RefreshReg$"],"sources":["D:/OSPanel/domains/react/react-intro-main/src/components/LogicElementManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst LogicElementManager = ({ onGenerateCode }) => {\r\n  const [elements, setElements] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const handleElementAdded = (event) => {\r\n      const newElement = event.detail;\r\n      setElements((prevElements) => [...prevElements, newElement]);\r\n    };\r\n\r\n    window.addEventListener('elementAdded', handleElementAdded);\r\n    return () => window.removeEventListener('elementAdded', handleElementAdded);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let vhdlCode = `library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\n`;\r\n\r\n    vhdlCode += `entity adder is\\n`;\r\n    vhdlCode += `  port (\\n`;\r\n    vhdlCode += `    clk   : in std_logic;\\n`;\r\n    vhdlCode += `    rst_n : in std_logic;\\n`;\r\n    \r\n    // Добавляем порты на основе элементов\r\n    const inputs = [];\r\n    const outputs = [];\r\n    \r\n    elements.forEach(element => {\r\n      if (element.type === 'INPUT') {\r\n        inputs.push(element.inputs[0]);\r\n      }\r\n      if (element.type === 'OUTPUT') {\r\n        outputs.push(element.output);\r\n      }\r\n    });\r\n    \r\n    // Добавляем входы\r\n    inputs.forEach((input, index) => {\r\n      vhdlCode += `    ${input} : in std_logic${index < inputs.length - 1 || outputs.length > 0 ? ';' : ''}\\n`;\r\n    });\r\n    \r\n    // Добавляем выходы\r\n    outputs.forEach((output, index) => {\r\n      vhdlCode += `    ${output} : out std_logic${index < outputs.length - 1 ? ';' : ''}\\n`;\r\n    });\r\n    \r\n    vhdlCode += `  );\\nend adder;\\n\\n`;\r\n    \r\n    vhdlCode += `architecture rtl of adder is\\n`;\r\n    \r\n    // Сигналы для внутренних соединений\r\n    elements.forEach((element) => {\r\n      if (['AND', 'OR', 'NOT'].includes(element.type)) {\r\n        vhdlCode += `  signal ${element.output} : std_logic;\\n`;\r\n      }\r\n    });\r\n    \r\n    vhdlCode += `begin\\n`;\r\n    \r\n    // Логические элементы\r\n    elements.forEach((element, index) => {\r\n      switch (element.type) {\r\n        case 'AND':\r\n          vhdlCode += `  AND_GATE_${index}: entity work.and_gate\\n`;\r\n          vhdlCode += `    port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\r\n          break;\r\n    \r\n        case 'OR':\r\n          vhdlCode += `  OR_GATE_${index}: entity work.or_gate\\n`;\r\n          vhdlCode += `    port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\r\n          break;\r\n    \r\n        case 'NOT':\r\n          vhdlCode += `  NOT_GATE_${index}: entity work.not_gate\\n`;\r\n          vhdlCode += `    port map (A => ${element.inputs[0]}, Y => ${element.output});\\n`;\r\n          break;\r\n    \r\n        default:\r\n          vhdlCode += `  -- Неизвестный элемент: ${element.type}\\n`;\r\n      }\r\n    });\r\n    \r\n    vhdlCode += `end rtl;\\n`;\r\n    \r\n\r\n    onGenerateCode(vhdlCode); // Передача кода в редактор\r\n  }, [elements]);\r\n\r\n\r\n};\r\n\r\nexport default LogicElementManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
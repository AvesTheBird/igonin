{"ast":null,"code":"var _FoldingController, _FoldLevelAction;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar FoldingController_1;\nimport { createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { FoldingRangeKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { FoldingDecorationProvider } from './foldingDecorations.js';\nimport { FoldingRegions } from './foldingRanges.js';\nimport { SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nlet FoldingController = (_FoldingController = class FoldingController extends Disposable {\n  static get(editor) {\n    return editor.getContribution(FoldingController_1.ID);\n  }\n  static getFoldingRangeProviders(languageFeaturesService, model) {\n    var _FoldingController_1$, _FoldingController_1$2, _FoldingController_;\n    const foldingRangeProviders = languageFeaturesService.foldingRangeProvider.ordered(model);\n    return (_FoldingController_1$ = (_FoldingController_1$2 = (_FoldingController_ = FoldingController_1)._foldingRangeSelector) === null || _FoldingController_1$2 === void 0 ? void 0 : _FoldingController_1$2.call(_FoldingController_, foldingRangeProviders, model)) !== null && _FoldingController_1$ !== void 0 ? _FoldingController_1$ : foldingRangeProviders;\n  }\n  constructor(editor, contextKeyService, languageConfigurationService, notificationService, languageFeatureDebounceService, languageFeaturesService) {\n    super();\n    this.contextKeyService = contextKeyService;\n    this.languageConfigurationService = languageConfigurationService;\n    this.languageFeaturesService = languageFeaturesService;\n    this.localToDispose = this._register(new DisposableStore());\n    this.editor = editor;\n    this._foldingLimitReporter = new RangesLimitReporter(editor);\n    const options = this.editor.getOptions();\n    this._isEnabled = options.get(43 /* EditorOption.folding */);\n    this._useFoldingProviders = options.get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n    this._unfoldOnClickAfterEndOfLine = options.get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n    this._restoringViewState = false;\n    this._currentModelHasFoldedImports = false;\n    this._foldingImportsByDefault = options.get(46 /* EditorOption.foldingImportsByDefault */);\n    this.updateDebounceInfo = languageFeatureDebounceService.for(languageFeaturesService.foldingRangeProvider, 'Folding', {\n      min: 200\n    });\n    this.foldingModel = null;\n    this.hiddenRangeModel = null;\n    this.rangeProvider = null;\n    this.foldingRegionPromise = null;\n    this.foldingModelPromise = null;\n    this.updateScheduler = null;\n    this.cursorChangedScheduler = null;\n    this.mouseDownInfo = null;\n    this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n    this.foldingDecorationProvider.showFoldingControls = options.get(111 /* EditorOption.showFoldingControls */);\n    this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n    this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n    this.foldingEnabled.set(this._isEnabled);\n    this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n    this._register(this.editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(43 /* EditorOption.folding */)) {\n        this._isEnabled = this.editor.getOptions().get(43 /* EditorOption.folding */);\n        this.foldingEnabled.set(this._isEnabled);\n        this.onModelChanged();\n      }\n      if (e.hasChanged(47 /* EditorOption.foldingMaximumRegions */)) {\n        this.onModelChanged();\n      }\n      if (e.hasChanged(111 /* EditorOption.showFoldingControls */) || e.hasChanged(45 /* EditorOption.foldingHighlight */)) {\n        const options = this.editor.getOptions();\n        this.foldingDecorationProvider.showFoldingControls = options.get(111 /* EditorOption.showFoldingControls */);\n        this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n        this.triggerFoldingModelChanged();\n      }\n      if (e.hasChanged(44 /* EditorOption.foldingStrategy */)) {\n        this._useFoldingProviders = this.editor.getOptions().get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n        this.onFoldingStrategyChanged();\n      }\n      if (e.hasChanged(48 /* EditorOption.unfoldOnClickAfterEndOfLine */)) {\n        this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n      }\n      if (e.hasChanged(46 /* EditorOption.foldingImportsByDefault */)) {\n        this._foldingImportsByDefault = this.editor.getOptions().get(46 /* EditorOption.foldingImportsByDefault */);\n      }\n    }));\n    this.onModelChanged();\n  }\n  /**\n   * Store view state.\n   */\n  saveViewState() {\n    const model = this.editor.getModel();\n    if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n      return {};\n    }\n    if (this.foldingModel) {\n      // disposed ?\n      const collapsedRegions = this.foldingModel.getMemento();\n      const provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n      return {\n        collapsedRegions,\n        lineCount: model.getLineCount(),\n        provider,\n        foldedImports: this._currentModelHasFoldedImports\n      };\n    }\n    return undefined;\n  }\n  /**\n   * Restore view state.\n   */\n  restoreViewState(state) {\n    const model = this.editor.getModel();\n    if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n      return;\n    }\n    if (!state) {\n      return;\n    }\n    this._currentModelHasFoldedImports = !!state.foldedImports;\n    if (state.collapsedRegions && state.collapsedRegions.length > 0 && this.foldingModel) {\n      this._restoringViewState = true;\n      try {\n        this.foldingModel.applyMemento(state.collapsedRegions);\n      } finally {\n        this._restoringViewState = false;\n      }\n    }\n  }\n  onModelChanged() {\n    this.localToDispose.clear();\n    const model = this.editor.getModel();\n    if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n      // huge files get no view model, so they cannot support hidden areas\n      return;\n    }\n    this._currentModelHasFoldedImports = false;\n    this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n    this.localToDispose.add(this.foldingModel);\n    this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n    this.localToDispose.add(this.hiddenRangeModel);\n    this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n    this.updateScheduler = new Delayer(this.updateDebounceInfo.get(model));\n    this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n    this.localToDispose.add(this.cursorChangedScheduler);\n    this.localToDispose.add(this.languageFeaturesService.foldingRangeProvider.onDidChange(() => this.onFoldingStrategyChanged()));\n    this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n    this.localToDispose.add(this.editor.onDidChangeModelContent(e => this.onDidChangeModelContent(e)));\n    this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n    this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n    this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n    this.localToDispose.add({\n      dispose: () => {\n        var _this$updateScheduler, _this$rangeProvider;\n        if (this.foldingRegionPromise) {\n          this.foldingRegionPromise.cancel();\n          this.foldingRegionPromise = null;\n        }\n        (_this$updateScheduler = this.updateScheduler) === null || _this$updateScheduler === void 0 || _this$updateScheduler.cancel();\n        this.updateScheduler = null;\n        this.foldingModel = null;\n        this.foldingModelPromise = null;\n        this.hiddenRangeModel = null;\n        this.cursorChangedScheduler = null;\n        (_this$rangeProvider = this.rangeProvider) === null || _this$rangeProvider === void 0 || _this$rangeProvider.dispose();\n        this.rangeProvider = null;\n      }\n    });\n    this.triggerFoldingModelChanged();\n  }\n  onFoldingStrategyChanged() {\n    var _this$rangeProvider2;\n    (_this$rangeProvider2 = this.rangeProvider) === null || _this$rangeProvider2 === void 0 || _this$rangeProvider2.dispose();\n    this.rangeProvider = null;\n    this.triggerFoldingModelChanged();\n  }\n  getRangeProvider(editorModel) {\n    if (this.rangeProvider) {\n      return this.rangeProvider;\n    }\n    const indentRangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._foldingLimitReporter);\n    this.rangeProvider = indentRangeProvider; // fallback\n    if (this._useFoldingProviders && this.foldingModel) {\n      const selectedProviders = FoldingController_1.getFoldingRangeProviders(this.languageFeaturesService, editorModel);\n      if (selectedProviders.length > 0) {\n        this.rangeProvider = new SyntaxRangeProvider(editorModel, selectedProviders, () => this.triggerFoldingModelChanged(), this._foldingLimitReporter, indentRangeProvider);\n      }\n    }\n    return this.rangeProvider;\n  }\n  getFoldingModel() {\n    return this.foldingModelPromise;\n  }\n  onDidChangeModelContent(e) {\n    var _this$hiddenRangeMode;\n    (_this$hiddenRangeMode = this.hiddenRangeModel) === null || _this$hiddenRangeMode === void 0 || _this$hiddenRangeMode.notifyChangeModelContent(e);\n    this.triggerFoldingModelChanged();\n  }\n  triggerFoldingModelChanged() {\n    if (this.updateScheduler) {\n      if (this.foldingRegionPromise) {\n        this.foldingRegionPromise.cancel();\n        this.foldingRegionPromise = null;\n      }\n      this.foldingModelPromise = this.updateScheduler.trigger(() => {\n        const foldingModel = this.foldingModel;\n        if (!foldingModel) {\n          // null if editor has been disposed, or folding turned off\n          return null;\n        }\n        const sw = new StopWatch();\n        const provider = this.getRangeProvider(foldingModel.textModel);\n        const foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => provider.compute(token));\n        return foldingRegionPromise.then(foldingRanges => {\n          if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) {\n            var _scrollState;\n            // new request or cancelled in the meantime?\n            let scrollState;\n            if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {\n              const hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n              if (hasChanges) {\n                scrollState = StableEditorScrollState.capture(this.editor);\n                this._currentModelHasFoldedImports = hasChanges;\n              }\n            }\n            // some cursors might have moved into hidden regions, make sure they are in expanded regions\n            const selections = this.editor.getSelections();\n            foldingModel.update(foldingRanges, toSelectedLines(selections));\n            (_scrollState = scrollState) === null || _scrollState === void 0 || _scrollState.restore(this.editor);\n            // update debounce info\n            const newValue = this.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n            if (this.updateScheduler) {\n              this.updateScheduler.defaultDelay = newValue;\n            }\n          }\n          return foldingModel;\n        });\n      }).then(undefined, err => {\n        onUnexpectedError(err);\n        return null;\n      });\n    }\n  }\n  onHiddenRangesChanges(hiddenRanges) {\n    if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n      const selections = this.editor.getSelections();\n      if (selections) {\n        if (this.hiddenRangeModel.adjustSelections(selections)) {\n          this.editor.setSelections(selections);\n        }\n      }\n    }\n    this.editor.setHiddenAreas(hiddenRanges, this);\n  }\n  onCursorPositionChanged() {\n    if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n      this.cursorChangedScheduler.schedule();\n    }\n  }\n  revealCursor() {\n    const foldingModel = this.getFoldingModel();\n    if (!foldingModel) {\n      return;\n    }\n    foldingModel.then(foldingModel => {\n      if (foldingModel) {\n        const selections = this.editor.getSelections();\n        if (selections && selections.length > 0) {\n          const toToggle = [];\n          for (const selection of selections) {\n            const lineNumber = selection.selectionStartLineNumber;\n            if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n              toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n            }\n          }\n          if (toToggle.length) {\n            foldingModel.toggleCollapseState(toToggle);\n            this.reveal(selections[0].getPosition());\n          }\n        }\n      }\n    }).then(undefined, onUnexpectedError);\n  }\n  onEditorMouseDown(e) {\n    this.mouseDownInfo = null;\n    if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n      return;\n    }\n    if (!e.event.leftButton && !e.event.middleButton) {\n      return;\n    }\n    const range = e.target.range;\n    let iconClicked = false;\n    switch (e.target.type) {\n      case 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */:\n        {\n          const data = e.target.detail;\n          const offsetLeftInGutter = e.target.element.offsetLeft;\n          const gutterOffsetX = data.offsetX - offsetLeftInGutter;\n          // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n          // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n          if (gutterOffsetX < 4) {\n            // the whitespace between the border and the real folding icon border is 4px\n            return;\n          }\n          iconClicked = true;\n          break;\n        }\n      case 7 /* MouseTargetType.CONTENT_EMPTY */:\n        {\n          if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n            const data = e.target.detail;\n            if (!data.isAfterLines) {\n              break;\n            }\n          }\n          return;\n        }\n      case 6 /* MouseTargetType.CONTENT_TEXT */:\n        {\n          if (this.hiddenRangeModel.hasRanges()) {\n            const model = this.editor.getModel();\n            if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n              break;\n            }\n          }\n          return;\n        }\n      default:\n        return;\n    }\n    this.mouseDownInfo = {\n      lineNumber: range.startLineNumber,\n      iconClicked\n    };\n  }\n  onEditorMouseUp(e) {\n    const foldingModel = this.foldingModel;\n    if (!foldingModel || !this.mouseDownInfo || !e.target) {\n      return;\n    }\n    const lineNumber = this.mouseDownInfo.lineNumber;\n    const iconClicked = this.mouseDownInfo.iconClicked;\n    const range = e.target.range;\n    if (!range || range.startLineNumber !== lineNumber) {\n      return;\n    }\n    if (iconClicked) {\n      if (e.target.type !== 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n        return;\n      }\n    } else {\n      const model = this.editor.getModel();\n      if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n        return;\n      }\n    }\n    const region = foldingModel.getRegionAtLine(lineNumber);\n    if (region && region.startLineNumber === lineNumber) {\n      const isCollapsed = region.isCollapsed;\n      if (iconClicked || isCollapsed) {\n        const surrounding = e.event.altKey;\n        let toToggle = [];\n        if (surrounding) {\n          const filter = otherRegion => !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n          const toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n          for (const r of toMaybeToggle) {\n            if (r.isCollapsed) {\n              toToggle.push(r);\n            }\n          }\n          // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n          if (toToggle.length === 0) {\n            toToggle = toMaybeToggle;\n          }\n        } else {\n          const recursive = e.event.middleButton || e.event.shiftKey;\n          if (recursive) {\n            for (const r of foldingModel.getRegionsInside(region)) {\n              if (r.isCollapsed === isCollapsed) {\n                toToggle.push(r);\n              }\n            }\n          }\n          // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n          if (isCollapsed || !recursive || toToggle.length === 0) {\n            toToggle.push(region);\n          }\n        }\n        foldingModel.toggleCollapseState(toToggle);\n        this.reveal({\n          lineNumber,\n          column: 1\n        });\n      }\n    }\n  }\n  reveal(position) {\n    this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* ScrollType.Smooth */);\n  }\n}, FoldingController_1 = _FoldingController, _FoldingController.ID = 'editor.contrib.folding', _FoldingController);\nFoldingController = FoldingController_1 = __decorate([__param(1, IContextKeyService), __param(2, ILanguageConfigurationService), __param(3, INotificationService), __param(4, ILanguageFeatureDebounceService), __param(5, ILanguageFeaturesService)], FoldingController);\nexport { FoldingController };\nexport class RangesLimitReporter {\n  constructor(editor) {\n    this.editor = editor;\n    this._onDidChange = new Emitter();\n    this._computed = 0;\n    this._limited = false;\n  }\n  get limit() {\n    return this.editor.getOptions().get(47 /* EditorOption.foldingMaximumRegions */);\n  }\n  update(computed, limited) {\n    if (computed !== this._computed || limited !== this._limited) {\n      this._computed = computed;\n      this._limited = limited;\n      this._onDidChange.fire();\n    }\n  }\n}\nclass FoldingAction extends EditorAction {\n  runEditorCommand(accessor, editor, args) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const foldingController = FoldingController.get(editor);\n    if (!foldingController) {\n      return;\n    }\n    const foldingModelPromise = foldingController.getFoldingModel();\n    if (foldingModelPromise) {\n      this.reportTelemetry(accessor, editor);\n      return foldingModelPromise.then(foldingModel => {\n        if (foldingModel) {\n          this.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n          const selection = editor.getSelection();\n          if (selection) {\n            foldingController.reveal(selection.getStartPosition());\n          }\n        }\n      });\n    }\n  }\n  getSelectedLines(editor) {\n    const selections = editor.getSelections();\n    return selections ? selections.map(s => s.startLineNumber) : [];\n  }\n  getLineNumbers(args, editor) {\n    if (args && args.selectionLines) {\n      return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n    }\n    return this.getSelectedLines(editor);\n  }\n  run(_accessor, _editor) {}\n}\nexport function toSelectedLines(selections) {\n  if (!selections || selections.length === 0) {\n    return {\n      startsInside: () => false\n    };\n  }\n  return {\n    startsInside(startLine, endLine) {\n      for (const s of selections) {\n        const line = s.startLineNumber;\n        if (line >= startLine && line <= endLine) {\n          return true;\n        }\n      }\n      return false;\n    }\n  };\n}\nfunction foldingArgumentsConstraint(args) {\n  if (!types.isUndefined(args)) {\n    if (!types.isObject(args)) {\n      return false;\n    }\n    const foldingArgs = args;\n    if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n      return false;\n    }\n    if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n      return false;\n    }\n    if (!types.isUndefined(foldingArgs.selectionLines) && (!Array.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n      return false;\n    }\n  }\n  return true;\n}\nclass UnfoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfold',\n      label: nls.localize('unfoldAction.label', \"Unfold\"),\n      alias: 'Unfold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 94 /* KeyCode.BracketRight */,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      metadata: {\n        description: 'Unfold the content in the editor',\n        args: [{\n          name: 'Unfold editor argument',\n          description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t\\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\\n\\t\\t\\t\\t\\t\\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\\n\\t\\t\\t\\t\\t\\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\\n\\t\\t\\t\\t\\t\\t\",\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number',\n                'default': 1\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down'],\n                'default': 'down'\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args) {\n    const levels = args && args.levels || 1;\n    const lineNumbers = this.getLineNumbers(args, editor);\n    if (args && args.direction === 'up') {\n      setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n    } else {\n      setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n    }\n  }\n}\nclass UnFoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldRecursively',\n      label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n      alias: 'Unfold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, _args) {\n    setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n  }\n}\nclass FoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.fold',\n      label: nls.localize('foldAction.label', \"Fold\"),\n      alias: 'Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 92 /* KeyCode.BracketLeft */,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      metadata: {\n        description: 'Fold the content in the editor',\n        args: [{\n          name: 'Fold editor argument',\n          description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t\\t\\t* 'levels': Number of levels to fold.\\n\\t\\t\\t\\t\\t\\t\\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\\n\\t\\t\\t\\t\\t\\t\\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\\n\\t\\t\\t\\t\\t\\t\\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\\n\\t\\t\\t\\t\\t\\t\",\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number'\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down']\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args) {\n    const lineNumbers = this.getLineNumbers(args, editor);\n    const levels = args && args.levels;\n    const direction = args && args.direction;\n    if (typeof levels !== 'number' && typeof direction !== 'string') {\n      // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n      setCollapseStateUp(foldingModel, true, lineNumbers);\n    } else {\n      if (direction === 'up') {\n        setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n      } else {\n        setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n      }\n    }\n  }\n}\nclass ToggleFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.toggleFold',\n      label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n      alias: 'Toggle Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 42 /* KeyCode.KeyL */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    toggleCollapseState(foldingModel, 1, selectedLines);\n  }\n}\nclass FoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldRecursively',\n      label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n      alias: 'Fold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n  }\n}\nclass ToggleFoldRecursivelyAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.toggleFoldRecursively',\n      label: nls.localize('toggleFoldRecursivelyAction.label', \"Toggle Fold Recursively\"),\n      alias: 'Toggle Fold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 42 /* KeyCode.KeyL */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    toggleCollapseState(foldingModel, Number.MAX_VALUE, selectedLines);\n  }\n}\nclass FoldAllBlockCommentsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllBlockComments',\n      label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n      alias: 'Fold All Block Comments',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 90 /* KeyCode.Slash */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      const comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n      if (comments && comments.blockCommentStartToken) {\n        const regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n        setCollapseStateForMatchingLines(foldingModel, regExp, true);\n      }\n    }\n  }\n}\nclass FoldAllRegionsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllMarkerRegions',\n      label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n      alias: 'Fold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 29 /* KeyCode.Digit8 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n        const regExp = new RegExp(foldingRules.markers.start);\n        setCollapseStateForMatchingLines(foldingModel, regExp, true);\n      }\n    }\n  }\n}\nclass UnfoldAllRegionsAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAllMarkerRegions',\n      label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n      alias: 'Unfold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 30 /* KeyCode.Digit9 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n    if (foldingModel.regions.hasTypes()) {\n      setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n    } else {\n      const editorModel = editor.getModel();\n      if (!editorModel) {\n        return;\n      }\n      const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n      if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n        const regExp = new RegExp(foldingRules.markers.start);\n        setCollapseStateForMatchingLines(foldingModel, regExp, false);\n      }\n    }\n  }\n}\nclass FoldAllExceptAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAllExcept',\n      label: nls.localize('foldAllExcept.label', \"Fold All Except Selected\"),\n      alias: 'Fold All Except Selected',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 88 /* KeyCode.Minus */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    setCollapseStateForRest(foldingModel, true, selectedLines);\n  }\n}\nclass UnfoldAllExceptAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAllExcept',\n      label: nls.localize('unfoldAllExcept.label', \"Unfold All Except Selected\"),\n      alias: 'Unfold All Except Selected',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 86 /* KeyCode.Equal */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    setCollapseStateForRest(foldingModel, false, selectedLines);\n  }\n}\nclass FoldAllAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.foldAll',\n      label: nls.localize('foldAllAction.label', \"Fold All\"),\n      alias: 'Fold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, _editor) {\n    setCollapseStateLevelsDown(foldingModel, true);\n  }\n}\nclass UnfoldAllAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.unfoldAll',\n      label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n      alias: 'Unfold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 40 /* KeyCode.KeyJ */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, _editor) {\n    setCollapseStateLevelsDown(foldingModel, false);\n  }\n}\nclass FoldLevelAction extends FoldingAction {\n  getFoldingLevel() {\n    return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n  }\n}\n/** Action to go to the parent fold of current line */\n_FoldLevelAction = FoldLevelAction;\n_FoldLevelAction.ID_PREFIX = 'editor.foldLevel';\n_FoldLevelAction.ID = level => _FoldLevelAction.ID_PREFIX + level;\nclass GotoParentFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoParentFold',\n      label: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n      alias: 'Go to Parent Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    if (selectedLines.length > 0) {\n      const startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n}\n/** Action to go to the previous fold of current line */\nclass GotoPreviousFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoPreviousFold',\n      label: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n      alias: 'Go to Previous Folding Range',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    if (selectedLines.length > 0) {\n      const startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n}\n/** Action to go to the next fold of current line */\nclass GotoNextFoldAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.gotoNextFold',\n      label: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n      alias: 'Go to Next Folding Range',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const selectedLines = this.getSelectedLines(editor);\n    if (selectedLines.length > 0) {\n      const startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n      if (startLineNumber !== null) {\n        editor.setSelection({\n          startLineNumber: startLineNumber,\n          startColumn: 1,\n          endLineNumber: startLineNumber,\n          endColumn: 1\n        });\n      }\n    }\n  }\n}\nclass FoldRangeFromSelectionAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.createFoldingRangeFromSelection',\n      label: nls.localize('createManualFoldRange.label', \"Create Folding Range from Selection\"),\n      alias: 'Create Folding Range from Selection',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 87 /* KeyCode.Comma */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(_foldingController, foldingModel, editor) {\n    const collapseRanges = [];\n    const selections = editor.getSelections();\n    if (selections) {\n      for (const selection of selections) {\n        let endLineNumber = selection.endLineNumber;\n        if (selection.endColumn === 1) {\n          --endLineNumber;\n        }\n        if (endLineNumber > selection.startLineNumber) {\n          collapseRanges.push({\n            startLineNumber: selection.startLineNumber,\n            endLineNumber: endLineNumber,\n            type: undefined,\n            isCollapsed: true,\n            source: 1 /* FoldSource.userDefined */\n          });\n          editor.setSelection({\n            startLineNumber: selection.startLineNumber,\n            startColumn: 1,\n            endLineNumber: selection.startLineNumber,\n            endColumn: 1\n          });\n        }\n      }\n      if (collapseRanges.length > 0) {\n        var _editor$getModel;\n        collapseRanges.sort((a, b) => {\n          return a.startLineNumber - b.startLineNumber;\n        });\n        const newRanges = FoldingRegions.sanitizeAndMerge(foldingModel.regions, collapseRanges, (_editor$getModel = editor.getModel()) === null || _editor$getModel === void 0 ? void 0 : _editor$getModel.getLineCount());\n        foldingModel.updatePost(FoldingRegions.fromFoldRanges(newRanges));\n      }\n    }\n  }\n}\nclass RemoveFoldRangeFromSelectionAction extends FoldingAction {\n  constructor() {\n    super({\n      id: 'editor.removeManualFoldingRanges',\n      label: nls.localize('removeManualFoldingRanges.label', \"Remove Manual Folding Ranges\"),\n      alias: 'Remove Manual Folding Ranges',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n  invoke(foldingController, foldingModel, editor) {\n    const selections = editor.getSelections();\n    if (selections) {\n      const ranges = [];\n      for (const selection of selections) {\n        const {\n          startLineNumber,\n          endLineNumber\n        } = selection;\n        ranges.push(endLineNumber >= startLineNumber ? {\n          startLineNumber,\n          endLineNumber\n        } : {\n          endLineNumber,\n          startLineNumber\n        });\n      }\n      foldingModel.removeManualRanges(ranges);\n      foldingController.triggerFoldingModelChanged();\n    }\n  }\n}\nregisterEditorContribution(FoldingController.ID, FoldingController, 0 /* EditorContributionInstantiation.Eager */); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(ToggleFoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllExceptAction);\nregisterEditorAction(UnfoldAllExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\nregisterEditorAction(FoldRangeFromSelectionAction);\nregisterEditorAction(RemoveFoldRangeFromSelectionAction);\nfor (let i = 1; i <= 7; i++) {\n  registerInstantiatedEditorAction(new FoldLevelAction({\n    id: FoldLevelAction.ID(i),\n    label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n    alias: \"Fold Level \".concat(i),\n    precondition: CONTEXT_FOLDING_ENABLED,\n    kbOpts: {\n      kbExpr: EditorContextKeys.editorTextFocus,\n      primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */ + i),\n      weight: 100 /* KeybindingWeight.EditorContrib */\n    }\n  }));\n}\nCommandsRegistry.registerCommand('_executeFoldingRangeProvider', async function (accessor) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  const [resource] = args;\n  if (!(resource instanceof URI)) {\n    throw illegalArgument();\n  }\n  const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n  const model = accessor.get(IModelService).getModel(resource);\n  if (!model) {\n    throw illegalArgument();\n  }\n  const configurationService = accessor.get(IConfigurationService);\n  if (!configurationService.getValue('editor.folding', {\n    resource\n  })) {\n    return [];\n  }\n  const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n  const strategy = configurationService.getValue('editor.foldingStrategy', {\n    resource\n  });\n  const foldingLimitReporter = {\n    get limit() {\n      return configurationService.getValue('editor.foldingMaximumRegions', {\n        resource\n      });\n    },\n    update: (computed, limited) => {}\n  };\n  const indentRangeProvider = new IndentRangeProvider(model, languageConfigurationService, foldingLimitReporter);\n  let rangeProvider = indentRangeProvider;\n  if (strategy !== 'indentation') {\n    const providers = FoldingController.getFoldingRangeProviders(languageFeaturesService, model);\n    if (providers.length) {\n      rangeProvider = new SyntaxRangeProvider(model, providers, () => {}, foldingLimitReporter, indentRangeProvider);\n    }\n  }\n  const ranges = await rangeProvider.compute(CancellationToken.None);\n  const result = [];\n  try {\n    if (ranges) {\n      for (let i = 0; i < ranges.length; i++) {\n        const type = ranges.getType(i);\n        result.push({\n          start: ranges.getStartLineNumber(i),\n          end: ranges.getEndLineNumber(i),\n          kind: type ? FoldingRangeKind.fromValue(type) : undefined\n        });\n      }\n    }\n    return result;\n  } finally {\n    rangeProvider.dispose();\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","FoldingController_1","createCancelablePromise","Delayer","RunOnceScheduler","CancellationToken","illegalArgument","onUnexpectedError","KeyChord","Disposable","DisposableStore","escapeRegExpCharacters","types","StableEditorScrollState","EditorAction","registerEditorAction","registerEditorContribution","registerInstantiatedEditorAction","EditorContextKeys","FoldingRangeKind","ILanguageConfigurationService","FoldingModel","getNextFoldLine","getParentFoldLine","getPreviousFoldLine","setCollapseStateAtLevel","setCollapseStateForMatchingLines","setCollapseStateForRest","setCollapseStateForType","setCollapseStateLevelsDown","setCollapseStateLevelsUp","setCollapseStateUp","toggleCollapseState","HiddenRangeModel","IndentRangeProvider","nls","IContextKeyService","RawContextKey","FoldingDecorationProvider","FoldingRegions","SyntaxRangeProvider","INotificationService","ILanguageFeatureDebounceService","StopWatch","ILanguageFeaturesService","Emitter","CommandsRegistry","URI","IModelService","IConfigurationService","CONTEXT_FOLDING_ENABLED","FoldingController","_FoldingController","get","editor","getContribution","ID","getFoldingRangeProviders","languageFeaturesService","model","_FoldingController_1$","_FoldingController_1$2","_FoldingController_","foldingRangeProviders","foldingRangeProvider","ordered","_foldingRangeSelector","call","constructor","contextKeyService","languageConfigurationService","notificationService","languageFeatureDebounceService","localToDispose","_register","_foldingLimitReporter","RangesLimitReporter","options","getOptions","_isEnabled","_useFoldingProviders","_unfoldOnClickAfterEndOfLine","_restoringViewState","_currentModelHasFoldedImports","_foldingImportsByDefault","updateDebounceInfo","for","min","foldingModel","hiddenRangeModel","rangeProvider","foldingRegionPromise","foldingModelPromise","updateScheduler","cursorChangedScheduler","mouseDownInfo","foldingDecorationProvider","showFoldingControls","showFoldingHighlights","foldingEnabled","bindTo","set","onDidChangeModel","onModelChanged","onDidChangeConfiguration","e","hasChanged","triggerFoldingModelChanged","onFoldingStrategyChanged","saveViewState","getModel","isTooLargeForTokenization","collapsedRegions","getMemento","provider","id","undefined","lineCount","getLineCount","foldedImports","restoreViewState","state","applyMemento","clear","add","onDidChange","hr","onHiddenRangesChanges","revealCursor","onDidChangeModelLanguageConfiguration","onDidChangeModelContent","onDidChangeCursorPosition","onCursorPositionChanged","onMouseDown","onEditorMouseDown","onMouseUp","onEditorMouseUp","dispose","_this$updateScheduler","_this$rangeProvider","cancel","_this$rangeProvider2","getRangeProvider","editorModel","indentRangeProvider","selectedProviders","getFoldingModel","_this$hiddenRangeMode","notifyChangeModelContent","trigger","sw","textModel","token","compute","then","foldingRanges","_scrollState","scrollState","hasChanges","setCollapsedAllOfType","Imports","value","capture","selections","getSelections","update","toSelectedLines","restore","newValue","elapsed","defaultDelay","err","hiddenRanges","adjustSelections","setSelections","setHiddenAreas","hasRanges","schedule","toToggle","selection","lineNumber","selectionStartLineNumber","isHidden","push","getAllRegionsAtLine","isCollapsed","startLineNumber","reveal","getPosition","range","event","leftButton","middleButton","iconClicked","type","data","detail","offsetLeftInGutter","element","offsetLeft","gutterOffsetX","offsetX","isAfterLines","startColumn","getLineMaxColumn","region","getRegionAtLine","surrounding","altKey","filter","otherRegion","containedBy","toMaybeToggle","getRegionsInside","recursive","shiftKey","column","position","revealPositionInCenterIfOutsideViewport","_onDidChange","_computed","_limited","limit","computed","limited","fire","FoldingAction","runEditorCommand","accessor","args","foldingController","reportTelemetry","invoke","getSelection","getStartPosition","getSelectedLines","map","s","getLineNumbers","selectionLines","l","run","_accessor","_editor","startsInside","startLine","endLine","line","foldingArgumentsConstraint","isUndefined","isObject","foldingArgs","levels","isNumber","direction","isString","Array","isArray","every","UnfoldAction","label","localize","alias","precondition","kbOpts","kbExpr","editorTextFocus","primary","mac","weight","metadata","description","name","constraint","schema","_foldingController","lineNumbers","UnFoldRecursivelyAction","_args","Number","MAX_VALUE","FoldAction","ToggleFoldAction","selectedLines","FoldRecursivelyAction","ToggleFoldRecursivelyAction","FoldAllBlockCommentsAction","regions","hasTypes","Comment","comments","getLanguageConfiguration","getLanguageId","blockCommentStartToken","regExp","RegExp","FoldAllRegionsAction","Region","foldingRules","markers","start","UnfoldAllRegionsAction","FoldAllExceptAction","UnfoldAllExceptAction","FoldAllAction","UnfoldAllAction","FoldLevelAction","getFoldingLevel","parseInt","substr","ID_PREFIX","_FoldLevelAction","level","GotoParentFoldAction","setSelection","endLineNumber","endColumn","GotoPreviousFoldAction","GotoNextFoldAction","FoldRangeFromSelectionAction","collapseRanges","source","_editor$getModel","sort","a","b","newRanges","sanitizeAndMerge","updatePost","fromFoldRanges","RemoveFoldRangeFromSelectionAction","ranges","removeManualRanges","concat","registerCommand","_len","_key","resource","configurationService","getValue","strategy","foldingLimitReporter","providers","None","result","getType","getStartLineNumber","end","getEndLineNumber","kind","fromValue"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/folding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar FoldingController_1;\nimport { createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { FoldingRangeKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine as getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { FoldingDecorationProvider } from './foldingDecorations.js';\nimport { FoldingRegions } from './foldingRanges.js';\nimport { SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nlet FoldingController = class FoldingController extends Disposable {\n    static { FoldingController_1 = this; }\n    static { this.ID = 'editor.contrib.folding'; }\n    static get(editor) {\n        return editor.getContribution(FoldingController_1.ID);\n    }\n    static getFoldingRangeProviders(languageFeaturesService, model) {\n        const foldingRangeProviders = languageFeaturesService.foldingRangeProvider.ordered(model);\n        return (FoldingController_1._foldingRangeSelector?.(foldingRangeProviders, model)) ?? foldingRangeProviders;\n    }\n    constructor(editor, contextKeyService, languageConfigurationService, notificationService, languageFeatureDebounceService, languageFeaturesService) {\n        super();\n        this.contextKeyService = contextKeyService;\n        this.languageConfigurationService = languageConfigurationService;\n        this.languageFeaturesService = languageFeaturesService;\n        this.localToDispose = this._register(new DisposableStore());\n        this.editor = editor;\n        this._foldingLimitReporter = new RangesLimitReporter(editor);\n        const options = this.editor.getOptions();\n        this._isEnabled = options.get(43 /* EditorOption.folding */);\n        this._useFoldingProviders = options.get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n        this._unfoldOnClickAfterEndOfLine = options.get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n        this._restoringViewState = false;\n        this._currentModelHasFoldedImports = false;\n        this._foldingImportsByDefault = options.get(46 /* EditorOption.foldingImportsByDefault */);\n        this.updateDebounceInfo = languageFeatureDebounceService.for(languageFeaturesService.foldingRangeProvider, 'Folding', { min: 200 });\n        this.foldingModel = null;\n        this.hiddenRangeModel = null;\n        this.rangeProvider = null;\n        this.foldingRegionPromise = null;\n        this.foldingModelPromise = null;\n        this.updateScheduler = null;\n        this.cursorChangedScheduler = null;\n        this.mouseDownInfo = null;\n        this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n        this.foldingDecorationProvider.showFoldingControls = options.get(111 /* EditorOption.showFoldingControls */);\n        this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n        this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n        this.foldingEnabled.set(this._isEnabled);\n        this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n        this._register(this.editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(43 /* EditorOption.folding */)) {\n                this._isEnabled = this.editor.getOptions().get(43 /* EditorOption.folding */);\n                this.foldingEnabled.set(this._isEnabled);\n                this.onModelChanged();\n            }\n            if (e.hasChanged(47 /* EditorOption.foldingMaximumRegions */)) {\n                this.onModelChanged();\n            }\n            if (e.hasChanged(111 /* EditorOption.showFoldingControls */) || e.hasChanged(45 /* EditorOption.foldingHighlight */)) {\n                const options = this.editor.getOptions();\n                this.foldingDecorationProvider.showFoldingControls = options.get(111 /* EditorOption.showFoldingControls */);\n                this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n                this.triggerFoldingModelChanged();\n            }\n            if (e.hasChanged(44 /* EditorOption.foldingStrategy */)) {\n                this._useFoldingProviders = this.editor.getOptions().get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n                this.onFoldingStrategyChanged();\n            }\n            if (e.hasChanged(48 /* EditorOption.unfoldOnClickAfterEndOfLine */)) {\n                this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n            }\n            if (e.hasChanged(46 /* EditorOption.foldingImportsByDefault */)) {\n                this._foldingImportsByDefault = this.editor.getOptions().get(46 /* EditorOption.foldingImportsByDefault */);\n            }\n        }));\n        this.onModelChanged();\n    }\n    /**\n     * Store view state.\n     */\n    saveViewState() {\n        const model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n            return {};\n        }\n        if (this.foldingModel) { // disposed ?\n            const collapsedRegions = this.foldingModel.getMemento();\n            const provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n            return { collapsedRegions, lineCount: model.getLineCount(), provider, foldedImports: this._currentModelHasFoldedImports };\n        }\n        return undefined;\n    }\n    /**\n     * Restore view state.\n     */\n    restoreViewState(state) {\n        const model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n            return;\n        }\n        if (!state) {\n            return;\n        }\n        this._currentModelHasFoldedImports = !!state.foldedImports;\n        if (state.collapsedRegions && state.collapsedRegions.length > 0 && this.foldingModel) {\n            this._restoringViewState = true;\n            try {\n                this.foldingModel.applyMemento(state.collapsedRegions);\n            }\n            finally {\n                this._restoringViewState = false;\n            }\n        }\n    }\n    onModelChanged() {\n        this.localToDispose.clear();\n        const model = this.editor.getModel();\n        if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n            // huge files get no view model, so they cannot support hidden areas\n            return;\n        }\n        this._currentModelHasFoldedImports = false;\n        this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n        this.localToDispose.add(this.foldingModel);\n        this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n        this.localToDispose.add(this.hiddenRangeModel);\n        this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n        this.updateScheduler = new Delayer(this.updateDebounceInfo.get(model));\n        this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n        this.localToDispose.add(this.cursorChangedScheduler);\n        this.localToDispose.add(this.languageFeaturesService.foldingRangeProvider.onDidChange(() => this.onFoldingStrategyChanged()));\n        this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n        this.localToDispose.add(this.editor.onDidChangeModelContent(e => this.onDidChangeModelContent(e)));\n        this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n        this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n        this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n        this.localToDispose.add({\n            dispose: () => {\n                if (this.foldingRegionPromise) {\n                    this.foldingRegionPromise.cancel();\n                    this.foldingRegionPromise = null;\n                }\n                this.updateScheduler?.cancel();\n                this.updateScheduler = null;\n                this.foldingModel = null;\n                this.foldingModelPromise = null;\n                this.hiddenRangeModel = null;\n                this.cursorChangedScheduler = null;\n                this.rangeProvider?.dispose();\n                this.rangeProvider = null;\n            }\n        });\n        this.triggerFoldingModelChanged();\n    }\n    onFoldingStrategyChanged() {\n        this.rangeProvider?.dispose();\n        this.rangeProvider = null;\n        this.triggerFoldingModelChanged();\n    }\n    getRangeProvider(editorModel) {\n        if (this.rangeProvider) {\n            return this.rangeProvider;\n        }\n        const indentRangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._foldingLimitReporter);\n        this.rangeProvider = indentRangeProvider; // fallback\n        if (this._useFoldingProviders && this.foldingModel) {\n            const selectedProviders = FoldingController_1.getFoldingRangeProviders(this.languageFeaturesService, editorModel);\n            if (selectedProviders.length > 0) {\n                this.rangeProvider = new SyntaxRangeProvider(editorModel, selectedProviders, () => this.triggerFoldingModelChanged(), this._foldingLimitReporter, indentRangeProvider);\n            }\n        }\n        return this.rangeProvider;\n    }\n    getFoldingModel() {\n        return this.foldingModelPromise;\n    }\n    onDidChangeModelContent(e) {\n        this.hiddenRangeModel?.notifyChangeModelContent(e);\n        this.triggerFoldingModelChanged();\n    }\n    triggerFoldingModelChanged() {\n        if (this.updateScheduler) {\n            if (this.foldingRegionPromise) {\n                this.foldingRegionPromise.cancel();\n                this.foldingRegionPromise = null;\n            }\n            this.foldingModelPromise = this.updateScheduler.trigger(() => {\n                const foldingModel = this.foldingModel;\n                if (!foldingModel) { // null if editor has been disposed, or folding turned off\n                    return null;\n                }\n                const sw = new StopWatch();\n                const provider = this.getRangeProvider(foldingModel.textModel);\n                const foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => provider.compute(token));\n                return foldingRegionPromise.then(foldingRanges => {\n                    if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) { // new request or cancelled in the meantime?\n                        let scrollState;\n                        if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {\n                            const hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n                            if (hasChanges) {\n                                scrollState = StableEditorScrollState.capture(this.editor);\n                                this._currentModelHasFoldedImports = hasChanges;\n                            }\n                        }\n                        // some cursors might have moved into hidden regions, make sure they are in expanded regions\n                        const selections = this.editor.getSelections();\n                        foldingModel.update(foldingRanges, toSelectedLines(selections));\n                        scrollState?.restore(this.editor);\n                        // update debounce info\n                        const newValue = this.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n                        if (this.updateScheduler) {\n                            this.updateScheduler.defaultDelay = newValue;\n                        }\n                    }\n                    return foldingModel;\n                });\n            }).then(undefined, (err) => {\n                onUnexpectedError(err);\n                return null;\n            });\n        }\n    }\n    onHiddenRangesChanges(hiddenRanges) {\n        if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n            const selections = this.editor.getSelections();\n            if (selections) {\n                if (this.hiddenRangeModel.adjustSelections(selections)) {\n                    this.editor.setSelections(selections);\n                }\n            }\n        }\n        this.editor.setHiddenAreas(hiddenRanges, this);\n    }\n    onCursorPositionChanged() {\n        if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n            this.cursorChangedScheduler.schedule();\n        }\n    }\n    revealCursor() {\n        const foldingModel = this.getFoldingModel();\n        if (!foldingModel) {\n            return;\n        }\n        foldingModel.then(foldingModel => {\n            if (foldingModel) {\n                const selections = this.editor.getSelections();\n                if (selections && selections.length > 0) {\n                    const toToggle = [];\n                    for (const selection of selections) {\n                        const lineNumber = selection.selectionStartLineNumber;\n                        if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n                            toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n                        }\n                    }\n                    if (toToggle.length) {\n                        foldingModel.toggleCollapseState(toToggle);\n                        this.reveal(selections[0].getPosition());\n                    }\n                }\n            }\n        }).then(undefined, onUnexpectedError);\n    }\n    onEditorMouseDown(e) {\n        this.mouseDownInfo = null;\n        if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n            return;\n        }\n        if (!e.event.leftButton && !e.event.middleButton) {\n            return;\n        }\n        const range = e.target.range;\n        let iconClicked = false;\n        switch (e.target.type) {\n            case 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */: {\n                const data = e.target.detail;\n                const offsetLeftInGutter = e.target.element.offsetLeft;\n                const gutterOffsetX = data.offsetX - offsetLeftInGutter;\n                // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n                // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n                if (gutterOffsetX < 4) { // the whitespace between the border and the real folding icon border is 4px\n                    return;\n                }\n                iconClicked = true;\n                break;\n            }\n            case 7 /* MouseTargetType.CONTENT_EMPTY */: {\n                if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n                    const data = e.target.detail;\n                    if (!data.isAfterLines) {\n                        break;\n                    }\n                }\n                return;\n            }\n            case 6 /* MouseTargetType.CONTENT_TEXT */: {\n                if (this.hiddenRangeModel.hasRanges()) {\n                    const model = this.editor.getModel();\n                    if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n                        break;\n                    }\n                }\n                return;\n            }\n            default:\n                return;\n        }\n        this.mouseDownInfo = { lineNumber: range.startLineNumber, iconClicked };\n    }\n    onEditorMouseUp(e) {\n        const foldingModel = this.foldingModel;\n        if (!foldingModel || !this.mouseDownInfo || !e.target) {\n            return;\n        }\n        const lineNumber = this.mouseDownInfo.lineNumber;\n        const iconClicked = this.mouseDownInfo.iconClicked;\n        const range = e.target.range;\n        if (!range || range.startLineNumber !== lineNumber) {\n            return;\n        }\n        if (iconClicked) {\n            if (e.target.type !== 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n                return;\n            }\n        }\n        else {\n            const model = this.editor.getModel();\n            if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n                return;\n            }\n        }\n        const region = foldingModel.getRegionAtLine(lineNumber);\n        if (region && region.startLineNumber === lineNumber) {\n            const isCollapsed = region.isCollapsed;\n            if (iconClicked || isCollapsed) {\n                const surrounding = e.event.altKey;\n                let toToggle = [];\n                if (surrounding) {\n                    const filter = (otherRegion) => !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n                    const toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n                    for (const r of toMaybeToggle) {\n                        if (r.isCollapsed) {\n                            toToggle.push(r);\n                        }\n                    }\n                    // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n                    if (toToggle.length === 0) {\n                        toToggle = toMaybeToggle;\n                    }\n                }\n                else {\n                    const recursive = e.event.middleButton || e.event.shiftKey;\n                    if (recursive) {\n                        for (const r of foldingModel.getRegionsInside(region)) {\n                            if (r.isCollapsed === isCollapsed) {\n                                toToggle.push(r);\n                            }\n                        }\n                    }\n                    // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n                    if (isCollapsed || !recursive || toToggle.length === 0) {\n                        toToggle.push(region);\n                    }\n                }\n                foldingModel.toggleCollapseState(toToggle);\n                this.reveal({ lineNumber, column: 1 });\n            }\n        }\n    }\n    reveal(position) {\n        this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* ScrollType.Smooth */);\n    }\n};\nFoldingController = FoldingController_1 = __decorate([\n    __param(1, IContextKeyService),\n    __param(2, ILanguageConfigurationService),\n    __param(3, INotificationService),\n    __param(4, ILanguageFeatureDebounceService),\n    __param(5, ILanguageFeaturesService)\n], FoldingController);\nexport { FoldingController };\nexport class RangesLimitReporter {\n    constructor(editor) {\n        this.editor = editor;\n        this._onDidChange = new Emitter();\n        this._computed = 0;\n        this._limited = false;\n    }\n    get limit() {\n        return this.editor.getOptions().get(47 /* EditorOption.foldingMaximumRegions */);\n    }\n    update(computed, limited) {\n        if (computed !== this._computed || limited !== this._limited) {\n            this._computed = computed;\n            this._limited = limited;\n            this._onDidChange.fire();\n        }\n    }\n}\nclass FoldingAction extends EditorAction {\n    runEditorCommand(accessor, editor, args) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const foldingController = FoldingController.get(editor);\n        if (!foldingController) {\n            return;\n        }\n        const foldingModelPromise = foldingController.getFoldingModel();\n        if (foldingModelPromise) {\n            this.reportTelemetry(accessor, editor);\n            return foldingModelPromise.then(foldingModel => {\n                if (foldingModel) {\n                    this.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n                    const selection = editor.getSelection();\n                    if (selection) {\n                        foldingController.reveal(selection.getStartPosition());\n                    }\n                }\n            });\n        }\n    }\n    getSelectedLines(editor) {\n        const selections = editor.getSelections();\n        return selections ? selections.map(s => s.startLineNumber) : [];\n    }\n    getLineNumbers(args, editor) {\n        if (args && args.selectionLines) {\n            return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n        }\n        return this.getSelectedLines(editor);\n    }\n    run(_accessor, _editor) {\n    }\n}\nexport function toSelectedLines(selections) {\n    if (!selections || selections.length === 0) {\n        return {\n            startsInside: () => false\n        };\n    }\n    return {\n        startsInside(startLine, endLine) {\n            for (const s of selections) {\n                const line = s.startLineNumber;\n                if (line >= startLine && line <= endLine) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    };\n}\nfunction foldingArgumentsConstraint(args) {\n    if (!types.isUndefined(args)) {\n        if (!types.isObject(args)) {\n            return false;\n        }\n        const foldingArgs = args;\n        if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.selectionLines) && (!Array.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n            return false;\n        }\n    }\n    return true;\n}\nclass UnfoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfold',\n            label: nls.localize('unfoldAction.label', \"Unfold\"),\n            alias: 'Unfold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 94 /* KeyCode.BracketRight */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            metadata: {\n                description: 'Unfold the content in the editor',\n                args: [\n                    {\n                        name: 'Unfold editor argument',\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                    'default': 1\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                    'default': 'down'\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args) {\n        const levels = args && args.levels || 1;\n        const lineNumbers = this.getLineNumbers(args, editor);\n        if (args && args.direction === 'up') {\n            setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n        }\n        else {\n            setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n        }\n    }\n}\nclass UnFoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldRecursively',\n            label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n            alias: 'Unfold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, _args) {\n        setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n    }\n}\nclass FoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.fold',\n            label: nls.localize('foldAction.label', \"Fold\"),\n            alias: 'Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 92 /* KeyCode.BracketLeft */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            metadata: {\n                description: 'Fold the content in the editor',\n                args: [\n                    {\n                        name: 'Fold editor argument',\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t`,\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args) {\n        const lineNumbers = this.getLineNumbers(args, editor);\n        const levels = args && args.levels;\n        const direction = args && args.direction;\n        if (typeof levels !== 'number' && typeof direction !== 'string') {\n            // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n            setCollapseStateUp(foldingModel, true, lineNumbers);\n        }\n        else {\n            if (direction === 'up') {\n                setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n            }\n            else {\n                setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n            }\n        }\n    }\n}\nclass ToggleFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.toggleFold',\n            label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n            alias: 'Toggle Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 42 /* KeyCode.KeyL */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        toggleCollapseState(foldingModel, 1, selectedLines);\n    }\n}\nclass FoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldRecursively',\n            label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n            alias: 'Fold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n    }\n}\nclass ToggleFoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.toggleFoldRecursively',\n            label: nls.localize('toggleFoldRecursivelyAction.label', \"Toggle Fold Recursively\"),\n            alias: 'Toggle Fold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 42 /* KeyCode.KeyL */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        toggleCollapseState(foldingModel, Number.MAX_VALUE, selectedLines);\n    }\n}\nclass FoldAllBlockCommentsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllBlockComments',\n            label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n            alias: 'Fold All Block Comments',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 90 /* KeyCode.Slash */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n            if (comments && comments.blockCommentStartToken) {\n                const regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    }\n}\nclass FoldAllRegionsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllMarkerRegions',\n            label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n            alias: 'Fold All Regions',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 29 /* KeyCode.Digit8 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                const regExp = new RegExp(foldingRules.markers.start);\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    }\n}\nclass UnfoldAllRegionsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAllMarkerRegions',\n            label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n            alias: 'Unfold All Regions',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 30 /* KeyCode.Digit9 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                const regExp = new RegExp(foldingRules.markers.start);\n                setCollapseStateForMatchingLines(foldingModel, regExp, false);\n            }\n        }\n    }\n}\nclass FoldAllExceptAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllExcept',\n            label: nls.localize('foldAllExcept.label', \"Fold All Except Selected\"),\n            alias: 'Fold All Except Selected',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 88 /* KeyCode.Minus */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateForRest(foldingModel, true, selectedLines);\n    }\n}\nclass UnfoldAllExceptAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAllExcept',\n            label: nls.localize('unfoldAllExcept.label', \"Unfold All Except Selected\"),\n            alias: 'Unfold All Except Selected',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 86 /* KeyCode.Equal */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateForRest(foldingModel, false, selectedLines);\n    }\n}\nclass FoldAllAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAll',\n            label: nls.localize('foldAllAction.label', \"Fold All\"),\n            alias: 'Fold All',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, _editor) {\n        setCollapseStateLevelsDown(foldingModel, true);\n    }\n}\nclass UnfoldAllAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAll',\n            label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n            alias: 'Unfold All',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 40 /* KeyCode.KeyJ */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, _editor) {\n        setCollapseStateLevelsDown(foldingModel, false);\n    }\n}\nclass FoldLevelAction extends FoldingAction {\n    static { this.ID_PREFIX = 'editor.foldLevel'; }\n    static { this.ID = (level) => FoldLevelAction.ID_PREFIX + level; }\n    getFoldingLevel() {\n        return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n    }\n}\n/** Action to go to the parent fold of current line */\nclass GotoParentFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoParentFold',\n            label: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n            alias: 'Go to Parent Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\n/** Action to go to the previous fold of current line */\nclass GotoPreviousFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoPreviousFold',\n            label: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n            alias: 'Go to Previous Folding Range',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\n/** Action to go to the next fold of current line */\nclass GotoNextFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoNextFold',\n            label: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n            alias: 'Go to Next Folding Range',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\nclass FoldRangeFromSelectionAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.createFoldingRangeFromSelection',\n            label: nls.localize('createManualFoldRange.label', \"Create Folding Range from Selection\"),\n            alias: 'Create Folding Range from Selection',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 87 /* KeyCode.Comma */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const collapseRanges = [];\n        const selections = editor.getSelections();\n        if (selections) {\n            for (const selection of selections) {\n                let endLineNumber = selection.endLineNumber;\n                if (selection.endColumn === 1) {\n                    --endLineNumber;\n                }\n                if (endLineNumber > selection.startLineNumber) {\n                    collapseRanges.push({\n                        startLineNumber: selection.startLineNumber,\n                        endLineNumber: endLineNumber,\n                        type: undefined,\n                        isCollapsed: true,\n                        source: 1 /* FoldSource.userDefined */\n                    });\n                    editor.setSelection({\n                        startLineNumber: selection.startLineNumber,\n                        startColumn: 1,\n                        endLineNumber: selection.startLineNumber,\n                        endColumn: 1\n                    });\n                }\n            }\n            if (collapseRanges.length > 0) {\n                collapseRanges.sort((a, b) => {\n                    return a.startLineNumber - b.startLineNumber;\n                });\n                const newRanges = FoldingRegions.sanitizeAndMerge(foldingModel.regions, collapseRanges, editor.getModel()?.getLineCount());\n                foldingModel.updatePost(FoldingRegions.fromFoldRanges(newRanges));\n            }\n        }\n    }\n}\nclass RemoveFoldRangeFromSelectionAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.removeManualFoldingRanges',\n            label: nls.localize('removeManualFoldingRanges.label', \"Remove Manual Folding Ranges\"),\n            alias: 'Remove Manual Folding Ranges',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(foldingController, foldingModel, editor) {\n        const selections = editor.getSelections();\n        if (selections) {\n            const ranges = [];\n            for (const selection of selections) {\n                const { startLineNumber, endLineNumber } = selection;\n                ranges.push(endLineNumber >= startLineNumber ? { startLineNumber, endLineNumber } : { endLineNumber, startLineNumber });\n            }\n            foldingModel.removeManualRanges(ranges);\n            foldingController.triggerFoldingModelChanged();\n        }\n    }\n}\nregisterEditorContribution(FoldingController.ID, FoldingController, 0 /* EditorContributionInstantiation.Eager */); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(ToggleFoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllExceptAction);\nregisterEditorAction(UnfoldAllExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\nregisterEditorAction(FoldRangeFromSelectionAction);\nregisterEditorAction(RemoveFoldRangeFromSelectionAction);\nfor (let i = 1; i <= 7; i++) {\n    registerInstantiatedEditorAction(new FoldLevelAction({\n        id: FoldLevelAction.ID(i),\n        label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n        alias: `Fold Level ${i}`,\n        precondition: CONTEXT_FOLDING_ENABLED,\n        kbOpts: {\n            kbExpr: EditorContextKeys.editorTextFocus,\n            primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | (21 /* KeyCode.Digit0 */ + i)),\n            weight: 100 /* KeybindingWeight.EditorContrib */\n        }\n    }));\n}\nCommandsRegistry.registerCommand('_executeFoldingRangeProvider', async function (accessor, ...args) {\n    const [resource] = args;\n    if (!(resource instanceof URI)) {\n        throw illegalArgument();\n    }\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const model = accessor.get(IModelService).getModel(resource);\n    if (!model) {\n        throw illegalArgument();\n    }\n    const configurationService = accessor.get(IConfigurationService);\n    if (!configurationService.getValue('editor.folding', { resource })) {\n        return [];\n    }\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const strategy = configurationService.getValue('editor.foldingStrategy', { resource });\n    const foldingLimitReporter = {\n        get limit() {\n            return configurationService.getValue('editor.foldingMaximumRegions', { resource });\n        },\n        update: (computed, limited) => { }\n    };\n    const indentRangeProvider = new IndentRangeProvider(model, languageConfigurationService, foldingLimitReporter);\n    let rangeProvider = indentRangeProvider;\n    if (strategy !== 'indentation') {\n        const providers = FoldingController.getFoldingRangeProviders(languageFeaturesService, model);\n        if (providers.length) {\n            rangeProvider = new SyntaxRangeProvider(model, providers, () => { }, foldingLimitReporter, indentRangeProvider);\n        }\n    }\n    const ranges = await rangeProvider.compute(CancellationToken.None);\n    const result = [];\n    try {\n        if (ranges) {\n            for (let i = 0; i < ranges.length; i++) {\n                const type = ranges.getType(i);\n                result.push({ start: ranges.getStartLineNumber(i), end: ranges.getEndLineNumber(i), kind: type ? FoldingRangeKind.fromValue(type) : undefined });\n            }\n        }\n        return result;\n    }\n    finally {\n        rangeProvider.dispose();\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
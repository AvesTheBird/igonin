{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2018, JGraph Ltd\nCopyright (c) 2006-2018, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from '../../util/Dictionary';\nimport Point from '../geometry/Point';\nimport GraphLayout from './GraphLayout';\nimport CellPath from '../cell/CellPath';\nimport Rectangle from '../geometry/Rectangle';\nimport { sortCells } from '../../util/styleUtils';\nimport WeightedCellSorter from './util/WeightedCellSorter';\nimport { findTreeRoots } from '../../util/treeTraversal';\n/**\n * @class CompactTreeLayout\n * @extends {GraphLayout}\n *\n * Extends {@link GraphLayout} to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n *\n * ### Example\n *\n * ```javascript\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n */\nexport class CompactTreeLayout extends GraphLayout {\n  constructor(graph, horizontal = true, invert = false) {\n    super(graph);\n    this.parentX = null;\n    this.parentY = null;\n    this.visited = {};\n    /**\n     * Specifies the orientation of the layout.\n     * @default true\n     */\n    this.horizontal = true;\n    /**\n     * Specifies if edge directions should be inverted.\n     * @default false.\n     */\n    this.invert = false;\n    /**\n     * If the parents should be resized to match the width/height of the\n     * children. Default is true.\n     * @default true\n     */\n    this.resizeParent = true;\n    /**\n     * Specifies if the parent location should be maintained, so that the\n     * top, left corner stays the same before and after execution of\n     * the layout. Default is false for backwards compatibility.\n     * @default false\n     */\n    this.maintainParentLocation = false;\n    /**\n     * Padding added to resized parents.\n     * @default 10\n     */\n    this.groupPadding = 10;\n    /**\n     * Top padding added to resized parents.\n     * @default 0\n     */\n    this.groupPaddingTop = 0;\n    /**\n     * Right padding added to resized parents.\n     * @default 0\n     */\n    this.groupPaddingRight = 0;\n    /**\n     * Bottom padding added to resized parents.\n     * @default 0\n     */\n    this.groupPaddingBottom = 0;\n    /**\n     * Left padding added to resized parents.\n     * @default 0\n     */\n    this.groupPaddingLeft = 0;\n    /**\n     * A set of the parents that need updating based on children\n     * process as part of the layout.\n     */\n    this.parentsChanged = null;\n    /**\n     * Specifies if the tree should be moved to the top, left corner\n     * if it is inside a top-level layer.\n     * @default false\n     */\n    this.moveTree = false;\n    /**\n     * Holds the levelDistance.\n     * @default 10\n     */\n    this.levelDistance = 10;\n    /**\n     * Holds the nodeDistance.\n     * @default 20\n     */\n    this.nodeDistance = 20;\n    /**\n     * Specifies if all edge points of traversed edges should be removed.\n     *\n     * @default true\n     */\n    this.resetEdges = true;\n    /**\n     * The preferred horizontal distance between edges exiting a vertex.\n     */\n    this.prefHozEdgeSep = 5;\n    /**\n     * The preferred vertical offset between edges exiting a vertex.\n     */\n    this.prefVertEdgeOff = 4;\n    /**\n     * The minimum distance for an edge jetty from a vertex.\n     */\n    this.minEdgeJetty = 8;\n    /**\n     * The size of the vertical buffer in the center of inter-rank channels\n     * where edge control points should not be placed.\n     */\n    this.channelBuffer = 4;\n    /**\n     * Whether or not to apply the internal tree edge routing.\n     */\n    this.edgeRouting = true;\n    /**\n     * Specifies if edges should be sorted according to the order of their\n     * opposite terminal cell in the model.\n     */\n    this.sortEdges = false;\n    /**\n     * Whether or not the tops of cells in each rank should be aligned\n     * across the rank\n     */\n    this.alignRanks = false;\n    /**\n     * An array of the maximum height of cells (relative to the layout direction)\n     * per rank\n     */\n    this.maxRankHeight = [];\n    /**\n     * The cell to use as the root of the tree\n     */\n    this.root = null;\n    /**\n     * The internal node representation of the root cell. Do not set directly\n     * , this value is only exposed to assist with post-processing functionality\n     */\n    this.node = null;\n    this.horizontal = horizontal;\n    this.invert = invert;\n  }\n  /**\n   * Returns a boolean indicating if the given {@link mxCell} should be ignored as a\n   * vertex. This returns true if the cell has no connections.\n   *\n   * @param vertex {@link mxCell} whose ignored state should be returned.\n   */\n  isVertexIgnored(vertex) {\n    return super.isVertexIgnored(vertex) || vertex.getConnections().length === 0;\n  }\n  /**\n   * Returns {@link horizontal}.\n   */\n  isHorizontal() {\n    return this.horizontal;\n  }\n  /**\n   * Implements {@link GraphLayout.execute}.\n   *\n   * If the parent has any connected edges, then it is used as the root of\n   * the tree. Else, {@link mxGraph.findTreeRoots} will be used to find a suitable\n   * root node within the set of children of the given parent.\n   *\n   * @param parent  {@link mxCell} whose children should be laid out.\n   * @param root    Optional {@link mxCell} that will be used as the root of the tree. Overrides {@link root} if specified.\n   */\n  execute(parent, root) {\n    this.parent = parent;\n    const model = this.graph.getDataModel();\n    if (root == null) {\n      // Takes the parent as the root if it has outgoing edges\n      if (this.graph.getEdges(parent, parent.getParent(), this.invert, !this.invert, false).length > 0) {\n        this.root = parent;\n      }\n      // Tries to find a suitable root in the parent's\n      // children\n      else {\n        const roots = findTreeRoots(this.graph, parent, true, this.invert);\n        if (roots.length > 0) {\n          for (let i = 0; i < roots.length; i += 1) {\n            if (!this.isVertexIgnored(roots[i]) && this.graph.getEdges(roots[i], null, this.invert, !this.invert, false).length > 0) {\n              this.root = roots[i];\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      this.root = root;\n    }\n    if (this.root != null) {\n      if (this.resizeParent) {\n        this.parentsChanged = {};\n      } else {\n        this.parentsChanged = null;\n      }\n      //  Maintaining parent location\n      this.parentX = null;\n      this.parentY = null;\n      if (parent !== this.root && parent.isVertex() != null && this.maintainParentLocation) {\n        const geo = parent.getGeometry();\n        if (geo != null) {\n          this.parentX = geo.x;\n          this.parentY = geo.y;\n        }\n      }\n      model.beginUpdate();\n      try {\n        this.visited = {};\n        this.node = this.dfs(this.root, parent);\n        if (this.alignRanks) {\n          this.maxRankHeight = [];\n          this.findRankHeights(this.node, 0);\n          this.setCellHeights(this.node, 0);\n        }\n        if (this.node != null) {\n          this.layout(this.node);\n          let x0 = this.graph.gridSize;\n          let y0 = x0;\n          if (!this.moveTree) {\n            const g = this.getVertexBounds(this.root);\n            if (g != null) {\n              x0 = g.x;\n              y0 = g.y;\n            }\n          }\n          let bounds = null;\n          if (this.isHorizontal()) {\n            bounds = this.horizontalLayout(this.node, x0, y0);\n          } else {\n            bounds = this.verticalLayout(this.node, null, x0, y0);\n          }\n          if (bounds != null) {\n            let dx = 0;\n            let dy = 0;\n            if (bounds.x < 0) {\n              dx = Math.abs(x0 - bounds.x);\n            }\n            if (bounds.y < 0) {\n              dy = Math.abs(y0 - bounds.y);\n            }\n            if (dx !== 0 || dy !== 0) {\n              this.moveNode(this.node, dx, dy);\n            }\n            if (this.resizeParent) {\n              this.adjustParents();\n            }\n            if (this.edgeRouting) {\n              // Iterate through all edges setting their positions\n              this.localEdgeProcessing(this.node);\n            }\n          }\n          // Maintaining parent location\n          if (this.parentX != null && this.parentY != null) {\n            let geo = parent.getGeometry();\n            if (geo != null) {\n              geo = geo.clone();\n              geo.x = this.parentX;\n              geo.y = this.parentY;\n              model.setGeometry(parent, geo);\n            }\n          }\n        }\n      } finally {\n        model.endUpdate();\n      }\n    }\n  }\n  /**\n   * Moves the specified node and all of its children by the given amount.\n   */\n  moveNode(node, dx, dy) {\n    node.x += dx;\n    node.y += dy;\n    this.apply(node);\n    let {\n      child\n    } = node;\n    while (child != null) {\n      this.moveNode(child, dx, dy);\n      child = child.next;\n    }\n  }\n  /**\n   * Called if {@link sortEdges} is true to sort the array of outgoing edges in place.\n   */\n  sortOutgoingEdges(source, edges) {\n    const lookup = new Dictionary();\n    edges.sort((e1, e2) => {\n      const end1 = e1.getTerminal(e1.getTerminal(false) == source);\n      let p1 = lookup.get(end1);\n      if (p1 == null) {\n        p1 = CellPath.create(end1).split(CellPath.PATH_SEPARATOR);\n        lookup.put(end1, p1);\n      }\n      const end2 = e2.getTerminal(e2.getTerminal(false) === source);\n      let p2 = lookup.get(end2);\n      if (p2 == null) {\n        p2 = CellPath.create(end2).split(CellPath.PATH_SEPARATOR);\n        lookup.put(end2, p2);\n      }\n      return CellPath.compare(p1, p2);\n    });\n  }\n  /**\n   * Stores the maximum height (relative to the layout\n   * direction) of cells in each rank\n   */\n  findRankHeights(node, rank) {\n    const maxRankHeight = this.maxRankHeight;\n    if (maxRankHeight[rank] == null || maxRankHeight[rank] < node.height) {\n      maxRankHeight[rank] = node.height;\n    }\n    let {\n      child\n    } = node;\n    while (child != null) {\n      this.findRankHeights(child, rank + 1);\n      child = child.next;\n    }\n  }\n  /**\n   * Set the cells heights (relative to the layout\n   * direction) when the tops of each rank are to be aligned\n   */\n  setCellHeights(node, rank) {\n    const maxRankHeight = this.maxRankHeight;\n    if (maxRankHeight[rank] != null && maxRankHeight[rank] > node.height) {\n      node.height = maxRankHeight[rank];\n    }\n    let {\n      child\n    } = node;\n    while (child != null) {\n      this.setCellHeights(child, rank + 1);\n      child = child.next;\n    }\n  }\n  /**\n   * Does a depth first search starting at the specified cell.\n   * Makes sure the specified parent is never left by the\n   * algorithm.\n   */\n  dfs(cell, parent) {\n    const id = CellPath.create(cell);\n    let node = null;\n    if (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell)) {\n      this.visited[id] = cell;\n      node = this.createNode(cell);\n      const model = this.graph.getDataModel();\n      let prev = null;\n      const out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n      const view = this.graph.getView();\n      if (this.sortEdges) {\n        this.sortOutgoingEdges(cell, out);\n      }\n      for (let i = 0; i < out.length; i += 1) {\n        const edge = out[i];\n        if (!this.isEdgeIgnored(edge)) {\n          // Resets the points on the traversed edge\n          if (this.resetEdges) {\n            this.setEdgePoints(edge, null);\n          }\n          if (this.edgeRouting) {\n            this.setEdgeStyleEnabled(edge, false);\n            this.setEdgePoints(edge, null);\n          }\n          // Checks if terminal in same swimlane\n          const state = view.getState(edge);\n          const target = state != null ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n          const tmp = this.dfs(target, parent);\n          if (tmp != null && target.getGeometry() != null) {\n            if (prev == null) {\n              node.child = tmp;\n            } else {\n              prev.next = tmp;\n            }\n            prev = tmp;\n          }\n        }\n      }\n    }\n    return node;\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  layout(node) {\n    let {\n      child\n    } = node;\n    while (child != null) {\n      this.layout(child);\n      child = child.next;\n    }\n    if (node.child != null) {\n      this.attachParent(node, this.join(node));\n    } else {\n      this.layoutLeaf(node);\n    }\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  horizontalLayout(node, x0, y0, bounds = null) {\n    node.x += x0 + node.offsetX;\n    node.y += y0 + node.offsetY;\n    bounds = this.apply(node, bounds);\n    const {\n      child\n    } = node;\n    if (child != null) {\n      bounds = this.horizontalLayout(child, node.x, node.y, bounds);\n      let siblingOffset = node.y + child.offsetY;\n      let s = child.next;\n      while (s != null) {\n        bounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n        siblingOffset += s.offsetY;\n        s = s.next;\n      }\n    }\n    return bounds;\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  verticalLayout(node, parent, x0, y0, bounds = null) {\n    node.x = node.x + x0 + node.offsetY;\n    node.y = node.y + y0 + node.offsetX;\n    bounds = this.apply(node, bounds);\n    const {\n      child\n    } = node;\n    if (child != null) {\n      bounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n      let siblingOffset = node.x + child.offsetY;\n      let s = child.next;\n      while (s != null) {\n        bounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n        siblingOffset += s.offsetY;\n        s = s.next;\n      }\n    }\n    return bounds;\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  attachParent(node, height) {\n    const x = this.nodeDistance + this.levelDistance;\n    const y2 = (height - node.width) / 2 - this.nodeDistance;\n    const y1 = y2 + node.width + 2 * this.nodeDistance - height;\n    node.child.offsetX = x + node.height;\n    node.child.offsetY = y1;\n    node.contour.upperHead = this.createLine(node.height, 0, this.createLine(x, y1, node.contour.upperHead));\n    node.contour.lowerHead = this.createLine(node.height, 0, this.createLine(x, y2, node.contour.lowerHead));\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  // layoutLeaf(node: any): void;\n  layoutLeaf(node) {\n    const dist = 2 * this.nodeDistance;\n    node.contour.upperTail = this.createLine(node.height + dist, 0);\n    node.contour.upperHead = node.contour.upperTail;\n    node.contour.lowerTail = this.createLine(0, -node.width - dist);\n    node.contour.lowerHead = this.createLine(node.height + dist, 0, node.contour.lowerTail);\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  join(node) {\n    const dist = 2 * this.nodeDistance;\n    let {\n      child\n    } = node;\n    node.contour = child.contour;\n    let h = child.width + dist;\n    let sum = h;\n    child = child.next;\n    while (child != null) {\n      const d = this.merge(node.contour, child.contour);\n      child.offsetY = d + h;\n      child.offsetX = 0;\n      h = child.width + dist;\n      sum += d + h;\n      child = child.next;\n    }\n    return sum;\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  merge(p1, p2) {\n    let x = 0;\n    let y = 0;\n    let total = 0;\n    let upper = p1.lowerHead;\n    let lower = p2.upperHead;\n    while (lower != null && upper != null) {\n      const d = this.offset(x, y, lower.dx, lower.dy, upper.dx, upper.dy);\n      y += d;\n      total += d;\n      if (x + lower.dx <= upper.dx) {\n        x += lower.dx;\n        y += lower.dy;\n        lower = lower.next;\n      } else {\n        x -= upper.dx;\n        y -= upper.dy;\n        upper = upper.next;\n      }\n    }\n    if (lower != null) {\n      const b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n      p1.upperTail = b.next != null ? p2.upperTail : b;\n      p1.lowerTail = p2.lowerTail;\n    } else {\n      const b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n      if (b.next == null) {\n        p1.lowerTail = b;\n      }\n    }\n    p1.lowerHead = p2.lowerHead;\n    return total;\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  // offset(p1: number, p2: number, a1: number, a2: number, b1: number, b2: number): number;\n  offset(p1, p2, a1, a2, b1, b2) {\n    let d = 0;\n    if (b1 <= p1 || p1 + a1 <= 0) {\n      return 0;\n    }\n    const t = b1 * a2 - a1 * b2;\n    if (t > 0) {\n      if (p1 < 0) {\n        const s = p1 * a2;\n        d = s / a1 - p2;\n      } else if (p1 > 0) {\n        const s = p1 * b2;\n        d = s / b1 - p2;\n      } else {\n        d = -p2;\n      }\n    } else if (b1 < p1 + a1) {\n      const s = (b1 - p1) * a2;\n      d = b2 - (p2 + s / a1);\n    } else if (b1 > p1 + a1) {\n      const s = (a1 + p1) * b2;\n      d = s / b1 - (p2 + a2);\n    } else {\n      d = b2 - (p2 + a2);\n    }\n    if (d > 0) {\n      return d;\n    }\n    return 0;\n  }\n  bridge(line1, x1, y1, line2, x2, y2) {\n    const dx = x2 + line2.dx - x1;\n    let dy = 0;\n    let s = 0;\n    if (line2.dx === 0) {\n      dy = line2.dy;\n    } else {\n      s = dx * line2.dy;\n      dy = s / line2.dx;\n    }\n    const r = this.createLine(dx, dy, line2.next);\n    line1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n    return r;\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  createNode(cell) {\n    const node = {};\n    node.cell = cell;\n    node.x = 0;\n    node.y = 0;\n    node.width = 0;\n    node.height = 0;\n    const geo = this.getVertexBounds(cell);\n    if (geo != null) {\n      if (this.isHorizontal()) {\n        node.width = geo.height;\n        node.height = geo.width;\n      } else {\n        node.width = geo.width;\n        node.height = geo.height;\n      }\n    }\n    node.offsetX = 0;\n    node.offsetY = 0;\n    node.contour = {};\n    return node;\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  apply(node, bounds = null) {\n    const model = this.graph.getDataModel();\n    const cell = node.cell;\n    let g = cell.getGeometry();\n    if (cell != null && g != null) {\n      if (this.isVertexMovable(cell)) {\n        g = this.setVertexLocation(cell, node.x, node.y);\n        if (this.resizeParent) {\n          const parent = cell.getParent();\n          const id = CellPath.create(parent);\n          // Implements set semantic\n          const parentsChanged = this.parentsChanged;\n          if (parentsChanged[id] == null) {\n            parentsChanged[id] = parent;\n          }\n        }\n      }\n      if (bounds == null) {\n        bounds = new Rectangle(g.x, g.y, g.width, g.height);\n      } else {\n        bounds = new Rectangle(Math.min(bounds.x, g.x), Math.min(bounds.y, g.y), Math.max(bounds.x + bounds.width, g.x + g.width), Math.max(bounds.y + bounds.height, g.y + g.height));\n      }\n    }\n    return bounds;\n  }\n  /**\n   * Starts the actual compact tree layout algorithm\n   * at the given node.\n   */\n  createLine(dx, dy, next = null) {\n    const line = {\n      dx,\n      dy,\n      next\n    };\n    return line;\n  }\n  /**\n   * Adjust parent cells whose child geometries have changed. The default\n   * implementation adjusts the group to just fit around the children with\n   * a padding.\n   */\n  adjustParents() {\n    const tmp = [];\n    for (const id in this.parentsChanged) {\n      tmp.push(this.parentsChanged[id]);\n    }\n    this.arrangeGroups(sortCells(tmp, true), this.groupPadding, this.groupPaddingTop, this.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n  }\n  /**\n   * Moves the specified node and all of its children by the given amount.\n   */\n  localEdgeProcessing(node) {\n    this.processNodeOutgoing(node);\n    let {\n      child\n    } = node;\n    while (child != null) {\n      this.localEdgeProcessing(child);\n      child = child.next;\n    }\n  }\n  /**\n   * Separates the x position of edges as they connect to vertices\n   */\n  processNodeOutgoing(node) {\n    let {\n      child\n    } = node;\n    const parentCell = node.cell;\n    let childCount = 0;\n    const sortedCells = [];\n    while (child != null) {\n      childCount++;\n      let sortingCriterion;\n      if (this.horizontal) {\n        sortingCriterion = child.y;\n      } else {\n        sortingCriterion = child.x;\n      }\n      sortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n      child = child.next;\n    }\n    sortedCells.sort(WeightedCellSorter.compare);\n    let availableWidth = node.width;\n    const requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n    // Add a buffer on the edges of the vertex if the edge count allows\n    if (availableWidth > requiredWidth + 2 * this.prefHozEdgeSep) {\n      availableWidth -= 2 * this.prefHozEdgeSep;\n    }\n    const edgeSpacing = availableWidth / childCount;\n    let currentXOffset = edgeSpacing / 2.0;\n    if (availableWidth > requiredWidth + 2 * this.prefHozEdgeSep) {\n      currentXOffset += this.prefHozEdgeSep;\n    }\n    let currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n    let maxYOffset = 0;\n    const parentBounds = this.getVertexBounds(parentCell);\n    child = node.child;\n    for (let j = 0; j < sortedCells.length; j++) {\n      const childCell = sortedCells[j].cell.cell;\n      const childBounds = this.getVertexBounds(childCell);\n      const edges = this.graph.getEdgesBetween(parentCell, childCell, false);\n      const newPoints = [];\n      let x = 0;\n      let y = 0;\n      for (let i = 0; i < edges.length; i += 1) {\n        if (this.horizontal) {\n          // Use opposite co-ords, calculation was done for\n          //\n          x = parentBounds.x + parentBounds.width;\n          y = parentBounds.y + currentXOffset;\n          newPoints.push(new Point(x, y));\n          x = parentBounds.x + parentBounds.width + currentYOffset;\n          newPoints.push(new Point(x, y));\n          y = childBounds.y + childBounds.height / 2.0;\n          newPoints.push(new Point(x, y));\n          this.setEdgePoints(edges[i], newPoints);\n        } else {\n          x = parentBounds.x + currentXOffset;\n          y = parentBounds.y + parentBounds.height;\n          newPoints.push(new Point(x, y));\n          y = parentBounds.y + parentBounds.height + currentYOffset;\n          newPoints.push(new Point(x, y));\n          x = childBounds.x + childBounds.width / 2.0;\n          newPoints.push(new Point(x, y));\n          this.setEdgePoints(edges[i], newPoints);\n        }\n      }\n      if (j < childCount / 2) {\n        currentYOffset += this.prefVertEdgeOff;\n      } else if (j > childCount / 2) {\n        currentYOffset -= this.prefVertEdgeOff;\n      }\n      // Ignore the case if equals, this means the second of 2\n      // jettys with the same y (even number of edges)\n      //                pos[k * 2] = currentX;\n      currentXOffset += edgeSpacing;\n      //                pos[k * 2 + 1] = currentYOffset;\n      maxYOffset = Math.max(maxYOffset, currentYOffset);\n    }\n  }\n}\nexport default CompactTreeLayout;","map":{"version":3,"names":["Dictionary","Point","GraphLayout","CellPath","Rectangle","sortCells","WeightedCellSorter","findTreeRoots","CompactTreeLayout","constructor","graph","horizontal","invert","parentX","parentY","visited","resizeParent","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","root","node","isVertexIgnored","vertex","getConnections","length","isHorizontal","execute","parent","model","getDataModel","getEdges","getParent","roots","i","isVertex","geo","getGeometry","x","y","beginUpdate","dfs","findRankHeights","setCellHeights","layout","x0","gridSize","y0","g","getVertexBounds","bounds","horizontalLayout","verticalLayout","dx","dy","Math","abs","moveNode","adjustParents","localEdgeProcessing","clone","setGeometry","endUpdate","apply","child","next","sortOutgoingEdges","source","edges","lookup","sort","e1","e2","end1","getTerminal","p1","get","create","split","PATH_SEPARATOR","put","end2","p2","compare","rank","height","cell","id","createNode","prev","out","view","getView","edge","isEdgeIgnored","setEdgePoints","setEdgeStyleEnabled","state","getState","target","getVisibleTerminal","tmp","attachParent","join","layoutLeaf","offsetX","offsetY","siblingOffset","s","y2","width","y1","contour","upperHead","createLine","lowerHead","dist","upperTail","lowerTail","h","sum","d","merge","total","upper","lower","offset","b","bridge","a1","a2","b1","b2","t","line1","x1","line2","x2","r","isVertexMovable","setVertexLocation","min","max","line","push","arrangeGroups","processNodeOutgoing","parentCell","childCount","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","j","childCell","childBounds","getEdgesBetween","newPoints"],"sources":["D:/OSPanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/layout/CompactTreeLayout.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2018, JGraph Ltd\nCopyright (c) 2006-2018, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Dictionary from '../../util/Dictionary';\nimport Point from '../geometry/Point';\nimport GraphLayout from './GraphLayout';\nimport CellPath from '../cell/CellPath';\nimport Rectangle from '../geometry/Rectangle';\nimport { sortCells } from '../../util/styleUtils';\nimport WeightedCellSorter from './util/WeightedCellSorter';\nimport { findTreeRoots } from '../../util/treeTraversal';\n/**\n * @class CompactTreeLayout\n * @extends {GraphLayout}\n *\n * Extends {@link GraphLayout} to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n *\n * ### Example\n *\n * ```javascript\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n */\nexport class CompactTreeLayout extends GraphLayout {\n    constructor(graph, horizontal = true, invert = false) {\n        super(graph);\n        this.parentX = null;\n        this.parentY = null;\n        this.visited = {};\n        /**\n         * Specifies the orientation of the layout.\n         * @default true\n         */\n        this.horizontal = true;\n        /**\n         * Specifies if edge directions should be inverted.\n         * @default false.\n         */\n        this.invert = false;\n        /**\n         * If the parents should be resized to match the width/height of the\n         * children. Default is true.\n         * @default true\n         */\n        this.resizeParent = true;\n        /**\n         * Specifies if the parent location should be maintained, so that the\n         * top, left corner stays the same before and after execution of\n         * the layout. Default is false for backwards compatibility.\n         * @default false\n         */\n        this.maintainParentLocation = false;\n        /**\n         * Padding added to resized parents.\n         * @default 10\n         */\n        this.groupPadding = 10;\n        /**\n         * Top padding added to resized parents.\n         * @default 0\n         */\n        this.groupPaddingTop = 0;\n        /**\n         * Right padding added to resized parents.\n         * @default 0\n         */\n        this.groupPaddingRight = 0;\n        /**\n         * Bottom padding added to resized parents.\n         * @default 0\n         */\n        this.groupPaddingBottom = 0;\n        /**\n         * Left padding added to resized parents.\n         * @default 0\n         */\n        this.groupPaddingLeft = 0;\n        /**\n         * A set of the parents that need updating based on children\n         * process as part of the layout.\n         */\n        this.parentsChanged = null;\n        /**\n         * Specifies if the tree should be moved to the top, left corner\n         * if it is inside a top-level layer.\n         * @default false\n         */\n        this.moveTree = false;\n        /**\n         * Holds the levelDistance.\n         * @default 10\n         */\n        this.levelDistance = 10;\n        /**\n         * Holds the nodeDistance.\n         * @default 20\n         */\n        this.nodeDistance = 20;\n        /**\n         * Specifies if all edge points of traversed edges should be removed.\n         *\n         * @default true\n         */\n        this.resetEdges = true;\n        /**\n         * The preferred horizontal distance between edges exiting a vertex.\n         */\n        this.prefHozEdgeSep = 5;\n        /**\n         * The preferred vertical offset between edges exiting a vertex.\n         */\n        this.prefVertEdgeOff = 4;\n        /**\n         * The minimum distance for an edge jetty from a vertex.\n         */\n        this.minEdgeJetty = 8;\n        /**\n         * The size of the vertical buffer in the center of inter-rank channels\n         * where edge control points should not be placed.\n         */\n        this.channelBuffer = 4;\n        /**\n         * Whether or not to apply the internal tree edge routing.\n         */\n        this.edgeRouting = true;\n        /**\n         * Specifies if edges should be sorted according to the order of their\n         * opposite terminal cell in the model.\n         */\n        this.sortEdges = false;\n        /**\n         * Whether or not the tops of cells in each rank should be aligned\n         * across the rank\n         */\n        this.alignRanks = false;\n        /**\n         * An array of the maximum height of cells (relative to the layout direction)\n         * per rank\n         */\n        this.maxRankHeight = [];\n        /**\n         * The cell to use as the root of the tree\n         */\n        this.root = null;\n        /**\n         * The internal node representation of the root cell. Do not set directly\n         * , this value is only exposed to assist with post-processing functionality\n         */\n        this.node = null;\n        this.horizontal = horizontal;\n        this.invert = invert;\n    }\n    /**\n     * Returns a boolean indicating if the given {@link mxCell} should be ignored as a\n     * vertex. This returns true if the cell has no connections.\n     *\n     * @param vertex {@link mxCell} whose ignored state should be returned.\n     */\n    isVertexIgnored(vertex) {\n        return super.isVertexIgnored(vertex) || vertex.getConnections().length === 0;\n    }\n    /**\n     * Returns {@link horizontal}.\n     */\n    isHorizontal() {\n        return this.horizontal;\n    }\n    /**\n     * Implements {@link GraphLayout.execute}.\n     *\n     * If the parent has any connected edges, then it is used as the root of\n     * the tree. Else, {@link mxGraph.findTreeRoots} will be used to find a suitable\n     * root node within the set of children of the given parent.\n     *\n     * @param parent  {@link mxCell} whose children should be laid out.\n     * @param root    Optional {@link mxCell} that will be used as the root of the tree. Overrides {@link root} if specified.\n     */\n    execute(parent, root) {\n        this.parent = parent;\n        const model = this.graph.getDataModel();\n        if (root == null) {\n            // Takes the parent as the root if it has outgoing edges\n            if (this.graph.getEdges(parent, parent.getParent(), this.invert, !this.invert, false)\n                .length > 0) {\n                this.root = parent;\n            }\n            // Tries to find a suitable root in the parent's\n            // children\n            else {\n                const roots = findTreeRoots(this.graph, parent, true, this.invert);\n                if (roots.length > 0) {\n                    for (let i = 0; i < roots.length; i += 1) {\n                        if (!this.isVertexIgnored(roots[i]) &&\n                            this.graph.getEdges(roots[i], null, this.invert, !this.invert, false)\n                                .length > 0) {\n                            this.root = roots[i];\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            this.root = root;\n        }\n        if (this.root != null) {\n            if (this.resizeParent) {\n                this.parentsChanged = {};\n            }\n            else {\n                this.parentsChanged = null;\n            }\n            //  Maintaining parent location\n            this.parentX = null;\n            this.parentY = null;\n            if (parent !== this.root &&\n                parent.isVertex() != null &&\n                this.maintainParentLocation) {\n                const geo = parent.getGeometry();\n                if (geo != null) {\n                    this.parentX = geo.x;\n                    this.parentY = geo.y;\n                }\n            }\n            model.beginUpdate();\n            try {\n                this.visited = {};\n                this.node = this.dfs(this.root, parent);\n                if (this.alignRanks) {\n                    this.maxRankHeight = [];\n                    this.findRankHeights(this.node, 0);\n                    this.setCellHeights(this.node, 0);\n                }\n                if (this.node != null) {\n                    this.layout(this.node);\n                    let x0 = this.graph.gridSize;\n                    let y0 = x0;\n                    if (!this.moveTree) {\n                        const g = this.getVertexBounds(this.root);\n                        if (g != null) {\n                            x0 = g.x;\n                            y0 = g.y;\n                        }\n                    }\n                    let bounds = null;\n                    if (this.isHorizontal()) {\n                        bounds = this.horizontalLayout(this.node, x0, y0);\n                    }\n                    else {\n                        bounds = this.verticalLayout(this.node, null, x0, y0);\n                    }\n                    if (bounds != null) {\n                        let dx = 0;\n                        let dy = 0;\n                        if (bounds.x < 0) {\n                            dx = Math.abs(x0 - bounds.x);\n                        }\n                        if (bounds.y < 0) {\n                            dy = Math.abs(y0 - bounds.y);\n                        }\n                        if (dx !== 0 || dy !== 0) {\n                            this.moveNode(this.node, dx, dy);\n                        }\n                        if (this.resizeParent) {\n                            this.adjustParents();\n                        }\n                        if (this.edgeRouting) {\n                            // Iterate through all edges setting their positions\n                            this.localEdgeProcessing(this.node);\n                        }\n                    }\n                    // Maintaining parent location\n                    if (this.parentX != null && this.parentY != null) {\n                        let geo = parent.getGeometry();\n                        if (geo != null) {\n                            geo = geo.clone();\n                            geo.x = this.parentX;\n                            geo.y = this.parentY;\n                            model.setGeometry(parent, geo);\n                        }\n                    }\n                }\n            }\n            finally {\n                model.endUpdate();\n            }\n        }\n    }\n    /**\n     * Moves the specified node and all of its children by the given amount.\n     */\n    moveNode(node, dx, dy) {\n        node.x += dx;\n        node.y += dy;\n        this.apply(node);\n        let { child } = node;\n        while (child != null) {\n            this.moveNode(child, dx, dy);\n            child = child.next;\n        }\n    }\n    /**\n     * Called if {@link sortEdges} is true to sort the array of outgoing edges in place.\n     */\n    sortOutgoingEdges(source, edges) {\n        const lookup = new Dictionary();\n        edges.sort((e1, e2) => {\n            const end1 = e1.getTerminal(e1.getTerminal(false) == source);\n            let p1 = lookup.get(end1);\n            if (p1 == null) {\n                p1 = CellPath.create(end1).split(CellPath.PATH_SEPARATOR);\n                lookup.put(end1, p1);\n            }\n            const end2 = e2.getTerminal(e2.getTerminal(false) === source);\n            let p2 = lookup.get(end2);\n            if (p2 == null) {\n                p2 = CellPath.create(end2).split(CellPath.PATH_SEPARATOR);\n                lookup.put(end2, p2);\n            }\n            return CellPath.compare(p1, p2);\n        });\n    }\n    /**\n     * Stores the maximum height (relative to the layout\n     * direction) of cells in each rank\n     */\n    findRankHeights(node, rank) {\n        const maxRankHeight = this.maxRankHeight;\n        if (maxRankHeight[rank] == null || maxRankHeight[rank] < node.height) {\n            maxRankHeight[rank] = node.height;\n        }\n        let { child } = node;\n        while (child != null) {\n            this.findRankHeights(child, rank + 1);\n            child = child.next;\n        }\n    }\n    /**\n     * Set the cells heights (relative to the layout\n     * direction) when the tops of each rank are to be aligned\n     */\n    setCellHeights(node, rank) {\n        const maxRankHeight = this.maxRankHeight;\n        if (maxRankHeight[rank] != null && maxRankHeight[rank] > node.height) {\n            node.height = maxRankHeight[rank];\n        }\n        let { child } = node;\n        while (child != null) {\n            this.setCellHeights(child, rank + 1);\n            child = child.next;\n        }\n    }\n    /**\n     * Does a depth first search starting at the specified cell.\n     * Makes sure the specified parent is never left by the\n     * algorithm.\n     */\n    dfs(cell, parent) {\n        const id = CellPath.create(cell);\n        let node = null;\n        if (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell)) {\n            this.visited[id] = cell;\n            node = this.createNode(cell);\n            const model = this.graph.getDataModel();\n            let prev = null;\n            const out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n            const view = this.graph.getView();\n            if (this.sortEdges) {\n                this.sortOutgoingEdges(cell, out);\n            }\n            for (let i = 0; i < out.length; i += 1) {\n                const edge = out[i];\n                if (!this.isEdgeIgnored(edge)) {\n                    // Resets the points on the traversed edge\n                    if (this.resetEdges) {\n                        this.setEdgePoints(edge, null);\n                    }\n                    if (this.edgeRouting) {\n                        this.setEdgeStyleEnabled(edge, false);\n                        this.setEdgePoints(edge, null);\n                    }\n                    // Checks if terminal in same swimlane\n                    const state = view.getState(edge);\n                    const target = state != null\n                        ? state.getVisibleTerminal(this.invert)\n                        : view.getVisibleTerminal(edge, this.invert);\n                    const tmp = this.dfs(target, parent);\n                    if (tmp != null && target.getGeometry() != null) {\n                        if (prev == null) {\n                            node.child = tmp;\n                        }\n                        else {\n                            prev.next = tmp;\n                        }\n                        prev = tmp;\n                    }\n                }\n            }\n        }\n        return node;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    layout(node) {\n        let { child } = node;\n        while (child != null) {\n            this.layout(child);\n            child = child.next;\n        }\n        if (node.child != null) {\n            this.attachParent(node, this.join(node));\n        }\n        else {\n            this.layoutLeaf(node);\n        }\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    horizontalLayout(node, x0, y0, bounds = null) {\n        node.x += x0 + node.offsetX;\n        node.y += y0 + node.offsetY;\n        bounds = this.apply(node, bounds);\n        const { child } = node;\n        if (child != null) {\n            bounds = this.horizontalLayout(child, node.x, node.y, bounds);\n            let siblingOffset = node.y + child.offsetY;\n            let s = child.next;\n            while (s != null) {\n                bounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n                siblingOffset += s.offsetY;\n                s = s.next;\n            }\n        }\n        return bounds;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    verticalLayout(node, parent, x0, y0, bounds = null) {\n        node.x = node.x + x0 + node.offsetY;\n        node.y = node.y + y0 + node.offsetX;\n        bounds = this.apply(node, bounds);\n        const { child } = node;\n        if (child != null) {\n            bounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n            let siblingOffset = node.x + child.offsetY;\n            let s = child.next;\n            while (s != null) {\n                bounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n                siblingOffset += s.offsetY;\n                s = s.next;\n            }\n        }\n        return bounds;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    attachParent(node, height) {\n        const x = this.nodeDistance + this.levelDistance;\n        const y2 = (height - node.width) / 2 - this.nodeDistance;\n        const y1 = y2 + node.width + 2 * this.nodeDistance - height;\n        node.child.offsetX = x + node.height;\n        node.child.offsetY = y1;\n        node.contour.upperHead = this.createLine(node.height, 0, this.createLine(x, y1, node.contour.upperHead));\n        node.contour.lowerHead = this.createLine(node.height, 0, this.createLine(x, y2, node.contour.lowerHead));\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    // layoutLeaf(node: any): void;\n    layoutLeaf(node) {\n        const dist = 2 * this.nodeDistance;\n        node.contour.upperTail = this.createLine(node.height + dist, 0);\n        node.contour.upperHead = node.contour.upperTail;\n        node.contour.lowerTail = this.createLine(0, -node.width - dist);\n        node.contour.lowerHead = this.createLine(node.height + dist, 0, node.contour.lowerTail);\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    join(node) {\n        const dist = 2 * this.nodeDistance;\n        let { child } = node;\n        node.contour = child.contour;\n        let h = child.width + dist;\n        let sum = h;\n        child = child.next;\n        while (child != null) {\n            const d = this.merge(node.contour, child.contour);\n            child.offsetY = d + h;\n            child.offsetX = 0;\n            h = child.width + dist;\n            sum += d + h;\n            child = child.next;\n        }\n        return sum;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    merge(p1, p2) {\n        let x = 0;\n        let y = 0;\n        let total = 0;\n        let upper = p1.lowerHead;\n        let lower = p2.upperHead;\n        while (lower != null && upper != null) {\n            const d = this.offset(x, y, lower.dx, lower.dy, upper.dx, upper.dy);\n            y += d;\n            total += d;\n            if (x + lower.dx <= upper.dx) {\n                x += lower.dx;\n                y += lower.dy;\n                lower = lower.next;\n            }\n            else {\n                x -= upper.dx;\n                y -= upper.dy;\n                upper = upper.next;\n            }\n        }\n        if (lower != null) {\n            const b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n            p1.upperTail = b.next != null ? p2.upperTail : b;\n            p1.lowerTail = p2.lowerTail;\n        }\n        else {\n            const b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n            if (b.next == null) {\n                p1.lowerTail = b;\n            }\n        }\n        p1.lowerHead = p2.lowerHead;\n        return total;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    // offset(p1: number, p2: number, a1: number, a2: number, b1: number, b2: number): number;\n    offset(p1, p2, a1, a2, b1, b2) {\n        let d = 0;\n        if (b1 <= p1 || p1 + a1 <= 0) {\n            return 0;\n        }\n        const t = b1 * a2 - a1 * b2;\n        if (t > 0) {\n            if (p1 < 0) {\n                const s = p1 * a2;\n                d = s / a1 - p2;\n            }\n            else if (p1 > 0) {\n                const s = p1 * b2;\n                d = s / b1 - p2;\n            }\n            else {\n                d = -p2;\n            }\n        }\n        else if (b1 < p1 + a1) {\n            const s = (b1 - p1) * a2;\n            d = b2 - (p2 + s / a1);\n        }\n        else if (b1 > p1 + a1) {\n            const s = (a1 + p1) * b2;\n            d = s / b1 - (p2 + a2);\n        }\n        else {\n            d = b2 - (p2 + a2);\n        }\n        if (d > 0) {\n            return d;\n        }\n        return 0;\n    }\n    bridge(line1, x1, y1, line2, x2, y2) {\n        const dx = x2 + line2.dx - x1;\n        let dy = 0;\n        let s = 0;\n        if (line2.dx === 0) {\n            dy = line2.dy;\n        }\n        else {\n            s = dx * line2.dy;\n            dy = s / line2.dx;\n        }\n        const r = this.createLine(dx, dy, line2.next);\n        line1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n        return r;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    createNode(cell) {\n        const node = {};\n        node.cell = cell;\n        node.x = 0;\n        node.y = 0;\n        node.width = 0;\n        node.height = 0;\n        const geo = this.getVertexBounds(cell);\n        if (geo != null) {\n            if (this.isHorizontal()) {\n                node.width = geo.height;\n                node.height = geo.width;\n            }\n            else {\n                node.width = geo.width;\n                node.height = geo.height;\n            }\n        }\n        node.offsetX = 0;\n        node.offsetY = 0;\n        node.contour = {};\n        return node;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    apply(node, bounds = null) {\n        const model = this.graph.getDataModel();\n        const cell = node.cell;\n        let g = cell.getGeometry();\n        if (cell != null && g != null) {\n            if (this.isVertexMovable(cell)) {\n                g = this.setVertexLocation(cell, node.x, node.y);\n                if (this.resizeParent) {\n                    const parent = cell.getParent();\n                    const id = CellPath.create(parent);\n                    // Implements set semantic\n                    const parentsChanged = this.parentsChanged;\n                    if (parentsChanged[id] == null) {\n                        parentsChanged[id] = parent;\n                    }\n                }\n            }\n            if (bounds == null) {\n                bounds = new Rectangle(g.x, g.y, g.width, g.height);\n            }\n            else {\n                bounds = new Rectangle(Math.min(bounds.x, g.x), Math.min(bounds.y, g.y), Math.max(bounds.x + bounds.width, g.x + g.width), Math.max(bounds.y + bounds.height, g.y + g.height));\n            }\n        }\n        return bounds;\n    }\n    /**\n     * Starts the actual compact tree layout algorithm\n     * at the given node.\n     */\n    createLine(dx, dy, next = null) {\n        const line = {\n            dx,\n            dy,\n            next,\n        };\n        return line;\n    }\n    /**\n     * Adjust parent cells whose child geometries have changed. The default\n     * implementation adjusts the group to just fit around the children with\n     * a padding.\n     */\n    adjustParents() {\n        const tmp = [];\n        for (const id in this.parentsChanged) {\n            tmp.push(this.parentsChanged[id]);\n        }\n        this.arrangeGroups(sortCells(tmp, true), this.groupPadding, this.groupPaddingTop, this.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n    }\n    /**\n     * Moves the specified node and all of its children by the given amount.\n     */\n    localEdgeProcessing(node) {\n        this.processNodeOutgoing(node);\n        let { child } = node;\n        while (child != null) {\n            this.localEdgeProcessing(child);\n            child = child.next;\n        }\n    }\n    /**\n     * Separates the x position of edges as they connect to vertices\n     */\n    processNodeOutgoing(node) {\n        let { child } = node;\n        const parentCell = node.cell;\n        let childCount = 0;\n        const sortedCells = [];\n        while (child != null) {\n            childCount++;\n            let sortingCriterion;\n            if (this.horizontal) {\n                sortingCriterion = child.y;\n            }\n            else {\n                sortingCriterion = child.x;\n            }\n            sortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n            child = child.next;\n        }\n        sortedCells.sort(WeightedCellSorter.compare);\n        let availableWidth = node.width;\n        const requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n        // Add a buffer on the edges of the vertex if the edge count allows\n        if (availableWidth > requiredWidth + 2 * this.prefHozEdgeSep) {\n            availableWidth -= 2 * this.prefHozEdgeSep;\n        }\n        const edgeSpacing = availableWidth / childCount;\n        let currentXOffset = edgeSpacing / 2.0;\n        if (availableWidth > requiredWidth + 2 * this.prefHozEdgeSep) {\n            currentXOffset += this.prefHozEdgeSep;\n        }\n        let currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n        let maxYOffset = 0;\n        const parentBounds = this.getVertexBounds(parentCell);\n        child = node.child;\n        for (let j = 0; j < sortedCells.length; j++) {\n            const childCell = sortedCells[j].cell.cell;\n            const childBounds = this.getVertexBounds(childCell);\n            const edges = this.graph.getEdgesBetween(parentCell, childCell, false);\n            const newPoints = [];\n            let x = 0;\n            let y = 0;\n            for (let i = 0; i < edges.length; i += 1) {\n                if (this.horizontal) {\n                    // Use opposite co-ords, calculation was done for\n                    //\n                    x = parentBounds.x + parentBounds.width;\n                    y = parentBounds.y + currentXOffset;\n                    newPoints.push(new Point(x, y));\n                    x = parentBounds.x + parentBounds.width + currentYOffset;\n                    newPoints.push(new Point(x, y));\n                    y = childBounds.y + childBounds.height / 2.0;\n                    newPoints.push(new Point(x, y));\n                    this.setEdgePoints(edges[i], newPoints);\n                }\n                else {\n                    x = parentBounds.x + currentXOffset;\n                    y = parentBounds.y + parentBounds.height;\n                    newPoints.push(new Point(x, y));\n                    y = parentBounds.y + parentBounds.height + currentYOffset;\n                    newPoints.push(new Point(x, y));\n                    x = childBounds.x + childBounds.width / 2.0;\n                    newPoints.push(new Point(x, y));\n                    this.setEdgePoints(edges[i], newPoints);\n                }\n            }\n            if (j < childCount / 2) {\n                currentYOffset += this.prefVertEdgeOff;\n            }\n            else if (j > childCount / 2) {\n                currentYOffset -= this.prefVertEdgeOff;\n            }\n            // Ignore the case if equals, this means the second of 2\n            // jettys with the same y (even number of edges)\n            //                pos[k * 2] = currentX;\n            currentXOffset += edgeSpacing;\n            //                pos[k * 2 + 1] = currentYOffset;\n            maxYOffset = Math.max(maxYOffset, currentYOffset);\n        }\n    }\n}\nexport default CompactTreeLayout;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
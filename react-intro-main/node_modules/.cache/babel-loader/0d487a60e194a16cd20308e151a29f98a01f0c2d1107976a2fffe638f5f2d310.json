{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport Dictionary from '../../util/Dictionary';\nimport { ALIGN, NONE } from '../../util/Constants';\n/**\n * Represents the current state of a cell in a given {@link GraphView}.\n *\n * For edges, the edge label position is stored in <absoluteOffset>.\n *\n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n *\n * ```javascript\n * let bbox = (state.text != null) ? state.text.boundingBox : null;\n * ```\n *\n */\nclass CellState extends Rectangle {\n  /**\n   * Constructs a new object that represents the current state of the given Cell in the specified view.\n   *\n   * @param view {@link GraphView} that contains the state.\n   * @param cell {@link Cell} that this state represents.\n   * @param style the style of the Cell.\n   */\n  constructor(view = null, cell = null, style = null) {\n    super();\n    // referenced in mxCellRenderer\n    this.node = null;\n    // TODO: Document me!!\n    this.cellBounds = null;\n    this.paintBounds = null;\n    this.boundingBox = null;\n    // Used by mxCellRenderer's createControl()\n    this.control = null;\n    // Used by mxCellRenderer's createCellOverlays()\n    this.overlays = new Dictionary();\n    /**\n     * Specifies if the style is invalid. Default is false.\n     */\n    this.invalidStyle = false;\n    /**\n     * Specifies if the state is invalid. Default is true.\n     */\n    this.invalid = true;\n    /**\n     * Holds an array of <Point> that represent the absolute points of an\n     * edge.\n     */\n    this.absolutePoints = [];\n    /**\n     * Caches the visible source terminal state.\n     */\n    this.visibleSourceState = null;\n    /**\n     * Caches the visible target terminal state.\n     */\n    this.visibleTargetState = null;\n    /**\n     * Caches the distance between the end points for an edge.\n     */\n    this.terminalDistance = 0;\n    /**\n     * Caches the length of an edge.\n     */\n    this.length = 0;\n    /**\n     * Array of numbers that represent the cached length of each segment of the\n     * edge.\n     */\n    this.segments = [];\n    /**\n     * Holds the {@link Shape} that represents the cell graphically.\n     */\n    this.shape = null;\n    /**\n     * Holds the {@link Text} that represents the label of the cell. Thi smay be\n     * null if the cell has no label.\n     */\n    this.text = null;\n    /**\n     * Holds the unscaled width of the state.\n     */\n    this.unscaledWidth = 0;\n    /**\n     * Holds the unscaled height of the state.\n     */\n    this.unscaledHeight = 0;\n    this.parentHighlight = null;\n    this.point = null;\n    if (view) {\n      this.view = view;\n    }\n    if (cell) {\n      this.cell = cell;\n    }\n    this.style = style ?? {};\n    this.origin = new Point();\n    this.absoluteOffset = new Point();\n  }\n  /**\n   * Returns the {@link Rectangle} that should be used as the perimeter of the\n   * cell.\n   *\n   * @param border Optional border to be added around the perimeter bounds.\n   * @param bounds Optional {@link Rectangle} to be used as the initial bounds.\n   */\n  getPerimeterBounds(border = 0, bounds = new Rectangle(this.x, this.y, this.width, this.height)) {\n    if (this.shape?.stencil?.aspect === 'fixed') {\n      const aspect = this.shape.stencil.computeAspect(this.shape, bounds.x, bounds.y, bounds.width, bounds.height);\n      bounds.x = aspect.x;\n      bounds.y = aspect.y;\n      bounds.width = this.shape.stencil.w0 * aspect.width;\n      bounds.height = this.shape.stencil.h0 * aspect.height;\n    }\n    if (border !== 0) {\n      bounds.grow(border);\n    }\n    return bounds;\n  }\n  /**\n   * Sets the first or last point in <absolutePoints> depending on isSource.\n   *\n   * @param point {@link Point} that represents the terminal point.\n   * @param isSource Boolean that specifies if the first or last point should\n   * be assigned.\n   */\n  setAbsoluteTerminalPoint(point, isSource = false) {\n    if (isSource) {\n      if (this.absolutePoints.length === 0) {\n        this.absolutePoints.push(point);\n      } else {\n        this.absolutePoints[0] = point;\n      }\n    } else if (this.absolutePoints.length === 0) {\n      this.absolutePoints.push(null);\n      this.absolutePoints.push(point);\n    } else if (this.absolutePoints.length === 1) {\n      this.absolutePoints.push(point);\n    } else {\n      this.absolutePoints[this.absolutePoints.length - 1] = point;\n    }\n  }\n  /**\n   * Sets the given cursor on the shape and text shape.\n   */\n  setCursor(cursor) {\n    if (this.shape) {\n      this.shape.setCursor(cursor);\n    }\n    if (this.text) {\n      this.text.setCursor(cursor);\n    }\n  }\n  /**\n   * Returns the visible source or target terminal cell.\n   *\n   * @param source Boolean that specifies if the source or target cell should be\n   * returned.\n   */\n  getVisibleTerminal(source = false) {\n    return this.getVisibleTerminalState(source)?.cell ?? null;\n  }\n  /**\n   * Returns the visible source or target terminal state.\n   *\n   * @param source Boolean that specifies if the source or target state should be\n   * returned.\n   */\n  getVisibleTerminalState(source = false) {\n    return source ? this.visibleSourceState : this.visibleTargetState;\n  }\n  /**\n   * Sets the visible source or target terminal state.\n   *\n   * @param terminalState <CellState> that represents the terminal.\n   * @param source Boolean that specifies if the source or target state should be set.\n   */\n  setVisibleTerminalState(terminalState, source = false) {\n    if (source) {\n      this.visibleSourceState = terminalState;\n    } else {\n      this.visibleTargetState = terminalState;\n    }\n  }\n  /**\n   * Returns the unscaled, untranslated bounds.\n   */\n  getCellBounds() {\n    return this.cellBounds;\n  }\n  /**\n   * Returns the unscaled, untranslated paint bounds. This is the same as\n   * <getCellBounds> but with a 90 degree rotation if the shape's\n   * isPaintBoundsInverted returns true.\n   */\n  getPaintBounds() {\n    return this.paintBounds;\n  }\n  /**\n   * Updates the cellBounds and paintBounds.\n   */\n  updateCachedBounds() {\n    const view = this.view;\n    const tr = view.translate;\n    const s = view.scale;\n    this.cellBounds = new Rectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n    this.paintBounds = Rectangle.fromRectangle(this.cellBounds);\n    if (this.shape && this.shape.isPaintBoundsInverted()) {\n      this.paintBounds.rotate90();\n    }\n  }\n  /**\n   * Destructor: setState\n   *\n   * Copies all fields from the given state to this state.\n   */\n  setState(state) {\n    this.view = state.view;\n    this.cell = state.cell;\n    this.style = state.style;\n    this.absolutePoints = state.absolutePoints;\n    this.origin = state.origin;\n    this.absoluteOffset = state.absoluteOffset;\n    this.boundingBox = state.boundingBox;\n    this.terminalDistance = state.terminalDistance;\n    this.segments = state.segments;\n    this.length = state.length;\n    this.x = state.x;\n    this.y = state.y;\n    this.width = state.width;\n    this.height = state.height;\n    this.unscaledWidth = state.unscaledWidth;\n    this.unscaledHeight = state.unscaledHeight;\n  }\n  /**\n   * Returns a clone of this {@link Point}.\n   */\n  clone() {\n    const clone = new CellState(this.view, this.cell, this.style);\n    // Clones the absolute points\n    for (let i = 0; i < this.absolutePoints.length; i += 1) {\n      const p = this.absolutePoints[i];\n      clone.absolutePoints[i] = p ? p.clone() : null;\n    }\n    if (this.origin) {\n      clone.origin = this.origin.clone();\n    }\n    if (this.absoluteOffset) {\n      clone.absoluteOffset = this.absoluteOffset.clone();\n    }\n    if (this.boundingBox) {\n      clone.boundingBox = this.boundingBox.clone();\n    }\n    clone.terminalDistance = this.terminalDistance;\n    clone.segments = this.segments;\n    clone.length = this.length;\n    clone.x = this.x;\n    clone.y = this.y;\n    clone.width = this.width;\n    clone.height = this.height;\n    clone.unscaledWidth = this.unscaledWidth;\n    clone.unscaledHeight = this.unscaledHeight;\n    return clone;\n  }\n  /**\n   * Destructor: destroy\n   *\n   * Destroys the state and all associated resources.\n   */\n  destroy() {\n    this.view.graph.cellRenderer.destroy(this);\n  }\n  /**\n   * Returns true if the given cell state is a loop.\n   *\n   * @param state {@link CellState} that represents a potential loop.\n   */\n  isLoop(state) {\n    const src = this.getVisibleTerminalState(true);\n    return src && src === this.getVisibleTerminalState(false);\n  }\n  /*****************************************************************************\n   * Group: Graph appearance\n   *****************************************************************************/\n  /**\n   * Returns the vertical alignment for the given cell state.\n   * This implementation returns the value stored in the {@link CellStateStyle.verticalAlign}\n   * property of {@link style}.\n   */\n  getVerticalAlign() {\n    return this.style.verticalAlign ?? ALIGN.MIDDLE;\n  }\n  /**\n   * Returns `true` if the given state has no stroke, no fill color and no image.\n   */\n  isTransparentState() {\n    return (this.style.strokeColor ?? NONE) === NONE && (this.style.fillColor ?? NONE) === NONE && !this.getImageSrc();\n  }\n  /**\n   * Returns the image URL for the given cell state.\n   * This implementation returns the value stored in the {@link CellStateStyle.image} property\n   * of {@link style}.\n   */\n  getImageSrc() {\n    return this.style.image || null;\n  }\n  /**\n   * Returns the indicator color for the given cell state.\n   * This implementation returns the value stored in the {@link CellStateStyle.indicatorColor}\n   * property of {@link style}.\n   */\n  getIndicatorColor() {\n    return this.style.indicatorColor || null;\n  }\n  /**\n   * Returns the indicator gradient color for the given cell state.\n   * This implementation returns the value stored in the {@link CellStateStyle.gradientColor}\n   * property of {@link style}.\n   */\n  getIndicatorGradientColor() {\n    return this.style.gradientColor || null;\n  }\n  /**\n   * Returns the indicator shape for the given cell state.\n   * This implementation returns the value stored in the {@link CellStateStyle.indicatorShape}\n   * property of {@link style}.\n   */\n  getIndicatorShape() {\n    return this.style.indicatorShape || null;\n  }\n  /**\n   * Returns the indicator image for the given cell state.\n   * This implementation returns the value stored in the {@link CellStateStyle.indicatorImage}\n   * property of {@link style}.\n   */\n  getIndicatorImageSrc() {\n    return this.style.indicatorImage || null;\n  }\n}\nexport default CellState;","map":{"version":3,"names":["Point","Rectangle","Dictionary","ALIGN","NONE","CellState","constructor","view","cell","style","node","cellBounds","paintBounds","boundingBox","control","overlays","invalidStyle","invalid","absolutePoints","visibleSourceState","visibleTargetState","terminalDistance","length","segments","shape","text","unscaledWidth","unscaledHeight","parentHighlight","point","origin","absoluteOffset","getPerimeterBounds","border","bounds","x","y","width","height","stencil","aspect","computeAspect","w0","h0","grow","setAbsoluteTerminalPoint","isSource","push","setCursor","cursor","getVisibleTerminal","source","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","getPaintBounds","updateCachedBounds","tr","translate","s","scale","fromRectangle","isPaintBoundsInverted","rotate90","setState","state","clone","i","p","destroy","graph","cellRenderer","isLoop","src","getVerticalAlign","verticalAlign","MIDDLE","isTransparentState","strokeColor","fillColor","getImageSrc","image","getIndicatorColor","indicatorColor","getIndicatorGradientColor","gradientColor","getIndicatorShape","indicatorShape","getIndicatorImageSrc","indicatorImage"],"sources":["D:/OSPanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/cell/CellState.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport Dictionary from '../../util/Dictionary';\nimport { ALIGN, NONE } from '../../util/Constants';\n/**\n * Represents the current state of a cell in a given {@link GraphView}.\n *\n * For edges, the edge label position is stored in <absoluteOffset>.\n *\n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n *\n * ```javascript\n * let bbox = (state.text != null) ? state.text.boundingBox : null;\n * ```\n *\n */\nclass CellState extends Rectangle {\n    /**\n     * Constructs a new object that represents the current state of the given Cell in the specified view.\n     *\n     * @param view {@link GraphView} that contains the state.\n     * @param cell {@link Cell} that this state represents.\n     * @param style the style of the Cell.\n     */\n    constructor(view = null, cell = null, style = null) {\n        super();\n        // referenced in mxCellRenderer\n        this.node = null;\n        // TODO: Document me!!\n        this.cellBounds = null;\n        this.paintBounds = null;\n        this.boundingBox = null;\n        // Used by mxCellRenderer's createControl()\n        this.control = null;\n        // Used by mxCellRenderer's createCellOverlays()\n        this.overlays = new Dictionary();\n        /**\n         * Specifies if the style is invalid. Default is false.\n         */\n        this.invalidStyle = false;\n        /**\n         * Specifies if the state is invalid. Default is true.\n         */\n        this.invalid = true;\n        /**\n         * Holds an array of <Point> that represent the absolute points of an\n         * edge.\n         */\n        this.absolutePoints = [];\n        /**\n         * Caches the visible source terminal state.\n         */\n        this.visibleSourceState = null;\n        /**\n         * Caches the visible target terminal state.\n         */\n        this.visibleTargetState = null;\n        /**\n         * Caches the distance between the end points for an edge.\n         */\n        this.terminalDistance = 0;\n        /**\n         * Caches the length of an edge.\n         */\n        this.length = 0;\n        /**\n         * Array of numbers that represent the cached length of each segment of the\n         * edge.\n         */\n        this.segments = [];\n        /**\n         * Holds the {@link Shape} that represents the cell graphically.\n         */\n        this.shape = null;\n        /**\n         * Holds the {@link Text} that represents the label of the cell. Thi smay be\n         * null if the cell has no label.\n         */\n        this.text = null;\n        /**\n         * Holds the unscaled width of the state.\n         */\n        this.unscaledWidth = 0;\n        /**\n         * Holds the unscaled height of the state.\n         */\n        this.unscaledHeight = 0;\n        this.parentHighlight = null;\n        this.point = null;\n        if (view) {\n            this.view = view;\n        }\n        if (cell) {\n            this.cell = cell;\n        }\n        this.style = style ?? {};\n        this.origin = new Point();\n        this.absoluteOffset = new Point();\n    }\n    /**\n     * Returns the {@link Rectangle} that should be used as the perimeter of the\n     * cell.\n     *\n     * @param border Optional border to be added around the perimeter bounds.\n     * @param bounds Optional {@link Rectangle} to be used as the initial bounds.\n     */\n    getPerimeterBounds(border = 0, bounds = new Rectangle(this.x, this.y, this.width, this.height)) {\n        if (this.shape?.stencil?.aspect === 'fixed') {\n            const aspect = this.shape.stencil.computeAspect(this.shape, bounds.x, bounds.y, bounds.width, bounds.height);\n            bounds.x = aspect.x;\n            bounds.y = aspect.y;\n            bounds.width = this.shape.stencil.w0 * aspect.width;\n            bounds.height = this.shape.stencil.h0 * aspect.height;\n        }\n        if (border !== 0) {\n            bounds.grow(border);\n        }\n        return bounds;\n    }\n    /**\n     * Sets the first or last point in <absolutePoints> depending on isSource.\n     *\n     * @param point {@link Point} that represents the terminal point.\n     * @param isSource Boolean that specifies if the first or last point should\n     * be assigned.\n     */\n    setAbsoluteTerminalPoint(point, isSource = false) {\n        if (isSource) {\n            if (this.absolutePoints.length === 0) {\n                this.absolutePoints.push(point);\n            }\n            else {\n                this.absolutePoints[0] = point;\n            }\n        }\n        else if (this.absolutePoints.length === 0) {\n            this.absolutePoints.push(null);\n            this.absolutePoints.push(point);\n        }\n        else if (this.absolutePoints.length === 1) {\n            this.absolutePoints.push(point);\n        }\n        else {\n            this.absolutePoints[this.absolutePoints.length - 1] = point;\n        }\n    }\n    /**\n     * Sets the given cursor on the shape and text shape.\n     */\n    setCursor(cursor) {\n        if (this.shape) {\n            this.shape.setCursor(cursor);\n        }\n        if (this.text) {\n            this.text.setCursor(cursor);\n        }\n    }\n    /**\n     * Returns the visible source or target terminal cell.\n     *\n     * @param source Boolean that specifies if the source or target cell should be\n     * returned.\n     */\n    getVisibleTerminal(source = false) {\n        return this.getVisibleTerminalState(source)?.cell ?? null;\n    }\n    /**\n     * Returns the visible source or target terminal state.\n     *\n     * @param source Boolean that specifies if the source or target state should be\n     * returned.\n     */\n    getVisibleTerminalState(source = false) {\n        return source ? this.visibleSourceState : this.visibleTargetState;\n    }\n    /**\n     * Sets the visible source or target terminal state.\n     *\n     * @param terminalState <CellState> that represents the terminal.\n     * @param source Boolean that specifies if the source or target state should be set.\n     */\n    setVisibleTerminalState(terminalState, source = false) {\n        if (source) {\n            this.visibleSourceState = terminalState;\n        }\n        else {\n            this.visibleTargetState = terminalState;\n        }\n    }\n    /**\n     * Returns the unscaled, untranslated bounds.\n     */\n    getCellBounds() {\n        return this.cellBounds;\n    }\n    /**\n     * Returns the unscaled, untranslated paint bounds. This is the same as\n     * <getCellBounds> but with a 90 degree rotation if the shape's\n     * isPaintBoundsInverted returns true.\n     */\n    getPaintBounds() {\n        return this.paintBounds;\n    }\n    /**\n     * Updates the cellBounds and paintBounds.\n     */\n    updateCachedBounds() {\n        const view = this.view;\n        const tr = view.translate;\n        const s = view.scale;\n        this.cellBounds = new Rectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n        this.paintBounds = Rectangle.fromRectangle(this.cellBounds);\n        if (this.shape && this.shape.isPaintBoundsInverted()) {\n            this.paintBounds.rotate90();\n        }\n    }\n    /**\n     * Destructor: setState\n     *\n     * Copies all fields from the given state to this state.\n     */\n    setState(state) {\n        this.view = state.view;\n        this.cell = state.cell;\n        this.style = state.style;\n        this.absolutePoints = state.absolutePoints;\n        this.origin = state.origin;\n        this.absoluteOffset = state.absoluteOffset;\n        this.boundingBox = state.boundingBox;\n        this.terminalDistance = state.terminalDistance;\n        this.segments = state.segments;\n        this.length = state.length;\n        this.x = state.x;\n        this.y = state.y;\n        this.width = state.width;\n        this.height = state.height;\n        this.unscaledWidth = state.unscaledWidth;\n        this.unscaledHeight = state.unscaledHeight;\n    }\n    /**\n     * Returns a clone of this {@link Point}.\n     */\n    clone() {\n        const clone = new CellState(this.view, this.cell, this.style);\n        // Clones the absolute points\n        for (let i = 0; i < this.absolutePoints.length; i += 1) {\n            const p = this.absolutePoints[i];\n            clone.absolutePoints[i] = p ? p.clone() : null;\n        }\n        if (this.origin) {\n            clone.origin = this.origin.clone();\n        }\n        if (this.absoluteOffset) {\n            clone.absoluteOffset = this.absoluteOffset.clone();\n        }\n        if (this.boundingBox) {\n            clone.boundingBox = this.boundingBox.clone();\n        }\n        clone.terminalDistance = this.terminalDistance;\n        clone.segments = this.segments;\n        clone.length = this.length;\n        clone.x = this.x;\n        clone.y = this.y;\n        clone.width = this.width;\n        clone.height = this.height;\n        clone.unscaledWidth = this.unscaledWidth;\n        clone.unscaledHeight = this.unscaledHeight;\n        return clone;\n    }\n    /**\n     * Destructor: destroy\n     *\n     * Destroys the state and all associated resources.\n     */\n    destroy() {\n        this.view.graph.cellRenderer.destroy(this);\n    }\n    /**\n     * Returns true if the given cell state is a loop.\n     *\n     * @param state {@link CellState} that represents a potential loop.\n     */\n    isLoop(state) {\n        const src = this.getVisibleTerminalState(true);\n        return src && src === this.getVisibleTerminalState(false);\n    }\n    /*****************************************************************************\n     * Group: Graph appearance\n     *****************************************************************************/\n    /**\n     * Returns the vertical alignment for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.verticalAlign}\n     * property of {@link style}.\n     */\n    getVerticalAlign() {\n        return this.style.verticalAlign ?? ALIGN.MIDDLE;\n    }\n    /**\n     * Returns `true` if the given state has no stroke, no fill color and no image.\n     */\n    isTransparentState() {\n        return ((this.style.strokeColor ?? NONE) === NONE &&\n            (this.style.fillColor ?? NONE) === NONE &&\n            !this.getImageSrc());\n    }\n    /**\n     * Returns the image URL for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.image} property\n     * of {@link style}.\n     */\n    getImageSrc() {\n        return this.style.image || null;\n    }\n    /**\n     * Returns the indicator color for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.indicatorColor}\n     * property of {@link style}.\n     */\n    getIndicatorColor() {\n        return this.style.indicatorColor || null;\n    }\n    /**\n     * Returns the indicator gradient color for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.gradientColor}\n     * property of {@link style}.\n     */\n    getIndicatorGradientColor() {\n        return this.style.gradientColor || null;\n    }\n    /**\n     * Returns the indicator shape for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.indicatorShape}\n     * property of {@link style}.\n     */\n    getIndicatorShape() {\n        return this.style.indicatorShape || null;\n    }\n    /**\n     * Returns the indicator image for the given cell state.\n     * This implementation returns the value stored in the {@link CellStateStyle.indicatorImage}\n     * property of {@link style}.\n     */\n    getIndicatorImageSrc() {\n        return this.style.indicatorImage || null;\n    }\n}\nexport default CellState;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\SignalGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst signalgraph = () => {\n  _s();\n  const [cvdData, setCvdData] = useState(null);\n  const [chartData, setChartData] = useState(null);\n\n  // Загружаем данные VCD с сервера\n  useEffect(() => {\n    fetch('http://localhost:5000/get-cvd').then(response => response.json()).then(data => {\n      setCvdData(data.content);\n      const parsedData = parseCVDData(data.content); // Парсим данные\n      setChartData(parsedData);\n    }).catch(error => {\n      console.error('Ошибка загрузки файла:', error);\n    });\n  }, []);\n\n  // Функция парсинга данных VCD\n  const parseCVDData = content => {\n    const lines = content.split('\\n'); // Разделяем строки\n    const timestamps = [];\n    const signals = [[], []]; // Для двух сигналов (пример)\n\n    lines.forEach(line => {\n      const [time, signal1, signal2] = line.split(' '); // Разделяем строку\n      if (time && signal1 && signal2) {\n        timestamps.push(time);\n        signals[0].push(Number(signal1));\n        signals[1].push(Number(signal2));\n      }\n    });\n    return {\n      labels: timestamps,\n      datasets: [{\n        label: 'Сигнал 1',\n        data: signals[0],\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }, {\n        label: 'Сигнал 2',\n        data: signals[1],\n        borderColor: 'rgb(255, 99, 132)',\n        tension: 0.1\n      }]\n    };\n  };\n  if (!chartData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0433\\u0440\\u0430\\u0444\\u0438\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0421\\u0438\\u0433\\u043D\\u0430\\u043B-\\u0433\\u0440\\u0430\\u0444\\u0438\\u043A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: 'Сигнал-график VCD файла'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(signalgraph, \"fZ/ibKD0bY2AFUTBkSDifwt69tU=\");\nexport default signalgraph;","map":{"version":3,"names":["React","useState","useEffect","Line","jsxDEV","_jsxDEV","signalgraph","_s","cvdData","setCvdData","chartData","setChartData","fetch","then","response","json","data","content","parsedData","parseCVDData","catch","error","console","lines","split","timestamps","signals","forEach","line","time","signal1","signal2","push","Number","labels","datasets","label","borderColor","tension","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","plugins","legend","position","title","display","text"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/SignalGraph.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst signalgraph = () => {\r\n    const [cvdData, setCvdData] = useState(null);\r\n    const [chartData, setChartData] = useState(null);\r\n\r\n    // Загружаем данные VCD с сервера\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/get-cvd')\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                setCvdData(data.content);\r\n                const parsedData = parseCVDData(data.content); // Парсим данные\r\n                setChartData(parsedData);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Ошибка загрузки файла:', error);\r\n            });\r\n    }, []);\r\n\r\n    // Функция парсинга данных VCD\r\n    const parseCVDData = (content) => {\r\n        const lines = content.split('\\n'); // Разделяем строки\r\n        const timestamps = [];\r\n        const signals = [[], []]; // Для двух сигналов (пример)\r\n\r\n        lines.forEach((line) => {\r\n            const [time, signal1, signal2] = line.split(' '); // Разделяем строку\r\n            if (time && signal1 && signal2) {\r\n                timestamps.push(time);\r\n                signals[0].push(Number(signal1));\r\n                signals[1].push(Number(signal2));\r\n            }\r\n        });\r\n\r\n        return {\r\n            labels: timestamps,\r\n            datasets: [\r\n                {\r\n                    label: 'Сигнал 1',\r\n                    data: signals[0],\r\n                    borderColor: 'rgb(75, 192, 192)',\r\n                    tension: 0.1,\r\n                },\r\n                {\r\n                    label: 'Сигнал 2',\r\n                    data: signals[1],\r\n                    borderColor: 'rgb(255, 99, 132)',\r\n                    tension: 0.1,\r\n                },\r\n            ],\r\n        };\r\n    };\r\n\r\n    if (!chartData) {\r\n        return <div>Загрузка данных графика...</div>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Сигнал-график</h1>\r\n            <Line\r\n                data={chartData}\r\n                options={{\r\n                    responsive: true,\r\n                    plugins: {\r\n                        legend: {\r\n                            position: 'top',\r\n                        },\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Сигнал-график VCD файла',\r\n                        },\r\n                    },\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default signalgraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
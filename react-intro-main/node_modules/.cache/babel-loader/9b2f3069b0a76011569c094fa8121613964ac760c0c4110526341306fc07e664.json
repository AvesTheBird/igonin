{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/commits/v20.9.0/lib/path.js\n// Excluding: the change that adds primordials\n// (https://github.com/nodejs/node/commit/187a862d221dec42fa9a5c4214e7034d9092792f and others)\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nimport * as process from './process.js';\nconst CHAR_UPPERCASE_A = 65; /* A */\nconst CHAR_LOWERCASE_A = 97; /* a */\nconst CHAR_UPPERCASE_Z = 90; /* Z */\nconst CHAR_LOWERCASE_Z = 122; /* z */\nconst CHAR_DOT = 46; /* . */\nconst CHAR_FORWARD_SLASH = 47; /* / */\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\nconst CHAR_COLON = 58; /* : */\nconst CHAR_QUESTION_MARK = 63; /* ? */\nclass ErrorInvalidArgType extends Error {\n  constructor(name, expected, actual) {\n    // determiner: 'must be' or 'must not be'\n    let determiner;\n    if (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n      determiner = 'must not be';\n      expected = expected.replace(/^not /, '');\n    } else {\n      determiner = 'must be';\n    }\n    const type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n    let msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" of type \").concat(expected);\n    msg += \". Received type \".concat(typeof actual);\n    super(msg);\n    this.code = 'ERR_INVALID_ARG_TYPE';\n  }\n}\nfunction validateObject(pathObject, name) {\n  if (pathObject === null || typeof pathObject !== 'object') {\n    throw new ErrorInvalidArgType(name, 'Object', pathObject);\n  }\n}\nfunction validateString(value, name) {\n  if (typeof value !== 'string') {\n    throw new ErrorInvalidArgType(name, 'string', value);\n  }\n}\nconst platformIsWin32 = process.platform === 'win32';\nfunction isPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\nfunction isPosixPathSeparator(code) {\n  return code === CHAR_FORWARD_SLASH;\n}\nfunction isWindowsDeviceRoot(code) {\n  return code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z || code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z;\n}\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n  let res = '';\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code = 0;\n  for (let i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i);\n    } else if (isPathSeparator(code)) {\n      break;\n    } else {\n      code = CHAR_FORWARD_SLASH;\n    }\n    if (isPathSeparator(code)) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator);\n            if (lastSlashIndex === -1) {\n              res = '';\n              lastSegmentLength = 0;\n            } else {\n              res = res.slice(0, lastSlashIndex);\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n            }\n            lastSlash = i;\n            dots = 0;\n            continue;\n          } else if (res.length !== 0) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          res += res.length > 0 ? \"\".concat(separator, \"..\") : '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += \"\".concat(separator).concat(path.slice(lastSlash + 1, i));\n        } else {\n          res = path.slice(lastSlash + 1, i);\n        }\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nfunction formatExt(ext) {\n  return ext ? \"\".concat(ext[0] === '.' ? '' : '.').concat(ext) : '';\n}\nfunction _format(sep, pathObject) {\n  validateObject(pathObject, 'pathObject');\n  const dir = pathObject.dir || pathObject.root;\n  const base = pathObject.base || \"\".concat(pathObject.name || '').concat(formatExt(pathObject.ext));\n  if (!dir) {\n    return base;\n  }\n  return dir === pathObject.root ? \"\".concat(dir).concat(base) : \"\".concat(dir).concat(sep).concat(base);\n}\nexport const win32 = {\n  // path.resolve([from ...], to)\n  resolve() {\n    let resolvedDevice = '';\n    let resolvedTail = '';\n    let resolvedAbsolute = false;\n    for (let i = arguments.length - 1; i >= -1; i--) {\n      let path;\n      if (i >= 0) {\n        path = i < 0 || arguments.length <= i ? undefined : arguments[i];\n        validateString(path, \"paths[\".concat(i, \"]\"));\n        // Skip empty entries\n        if (path.length === 0) {\n          continue;\n        }\n      } else if (resolvedDevice.length === 0) {\n        path = process.cwd();\n      } else {\n        // Windows has the concept of drive-specific current working\n        // directories. If we've resolved a drive letter but not yet an\n        // absolute path, get cwd for that drive, or the process cwd if\n        // the drive cwd is not available. We're sure the device is not\n        // a UNC path at this points, because UNC paths are always absolute.\n        path = process.env[\"=\".concat(resolvedDevice)] || process.cwd();\n        // Verify that a cwd was found and that it actually points\n        // to our drive. If not, default to the drive's root.\n        if (path === undefined || path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() && path.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n          path = \"\".concat(resolvedDevice, \"\\\\\");\n        }\n      }\n      const len = path.length;\n      let rootEnd = 0;\n      let device = '';\n      let isAbsolute = false;\n      const code = path.charCodeAt(0);\n      // Try to match a root\n      if (len === 1) {\n        if (isPathSeparator(code)) {\n          // `path` contains just a path separator\n          rootEnd = 1;\n          isAbsolute = true;\n        }\n      } else if (isPathSeparator(code)) {\n        // Possible UNC root\n        // If we started with a separator, we know we at least have an\n        // absolute path of some kind (UNC or otherwise)\n        isAbsolute = true;\n        if (isPathSeparator(path.charCodeAt(1))) {\n          // Matched double path separator at beginning\n          let j = 2;\n          let last = j;\n          // Match 1 or more non-path separators\n          while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n          if (j < len && j !== last) {\n            const firstPart = path.slice(last, j);\n            // Matched!\n            last = j;\n            // Match 1 or more path separators\n            while (j < len && isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n            if (j < len && j !== last) {\n              // Matched!\n              last = j;\n              // Match 1 or more non-path separators\n              while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                j++;\n              }\n              if (j === len || j !== last) {\n                // We matched a UNC root\n                device = \"\\\\\\\\\".concat(firstPart, \"\\\\\").concat(path.slice(last, j));\n                rootEnd = j;\n              }\n            }\n          }\n        } else {\n          rootEnd = 1;\n        }\n      } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n        // Possible device root\n        device = path.slice(0, 2);\n        rootEnd = 2;\n        if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n          // Treat separator following drive name as an absolute path\n          // indicator\n          isAbsolute = true;\n          rootEnd = 3;\n        }\n      }\n      if (device.length > 0) {\n        if (resolvedDevice.length > 0) {\n          if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n            // This path points to another device so it is not applicable\n            continue;\n          }\n        } else {\n          resolvedDevice = device;\n        }\n      }\n      if (resolvedAbsolute) {\n        if (resolvedDevice.length > 0) {\n          break;\n        }\n      } else {\n        resolvedTail = \"\".concat(path.slice(rootEnd), \"\\\\\").concat(resolvedTail);\n        resolvedAbsolute = isAbsolute;\n        if (isAbsolute && resolvedDevice.length > 0) {\n          break;\n        }\n      }\n    }\n    // At this point the path should be resolved to a full absolute path,\n    // but handle relative paths to be safe (might happen when process.cwd()\n    // fails)\n    // Normalize the tail path\n    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isPathSeparator);\n    return resolvedAbsolute ? \"\".concat(resolvedDevice, \"\\\\\").concat(resolvedTail) : \"\".concat(resolvedDevice).concat(resolvedTail) || '.';\n  },\n  normalize(path) {\n    validateString(path, 'path');\n    const len = path.length;\n    if (len === 0) {\n      return '.';\n    }\n    let rootEnd = 0;\n    let device;\n    let isAbsolute = false;\n    const code = path.charCodeAt(0);\n    // Try to match a root\n    if (len === 1) {\n      // `path` contains just a single char, exit early to avoid\n      // unnecessary work\n      return isPosixPathSeparator(code) ? '\\\\' : path;\n    }\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      // If we started with a separator, we know we at least have an absolute\n      // path of some kind (UNC or otherwise)\n      isAbsolute = true;\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j;\n        // Match 1 or more non-path separators\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n        if (j < len && j !== last) {\n          const firstPart = path.slice(last, j);\n          // Matched!\n          last = j;\n          // Match 1 or more path separators\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more non-path separators\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n            if (j === len) {\n              // We matched a UNC root only\n              // Return the normalized version of the UNC root since there\n              // is nothing left to process\n              return \"\\\\\\\\\".concat(firstPart, \"\\\\\").concat(path.slice(last), \"\\\\\");\n            }\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n              device = \"\\\\\\\\\".concat(firstPart, \"\\\\\").concat(path.slice(last, j));\n              rootEnd = j;\n            }\n          }\n        }\n      } else {\n        rootEnd = 1;\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      // Possible device root\n      device = path.slice(0, 2);\n      rootEnd = 2;\n      if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n        // Treat separator following drive name as an absolute path\n        // indicator\n        isAbsolute = true;\n        rootEnd = 3;\n      }\n    }\n    let tail = rootEnd < len ? normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator) : '';\n    if (tail.length === 0 && !isAbsolute) {\n      tail = '.';\n    }\n    if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n      tail += '\\\\';\n    }\n    if (device === undefined) {\n      return isAbsolute ? \"\\\\\".concat(tail) : tail;\n    }\n    return isAbsolute ? \"\".concat(device, \"\\\\\").concat(tail) : \"\".concat(device).concat(tail);\n  },\n  isAbsolute(path) {\n    validateString(path, 'path');\n    const len = path.length;\n    if (len === 0) {\n      return false;\n    }\n    const code = path.charCodeAt(0);\n    return isPathSeparator(code) ||\n    // Possible device root\n    len > 2 && isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON && isPathSeparator(path.charCodeAt(2));\n  },\n  join() {\n    if (arguments.length === 0) {\n      return '.';\n    }\n    let joined;\n    let firstPart;\n    for (let i = 0; i < arguments.length; ++i) {\n      const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      validateString(arg, 'path');\n      if (arg.length > 0) {\n        if (joined === undefined) {\n          joined = firstPart = arg;\n        } else {\n          joined += \"\\\\\".concat(arg);\n        }\n      }\n    }\n    if (joined === undefined) {\n      return '.';\n    }\n    // Make sure that the joined path doesn't start with two slashes, because\n    // normalize() will mistake it for a UNC path then.\n    //\n    // This step is skipped when it is very clear that the user actually\n    // intended to point at a UNC path. This is assumed when the first\n    // non-empty string arguments starts with exactly two slashes followed by\n    // at least one more non-slash character.\n    //\n    // Note that for normalize() to treat a path as a UNC path it needs to\n    // have at least 2 components, so we don't filter for that here.\n    // This means that the user can use join to construct UNC paths from\n    // a server name and a share name; for example:\n    //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n    let needsReplace = true;\n    let slashCount = 0;\n    if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\n      ++slashCount;\n      const firstLen = firstPart.length;\n      if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\n        ++slashCount;\n        if (firstLen > 2) {\n          if (isPathSeparator(firstPart.charCodeAt(2))) {\n            ++slashCount;\n          } else {\n            // We matched a UNC path in the first part\n            needsReplace = false;\n          }\n        }\n      }\n    }\n    if (needsReplace) {\n      // Find any more consecutive slashes we need to replace\n      while (slashCount < joined.length && isPathSeparator(joined.charCodeAt(slashCount))) {\n        slashCount++;\n      }\n      // Replace the slashes if needed\n      if (slashCount >= 2) {\n        joined = \"\\\\\".concat(joined.slice(slashCount));\n      }\n    }\n    return win32.normalize(joined);\n  },\n  // It will solve the relative path from `from` to `to`, for instance:\n  //  from = 'C:\\\\orandea\\\\test\\\\aaa'\n  //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n  // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n  relative(from, to) {\n    validateString(from, 'from');\n    validateString(to, 'to');\n    if (from === to) {\n      return '';\n    }\n    const fromOrig = win32.resolve(from);\n    const toOrig = win32.resolve(to);\n    if (fromOrig === toOrig) {\n      return '';\n    }\n    from = fromOrig.toLowerCase();\n    to = toOrig.toLowerCase();\n    if (from === to) {\n      return '';\n    }\n    // Trim any leading backslashes\n    let fromStart = 0;\n    while (fromStart < from.length && from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n      fromStart++;\n    }\n    // Trim trailing backslashes (applicable to UNC paths only)\n    let fromEnd = from.length;\n    while (fromEnd - 1 > fromStart && from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n      fromEnd--;\n    }\n    const fromLen = fromEnd - fromStart;\n    // Trim any leading backslashes\n    let toStart = 0;\n    while (toStart < to.length && to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n      toStart++;\n    }\n    // Trim trailing backslashes (applicable to UNC paths only)\n    let toEnd = to.length;\n    while (toEnd - 1 > toStart && to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n      toEnd--;\n    }\n    const toLen = toEnd - toStart;\n    // Compare paths to find the longest common path from root\n    const length = fromLen < toLen ? fromLen : toLen;\n    let lastCommonSep = -1;\n    let i = 0;\n    for (; i < length; i++) {\n      const fromCode = from.charCodeAt(fromStart + i);\n      if (fromCode !== to.charCodeAt(toStart + i)) {\n        break;\n      } else if (fromCode === CHAR_BACKWARD_SLASH) {\n        lastCommonSep = i;\n      }\n    }\n    // We found a mismatch before the first common path separator was seen, so\n    // return the original `to`.\n    if (i !== length) {\n      if (lastCommonSep === -1) {\n        return toOrig;\n      }\n    } else {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n          return toOrig.slice(toStart + i + 1);\n        }\n        if (i === 2) {\n          // We get here if `from` is the device root.\n          // For example: from='C:\\\\'; to='C:\\\\foo'\n          return toOrig.slice(toStart + i);\n        }\n      }\n      if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n          lastCommonSep = i;\n        } else if (i === 2) {\n          // We get here if `to` is the device root.\n          // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n          lastCommonSep = 3;\n        }\n      }\n      if (lastCommonSep === -1) {\n        lastCommonSep = 0;\n      }\n    }\n    let out = '';\n    // Generate the relative path based on the path difference between `to` and\n    // `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n        out += out.length === 0 ? '..' : '\\\\..';\n      }\n    }\n    toStart += lastCommonSep;\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0) {\n      return \"\".concat(out).concat(toOrig.slice(toStart, toEnd));\n    }\n    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n      ++toStart;\n    }\n    return toOrig.slice(toStart, toEnd);\n  },\n  toNamespacedPath(path) {\n    // Note: this will *probably* throw somewhere.\n    if (typeof path !== 'string' || path.length === 0) {\n      return path;\n    }\n    const resolvedPath = win32.resolve(path);\n    if (resolvedPath.length <= 2) {\n      return path;\n    }\n    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n      // Possible UNC root\n      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n        const code = resolvedPath.charCodeAt(2);\n        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n          // Matched non-long UNC root, convert the path to a long UNC path\n          return \"\\\\\\\\?\\\\UNC\\\\\".concat(resolvedPath.slice(2));\n        }\n      }\n    } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) && resolvedPath.charCodeAt(1) === CHAR_COLON && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n      // Matched device root, convert the path to a long UNC path\n      return \"\\\\\\\\?\\\\\".concat(resolvedPath);\n    }\n    return path;\n  },\n  dirname(path) {\n    validateString(path, 'path');\n    const len = path.length;\n    if (len === 0) {\n      return '.';\n    }\n    let rootEnd = -1;\n    let offset = 0;\n    const code = path.charCodeAt(0);\n    if (len === 1) {\n      // `path` contains just a path separator, exit early to avoid\n      // unnecessary work or a dot.\n      return isPathSeparator(code) ? path : '.';\n    }\n    // Try to match a root\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      rootEnd = offset = 1;\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j;\n        // Match 1 or more non-path separators\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n        if (j < len && j !== last) {\n          // Matched!\n          last = j;\n          // Match 1 or more path separators\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more non-path separators\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n            if (j === len) {\n              // We matched a UNC root only\n              return path;\n            }\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n              // Offset by 1 to include the separator after the UNC root to\n              // treat it as a \"normal root\" on top of a (UNC) root\n              rootEnd = offset = j + 1;\n            }\n          }\n        }\n      }\n      // Possible device root\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\n      offset = rootEnd;\n    }\n    let end = -1;\n    let matchedSlash = true;\n    for (let i = len - 1; i >= offset; --i) {\n      if (isPathSeparator(path.charCodeAt(i))) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n    if (end === -1) {\n      if (rootEnd === -1) {\n        return '.';\n      }\n      end = rootEnd;\n    }\n    return path.slice(0, end);\n  },\n  basename(path, suffix) {\n    if (suffix !== undefined) {\n      validateString(suffix, 'suffix');\n    }\n    validateString(path, 'path');\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n    // Check for a drive letter prefix so as not to mistake the following\n    // path separator as an extra separator at the end of the path that can be\n    // disregarded\n    if (path.length >= 2 && isWindowsDeviceRoot(path.charCodeAt(0)) && path.charCodeAt(1) === CHAR_COLON) {\n      start = 2;\n    }\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n      if (suffix === path) {\n        return '';\n      }\n      let extIdx = suffix.length - 1;\n      let firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= start; --i) {\n        const code = path.charCodeAt(i);\n        if (isPathSeparator(code)) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === suffix.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end) {\n        end = firstNonSlashEnd;\n      } else if (end === -1) {\n        end = path.length;\n      }\n      return path.slice(start, end);\n    }\n    for (i = path.length - 1; i >= start; --i) {\n      if (isPathSeparator(path.charCodeAt(i))) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1) {\n      return '';\n    }\n    return path.slice(start, end);\n  },\n  extname(path) {\n    validateString(path, 'path');\n    let start = 0;\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    // Check for a drive letter prefix so as not to mistake the following\n    // path separator as an extra separator at the end of the path that can be\n    // disregarded\n    if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {\n      start = startPart = 2;\n    }\n    for (let i = path.length - 1; i >= start; --i) {\n      const code = path.charCodeAt(i);\n      if (isPathSeparator(code)) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n  format: _format.bind(null, '\\\\'),\n  parse(path) {\n    validateString(path, 'path');\n    const ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) {\n      return ret;\n    }\n    const len = path.length;\n    let rootEnd = 0;\n    let code = path.charCodeAt(0);\n    if (len === 1) {\n      if (isPathSeparator(code)) {\n        // `path` contains just a path separator, exit early to avoid\n        // unnecessary work\n        ret.root = ret.dir = path;\n        return ret;\n      }\n      ret.base = ret.name = path;\n      return ret;\n    }\n    // Try to match a root\n    if (isPathSeparator(code)) {\n      // Possible UNC root\n      rootEnd = 1;\n      if (isPathSeparator(path.charCodeAt(1))) {\n        // Matched double path separator at beginning\n        let j = 2;\n        let last = j;\n        // Match 1 or more non-path separators\n        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n          j++;\n        }\n        if (j < len && j !== last) {\n          // Matched!\n          last = j;\n          // Match 1 or more path separators\n          while (j < len && isPathSeparator(path.charCodeAt(j))) {\n            j++;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more non-path separators\n            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n              j++;\n            }\n            if (j === len) {\n              // We matched a UNC root only\n              rootEnd = j;\n            } else if (j !== last) {\n              // We matched a UNC root with leftovers\n              rootEnd = j + 1;\n            }\n          }\n        }\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      // Possible device root\n      if (len <= 2) {\n        // `path` contains just a drive root, exit early to avoid\n        // unnecessary work\n        ret.root = ret.dir = path;\n        return ret;\n      }\n      rootEnd = 2;\n      if (isPathSeparator(path.charCodeAt(2))) {\n        if (len === 3) {\n          // `path` contains just a drive root, exit early to avoid\n          // unnecessary work\n          ret.root = ret.dir = path;\n          return ret;\n        }\n        rootEnd = 3;\n      }\n    }\n    if (rootEnd > 0) {\n      ret.root = path.slice(0, rootEnd);\n    }\n    let startDot = -1;\n    let startPart = rootEnd;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path.length - 1;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    // Get non-dir info\n    for (; i >= rootEnd; --i) {\n      code = path.charCodeAt(i);\n      if (isPathSeparator(code)) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n    if (end !== -1) {\n      if (startDot === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n        ret.base = ret.name = path.slice(startPart, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n        ret.ext = path.slice(startDot, end);\n      }\n    }\n    // If the directory is the root, use the entire root as the `dir` including\n    // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n    // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n    if (startPart > 0 && startPart !== rootEnd) {\n      ret.dir = path.slice(0, startPart - 1);\n    } else {\n      ret.dir = ret.root;\n    }\n    return ret;\n  },\n  sep: '\\\\',\n  delimiter: ';',\n  win32: null,\n  posix: null\n};\nconst posixCwd = (() => {\n  if (platformIsWin32) {\n    // Converts Windows' backslash path separators to POSIX forward slashes\n    // and truncates any drive indicator\n    const regexp = /\\\\/g;\n    return () => {\n      const cwd = process.cwd().replace(regexp, '/');\n      return cwd.slice(cwd.indexOf('/'));\n    };\n  }\n  // We're already on POSIX, no need for any transformations\n  return () => process.cwd();\n})();\nexport const posix = {\n  // path.resolve([from ...], to)\n  resolve() {\n    let resolvedPath = '';\n    let resolvedAbsolute = false;\n    for (let i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      const path = i >= 0 ? i < 0 || arguments.length <= i ? undefined : arguments[i] : posixCwd();\n      validateString(path, \"paths[\".concat(i, \"]\"));\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n      resolvedPath = \"\".concat(path, \"/\").concat(resolvedPath);\n      resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    }\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);\n    if (resolvedAbsolute) {\n      return \"/\".concat(resolvedPath);\n    }\n    return resolvedPath.length > 0 ? resolvedPath : '.';\n  },\n  normalize(path) {\n    validateString(path, 'path');\n    if (path.length === 0) {\n      return '.';\n    }\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n    // Normalize the path\n    path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n    if (path.length === 0) {\n      if (isAbsolute) {\n        return '/';\n      }\n      return trailingSeparator ? './' : '.';\n    }\n    if (trailingSeparator) {\n      path += '/';\n    }\n    return isAbsolute ? \"/\".concat(path) : path;\n  },\n  isAbsolute(path) {\n    validateString(path, 'path');\n    return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  },\n  join() {\n    if (arguments.length === 0) {\n      return '.';\n    }\n    let joined;\n    for (let i = 0; i < arguments.length; ++i) {\n      const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      validateString(arg, 'path');\n      if (arg.length > 0) {\n        if (joined === undefined) {\n          joined = arg;\n        } else {\n          joined += \"/\".concat(arg);\n        }\n      }\n    }\n    if (joined === undefined) {\n      return '.';\n    }\n    return posix.normalize(joined);\n  },\n  relative(from, to) {\n    validateString(from, 'from');\n    validateString(to, 'to');\n    if (from === to) {\n      return '';\n    }\n    // Trim leading forward slashes.\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) {\n      return '';\n    }\n    const fromStart = 1;\n    const fromEnd = from.length;\n    const fromLen = fromEnd - fromStart;\n    const toStart = 1;\n    const toLen = to.length - toStart;\n    // Compare paths to find the longest common path from root\n    const length = fromLen < toLen ? fromLen : toLen;\n    let lastCommonSep = -1;\n    let i = 0;\n    for (; i < length; i++) {\n      const fromCode = from.charCodeAt(fromStart + i);\n      if (fromCode !== to.charCodeAt(toStart + i)) {\n        break;\n      } else if (fromCode === CHAR_FORWARD_SLASH) {\n        lastCommonSep = i;\n      }\n    }\n    if (i === length) {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\n          return to.slice(toStart + i + 1);\n        }\n        if (i === 0) {\n          // We get here if `from` is the root\n          // For example: from='/'; to='/foo'\n          return to.slice(toStart + i);\n        }\n      } else if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\n          lastCommonSep = i;\n        } else if (i === 0) {\n          // We get here if `to` is the root.\n          // For example: from='/foo/bar'; to='/'\n          lastCommonSep = 0;\n        }\n      }\n    }\n    let out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`.\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        out += out.length === 0 ? '..' : '/..';\n      }\n    }\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts.\n    return \"\".concat(out).concat(to.slice(toStart + lastCommonSep));\n  },\n  toNamespacedPath(path) {\n    // Non-op on posix systems\n    return path;\n  },\n  dirname(path) {\n    validateString(path, 'path');\n    if (path.length === 0) {\n      return '.';\n    }\n    const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    let end = -1;\n    let matchedSlash = true;\n    for (let i = path.length - 1; i >= 1; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n    if (end === -1) {\n      return hasRoot ? '/' : '.';\n    }\n    if (hasRoot && end === 1) {\n      return '//';\n    }\n    return path.slice(0, end);\n  },\n  basename(path, suffix) {\n    if (suffix !== undefined) {\n      validateString(suffix, 'ext');\n    }\n    validateString(path, 'path');\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n    if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n      if (suffix === path) {\n        return '';\n      }\n      let extIdx = suffix.length - 1;\n      let firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        const code = path.charCodeAt(i);\n        if (code === CHAR_FORWARD_SLASH) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === suffix.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end) {\n        end = firstNonSlashEnd;\n      } else if (end === -1) {\n        end = path.length;\n      }\n      return path.slice(start, end);\n    }\n    for (i = path.length - 1; i >= 0; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1) {\n      return '';\n    }\n    return path.slice(start, end);\n  },\n  extname(path) {\n    validateString(path, 'path');\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    for (let i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n  format: _format.bind(null, '/'),\n  parse(path) {\n    validateString(path, 'path');\n    const ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) {\n      return ret;\n    }\n    const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    let start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path.length - 1;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    let preDotState = 0;\n    // Get non-dir info\n    for (; i >= start; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === CHAR_DOT) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) {\n          startDot = i;\n        } else if (preDotState !== 1) {\n          preDotState = 1;\n        }\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n    if (end !== -1) {\n      const start = startPart === 0 && isAbsolute ? 1 : startPart;\n      if (startDot === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n        ret.base = ret.name = path.slice(start, end);\n      } else {\n        ret.name = path.slice(start, startDot);\n        ret.base = path.slice(start, end);\n        ret.ext = path.slice(startDot, end);\n      }\n    }\n    if (startPart > 0) {\n      ret.dir = path.slice(0, startPart - 1);\n    } else if (isAbsolute) {\n      ret.dir = '/';\n    }\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\nexport const normalize = platformIsWin32 ? win32.normalize : posix.normalize;\nexport const join = platformIsWin32 ? win32.join : posix.join;\nexport const resolve = platformIsWin32 ? win32.resolve : posix.resolve;\nexport const relative = platformIsWin32 ? win32.relative : posix.relative;\nexport const dirname = platformIsWin32 ? win32.dirname : posix.dirname;\nexport const basename = platformIsWin32 ? win32.basename : posix.basename;\nexport const extname = platformIsWin32 ? win32.extname : posix.extname;\nexport const sep = platformIsWin32 ? win32.sep : posix.sep;","map":{"version":3,"names":["process","CHAR_UPPERCASE_A","CHAR_LOWERCASE_A","CHAR_UPPERCASE_Z","CHAR_LOWERCASE_Z","CHAR_DOT","CHAR_FORWARD_SLASH","CHAR_BACKWARD_SLASH","CHAR_COLON","CHAR_QUESTION_MARK","ErrorInvalidArgType","Error","constructor","name","expected","actual","determiner","indexOf","replace","type","msg","concat","code","validateObject","pathObject","validateString","value","platformIsWin32","platform","isPathSeparator","isPosixPathSeparator","isWindowsDeviceRoot","normalizeString","path","allowAboveRoot","separator","res","lastSegmentLength","lastSlash","dots","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","formatExt","ext","_format","sep","dir","root","base","win32","resolve","resolvedDevice","resolvedTail","resolvedAbsolute","arguments","undefined","cwd","env","toLowerCase","len","rootEnd","device","isAbsolute","j","last","firstPart","normalize","tail","join","joined","arg","needsReplace","slashCount","firstLen","relative","from","to","fromOrig","toOrig","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","lastCommonSep","fromCode","out","toNamespacedPath","resolvedPath","dirname","offset","end","matchedSlash","basename","suffix","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","bind","parse","ret","delimiter","posix","posixCwd","regexp","trailingSeparator","hasRoot"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/base/common/path.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// NOTE: VSCode's copy of nodejs path library to be usable in common (non-node) namespace\n// Copied from: https://github.com/nodejs/node/commits/v20.9.0/lib/path.js\n// Excluding: the change that adds primordials\n// (https://github.com/nodejs/node/commit/187a862d221dec42fa9a5c4214e7034d9092792f and others)\n/**\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\nimport * as process from './process.js';\nconst CHAR_UPPERCASE_A = 65; /* A */\nconst CHAR_LOWERCASE_A = 97; /* a */\nconst CHAR_UPPERCASE_Z = 90; /* Z */\nconst CHAR_LOWERCASE_Z = 122; /* z */\nconst CHAR_DOT = 46; /* . */\nconst CHAR_FORWARD_SLASH = 47; /* / */\nconst CHAR_BACKWARD_SLASH = 92; /* \\ */\nconst CHAR_COLON = 58; /* : */\nconst CHAR_QUESTION_MARK = 63; /* ? */\nclass ErrorInvalidArgType extends Error {\n    constructor(name, expected, actual) {\n        // determiner: 'must be' or 'must not be'\n        let determiner;\n        if (typeof expected === 'string' && expected.indexOf('not ') === 0) {\n            determiner = 'must not be';\n            expected = expected.replace(/^not /, '');\n        }\n        else {\n            determiner = 'must be';\n        }\n        const type = name.indexOf('.') !== -1 ? 'property' : 'argument';\n        let msg = `The \"${name}\" ${type} ${determiner} of type ${expected}`;\n        msg += `. Received type ${typeof actual}`;\n        super(msg);\n        this.code = 'ERR_INVALID_ARG_TYPE';\n    }\n}\nfunction validateObject(pathObject, name) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n        throw new ErrorInvalidArgType(name, 'Object', pathObject);\n    }\n}\nfunction validateString(value, name) {\n    if (typeof value !== 'string') {\n        throw new ErrorInvalidArgType(name, 'string', value);\n    }\n}\nconst platformIsWin32 = (process.platform === 'win32');\nfunction isPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n}\nfunction isPosixPathSeparator(code) {\n    return code === CHAR_FORWARD_SLASH;\n}\nfunction isWindowsDeviceRoot(code) {\n    return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\n        (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z);\n}\n// Resolves . and .. elements in a path with directory names\nfunction normalizeString(path, allowAboveRoot, separator, isPathSeparator) {\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code = 0;\n    for (let i = 0; i <= path.length; ++i) {\n        if (i < path.length) {\n            code = path.charCodeAt(i);\n        }\n        else if (isPathSeparator(code)) {\n            break;\n        }\n        else {\n            code = CHAR_FORWARD_SLASH;\n        }\n        if (isPathSeparator(code)) {\n            if (lastSlash === i - 1 || dots === 1) {\n                // NOOP\n            }\n            else if (dots === 2) {\n                if (res.length < 2 || lastSegmentLength !== 2 ||\n                    res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n                    res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n                    if (res.length > 2) {\n                        const lastSlashIndex = res.lastIndexOf(separator);\n                        if (lastSlashIndex === -1) {\n                            res = '';\n                            lastSegmentLength = 0;\n                        }\n                        else {\n                            res = res.slice(0, lastSlashIndex);\n                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n                        }\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                    else if (res.length !== 0) {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot) {\n                    res += res.length > 0 ? `${separator}..` : '..';\n                    lastSegmentLength = 2;\n                }\n            }\n            else {\n                if (res.length > 0) {\n                    res += `${separator}${path.slice(lastSlash + 1, i)}`;\n                }\n                else {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === CHAR_DOT && dots !== -1) {\n            ++dots;\n        }\n        else {\n            dots = -1;\n        }\n    }\n    return res;\n}\nfunction formatExt(ext) {\n    return ext ? `${ext[0] === '.' ? '' : '.'}${ext}` : '';\n}\nfunction _format(sep, pathObject) {\n    validateObject(pathObject, 'pathObject');\n    const dir = pathObject.dir || pathObject.root;\n    const base = pathObject.base ||\n        `${pathObject.name || ''}${formatExt(pathObject.ext)}`;\n    if (!dir) {\n        return base;\n    }\n    return dir === pathObject.root ? `${dir}${base}` : `${dir}${sep}${base}`;\n}\nexport const win32 = {\n    // path.resolve([from ...], to)\n    resolve(...pathSegments) {\n        let resolvedDevice = '';\n        let resolvedTail = '';\n        let resolvedAbsolute = false;\n        for (let i = pathSegments.length - 1; i >= -1; i--) {\n            let path;\n            if (i >= 0) {\n                path = pathSegments[i];\n                validateString(path, `paths[${i}]`);\n                // Skip empty entries\n                if (path.length === 0) {\n                    continue;\n                }\n            }\n            else if (resolvedDevice.length === 0) {\n                path = process.cwd();\n            }\n            else {\n                // Windows has the concept of drive-specific current working\n                // directories. If we've resolved a drive letter but not yet an\n                // absolute path, get cwd for that drive, or the process cwd if\n                // the drive cwd is not available. We're sure the device is not\n                // a UNC path at this points, because UNC paths are always absolute.\n                path = process.env[`=${resolvedDevice}`] || process.cwd();\n                // Verify that a cwd was found and that it actually points\n                // to our drive. If not, default to the drive's root.\n                if (path === undefined ||\n                    (path.slice(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() &&\n                        path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {\n                    path = `${resolvedDevice}\\\\`;\n                }\n            }\n            const len = path.length;\n            let rootEnd = 0;\n            let device = '';\n            let isAbsolute = false;\n            const code = path.charCodeAt(0);\n            // Try to match a root\n            if (len === 1) {\n                if (isPathSeparator(code)) {\n                    // `path` contains just a path separator\n                    rootEnd = 1;\n                    isAbsolute = true;\n                }\n            }\n            else if (isPathSeparator(code)) {\n                // Possible UNC root\n                // If we started with a separator, we know we at least have an\n                // absolute path of some kind (UNC or otherwise)\n                isAbsolute = true;\n                if (isPathSeparator(path.charCodeAt(1))) {\n                    // Matched double path separator at beginning\n                    let j = 2;\n                    let last = j;\n                    // Match 1 or more non-path separators\n                    while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        const firstPart = path.slice(last, j);\n                        // Matched!\n                        last = j;\n                        // Match 1 or more path separators\n                        while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j < len && j !== last) {\n                            // Matched!\n                            last = j;\n                            // Match 1 or more non-path separators\n                            while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                                j++;\n                            }\n                            if (j === len || j !== last) {\n                                // We matched a UNC root\n                                device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                                rootEnd = j;\n                            }\n                        }\n                    }\n                }\n                else {\n                    rootEnd = 1;\n                }\n            }\n            else if (isWindowsDeviceRoot(code) &&\n                path.charCodeAt(1) === CHAR_COLON) {\n                // Possible device root\n                device = path.slice(0, 2);\n                rootEnd = 2;\n                if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n                    // Treat separator following drive name as an absolute path\n                    // indicator\n                    isAbsolute = true;\n                    rootEnd = 3;\n                }\n            }\n            if (device.length > 0) {\n                if (resolvedDevice.length > 0) {\n                    if (device.toLowerCase() !== resolvedDevice.toLowerCase()) {\n                        // This path points to another device so it is not applicable\n                        continue;\n                    }\n                }\n                else {\n                    resolvedDevice = device;\n                }\n            }\n            if (resolvedAbsolute) {\n                if (resolvedDevice.length > 0) {\n                    break;\n                }\n            }\n            else {\n                resolvedTail = `${path.slice(rootEnd)}\\\\${resolvedTail}`;\n                resolvedAbsolute = isAbsolute;\n                if (isAbsolute && resolvedDevice.length > 0) {\n                    break;\n                }\n            }\n        }\n        // At this point the path should be resolved to a full absolute path,\n        // but handle relative paths to be safe (might happen when process.cwd()\n        // fails)\n        // Normalize the tail path\n        resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isPathSeparator);\n        return resolvedAbsolute ?\n            `${resolvedDevice}\\\\${resolvedTail}` :\n            `${resolvedDevice}${resolvedTail}` || '.';\n    },\n    normalize(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return '.';\n        }\n        let rootEnd = 0;\n        let device;\n        let isAbsolute = false;\n        const code = path.charCodeAt(0);\n        // Try to match a root\n        if (len === 1) {\n            // `path` contains just a single char, exit early to avoid\n            // unnecessary work\n            return isPosixPathSeparator(code) ? '\\\\' : path;\n        }\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            // If we started with a separator, we know we at least have an absolute\n            // path of some kind (UNC or otherwise)\n            isAbsolute = true;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    const firstPart = path.slice(last, j);\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            // Return the normalized version of the UNC root since there\n                            // is nothing left to process\n                            return `\\\\\\\\${firstPart}\\\\${path.slice(last)}\\\\`;\n                        }\n                        if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            device = `\\\\\\\\${firstPart}\\\\${path.slice(last, j)}`;\n                            rootEnd = j;\n                        }\n                    }\n                }\n            }\n            else {\n                rootEnd = 1;\n            }\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            // Possible device root\n            device = path.slice(0, 2);\n            rootEnd = 2;\n            if (len > 2 && isPathSeparator(path.charCodeAt(2))) {\n                // Treat separator following drive name as an absolute path\n                // indicator\n                isAbsolute = true;\n                rootEnd = 3;\n            }\n        }\n        let tail = rootEnd < len ?\n            normalizeString(path.slice(rootEnd), !isAbsolute, '\\\\', isPathSeparator) :\n            '';\n        if (tail.length === 0 && !isAbsolute) {\n            tail = '.';\n        }\n        if (tail.length > 0 && isPathSeparator(path.charCodeAt(len - 1))) {\n            tail += '\\\\';\n        }\n        if (device === undefined) {\n            return isAbsolute ? `\\\\${tail}` : tail;\n        }\n        return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`;\n    },\n    isAbsolute(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return false;\n        }\n        const code = path.charCodeAt(0);\n        return isPathSeparator(code) ||\n            // Possible device root\n            (len > 2 &&\n                isWindowsDeviceRoot(code) &&\n                path.charCodeAt(1) === CHAR_COLON &&\n                isPathSeparator(path.charCodeAt(2)));\n    },\n    join(...paths) {\n        if (paths.length === 0) {\n            return '.';\n        }\n        let joined;\n        let firstPart;\n        for (let i = 0; i < paths.length; ++i) {\n            const arg = paths[i];\n            validateString(arg, 'path');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = firstPart = arg;\n                }\n                else {\n                    joined += `\\\\${arg}`;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return '.';\n        }\n        // Make sure that the joined path doesn't start with two slashes, because\n        // normalize() will mistake it for a UNC path then.\n        //\n        // This step is skipped when it is very clear that the user actually\n        // intended to point at a UNC path. This is assumed when the first\n        // non-empty string arguments starts with exactly two slashes followed by\n        // at least one more non-slash character.\n        //\n        // Note that for normalize() to treat a path as a UNC path it needs to\n        // have at least 2 components, so we don't filter for that here.\n        // This means that the user can use join to construct UNC paths from\n        // a server name and a share name; for example:\n        //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\\\')\n        let needsReplace = true;\n        let slashCount = 0;\n        if (typeof firstPart === 'string' && isPathSeparator(firstPart.charCodeAt(0))) {\n            ++slashCount;\n            const firstLen = firstPart.length;\n            if (firstLen > 1 && isPathSeparator(firstPart.charCodeAt(1))) {\n                ++slashCount;\n                if (firstLen > 2) {\n                    if (isPathSeparator(firstPart.charCodeAt(2))) {\n                        ++slashCount;\n                    }\n                    else {\n                        // We matched a UNC path in the first part\n                        needsReplace = false;\n                    }\n                }\n            }\n        }\n        if (needsReplace) {\n            // Find any more consecutive slashes we need to replace\n            while (slashCount < joined.length &&\n                isPathSeparator(joined.charCodeAt(slashCount))) {\n                slashCount++;\n            }\n            // Replace the slashes if needed\n            if (slashCount >= 2) {\n                joined = `\\\\${joined.slice(slashCount)}`;\n            }\n        }\n        return win32.normalize(joined);\n    },\n    // It will solve the relative path from `from` to `to`, for instance:\n    //  from = 'C:\\\\orandea\\\\test\\\\aaa'\n    //  to = 'C:\\\\orandea\\\\impl\\\\bbb'\n    // The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\n    relative(from, to) {\n        validateString(from, 'from');\n        validateString(to, 'to');\n        if (from === to) {\n            return '';\n        }\n        const fromOrig = win32.resolve(from);\n        const toOrig = win32.resolve(to);\n        if (fromOrig === toOrig) {\n            return '';\n        }\n        from = fromOrig.toLowerCase();\n        to = toOrig.toLowerCase();\n        if (from === to) {\n            return '';\n        }\n        // Trim any leading backslashes\n        let fromStart = 0;\n        while (fromStart < from.length &&\n            from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n            fromStart++;\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        let fromEnd = from.length;\n        while (fromEnd - 1 > fromStart &&\n            from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n            fromEnd--;\n        }\n        const fromLen = fromEnd - fromStart;\n        // Trim any leading backslashes\n        let toStart = 0;\n        while (toStart < to.length &&\n            to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n            toStart++;\n        }\n        // Trim trailing backslashes (applicable to UNC paths only)\n        let toEnd = to.length;\n        while (toEnd - 1 > toStart &&\n            to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n            toEnd--;\n        }\n        const toLen = toEnd - toStart;\n        // Compare paths to find the longest common path from root\n        const length = fromLen < toLen ? fromLen : toLen;\n        let lastCommonSep = -1;\n        let i = 0;\n        for (; i < length; i++) {\n            const fromCode = from.charCodeAt(fromStart + i);\n            if (fromCode !== to.charCodeAt(toStart + i)) {\n                break;\n            }\n            else if (fromCode === CHAR_BACKWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        // We found a mismatch before the first common path separator was seen, so\n        // return the original `to`.\n        if (i !== length) {\n            if (lastCommonSep === -1) {\n                return toOrig;\n            }\n        }\n        else {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo\\\\bar\\\\baz'\n                    return toOrig.slice(toStart + i + 1);\n                }\n                if (i === 2) {\n                    // We get here if `from` is the device root.\n                    // For example: from='C:\\\\'; to='C:\\\\foo'\n                    return toOrig.slice(toStart + i);\n                }\n            }\n            if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\foo'\n                    lastCommonSep = i;\n                }\n                else if (i === 2) {\n                    // We get here if `to` is the device root.\n                    // For example: from='C:\\\\foo\\\\bar'; to='C:\\\\'\n                    lastCommonSep = 3;\n                }\n            }\n            if (lastCommonSep === -1) {\n                lastCommonSep = 0;\n            }\n        }\n        let out = '';\n        // Generate the relative path based on the path difference between `to` and\n        // `from`\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n                out += out.length === 0 ? '..' : '\\\\..';\n            }\n        }\n        toStart += lastCommonSep;\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts\n        if (out.length > 0) {\n            return `${out}${toOrig.slice(toStart, toEnd)}`;\n        }\n        if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n            ++toStart;\n        }\n        return toOrig.slice(toStart, toEnd);\n    },\n    toNamespacedPath(path) {\n        // Note: this will *probably* throw somewhere.\n        if (typeof path !== 'string' || path.length === 0) {\n            return path;\n        }\n        const resolvedPath = win32.resolve(path);\n        if (resolvedPath.length <= 2) {\n            return path;\n        }\n        if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n            // Possible UNC root\n            if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n                const code = resolvedPath.charCodeAt(2);\n                if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n                    // Matched non-long UNC root, convert the path to a long UNC path\n                    return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.slice(2)}`;\n                }\n            }\n        }\n        else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\n            resolvedPath.charCodeAt(1) === CHAR_COLON &&\n            resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {\n            // Matched device root, convert the path to a long UNC path\n            return `\\\\\\\\?\\\\${resolvedPath}`;\n        }\n        return path;\n    },\n    dirname(path) {\n        validateString(path, 'path');\n        const len = path.length;\n        if (len === 0) {\n            return '.';\n        }\n        let rootEnd = -1;\n        let offset = 0;\n        const code = path.charCodeAt(0);\n        if (len === 1) {\n            // `path` contains just a path separator, exit early to avoid\n            // unnecessary work or a dot.\n            return isPathSeparator(code) ? path : '.';\n        }\n        // Try to match a root\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            rootEnd = offset = 1;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            return path;\n                        }\n                        if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            // Offset by 1 to include the separator after the UNC root to\n                            // treat it as a \"normal root\" on top of a (UNC) root\n                            rootEnd = offset = j + 1;\n                        }\n                    }\n                }\n            }\n            // Possible device root\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            rootEnd = len > 2 && isPathSeparator(path.charCodeAt(2)) ? 3 : 2;\n            offset = rootEnd;\n        }\n        let end = -1;\n        let matchedSlash = true;\n        for (let i = len - 1; i >= offset; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            if (rootEnd === -1) {\n                return '.';\n            }\n            end = rootEnd;\n        }\n        return path.slice(0, end);\n    },\n    basename(path, suffix) {\n        if (suffix !== undefined) {\n            validateString(suffix, 'suffix');\n        }\n        validateString(path, 'path');\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            isWindowsDeviceRoot(path.charCodeAt(0)) &&\n            path.charCodeAt(1) === CHAR_COLON) {\n            start = 2;\n        }\n        if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n            if (suffix === path) {\n                return '';\n            }\n            let extIdx = suffix.length - 1;\n            let firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= start; --i) {\n                const code = path.charCodeAt(i);\n                if (isPathSeparator(code)) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === suffix.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= start; --i) {\n            if (isPathSeparator(path.charCodeAt(i))) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n        if (end === -1) {\n            return '';\n        }\n        return path.slice(start, end);\n    },\n    extname(path) {\n        validateString(path, 'path');\n        let start = 0;\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Check for a drive letter prefix so as not to mistake the following\n        // path separator as an extra separator at the end of the path that can be\n        // disregarded\n        if (path.length >= 2 &&\n            path.charCodeAt(1) === CHAR_COLON &&\n            isWindowsDeviceRoot(path.charCodeAt(0))) {\n            start = startPart = 2;\n        }\n        for (let i = path.length - 1; i >= start; --i) {\n            const code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return '';\n        }\n        return path.slice(startDot, end);\n    },\n    format: _format.bind(null, '\\\\'),\n    parse(path) {\n        validateString(path, 'path');\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n        if (path.length === 0) {\n            return ret;\n        }\n        const len = path.length;\n        let rootEnd = 0;\n        let code = path.charCodeAt(0);\n        if (len === 1) {\n            if (isPathSeparator(code)) {\n                // `path` contains just a path separator, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n            }\n            ret.base = ret.name = path;\n            return ret;\n        }\n        // Try to match a root\n        if (isPathSeparator(code)) {\n            // Possible UNC root\n            rootEnd = 1;\n            if (isPathSeparator(path.charCodeAt(1))) {\n                // Matched double path separator at beginning\n                let j = 2;\n                let last = j;\n                // Match 1 or more non-path separators\n                while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                    j++;\n                }\n                if (j < len && j !== last) {\n                    // Matched!\n                    last = j;\n                    // Match 1 or more path separators\n                    while (j < len && isPathSeparator(path.charCodeAt(j))) {\n                        j++;\n                    }\n                    if (j < len && j !== last) {\n                        // Matched!\n                        last = j;\n                        // Match 1 or more non-path separators\n                        while (j < len && !isPathSeparator(path.charCodeAt(j))) {\n                            j++;\n                        }\n                        if (j === len) {\n                            // We matched a UNC root only\n                            rootEnd = j;\n                        }\n                        else if (j !== last) {\n                            // We matched a UNC root with leftovers\n                            rootEnd = j + 1;\n                        }\n                    }\n                }\n            }\n        }\n        else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n            // Possible device root\n            if (len <= 2) {\n                // `path` contains just a drive root, exit early to avoid\n                // unnecessary work\n                ret.root = ret.dir = path;\n                return ret;\n            }\n            rootEnd = 2;\n            if (isPathSeparator(path.charCodeAt(2))) {\n                if (len === 3) {\n                    // `path` contains just a drive root, exit early to avoid\n                    // unnecessary work\n                    ret.root = ret.dir = path;\n                    return ret;\n                }\n                rootEnd = 3;\n            }\n        }\n        if (rootEnd > 0) {\n            ret.root = path.slice(0, rootEnd);\n        }\n        let startDot = -1;\n        let startPart = rootEnd;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Get non-dir info\n        for (; i >= rootEnd; --i) {\n            code = path.charCodeAt(i);\n            if (isPathSeparator(code)) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (end !== -1) {\n            if (startDot === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly '..'\n                (preDotState === 1 &&\n                    startDot === end - 1 &&\n                    startDot === startPart + 1)) {\n                ret.base = ret.name = path.slice(startPart, end);\n            }\n            else {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n                ret.ext = path.slice(startDot, end);\n            }\n        }\n        // If the directory is the root, use the entire root as the `dir` including\n        // the trailing slash if any (`C:\\abc` -> `C:\\`). Otherwise, strip out the\n        // trailing slash (`C:\\abc\\def` -> `C:\\abc`).\n        if (startPart > 0 && startPart !== rootEnd) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else {\n            ret.dir = ret.root;\n        }\n        return ret;\n    },\n    sep: '\\\\',\n    delimiter: ';',\n    win32: null,\n    posix: null\n};\nconst posixCwd = (() => {\n    if (platformIsWin32) {\n        // Converts Windows' backslash path separators to POSIX forward slashes\n        // and truncates any drive indicator\n        const regexp = /\\\\/g;\n        return () => {\n            const cwd = process.cwd().replace(regexp, '/');\n            return cwd.slice(cwd.indexOf('/'));\n        };\n    }\n    // We're already on POSIX, no need for any transformations\n    return () => process.cwd();\n})();\nexport const posix = {\n    // path.resolve([from ...], to)\n    resolve(...pathSegments) {\n        let resolvedPath = '';\n        let resolvedAbsolute = false;\n        for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n            const path = i >= 0 ? pathSegments[i] : posixCwd();\n            validateString(path, `paths[${i}]`);\n            // Skip empty entries\n            if (path.length === 0) {\n                continue;\n            }\n            resolvedPath = `${path}/${resolvedPath}`;\n            resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        // Normalize the path\n        resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator);\n        if (resolvedAbsolute) {\n            return `/${resolvedPath}`;\n        }\n        return resolvedPath.length > 0 ? resolvedPath : '.';\n    },\n    normalize(path) {\n        validateString(path, 'path');\n        if (path.length === 0) {\n            return '.';\n        }\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n        // Normalize the path\n        path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator);\n        if (path.length === 0) {\n            if (isAbsolute) {\n                return '/';\n            }\n            return trailingSeparator ? './' : '.';\n        }\n        if (trailingSeparator) {\n            path += '/';\n        }\n        return isAbsolute ? `/${path}` : path;\n    },\n    isAbsolute(path) {\n        validateString(path, 'path');\n        return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n    },\n    join(...paths) {\n        if (paths.length === 0) {\n            return '.';\n        }\n        let joined;\n        for (let i = 0; i < paths.length; ++i) {\n            const arg = paths[i];\n            validateString(arg, 'path');\n            if (arg.length > 0) {\n                if (joined === undefined) {\n                    joined = arg;\n                }\n                else {\n                    joined += `/${arg}`;\n                }\n            }\n        }\n        if (joined === undefined) {\n            return '.';\n        }\n        return posix.normalize(joined);\n    },\n    relative(from, to) {\n        validateString(from, 'from');\n        validateString(to, 'to');\n        if (from === to) {\n            return '';\n        }\n        // Trim leading forward slashes.\n        from = posix.resolve(from);\n        to = posix.resolve(to);\n        if (from === to) {\n            return '';\n        }\n        const fromStart = 1;\n        const fromEnd = from.length;\n        const fromLen = fromEnd - fromStart;\n        const toStart = 1;\n        const toLen = to.length - toStart;\n        // Compare paths to find the longest common path from root\n        const length = (fromLen < toLen ? fromLen : toLen);\n        let lastCommonSep = -1;\n        let i = 0;\n        for (; i < length; i++) {\n            const fromCode = from.charCodeAt(fromStart + i);\n            if (fromCode !== to.charCodeAt(toStart + i)) {\n                break;\n            }\n            else if (fromCode === CHAR_FORWARD_SLASH) {\n                lastCommonSep = i;\n            }\n        }\n        if (i === length) {\n            if (toLen > length) {\n                if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n                    // We get here if `from` is the exact base path for `to`.\n                    // For example: from='/foo/bar'; to='/foo/bar/baz'\n                    return to.slice(toStart + i + 1);\n                }\n                if (i === 0) {\n                    // We get here if `from` is the root\n                    // For example: from='/'; to='/foo'\n                    return to.slice(toStart + i);\n                }\n            }\n            else if (fromLen > length) {\n                if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n                    // We get here if `to` is the exact base path for `from`.\n                    // For example: from='/foo/bar/baz'; to='/foo/bar'\n                    lastCommonSep = i;\n                }\n                else if (i === 0) {\n                    // We get here if `to` is the root.\n                    // For example: from='/foo/bar'; to='/'\n                    lastCommonSep = 0;\n                }\n            }\n        }\n        let out = '';\n        // Generate the relative path based on the path difference between `to`\n        // and `from`.\n        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n            if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                out += out.length === 0 ? '..' : '/..';\n            }\n        }\n        // Lastly, append the rest of the destination (`to`) path that comes after\n        // the common path parts.\n        return `${out}${to.slice(toStart + lastCommonSep)}`;\n    },\n    toNamespacedPath(path) {\n        // Non-op on posix systems\n        return path;\n    },\n    dirname(path) {\n        validateString(path, 'path');\n        if (path.length === 0) {\n            return '.';\n        }\n        const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        let end = -1;\n        let matchedSlash = true;\n        for (let i = path.length - 1; i >= 1; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                if (!matchedSlash) {\n                    end = i;\n                    break;\n                }\n            }\n            else {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n        if (end === -1) {\n            return hasRoot ? '/' : '.';\n        }\n        if (hasRoot && end === 1) {\n            return '//';\n        }\n        return path.slice(0, end);\n    },\n    basename(path, suffix) {\n        if (suffix !== undefined) {\n            validateString(suffix, 'ext');\n        }\n        validateString(path, 'path');\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i;\n        if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n            if (suffix === path) {\n                return '';\n            }\n            let extIdx = suffix.length - 1;\n            let firstNonSlashEnd = -1;\n            for (i = path.length - 1; i >= 0; --i) {\n                const code = path.charCodeAt(i);\n                if (code === CHAR_FORWARD_SLASH) {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash) {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else {\n                    if (firstNonSlashEnd === -1) {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0) {\n                        // Try to match the explicit extension\n                        if (code === suffix.charCodeAt(extIdx)) {\n                            if (--extIdx === -1) {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n            if (start === end) {\n                end = firstNonSlashEnd;\n            }\n            else if (end === -1) {\n                end = path.length;\n            }\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i) {\n            if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n        if (end === -1) {\n            return '';\n        }\n        return path.slice(start, end);\n    },\n    extname(path) {\n        validateString(path, 'path');\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        for (let i = path.length - 1; i >= 0; --i) {\n            const code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (startDot === -1 ||\n            end === -1 ||\n            // We saw a non-dot character immediately before the dot\n            preDotState === 0 ||\n            // The (right-most) trimmed path component is exactly '..'\n            (preDotState === 1 &&\n                startDot === end - 1 &&\n                startDot === startPart + 1)) {\n            return '';\n        }\n        return path.slice(startDot, end);\n    },\n    format: _format.bind(null, '/'),\n    parse(path) {\n        validateString(path, 'path');\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n        if (path.length === 0) {\n            return ret;\n        }\n        const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n        let start;\n        if (isAbsolute) {\n            ret.root = '/';\n            start = 1;\n        }\n        else {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n        // Get non-dir info\n        for (; i >= start; --i) {\n            const code = path.charCodeAt(i);\n            if (code === CHAR_FORWARD_SLASH) {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1) {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === CHAR_DOT) {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) {\n                    startDot = i;\n                }\n                else if (preDotState !== 1) {\n                    preDotState = 1;\n                }\n            }\n            else if (startDot !== -1) {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n        if (end !== -1) {\n            const start = startPart === 0 && isAbsolute ? 1 : startPart;\n            if (startDot === -1 ||\n                // We saw a non-dot character immediately before the dot\n                preDotState === 0 ||\n                // The (right-most) trimmed path component is exactly '..'\n                (preDotState === 1 &&\n                    startDot === end - 1 &&\n                    startDot === startPart + 1)) {\n                ret.base = ret.name = path.slice(start, end);\n            }\n            else {\n                ret.name = path.slice(start, startDot);\n                ret.base = path.slice(start, end);\n                ret.ext = path.slice(startDot, end);\n            }\n        }\n        if (startPart > 0) {\n            ret.dir = path.slice(0, startPart - 1);\n        }\n        else if (isAbsolute) {\n            ret.dir = '/';\n        }\n        return ret;\n    },\n    sep: '/',\n    delimiter: ':',\n    win32: null,\n    posix: null\n};\nposix.win32 = win32.win32 = win32;\nposix.posix = win32.posix = posix;\nexport const normalize = (platformIsWin32 ? win32.normalize : posix.normalize);\nexport const join = (platformIsWin32 ? win32.join : posix.join);\nexport const resolve = (platformIsWin32 ? win32.resolve : posix.resolve);\nexport const relative = (platformIsWin32 ? win32.relative : posix.relative);\nexport const dirname = (platformIsWin32 ? win32.dirname : posix.dirname);\nexport const basename = (platformIsWin32 ? win32.basename : posix.basename);\nexport const extname = (platformIsWin32 ? win32.extname : posix.extname);\nexport const sep = (platformIsWin32 ? win32.sep : posix.sep);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
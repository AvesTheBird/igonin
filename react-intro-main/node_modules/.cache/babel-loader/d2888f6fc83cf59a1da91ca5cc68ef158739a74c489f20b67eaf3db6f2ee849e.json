{"ast":null,"code":"var _jsxFileName = \"D:\\\\OSPanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\SignalGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport VCDParser from 'vcd-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignalGraph = () => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    loadVCDData();\n  }, []);\n\n  // Функция для загрузки VCD\n  const loadVCDData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/get-cvd');\n      if (!response.ok) {\n        throw new Error('Ошибка загрузки файла');\n      }\n      const data = await response.text();\n      console.log('VCD данные:', data);\n\n      // Парсим VCD\n      const parsedData = await VCDParser.parse(data);\n      const formattedData = formatChartData(parsedData);\n      setChartData(formattedData);\n\n      // Формируем текст и автоматически сохраняем файл\n      const textData = formatTextOutput(parsedData);\n      saveToFile(textData);\n    } catch (error) {\n      console.error('Ошибка загрузки данных:', error);\n    }\n  };\n\n  // Преобразуем JSON-структуру в данные для графика\n  const formatChartData = parsedData => {\n    if (!parsedData.signal || parsedData.signal.length === 0) {\n      return null;\n    }\n    const timestamps = [];\n    const datasets = parsedData.signal.map((signal, index) => {\n      const dataPoints = signal.wave.map(([time, value]) => {\n        if (!timestamps.includes(time)) timestamps.push(time); // Добавляем уникальные метки времени\n        return value === 'x' || value === 'z' ? 0 : Number(value); // Преобразуем значение\n      });\n      return {\n        label: signal.name,\n        data: dataPoints,\n        borderColor: index % 2 === 0 ? 'rgb(75, 192, 192)' : 'rgb(255, 99, 132)',\n        tension: 0.1\n      };\n    });\n    return {\n      labels: timestamps,\n      datasets: datasets\n    };\n  };\n\n  // Функция для форматирования данных в текстовый вид\n  const formatTextOutput = parsedData => {\n    let output = 'Time\\tSignal Name\\tValue\\n';\n    parsedData.signal.forEach(signal => {\n      signal.wave.forEach(([time, value]) => {\n        output += `${time}\\t${signal.name}\\t${value}\\n`;\n      });\n    });\n    return output;\n  };\n\n  // Функция для автоматического сохранения в файл\n  const saveToFile = textData => {\n    const blob = new Blob([textData], {\n      type: 'text/plain'\n    });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = 'parsed_vcd.txt';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  if (!chartData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0433\\u0440\\u0430\\u0444\\u0438\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"graphCanvas\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0421\\u0438\\u0433\\u043D\\u0430\\u043B-\\u0433\\u0440\\u0430\\u0444\\u0438\\u043A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: 'Сигнал-график VCD файла'\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(SignalGraph, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = SignalGraph;\nexport default SignalGraph;\nvar _c;\n$RefreshReg$(_c, \"SignalGraph\");","map":{"version":3,"names":["React","useState","useEffect","Line","VCDParser","jsxDEV","_jsxDEV","SignalGraph","_s","chartData","setChartData","loadVCDData","response","fetch","ok","Error","data","text","console","log","parsedData","parse","formattedData","formatChartData","textData","formatTextOutput","saveToFile","error","signal","length","timestamps","datasets","map","index","dataPoints","wave","time","value","includes","push","Number","label","name","borderColor","tension","labels","output","forEach","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","children","fileName","_jsxFileName","lineNumber","columnNumber","id","options","responsive","plugins","legend","position","title","display","_c","$RefreshReg$"],"sources":["D:/OSPanel/domains/react/react-intro-main/src/components/SignalGraph.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport VCDParser from 'vcd-parser';\r\n\r\nconst SignalGraph = () => {\r\n    const [chartData, setChartData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        loadVCDData();\r\n    }, []);\r\n\r\n    // Функция для загрузки VCD\r\n    const loadVCDData = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/get-cvd');\r\n            if (!response.ok) {\r\n                throw new Error('Ошибка загрузки файла');\r\n            }\r\n            const data = await response.text();\r\n            console.log('VCD данные:', data);\r\n\r\n            // Парсим VCD\r\n            const parsedData = await VCDParser.parse(data);\r\n            const formattedData = formatChartData(parsedData);\r\n            setChartData(formattedData);\r\n\r\n            // Формируем текст и автоматически сохраняем файл\r\n            const textData = formatTextOutput(parsedData);\r\n            saveToFile(textData);\r\n\r\n        } catch (error) {\r\n            console.error('Ошибка загрузки данных:', error);\r\n        }\r\n    };\r\n\r\n    // Преобразуем JSON-структуру в данные для графика\r\n    const formatChartData = (parsedData) => {\r\n        if (!parsedData.signal || parsedData.signal.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const timestamps = [];\r\n        const datasets = parsedData.signal.map((signal, index) => {\r\n            const dataPoints = signal.wave.map(([time, value]) => {\r\n                if (!timestamps.includes(time)) timestamps.push(time); // Добавляем уникальные метки времени\r\n                return value === 'x' || value === 'z' ? 0 : Number(value); // Преобразуем значение\r\n            });\r\n\r\n            return {\r\n                label: signal.name,\r\n                data: dataPoints,\r\n                borderColor: index % 2 === 0 ? 'rgb(75, 192, 192)' : 'rgb(255, 99, 132)',\r\n                tension: 0.1,\r\n            };\r\n        });\r\n\r\n        return {\r\n            labels: timestamps,\r\n            datasets: datasets,\r\n        };\r\n    };\r\n\r\n    // Функция для форматирования данных в текстовый вид\r\n    const formatTextOutput = (parsedData) => {\r\n        let output = 'Time\\tSignal Name\\tValue\\n';\r\n        parsedData.signal.forEach(signal => {\r\n            signal.wave.forEach(([time, value]) => {\r\n                output += `${time}\\t${signal.name}\\t${value}\\n`;\r\n            });\r\n        });\r\n        return output;\r\n    };\r\n\r\n    // Функция для автоматического сохранения в файл\r\n    const saveToFile = (textData) => {\r\n        const blob = new Blob([textData], { type: 'text/plain' });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = 'parsed_vcd.txt';\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    };\r\n\r\n    if (!chartData) {\r\n        return <div>Загрузка данных графика...</div>;\r\n    }\r\n\r\n    return (\r\n        <div id=\"graphCanvas\">\r\n            <h1>Сигнал-график</h1>\r\n            <Line\r\n                data={chartData}\r\n                options={{\r\n                    responsive: true,\r\n                    plugins: {\r\n                        legend: { position: 'top' },\r\n                        title: { display: true, text: 'Сигнал-график VCD файла' },\r\n                    },\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignalGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
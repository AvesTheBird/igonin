{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nlet globalObservableLogger;\nexport function setLogger(logger) {\n  globalObservableLogger = logger;\n}\nexport function getLogger() {\n  return globalObservableLogger;\n}\nexport class ConsoleObservableLogger {\n  constructor() {\n    this.indentation = 0;\n    this.changedObservablesSets = new WeakMap();\n  }\n  textToConsoleArgs(text) {\n    return consoleTextToArgs([normalText(repeat('|  ', this.indentation)), text]);\n  }\n  formatInfo(info) {\n    if (!info.hadValue) {\n      return [normalText(\" \"), styled(formatValue(info.newValue, 60), {\n        color: 'green'\n      }), normalText(\" (initial)\")];\n    }\n    return info.didChange ? [normalText(\" \"), styled(formatValue(info.oldValue, 70), {\n      color: 'red',\n      strikeThrough: true\n    }), normalText(\" \"), styled(formatValue(info.newValue, 60), {\n      color: 'green'\n    })] : [normalText(\" (unchanged)\")];\n  }\n  handleObservableChanged(observable, info) {\n    console.log(...this.textToConsoleArgs([formatKind('observable value changed'), styled(observable.debugName, {\n      color: 'BlueViolet'\n    }), ...this.formatInfo(info)]));\n  }\n  formatChanges(changes) {\n    if (changes.size === 0) {\n      return undefined;\n    }\n    return styled(' (changed deps: ' + [...changes].map(o => o.debugName).join(', ') + ')', {\n      color: 'gray'\n    });\n  }\n  handleDerivedCreated(derived) {\n    const existingHandleChange = derived.handleChange;\n    this.changedObservablesSets.set(derived, new Set());\n    derived.handleChange = (observable, change) => {\n      this.changedObservablesSets.get(derived).add(observable);\n      return existingHandleChange.apply(derived, [observable, change]);\n    };\n  }\n  handleDerivedRecomputed(derived, info) {\n    var _derived$_debugNameDa;\n    const changedObservables = this.changedObservablesSets.get(derived);\n    console.log(...this.textToConsoleArgs([formatKind('derived recomputed'), styled(derived.debugName, {\n      color: 'BlueViolet'\n    }), ...this.formatInfo(info), this.formatChanges(changedObservables), {\n      data: [{\n        fn: (_derived$_debugNameDa = derived._debugNameData.referenceFn) !== null && _derived$_debugNameDa !== void 0 ? _derived$_debugNameDa : derived._computeFn\n      }]\n    }]));\n    changedObservables.clear();\n  }\n  handleFromEventObservableTriggered(observable, info) {\n    console.log(...this.textToConsoleArgs([formatKind('observable from event triggered'), styled(observable.debugName, {\n      color: 'BlueViolet'\n    }), ...this.formatInfo(info), {\n      data: [{\n        fn: observable._getValue\n      }]\n    }]));\n  }\n  handleAutorunCreated(autorun) {\n    const existingHandleChange = autorun.handleChange;\n    this.changedObservablesSets.set(autorun, new Set());\n    autorun.handleChange = (observable, change) => {\n      this.changedObservablesSets.get(autorun).add(observable);\n      return existingHandleChange.apply(autorun, [observable, change]);\n    };\n  }\n  handleAutorunTriggered(autorun) {\n    var _autorun$_debugNameDa;\n    const changedObservables = this.changedObservablesSets.get(autorun);\n    console.log(...this.textToConsoleArgs([formatKind('autorun'), styled(autorun.debugName, {\n      color: 'BlueViolet'\n    }), this.formatChanges(changedObservables), {\n      data: [{\n        fn: (_autorun$_debugNameDa = autorun._debugNameData.referenceFn) !== null && _autorun$_debugNameDa !== void 0 ? _autorun$_debugNameDa : autorun._runFn\n      }]\n    }]));\n    changedObservables.clear();\n    this.indentation++;\n  }\n  handleAutorunFinished(autorun) {\n    this.indentation--;\n  }\n  handleBeginTransaction(transaction) {\n    let transactionName = transaction.getDebugName();\n    if (transactionName === undefined) {\n      transactionName = '';\n    }\n    console.log(...this.textToConsoleArgs([formatKind('transaction'), styled(transactionName, {\n      color: 'BlueViolet'\n    }), {\n      data: [{\n        fn: transaction._fn\n      }]\n    }]));\n    this.indentation++;\n  }\n  handleEndTransaction() {\n    this.indentation--;\n  }\n}\nfunction consoleTextToArgs(text) {\n  const styles = new Array();\n  const data = [];\n  let firstArg = '';\n  function process(t) {\n    if ('length' in t) {\n      for (const item of t) {\n        if (item) {\n          process(item);\n        }\n      }\n    } else if ('text' in t) {\n      firstArg += \"%c\".concat(t.text);\n      styles.push(t.style);\n      if (t.data) {\n        data.push(...t.data);\n      }\n    } else if ('data' in t) {\n      data.push(...t.data);\n    }\n  }\n  process(text);\n  const result = [firstArg, ...styles];\n  result.push(...data);\n  return result;\n}\nfunction normalText(text) {\n  return styled(text, {\n    color: 'black'\n  });\n}\nfunction formatKind(kind) {\n  return styled(padStr(\"\".concat(kind, \": \"), 10), {\n    color: 'black',\n    bold: true\n  });\n}\nfunction styled(text) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    color: 'black'\n  };\n  function objToCss(styleObj) {\n    return Object.entries(styleObj).reduce((styleString, _ref) => {\n      let [propName, propValue] = _ref;\n      return \"\".concat(styleString).concat(propName, \":\").concat(propValue, \";\");\n    }, '');\n  }\n  const style = {\n    color: options.color\n  };\n  if (options.strikeThrough) {\n    style['text-decoration'] = 'line-through';\n  }\n  if (options.bold) {\n    style['font-weight'] = 'bold';\n  }\n  return {\n    text,\n    style: objToCss(style)\n  };\n}\nfunction formatValue(value, availableLen) {\n  switch (typeof value) {\n    case 'number':\n      return '' + value;\n    case 'string':\n      if (value.length + 2 <= availableLen) {\n        return \"\\\"\".concat(value, \"\\\"\");\n      }\n      return \"\\\"\".concat(value.substr(0, availableLen - 7), \"\\\"+...\");\n    case 'boolean':\n      return value ? 'true' : 'false';\n    case 'undefined':\n      return 'undefined';\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n      if (Array.isArray(value)) {\n        return formatArray(value, availableLen);\n      }\n      return formatObject(value, availableLen);\n    case 'symbol':\n      return value.toString();\n    case 'function':\n      return \"[[Function\".concat(value.name ? ' ' + value.name : '', \"]]\");\n    default:\n      return '' + value;\n  }\n}\nfunction formatArray(value, availableLen) {\n  let result = '[ ';\n  let first = true;\n  for (const val of value) {\n    if (!first) {\n      result += ', ';\n    }\n    if (result.length - 5 > availableLen) {\n      result += '...';\n      break;\n    }\n    first = false;\n    result += \"\".concat(formatValue(val, availableLen - result.length));\n  }\n  result += ' ]';\n  return result;\n}\nfunction formatObject(value, availableLen) {\n  let result = '{ ';\n  let first = true;\n  for (const [key, val] of Object.entries(value)) {\n    if (!first) {\n      result += ', ';\n    }\n    if (result.length - 5 > availableLen) {\n      result += '...';\n      break;\n    }\n    first = false;\n    result += \"\".concat(key, \": \").concat(formatValue(val, availableLen - result.length));\n  }\n  result += ' }';\n  return result;\n}\nfunction repeat(str, count) {\n  let result = '';\n  for (let i = 1; i <= count; i++) {\n    result += str;\n  }\n  return result;\n}\nfunction padStr(str, length) {\n  while (str.length < length) {\n    str += ' ';\n  }\n  return str;\n}","map":{"version":3,"names":["globalObservableLogger","setLogger","logger","getLogger","ConsoleObservableLogger","constructor","indentation","changedObservablesSets","WeakMap","textToConsoleArgs","text","consoleTextToArgs","normalText","repeat","formatInfo","info","hadValue","styled","formatValue","newValue","color","didChange","oldValue","strikeThrough","handleObservableChanged","observable","console","log","formatKind","debugName","formatChanges","changes","size","undefined","map","o","join","handleDerivedCreated","derived","existingHandleChange","handleChange","set","Set","change","get","add","apply","handleDerivedRecomputed","_derived$_debugNameDa","changedObservables","data","fn","_debugNameData","referenceFn","_computeFn","clear","handleFromEventObservableTriggered","_getValue","handleAutorunCreated","autorun","handleAutorunTriggered","_autorun$_debugNameDa","_runFn","handleAutorunFinished","handleBeginTransaction","transaction","transactionName","getDebugName","_fn","handleEndTransaction","styles","Array","firstArg","process","t","item","concat","push","style","result","kind","padStr","bold","options","arguments","length","objToCss","styleObj","Object","entries","reduce","styleString","_ref","propName","propValue","value","availableLen","substr","isArray","formatArray","formatObject","toString","name","first","val","key","str","count","i"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/base/common/observableInternal/logging.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nlet globalObservableLogger;\nexport function setLogger(logger) {\n    globalObservableLogger = logger;\n}\nexport function getLogger() {\n    return globalObservableLogger;\n}\nexport class ConsoleObservableLogger {\n    constructor() {\n        this.indentation = 0;\n        this.changedObservablesSets = new WeakMap();\n    }\n    textToConsoleArgs(text) {\n        return consoleTextToArgs([\n            normalText(repeat('|  ', this.indentation)),\n            text,\n        ]);\n    }\n    formatInfo(info) {\n        if (!info.hadValue) {\n            return [\n                normalText(` `),\n                styled(formatValue(info.newValue, 60), {\n                    color: 'green',\n                }),\n                normalText(` (initial)`),\n            ];\n        }\n        return info.didChange\n            ? [\n                normalText(` `),\n                styled(formatValue(info.oldValue, 70), {\n                    color: 'red',\n                    strikeThrough: true,\n                }),\n                normalText(` `),\n                styled(formatValue(info.newValue, 60), {\n                    color: 'green',\n                }),\n            ]\n            : [normalText(` (unchanged)`)];\n    }\n    handleObservableChanged(observable, info) {\n        console.log(...this.textToConsoleArgs([\n            formatKind('observable value changed'),\n            styled(observable.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n        ]));\n    }\n    formatChanges(changes) {\n        if (changes.size === 0) {\n            return undefined;\n        }\n        return styled(' (changed deps: ' +\n            [...changes].map((o) => o.debugName).join(', ') +\n            ')', { color: 'gray' });\n    }\n    handleDerivedCreated(derived) {\n        const existingHandleChange = derived.handleChange;\n        this.changedObservablesSets.set(derived, new Set());\n        derived.handleChange = (observable, change) => {\n            this.changedObservablesSets.get(derived).add(observable);\n            return existingHandleChange.apply(derived, [observable, change]);\n        };\n    }\n    handleDerivedRecomputed(derived, info) {\n        const changedObservables = this.changedObservablesSets.get(derived);\n        console.log(...this.textToConsoleArgs([\n            formatKind('derived recomputed'),\n            styled(derived.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n            this.formatChanges(changedObservables),\n            { data: [{ fn: derived._debugNameData.referenceFn ?? derived._computeFn }] }\n        ]));\n        changedObservables.clear();\n    }\n    handleFromEventObservableTriggered(observable, info) {\n        console.log(...this.textToConsoleArgs([\n            formatKind('observable from event triggered'),\n            styled(observable.debugName, { color: 'BlueViolet' }),\n            ...this.formatInfo(info),\n            { data: [{ fn: observable._getValue }] }\n        ]));\n    }\n    handleAutorunCreated(autorun) {\n        const existingHandleChange = autorun.handleChange;\n        this.changedObservablesSets.set(autorun, new Set());\n        autorun.handleChange = (observable, change) => {\n            this.changedObservablesSets.get(autorun).add(observable);\n            return existingHandleChange.apply(autorun, [observable, change]);\n        };\n    }\n    handleAutorunTriggered(autorun) {\n        const changedObservables = this.changedObservablesSets.get(autorun);\n        console.log(...this.textToConsoleArgs([\n            formatKind('autorun'),\n            styled(autorun.debugName, { color: 'BlueViolet' }),\n            this.formatChanges(changedObservables),\n            { data: [{ fn: autorun._debugNameData.referenceFn ?? autorun._runFn }] }\n        ]));\n        changedObservables.clear();\n        this.indentation++;\n    }\n    handleAutorunFinished(autorun) {\n        this.indentation--;\n    }\n    handleBeginTransaction(transaction) {\n        let transactionName = transaction.getDebugName();\n        if (transactionName === undefined) {\n            transactionName = '';\n        }\n        console.log(...this.textToConsoleArgs([\n            formatKind('transaction'),\n            styled(transactionName, { color: 'BlueViolet' }),\n            { data: [{ fn: transaction._fn }] }\n        ]));\n        this.indentation++;\n    }\n    handleEndTransaction() {\n        this.indentation--;\n    }\n}\nfunction consoleTextToArgs(text) {\n    const styles = new Array();\n    const data = [];\n    let firstArg = '';\n    function process(t) {\n        if ('length' in t) {\n            for (const item of t) {\n                if (item) {\n                    process(item);\n                }\n            }\n        }\n        else if ('text' in t) {\n            firstArg += `%c${t.text}`;\n            styles.push(t.style);\n            if (t.data) {\n                data.push(...t.data);\n            }\n        }\n        else if ('data' in t) {\n            data.push(...t.data);\n        }\n    }\n    process(text);\n    const result = [firstArg, ...styles];\n    result.push(...data);\n    return result;\n}\nfunction normalText(text) {\n    return styled(text, { color: 'black' });\n}\nfunction formatKind(kind) {\n    return styled(padStr(`${kind}: `, 10), { color: 'black', bold: true });\n}\nfunction styled(text, options = {\n    color: 'black',\n}) {\n    function objToCss(styleObj) {\n        return Object.entries(styleObj).reduce((styleString, [propName, propValue]) => {\n            return `${styleString}${propName}:${propValue};`;\n        }, '');\n    }\n    const style = {\n        color: options.color,\n    };\n    if (options.strikeThrough) {\n        style['text-decoration'] = 'line-through';\n    }\n    if (options.bold) {\n        style['font-weight'] = 'bold';\n    }\n    return {\n        text,\n        style: objToCss(style),\n    };\n}\nfunction formatValue(value, availableLen) {\n    switch (typeof value) {\n        case 'number':\n            return '' + value;\n        case 'string':\n            if (value.length + 2 <= availableLen) {\n                return `\"${value}\"`;\n            }\n            return `\"${value.substr(0, availableLen - 7)}\"+...`;\n        case 'boolean':\n            return value ? 'true' : 'false';\n        case 'undefined':\n            return 'undefined';\n        case 'object':\n            if (value === null) {\n                return 'null';\n            }\n            if (Array.isArray(value)) {\n                return formatArray(value, availableLen);\n            }\n            return formatObject(value, availableLen);\n        case 'symbol':\n            return value.toString();\n        case 'function':\n            return `[[Function${value.name ? ' ' + value.name : ''}]]`;\n        default:\n            return '' + value;\n    }\n}\nfunction formatArray(value, availableLen) {\n    let result = '[ ';\n    let first = true;\n    for (const val of value) {\n        if (!first) {\n            result += ', ';\n        }\n        if (result.length - 5 > availableLen) {\n            result += '...';\n            break;\n        }\n        first = false;\n        result += `${formatValue(val, availableLen - result.length)}`;\n    }\n    result += ' ]';\n    return result;\n}\nfunction formatObject(value, availableLen) {\n    let result = '{ ';\n    let first = true;\n    for (const [key, val] of Object.entries(value)) {\n        if (!first) {\n            result += ', ';\n        }\n        if (result.length - 5 > availableLen) {\n            result += '...';\n            break;\n        }\n        first = false;\n        result += `${key}: ${formatValue(val, availableLen - result.length)}`;\n    }\n    result += ' }';\n    return result;\n}\nfunction repeat(str, count) {\n    let result = '';\n    for (let i = 1; i <= count; i++) {\n        result += str;\n    }\n    return result;\n}\nfunction padStr(str, length) {\n    while (str.length < length) {\n        str += ' ';\n    }\n    return str;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../../common/commands/replaceCommand.js';\nimport { EditorOptions } from '../../../common/config/editorOptions.js';\nimport { CursorState } from '../../../common/cursorCommon.js';\nimport { WordOperations } from '../../../common/cursor/cursorWordOperations.js';\nimport { getMapForWordSeparators } from '../../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport * as nls from '../../../../nls.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../../platform/accessibility/common/accessibility.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IsWindowsContext } from '../../../../platform/contextkey/common/contextkeys.js';\nexport class MoveWordCommand extends EditorCommand {\n  constructor(opts) {\n    super(opts);\n    this._inSelectionMode = opts.inSelectionMode;\n    this._wordNavigationType = opts.wordNavigationType;\n  }\n  runEditorCommand(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const wordSeparators = getMapForWordSeparators(editor.getOption(132 /* EditorOption.wordSeparators */), editor.getOption(131 /* EditorOption.wordSegmenterLocales */));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const hasMulticursor = selections.length > 1;\n    const result = selections.map(sel => {\n      const inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\n      const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType, hasMulticursor);\n      return this._moveTo(sel, outPosition, this._inSelectionMode);\n    });\n    model.pushStackElement();\n    editor._getViewModel().setCursorStates('moveWordCommand', 3 /* CursorChangeReason.Explicit */, result.map(r => CursorState.fromModelSelection(r)));\n    if (result.length === 1) {\n      const pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\n      editor.revealPosition(pos, 0 /* ScrollType.Smooth */);\n    }\n  }\n  _moveTo(from, to, inSelectionMode) {\n    if (inSelectionMode) {\n      // move just position\n      return new Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\n    } else {\n      // move everything\n      return new Selection(to.lineNumber, to.column, to.lineNumber, to.column);\n    }\n  }\n}\nexport class WordLeftCommand extends MoveWordCommand {\n  _move(wordSeparators, model, position, wordNavigationType, hasMulticursor) {\n    return WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType, hasMulticursor);\n  }\n}\nexport class WordRightCommand extends MoveWordCommand {\n  _move(wordSeparators, model, position, wordNavigationType, hasMulticursor) {\n    return WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n  }\n}\nexport class CursorWordStartLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 0 /* WordNavigationType.WordStart */,\n      id: 'cursorWordStartLeft',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordEndLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'cursorWordEndLeft',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordLeft extends WordLeftCommand {\n  constructor() {\n    var _ContextKeyExpr$and;\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 1 /* WordNavigationType.WordStartFast */,\n      id: 'cursorWordLeft',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_ContextKeyExpr$and = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _ContextKeyExpr$and === void 0 ? void 0 : _ContextKeyExpr$and.negate()),\n        primary: 2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */,\n        mac: {\n          primary: 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 0 /* WordNavigationType.WordStart */,\n      id: 'cursorWordStartLeftSelect',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'cursorWordEndLeftSelect',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordLeftSelect extends WordLeftCommand {\n  constructor() {\n    var _ContextKeyExpr$and2;\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 1 /* WordNavigationType.WordStartFast */,\n      id: 'cursorWordLeftSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_ContextKeyExpr$and2 = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _ContextKeyExpr$and2 === void 0 ? void 0 : _ContextKeyExpr$and2.negate()),\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */,\n        mac: {\n          primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\n// Accessibility navigation commands should only be enabled on windows since they are tuned to what NVDA expects\nexport class CursorWordAccessibilityLeft extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 3 /* WordNavigationType.WordAccessibility */,\n      id: 'cursorWordAccessibilityLeft',\n      precondition: undefined\n    });\n  }\n  _move(wordCharacterClassifier, model, position, wordNavigationType, hasMulticursor) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n  }\n}\nexport class CursorWordAccessibilityLeftSelect extends WordLeftCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 3 /* WordNavigationType.WordAccessibility */,\n      id: 'cursorWordAccessibilityLeftSelect',\n      precondition: undefined\n    });\n  }\n  _move(wordCharacterClassifier, model, position, wordNavigationType, hasMulticursor) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n  }\n}\nexport class CursorWordStartRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 0 /* WordNavigationType.WordStart */,\n      id: 'cursorWordStartRight',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordEndRight extends WordRightCommand {\n  constructor() {\n    var _ContextKeyExpr$and3;\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'cursorWordEndRight',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_ContextKeyExpr$and3 = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _ContextKeyExpr$and3 === void 0 ? void 0 : _ContextKeyExpr$and3.negate()),\n        primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,\n        mac: {\n          primary: 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nexport class CursorWordRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'cursorWordRight',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordStartRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 0 /* WordNavigationType.WordStart */,\n      id: 'cursorWordStartRightSelect',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordEndRightSelect extends WordRightCommand {\n  constructor() {\n    var _ContextKeyExpr$and4;\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'cursorWordEndRightSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, (_ContextKeyExpr$and4 = ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)) === null || _ContextKeyExpr$and4 === void 0 ? void 0 : _ContextKeyExpr$and4.negate()),\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */,\n        mac: {\n          primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nexport class CursorWordRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'cursorWordRightSelect',\n      precondition: undefined\n    });\n  }\n}\nexport class CursorWordAccessibilityRight extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: false,\n      wordNavigationType: 3 /* WordNavigationType.WordAccessibility */,\n      id: 'cursorWordAccessibilityRight',\n      precondition: undefined\n    });\n  }\n  _move(wordCharacterClassifier, model, position, wordNavigationType, hasMulticursor) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n  }\n}\nexport class CursorWordAccessibilityRightSelect extends WordRightCommand {\n  constructor() {\n    super({\n      inSelectionMode: true,\n      wordNavigationType: 3 /* WordNavigationType.WordAccessibility */,\n      id: 'cursorWordAccessibilityRightSelect',\n      precondition: undefined\n    });\n  }\n  _move(wordCharacterClassifier, model, position, wordNavigationType, hasMulticursor) {\n    return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n  }\n}\nexport class DeleteWordCommand extends EditorCommand {\n  constructor(opts) {\n    super(opts);\n    this._whitespaceHeuristics = opts.whitespaceHeuristics;\n    this._wordNavigationType = opts.wordNavigationType;\n  }\n  runEditorCommand(accessor, editor, args) {\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    if (!editor.hasModel()) {\n      return;\n    }\n    const wordSeparators = getMapForWordSeparators(editor.getOption(132 /* EditorOption.wordSeparators */), editor.getOption(131 /* EditorOption.wordSegmenterLocales */));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const autoClosingBrackets = editor.getOption(6 /* EditorOption.autoClosingBrackets */);\n    const autoClosingQuotes = editor.getOption(11 /* EditorOption.autoClosingQuotes */);\n    const autoClosingPairs = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getAutoClosingPairs();\n    const viewModel = editor._getViewModel();\n    const commands = selections.map(sel => {\n      const deleteRange = this._delete({\n        wordSeparators,\n        model,\n        selection: sel,\n        whitespaceHeuristics: this._whitespaceHeuristics,\n        autoClosingDelete: editor.getOption(9 /* EditorOption.autoClosingDelete */),\n        autoClosingBrackets,\n        autoClosingQuotes,\n        autoClosingPairs,\n        autoClosedCharacters: viewModel.getCursorAutoClosedCharacters()\n      }, this._wordNavigationType);\n      return new ReplaceCommand(deleteRange, '');\n    });\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\n  _delete(ctx, wordNavigationType) {\n    const r = WordOperations.deleteWordLeft(ctx, wordNavigationType);\n    if (r) {\n      return r;\n    }\n    return new Range(1, 1, 1, 1);\n  }\n}\nexport class DeleteWordRightCommand extends DeleteWordCommand {\n  _delete(ctx, wordNavigationType) {\n    const r = WordOperations.deleteWordRight(ctx, wordNavigationType);\n    if (r) {\n      return r;\n    }\n    const lineCount = ctx.model.getLineCount();\n    const maxColumn = ctx.model.getLineMaxColumn(lineCount);\n    return new Range(lineCount, maxColumn, lineCount, maxColumn);\n  }\n}\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 0 /* WordNavigationType.WordStart */,\n      id: 'deleteWordStartLeft',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'deleteWordEndLeft',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: true,\n      wordNavigationType: 0 /* WordNavigationType.WordStart */,\n      id: 'deleteWordLeft',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1 /* KeyCode.Backspace */,\n        mac: {\n          primary: 512 /* KeyMod.Alt */ | 1 /* KeyCode.Backspace */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 0 /* WordNavigationType.WordStart */,\n      id: 'deleteWordStartRight',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: false,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'deleteWordEndRight',\n      precondition: EditorContextKeys.writable\n    });\n  }\n}\nexport class DeleteWordRight extends DeleteWordRightCommand {\n  constructor() {\n    super({\n      whitespaceHeuristics: true,\n      wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n      id: 'deleteWordRight',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 20 /* KeyCode.Delete */,\n        mac: {\n          primary: 512 /* KeyMod.Alt */ | 20 /* KeyCode.Delete */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    });\n  }\n}\nexport class DeleteInsideWord extends EditorAction {\n  constructor() {\n    super({\n      id: 'deleteInsideWord',\n      precondition: EditorContextKeys.writable,\n      label: nls.localize('deleteInsideWord', \"Delete Word\"),\n      alias: 'Delete Word'\n    });\n  }\n  run(accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const wordSeparators = getMapForWordSeparators(editor.getOption(132 /* EditorOption.wordSeparators */), editor.getOption(131 /* EditorOption.wordSegmenterLocales */));\n    const model = editor.getModel();\n    const selections = editor.getSelections();\n    const commands = selections.map(sel => {\n      const deleteRange = WordOperations.deleteInsideWord(wordSeparators, model, sel);\n      return new ReplaceCommand(deleteRange, '');\n    });\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  }\n}\nregisterEditorCommand(new CursorWordStartLeft());\nregisterEditorCommand(new CursorWordEndLeft());\nregisterEditorCommand(new CursorWordLeft());\nregisterEditorCommand(new CursorWordStartLeftSelect());\nregisterEditorCommand(new CursorWordEndLeftSelect());\nregisterEditorCommand(new CursorWordLeftSelect());\nregisterEditorCommand(new CursorWordStartRight());\nregisterEditorCommand(new CursorWordEndRight());\nregisterEditorCommand(new CursorWordRight());\nregisterEditorCommand(new CursorWordStartRightSelect());\nregisterEditorCommand(new CursorWordEndRightSelect());\nregisterEditorCommand(new CursorWordRightSelect());\nregisterEditorCommand(new CursorWordAccessibilityLeft());\nregisterEditorCommand(new CursorWordAccessibilityLeftSelect());\nregisterEditorCommand(new CursorWordAccessibilityRight());\nregisterEditorCommand(new CursorWordAccessibilityRightSelect());\nregisterEditorCommand(new DeleteWordStartLeft());\nregisterEditorCommand(new DeleteWordEndLeft());\nregisterEditorCommand(new DeleteWordLeft());\nregisterEditorCommand(new DeleteWordStartRight());\nregisterEditorCommand(new DeleteWordEndRight());\nregisterEditorCommand(new DeleteWordRight());\nregisterEditorAction(DeleteInsideWord);","map":{"version":3,"names":["EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","ReplaceCommand","EditorOptions","CursorState","WordOperations","getMapForWordSeparators","Position","Range","Selection","EditorContextKeys","ILanguageConfigurationService","nls","CONTEXT_ACCESSIBILITY_MODE_ENABLED","ContextKeyExpr","IsWindowsContext","MoveWordCommand","constructor","opts","_inSelectionMode","inSelectionMode","_wordNavigationType","wordNavigationType","runEditorCommand","accessor","editor","args","hasModel","wordSeparators","getOption","model","getModel","selections","getSelections","hasMulticursor","length","result","map","sel","inPosition","positionLineNumber","positionColumn","outPosition","_move","_moveTo","pushStackElement","_getViewModel","setCursorStates","r","fromModelSelection","pos","revealPosition","from","to","selectionStartLineNumber","selectionStartColumn","lineNumber","column","WordLeftCommand","position","moveWordLeft","WordRightCommand","moveWordRight","CursorWordStartLeft","id","precondition","undefined","CursorWordEndLeft","CursorWordLeft","_ContextKeyExpr$and","kbOpts","kbExpr","and","textInputFocus","negate","primary","mac","weight","CursorWordStartLeftSelect","CursorWordEndLeftSelect","CursorWordLeftSelect","_ContextKeyExpr$and2","CursorWordAccessibilityLeft","wordCharacterClassifier","defaultValue","intlSegmenterLocales","CursorWordAccessibilityLeftSelect","CursorWordStartRight","CursorWordEndRight","_ContextKeyExpr$and3","CursorWordRight","CursorWordStartRightSelect","CursorWordEndRightSelect","_ContextKeyExpr$and4","CursorWordRightSelect","CursorWordAccessibilityRight","CursorWordAccessibilityRightSelect","DeleteWordCommand","_whitespaceHeuristics","whitespaceHeuristics","languageConfigurationService","get","autoClosingBrackets","autoClosingQuotes","autoClosingPairs","getLanguageConfiguration","getLanguageId","getAutoClosingPairs","viewModel","commands","deleteRange","_delete","selection","autoClosingDelete","autoClosedCharacters","getCursorAutoClosedCharacters","pushUndoStop","executeCommands","DeleteWordLeftCommand","ctx","deleteWordLeft","DeleteWordRightCommand","deleteWordRight","lineCount","getLineCount","maxColumn","getLineMaxColumn","DeleteWordStartLeft","writable","DeleteWordEndLeft","DeleteWordLeft","DeleteWordStartRight","DeleteWordEndRight","DeleteWordRight","DeleteInsideWord","label","localize","alias","run","deleteInsideWord"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/wordOperations/browser/wordOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand } from '../../../common/commands/replaceCommand.js';\nimport { EditorOptions } from '../../../common/config/editorOptions.js';\nimport { CursorState } from '../../../common/cursorCommon.js';\nimport { WordOperations } from '../../../common/cursor/cursorWordOperations.js';\nimport { getMapForWordSeparators } from '../../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport * as nls from '../../../../nls.js';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from '../../../../platform/accessibility/common/accessibility.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IsWindowsContext } from '../../../../platform/contextkey/common/contextkeys.js';\nexport class MoveWordCommand extends EditorCommand {\n    constructor(opts) {\n        super(opts);\n        this._inSelectionMode = opts.inSelectionMode;\n        this._wordNavigationType = opts.wordNavigationType;\n    }\n    runEditorCommand(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(132 /* EditorOption.wordSeparators */), editor.getOption(131 /* EditorOption.wordSegmenterLocales */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const hasMulticursor = selections.length > 1;\n        const result = selections.map((sel) => {\n            const inPosition = new Position(sel.positionLineNumber, sel.positionColumn);\n            const outPosition = this._move(wordSeparators, model, inPosition, this._wordNavigationType, hasMulticursor);\n            return this._moveTo(sel, outPosition, this._inSelectionMode);\n        });\n        model.pushStackElement();\n        editor._getViewModel().setCursorStates('moveWordCommand', 3 /* CursorChangeReason.Explicit */, result.map(r => CursorState.fromModelSelection(r)));\n        if (result.length === 1) {\n            const pos = new Position(result[0].positionLineNumber, result[0].positionColumn);\n            editor.revealPosition(pos, 0 /* ScrollType.Smooth */);\n        }\n    }\n    _moveTo(from, to, inSelectionMode) {\n        if (inSelectionMode) {\n            // move just position\n            return new Selection(from.selectionStartLineNumber, from.selectionStartColumn, to.lineNumber, to.column);\n        }\n        else {\n            // move everything\n            return new Selection(to.lineNumber, to.column, to.lineNumber, to.column);\n        }\n    }\n}\nexport class WordLeftCommand extends MoveWordCommand {\n    _move(wordSeparators, model, position, wordNavigationType, hasMulticursor) {\n        return WordOperations.moveWordLeft(wordSeparators, model, position, wordNavigationType, hasMulticursor);\n    }\n}\nexport class WordRightCommand extends MoveWordCommand {\n    _move(wordSeparators, model, position, wordNavigationType, hasMulticursor) {\n        return WordOperations.moveWordRight(wordSeparators, model, position, wordNavigationType);\n    }\n}\nexport class CursorWordStartLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 0 /* WordNavigationType.WordStart */,\n            id: 'cursorWordStartLeft',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'cursorWordEndLeft',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 1 /* WordNavigationType.WordStartFast */,\n            id: 'cursorWordLeft',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)?.negate()),\n                primary: 2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */,\n                mac: { primary: 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordStartLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 0 /* WordNavigationType.WordStart */,\n            id: 'cursorWordStartLeftSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'cursorWordEndLeftSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 1 /* WordNavigationType.WordStartFast */,\n            id: 'cursorWordLeftSelect',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)?.negate()),\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */,\n                mac: { primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\n// Accessibility navigation commands should only be enabled on windows since they are tuned to what NVDA expects\nexport class CursorWordAccessibilityLeft extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 3 /* WordNavigationType.WordAccessibility */,\n            id: 'cursorWordAccessibilityLeft',\n            precondition: undefined\n        });\n    }\n    _move(wordCharacterClassifier, model, position, wordNavigationType, hasMulticursor) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n    }\n}\nexport class CursorWordAccessibilityLeftSelect extends WordLeftCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 3 /* WordNavigationType.WordAccessibility */,\n            id: 'cursorWordAccessibilityLeftSelect',\n            precondition: undefined\n        });\n    }\n    _move(wordCharacterClassifier, model, position, wordNavigationType, hasMulticursor) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n    }\n}\nexport class CursorWordStartRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 0 /* WordNavigationType.WordStart */,\n            id: 'cursorWordStartRight',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'cursorWordEndRight',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)?.negate()),\n                primary: 2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */,\n                mac: { primary: 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'cursorWordRight',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordStartRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 0 /* WordNavigationType.WordStart */,\n            id: 'cursorWordStartRightSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordEndRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'cursorWordEndRightSelect',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: ContextKeyExpr.and(EditorContextKeys.textInputFocus, ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, IsWindowsContext)?.negate()),\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */,\n                mac: { primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nexport class CursorWordRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'cursorWordRightSelect',\n            precondition: undefined\n        });\n    }\n}\nexport class CursorWordAccessibilityRight extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: false,\n            wordNavigationType: 3 /* WordNavigationType.WordAccessibility */,\n            id: 'cursorWordAccessibilityRight',\n            precondition: undefined\n        });\n    }\n    _move(wordCharacterClassifier, model, position, wordNavigationType, hasMulticursor) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n    }\n}\nexport class CursorWordAccessibilityRightSelect extends WordRightCommand {\n    constructor() {\n        super({\n            inSelectionMode: true,\n            wordNavigationType: 3 /* WordNavigationType.WordAccessibility */,\n            id: 'cursorWordAccessibilityRightSelect',\n            precondition: undefined\n        });\n    }\n    _move(wordCharacterClassifier, model, position, wordNavigationType, hasMulticursor) {\n        return super._move(getMapForWordSeparators(EditorOptions.wordSeparators.defaultValue, wordCharacterClassifier.intlSegmenterLocales), model, position, wordNavigationType, hasMulticursor);\n    }\n}\nexport class DeleteWordCommand extends EditorCommand {\n    constructor(opts) {\n        super(opts);\n        this._whitespaceHeuristics = opts.whitespaceHeuristics;\n        this._wordNavigationType = opts.wordNavigationType;\n    }\n    runEditorCommand(accessor, editor, args) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(132 /* EditorOption.wordSeparators */), editor.getOption(131 /* EditorOption.wordSegmenterLocales */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const autoClosingBrackets = editor.getOption(6 /* EditorOption.autoClosingBrackets */);\n        const autoClosingQuotes = editor.getOption(11 /* EditorOption.autoClosingQuotes */);\n        const autoClosingPairs = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getAutoClosingPairs();\n        const viewModel = editor._getViewModel();\n        const commands = selections.map((sel) => {\n            const deleteRange = this._delete({\n                wordSeparators,\n                model,\n                selection: sel,\n                whitespaceHeuristics: this._whitespaceHeuristics,\n                autoClosingDelete: editor.getOption(9 /* EditorOption.autoClosingDelete */),\n                autoClosingBrackets,\n                autoClosingQuotes,\n                autoClosingPairs,\n                autoClosedCharacters: viewModel.getCursorAutoClosedCharacters(),\n            }, this._wordNavigationType);\n            return new ReplaceCommand(deleteRange, '');\n        });\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteWordLeftCommand extends DeleteWordCommand {\n    _delete(ctx, wordNavigationType) {\n        const r = WordOperations.deleteWordLeft(ctx, wordNavigationType);\n        if (r) {\n            return r;\n        }\n        return new Range(1, 1, 1, 1);\n    }\n}\nexport class DeleteWordRightCommand extends DeleteWordCommand {\n    _delete(ctx, wordNavigationType) {\n        const r = WordOperations.deleteWordRight(ctx, wordNavigationType);\n        if (r) {\n            return r;\n        }\n        const lineCount = ctx.model.getLineCount();\n        const maxColumn = ctx.model.getLineMaxColumn(lineCount);\n        return new Range(lineCount, maxColumn, lineCount, maxColumn);\n    }\n}\nexport class DeleteWordStartLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 0 /* WordNavigationType.WordStart */,\n            id: 'deleteWordStartLeft',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordEndLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'deleteWordEndLeft',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordLeft extends DeleteWordLeftCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: true,\n            wordNavigationType: 0 /* WordNavigationType.WordStart */,\n            id: 'deleteWordLeft',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1 /* KeyCode.Backspace */,\n                mac: { primary: 512 /* KeyMod.Alt */ | 1 /* KeyCode.Backspace */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nexport class DeleteWordStartRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 0 /* WordNavigationType.WordStart */,\n            id: 'deleteWordStartRight',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordEndRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: false,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'deleteWordEndRight',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteWordRight extends DeleteWordRightCommand {\n    constructor() {\n        super({\n            whitespaceHeuristics: true,\n            wordNavigationType: 2 /* WordNavigationType.WordEnd */,\n            id: 'deleteWordRight',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 20 /* KeyCode.Delete */,\n                mac: { primary: 512 /* KeyMod.Alt */ | 20 /* KeyCode.Delete */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n}\nexport class DeleteInsideWord extends EditorAction {\n    constructor() {\n        super({\n            id: 'deleteInsideWord',\n            precondition: EditorContextKeys.writable,\n            label: nls.localize('deleteInsideWord', \"Delete Word\"),\n            alias: 'Delete Word'\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const wordSeparators = getMapForWordSeparators(editor.getOption(132 /* EditorOption.wordSeparators */), editor.getOption(131 /* EditorOption.wordSegmenterLocales */));\n        const model = editor.getModel();\n        const selections = editor.getSelections();\n        const commands = selections.map((sel) => {\n            const deleteRange = WordOperations.deleteInsideWord(wordSeparators, model, sel);\n            return new ReplaceCommand(deleteRange, '');\n        });\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nregisterEditorCommand(new CursorWordStartLeft());\nregisterEditorCommand(new CursorWordEndLeft());\nregisterEditorCommand(new CursorWordLeft());\nregisterEditorCommand(new CursorWordStartLeftSelect());\nregisterEditorCommand(new CursorWordEndLeftSelect());\nregisterEditorCommand(new CursorWordLeftSelect());\nregisterEditorCommand(new CursorWordStartRight());\nregisterEditorCommand(new CursorWordEndRight());\nregisterEditorCommand(new CursorWordRight());\nregisterEditorCommand(new CursorWordStartRightSelect());\nregisterEditorCommand(new CursorWordEndRightSelect());\nregisterEditorCommand(new CursorWordRightSelect());\nregisterEditorCommand(new CursorWordAccessibilityLeft());\nregisterEditorCommand(new CursorWordAccessibilityLeftSelect());\nregisterEditorCommand(new CursorWordAccessibilityRight());\nregisterEditorCommand(new CursorWordAccessibilityRightSelect());\nregisterEditorCommand(new DeleteWordStartLeft());\nregisterEditorCommand(new DeleteWordEndLeft());\nregisterEditorCommand(new DeleteWordLeft());\nregisterEditorCommand(new DeleteWordStartRight());\nregisterEditorCommand(new DeleteWordEndRight());\nregisterEditorCommand(new DeleteWordRight());\nregisterEditorAction(DeleteInsideWord);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
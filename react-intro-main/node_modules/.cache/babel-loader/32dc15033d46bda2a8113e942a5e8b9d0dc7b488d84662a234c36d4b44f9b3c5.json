{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { arcToCurves, getRotatedPoint } from '../../util/mathUtils';\nimport { DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, DIRECTION, NONE, SHADOWCOLOR, SHADOW_OFFSET_X, SHADOW_OFFSET_Y, SHADOW_OPACITY } from '../../util/Constants';\nimport UrlConverter from '../../util/UrlConverter';\nimport Point from '../geometry/Point';\nimport { clone } from '../../util/cloneUtils';\n/**\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of {@link Constants#NONE} will be converted to null in the state.\n *\n * Constructor: D\n *\n * Constructs a new abstract canvas.\n */\nclass AbstractCanvas2D {\n  constructor() {\n    var _this = this;\n    /**\n     * Holds the current state.\n     */\n    this.state = this.createState();\n    /**\n     * Stack of states.\n     */\n    this.states = [];\n    /**\n     * Holds the current path as an array.\n     */\n    this.path = [];\n    /**\n     * Switch for rotation of HTML. Default is false.\n     */\n    this.rotateHtml = true;\n    /**\n     * Holds the last x coordinate.\n     */\n    this.lastX = 0;\n    /**\n     * Holds the last y coordinate.\n     */\n    this.lastY = 0;\n    /**\n     * Contains the string used for moving in paths. Default is 'M'.\n     */\n    this.moveOp = 'M';\n    /**\n     * Contains the string used for moving in paths. Default is 'L'.\n     */\n    this.lineOp = 'L';\n    /**\n     * Contains the string used for quadratic paths. Default is 'Q'.\n     */\n    this.quadOp = 'Q';\n    /**\n     * Contains the string used for bezier curves. Default is 'C'.\n     */\n    this.curveOp = 'C';\n    /**\n     * Holds the operator for closing curves. Default is 'Z'.\n     */\n    this.closeOp = 'Z';\n    /**\n     * Boolean value that specifies if events should be handled. Default is false.\n     */\n    this.pointerEvents = false;\n    // from Polyline (maybe from other shapes also)\n    this.pointerEventsValue = null;\n    /**\n     * Adds the given operation to the path.\n     */\n    this.addOp = function (op) {\n      _this.path.push(op);\n      if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) {\n        const s = _this.state;\n        for (let i = 1; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i += 2) {\n          _this.lastX = i - 1 + 1 < 1 || arguments.length <= i - 1 + 1 ? undefined : arguments[i - 1 + 1];\n          _this.lastY = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];\n          _this.path.push(_this.format((_this.lastX + s.dx) * s.scale));\n          _this.path.push(_this.format((_this.lastY + s.dy) * s.scale));\n        }\n      }\n    };\n    this.converter = this.createUrlConverter();\n    this.reset();\n  }\n  /**\n   * Create a new <UrlConverter> and returns it.\n   */\n  createUrlConverter() {\n    return new UrlConverter();\n  }\n  /**\n   * Resets the state of this canvas.\n   */\n  reset() {\n    this.state = this.createState();\n    this.states = [];\n  }\n  /**\n   * Creates the state of the this canvas.\n   */\n  createState() {\n    return {\n      dx: 0,\n      dy: 0,\n      scale: 1,\n      alpha: 1,\n      fillAlpha: 1,\n      strokeAlpha: 1,\n      fillColor: NONE,\n      gradientFillAlpha: 1,\n      gradientColor: NONE,\n      gradientAlpha: 1,\n      gradientDirection: DIRECTION.EAST,\n      strokeColor: NONE,\n      strokeWidth: 1,\n      dashed: false,\n      dashPattern: '3 3',\n      fixDash: false,\n      lineCap: 'flat',\n      lineJoin: 'miter',\n      miterLimit: 10,\n      fontColor: '#000000',\n      fontBackgroundColor: NONE,\n      fontBorderColor: NONE,\n      fontSize: DEFAULT_FONTSIZE,\n      fontFamily: DEFAULT_FONTFAMILY,\n      fontStyle: 0,\n      shadow: false,\n      shadowColor: SHADOWCOLOR,\n      shadowAlpha: SHADOW_OPACITY,\n      shadowDx: SHADOW_OFFSET_X,\n      shadowDy: SHADOW_OFFSET_Y,\n      rotation: 0,\n      rotationCx: 0,\n      rotationCy: 0\n    };\n  }\n  /**\n   * Rounds all numbers to integers.\n   */\n  format(value) {\n    return Math.round(value);\n  }\n  /**\n   * Rotates the given point and returns the result as an {@link Point}.\n   */\n  rotatePoint(x, y, theta, cx, cy) {\n    const rad = theta * (Math.PI / 180);\n    return getRotatedPoint(new Point(x, y), Math.cos(rad), Math.sin(rad), new Point(cx, cy));\n  }\n  /**\n   * Saves the current state.\n   */\n  save() {\n    this.states.push(this.state);\n    this.state = clone(this.state);\n  }\n  /**\n   * Restores the current state.\n   */\n  restore() {\n    const state = this.states.pop();\n    if (state) this.state = state;\n  }\n  /**\n   * Sets the current link. Hook for subclassers.\n   */\n  setLink(link) {\n    // nop\n  }\n  /**\n   * Scales the current state.\n   */\n  scale(value) {\n    this.state.scale *= value;\n    if (this.state.strokeWidth !== null) this.state.strokeWidth *= value;\n  }\n  /**\n   * Translates the current state.\n   */\n  translate(dx, dy) {\n    this.state.dx += dx;\n    this.state.dy += dy;\n  }\n  /**\n   * Rotates the current state.\n   */\n  rotate(theta, flipH, flipV, cx, cy) {\n    // nop\n  }\n  /**\n   * Sets the current alpha.\n   */\n  setAlpha(value) {\n    this.state.alpha = value;\n  }\n  /**\n   * Sets the current solid fill alpha.\n   */\n  setFillAlpha(value) {\n    this.state.fillAlpha = value;\n  }\n  /**\n   * Sets the current stroke alpha.\n   */\n  setStrokeAlpha(value) {\n    this.state.strokeAlpha = value;\n  }\n  /**\n   * Sets the current fill color.\n   */\n  setFillColor(value) {\n    this.state.fillColor = value !== null && value !== void 0 ? value : NONE;\n    this.state.gradientColor = NONE;\n  }\n  /**\n   * Sets the current gradient.\n   */\n  setGradient(color1, color2, x, y, w, h, direction) {\n    let alpha1 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n    let alpha2 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n    const s = this.state;\n    s.fillColor = color1;\n    s.gradientFillAlpha = alpha1;\n    s.gradientColor = color2;\n    s.gradientAlpha = alpha2;\n    s.gradientDirection = direction;\n  }\n  /**\n   * Sets the current stroke color.\n   */\n  setStrokeColor(value) {\n    this.state.strokeColor = value !== null && value !== void 0 ? value : NONE;\n  }\n  /**\n   * Sets the current stroke width.\n   */\n  setStrokeWidth(value) {\n    this.state.strokeWidth = value;\n  }\n  /**\n   * Enables or disables dashed lines.\n   */\n  setDashed(value) {\n    let fixDash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.state.dashed = value;\n    this.state.fixDash = fixDash;\n  }\n  /**\n   * Sets the current dash pattern.\n   */\n  setDashPattern(value) {\n    this.state.dashPattern = value;\n  }\n  /**\n   * Sets the current line cap.\n   */\n  setLineCap(value) {\n    this.state.lineCap = value;\n  }\n  /**\n   * Sets the current line join.\n   */\n  setLineJoin(value) {\n    this.state.lineJoin = value;\n  }\n  /**\n   * Sets the current miter limit.\n   */\n  setMiterLimit(value) {\n    this.state.miterLimit = value;\n  }\n  /**\n   * Sets the current font color.\n   */\n  setFontColor(value) {\n    this.state.fontColor = value !== null && value !== void 0 ? value : NONE;\n  }\n  /**\n   * Sets the current font background color.\n   */\n  setFontBackgroundColor(value) {\n    this.state.fontBackgroundColor = value !== null && value !== void 0 ? value : NONE;\n  }\n  /**\n   * Sets the current font border color.\n   */\n  setFontBorderColor(value) {\n    this.state.fontBorderColor = value !== null && value !== void 0 ? value : NONE;\n  }\n  /**\n   * Sets the current font size.\n   */\n  setFontSize(value) {\n    this.state.fontSize = value;\n  }\n  /**\n   * Sets the current font family.\n   */\n  setFontFamily(value) {\n    this.state.fontFamily = value;\n  }\n  /**\n   * Sets the current font style.\n   */\n  setFontStyle(value) {\n    this.state.fontStyle = value;\n  }\n  /**\n   * Enables or disables and configures the current shadow.\n   */\n  setShadow(enabled) {\n    this.state.shadow = enabled;\n  }\n  /**\n   * Enables or disables and configures the current shadow.\n   */\n  setShadowColor(value) {\n    this.state.shadowColor = value !== null && value !== void 0 ? value : NONE;\n  }\n  /**\n   * Enables or disables and configures the current shadow.\n   */\n  setShadowAlpha(value) {\n    this.state.shadowAlpha = value;\n  }\n  /**\n   * Enables or disables and configures the current shadow.\n   */\n  setShadowOffset(dx, dy) {\n    this.state.shadowDx = dx;\n    this.state.shadowDy = dy;\n  }\n  /**\n   * Starts a new path.\n   */\n  begin() {\n    this.lastX = 0;\n    this.lastY = 0;\n    this.path = [];\n  }\n  /**\n   *  Moves the current path the given coordinates.\n   */\n  moveTo(x, y) {\n    this.addOp(this.moveOp, x, y);\n  }\n  /**\n   * Draws a line to the given coordinates. Uses moveTo with the op argument.\n   */\n  lineTo(x, y) {\n    this.addOp(this.lineOp, x, y);\n  }\n  /**\n   * Adds a quadratic curve to the current path.\n   */\n  quadTo(x1, y1, x2, y2) {\n    this.addOp(this.quadOp, x1, y1, x2, y2);\n  }\n  /**\n   * Adds a bezier curve to the current path.\n   */\n  curveTo(x1, y1, x2, y2, x3, y3) {\n    this.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n  }\n  /**\n   * Adds the given arc to the current path. This is a synthetic operation that\n   * is broken down into curves.\n   */\n  arcTo(rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n    const curves = arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n    if (curves != null) {\n      for (let i = 0; i < curves.length; i += 6) {\n        this.curveTo(curves[i], curves[i + 1], curves[i + 2], curves[i + 3], curves[i + 4], curves[i + 5]);\n      }\n    }\n  }\n  /**\n   * Closes the current path.\n   */\n  close(x1, y1, x2, y2, x3, y3) {\n    this.addOp(this.closeOp);\n  }\n}\nexport default AbstractCanvas2D;","map":{"version":3,"names":["arcToCurves","getRotatedPoint","DEFAULT_FONTFAMILY","DEFAULT_FONTSIZE","DIRECTION","NONE","SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","UrlConverter","Point","clone","AbstractCanvas2D","constructor","_this","state","createState","states","path","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","pointerEvents","pointerEventsValue","addOp","op","push","arguments","length","s","i","undefined","format","dx","scale","dy","converter","createUrlConverter","reset","alpha","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","EAST","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","fontSize","fontFamily","fontStyle","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotation","rotationCx","rotationCy","value","Math","round","rotatePoint","x","y","theta","cx","cy","rad","PI","cos","sin","save","restore","pop","setLink","link","translate","rotate","flipH","flipV","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","w","h","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","enabled","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","x1","y1","x2","y2","curveTo","x3","y3","arcTo","rx","ry","angle","largeArcFlag","sweepFlag","curves","close"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/view/canvas/AbstractCanvas2D.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { arcToCurves, getRotatedPoint } from '../../util/mathUtils';\nimport { DEFAULT_FONTFAMILY, DEFAULT_FONTSIZE, DIRECTION, NONE, SHADOWCOLOR, SHADOW_OFFSET_X, SHADOW_OFFSET_Y, SHADOW_OPACITY, } from '../../util/Constants';\nimport UrlConverter from '../../util/UrlConverter';\nimport Point from '../geometry/Point';\nimport { clone } from '../../util/cloneUtils';\n/**\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of {@link Constants#NONE} will be converted to null in the state.\n *\n * Constructor: D\n *\n * Constructs a new abstract canvas.\n */\nclass AbstractCanvas2D {\n    constructor() {\n        /**\n         * Holds the current state.\n         */\n        this.state = this.createState();\n        /**\n         * Stack of states.\n         */\n        this.states = [];\n        /**\n         * Holds the current path as an array.\n         */\n        this.path = [];\n        /**\n         * Switch for rotation of HTML. Default is false.\n         */\n        this.rotateHtml = true;\n        /**\n         * Holds the last x coordinate.\n         */\n        this.lastX = 0;\n        /**\n         * Holds the last y coordinate.\n         */\n        this.lastY = 0;\n        /**\n         * Contains the string used for moving in paths. Default is 'M'.\n         */\n        this.moveOp = 'M';\n        /**\n         * Contains the string used for moving in paths. Default is 'L'.\n         */\n        this.lineOp = 'L';\n        /**\n         * Contains the string used for quadratic paths. Default is 'Q'.\n         */\n        this.quadOp = 'Q';\n        /**\n         * Contains the string used for bezier curves. Default is 'C'.\n         */\n        this.curveOp = 'C';\n        /**\n         * Holds the operator for closing curves. Default is 'Z'.\n         */\n        this.closeOp = 'Z';\n        /**\n         * Boolean value that specifies if events should be handled. Default is false.\n         */\n        this.pointerEvents = false;\n        // from Polyline (maybe from other shapes also)\n        this.pointerEventsValue = null;\n        /**\n         * Adds the given operation to the path.\n         */\n        this.addOp = (op, ...args) => {\n            this.path.push(op);\n            if (args.length > 1) {\n                const s = this.state;\n                for (let i = 1; i < args.length; i += 2) {\n                    this.lastX = args[i - 1];\n                    this.lastY = args[i];\n                    this.path.push(this.format((this.lastX + s.dx) * s.scale));\n                    this.path.push(this.format((this.lastY + s.dy) * s.scale));\n                }\n            }\n        };\n        this.converter = this.createUrlConverter();\n        this.reset();\n    }\n    /**\n     * Create a new <UrlConverter> and returns it.\n     */\n    createUrlConverter() {\n        return new UrlConverter();\n    }\n    /**\n     * Resets the state of this canvas.\n     */\n    reset() {\n        this.state = this.createState();\n        this.states = [];\n    }\n    /**\n     * Creates the state of the this canvas.\n     */\n    createState() {\n        return {\n            dx: 0,\n            dy: 0,\n            scale: 1,\n            alpha: 1,\n            fillAlpha: 1,\n            strokeAlpha: 1,\n            fillColor: NONE,\n            gradientFillAlpha: 1,\n            gradientColor: NONE,\n            gradientAlpha: 1,\n            gradientDirection: DIRECTION.EAST,\n            strokeColor: NONE,\n            strokeWidth: 1,\n            dashed: false,\n            dashPattern: '3 3',\n            fixDash: false,\n            lineCap: 'flat',\n            lineJoin: 'miter',\n            miterLimit: 10,\n            fontColor: '#000000',\n            fontBackgroundColor: NONE,\n            fontBorderColor: NONE,\n            fontSize: DEFAULT_FONTSIZE,\n            fontFamily: DEFAULT_FONTFAMILY,\n            fontStyle: 0,\n            shadow: false,\n            shadowColor: SHADOWCOLOR,\n            shadowAlpha: SHADOW_OPACITY,\n            shadowDx: SHADOW_OFFSET_X,\n            shadowDy: SHADOW_OFFSET_Y,\n            rotation: 0,\n            rotationCx: 0,\n            rotationCy: 0,\n        };\n    }\n    /**\n     * Rounds all numbers to integers.\n     */\n    format(value) {\n        return Math.round(value);\n    }\n    /**\n     * Rotates the given point and returns the result as an {@link Point}.\n     */\n    rotatePoint(x, y, theta, cx, cy) {\n        const rad = theta * (Math.PI / 180);\n        return getRotatedPoint(new Point(x, y), Math.cos(rad), Math.sin(rad), new Point(cx, cy));\n    }\n    /**\n     * Saves the current state.\n     */\n    save() {\n        this.states.push(this.state);\n        this.state = clone(this.state);\n    }\n    /**\n     * Restores the current state.\n     */\n    restore() {\n        const state = this.states.pop();\n        if (state)\n            this.state = state;\n    }\n    /**\n     * Sets the current link. Hook for subclassers.\n     */\n    setLink(link) {\n        // nop\n    }\n    /**\n     * Scales the current state.\n     */\n    scale(value) {\n        this.state.scale *= value;\n        if (this.state.strokeWidth !== null)\n            this.state.strokeWidth *= value;\n    }\n    /**\n     * Translates the current state.\n     */\n    translate(dx, dy) {\n        this.state.dx += dx;\n        this.state.dy += dy;\n    }\n    /**\n     * Rotates the current state.\n     */\n    rotate(theta, flipH, flipV, cx, cy) {\n        // nop\n    }\n    /**\n     * Sets the current alpha.\n     */\n    setAlpha(value) {\n        this.state.alpha = value;\n    }\n    /**\n     * Sets the current solid fill alpha.\n     */\n    setFillAlpha(value) {\n        this.state.fillAlpha = value;\n    }\n    /**\n     * Sets the current stroke alpha.\n     */\n    setStrokeAlpha(value) {\n        this.state.strokeAlpha = value;\n    }\n    /**\n     * Sets the current fill color.\n     */\n    setFillColor(value) {\n        this.state.fillColor = value ?? NONE;\n        this.state.gradientColor = NONE;\n    }\n    /**\n     * Sets the current gradient.\n     */\n    setGradient(color1, color2, x, y, w, h, direction, alpha1 = 1, alpha2 = 1) {\n        const s = this.state;\n        s.fillColor = color1;\n        s.gradientFillAlpha = alpha1;\n        s.gradientColor = color2;\n        s.gradientAlpha = alpha2;\n        s.gradientDirection = direction;\n    }\n    /**\n     * Sets the current stroke color.\n     */\n    setStrokeColor(value) {\n        this.state.strokeColor = value ?? NONE;\n    }\n    /**\n     * Sets the current stroke width.\n     */\n    setStrokeWidth(value) {\n        this.state.strokeWidth = value;\n    }\n    /**\n     * Enables or disables dashed lines.\n     */\n    setDashed(value, fixDash = false) {\n        this.state.dashed = value;\n        this.state.fixDash = fixDash;\n    }\n    /**\n     * Sets the current dash pattern.\n     */\n    setDashPattern(value) {\n        this.state.dashPattern = value;\n    }\n    /**\n     * Sets the current line cap.\n     */\n    setLineCap(value) {\n        this.state.lineCap = value;\n    }\n    /**\n     * Sets the current line join.\n     */\n    setLineJoin(value) {\n        this.state.lineJoin = value;\n    }\n    /**\n     * Sets the current miter limit.\n     */\n    setMiterLimit(value) {\n        this.state.miterLimit = value;\n    }\n    /**\n     * Sets the current font color.\n     */\n    setFontColor(value) {\n        this.state.fontColor = value ?? NONE;\n    }\n    /**\n     * Sets the current font background color.\n     */\n    setFontBackgroundColor(value) {\n        this.state.fontBackgroundColor = value ?? NONE;\n    }\n    /**\n     * Sets the current font border color.\n     */\n    setFontBorderColor(value) {\n        this.state.fontBorderColor = value ?? NONE;\n    }\n    /**\n     * Sets the current font size.\n     */\n    setFontSize(value) {\n        this.state.fontSize = value;\n    }\n    /**\n     * Sets the current font family.\n     */\n    setFontFamily(value) {\n        this.state.fontFamily = value;\n    }\n    /**\n     * Sets the current font style.\n     */\n    setFontStyle(value) {\n        this.state.fontStyle = value;\n    }\n    /**\n     * Enables or disables and configures the current shadow.\n     */\n    setShadow(enabled) {\n        this.state.shadow = enabled;\n    }\n    /**\n     * Enables or disables and configures the current shadow.\n     */\n    setShadowColor(value) {\n        this.state.shadowColor = value ?? NONE;\n    }\n    /**\n     * Enables or disables and configures the current shadow.\n     */\n    setShadowAlpha(value) {\n        this.state.shadowAlpha = value;\n    }\n    /**\n     * Enables or disables and configures the current shadow.\n     */\n    setShadowOffset(dx, dy) {\n        this.state.shadowDx = dx;\n        this.state.shadowDy = dy;\n    }\n    /**\n     * Starts a new path.\n     */\n    begin() {\n        this.lastX = 0;\n        this.lastY = 0;\n        this.path = [];\n    }\n    /**\n     *  Moves the current path the given coordinates.\n     */\n    moveTo(x, y) {\n        this.addOp(this.moveOp, x, y);\n    }\n    /**\n     * Draws a line to the given coordinates. Uses moveTo with the op argument.\n     */\n    lineTo(x, y) {\n        this.addOp(this.lineOp, x, y);\n    }\n    /**\n     * Adds a quadratic curve to the current path.\n     */\n    quadTo(x1, y1, x2, y2) {\n        this.addOp(this.quadOp, x1, y1, x2, y2);\n    }\n    /**\n     * Adds a bezier curve to the current path.\n     */\n    curveTo(x1, y1, x2, y2, x3, y3) {\n        this.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n    }\n    /**\n     * Adds the given arc to the current path. This is a synthetic operation that\n     * is broken down into curves.\n     */\n    arcTo(rx, ry, angle, largeArcFlag, sweepFlag, x, y) {\n        const curves = arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n        if (curves != null) {\n            for (let i = 0; i < curves.length; i += 6) {\n                this.curveTo(curves[i], curves[i + 1], curves[i + 2], curves[i + 3], curves[i + 4], curves[i + 5]);\n            }\n        }\n    }\n    /**\n     * Closes the current path.\n     */\n    close(x1, y1, x2, y2, x3, y3) {\n        this.addOp(this.closeOp);\n    }\n}\nexport default AbstractCanvas2D;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,EAAEC,eAAe,QAAQ,sBAAsB;AACnE,SAASC,kBAAkB,EAAEC,gBAAgB,EAAEC,SAAS,EAAEC,IAAI,EAAEC,WAAW,EAAEC,eAAe,EAAEC,eAAe,EAAEC,cAAc,QAAS,sBAAsB;AAC5J,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,KAAK,MAAM,mBAAmB;AACrC,SAASC,KAAK,QAAQ,uBAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACnBC,WAAWA,CAAA,EAAG;IAAA,IAAAC,KAAA;IACV;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;IAC/B;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB;AACR;AACA;IACQ,IAAI,CAACC,IAAI,GAAG,EAAE;IACd;AACR;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,CAAC;IACd;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,CAAC;IACd;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,GAAG;IACjB;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,GAAG;IACjB;AACR;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,GAAG;IACjB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,GAAG;IAClB;AACR;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,GAAG;IAClB;AACR;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,KAAK;IAC1B;IACA,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,UAACC,EAAE,EAAc;MAC1BhB,KAAI,CAACI,IAAI,CAACa,IAAI,CAACD,EAAE,CAAC;MAClB,IAAI,CAAAE,SAAA,CAAAC,MAAA,YAAAD,SAAA,CAAAC,MAAA,QAAc,CAAC,EAAE;QACjB,MAAMC,CAAC,GAAGpB,KAAI,CAACC,KAAK;QACpB,KAAK,IAAIoB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAAH,SAAA,CAAAC,MAAA,YAAAD,SAAA,CAAAC,MAAA,KAAc,EAAEE,CAAC,IAAI,CAAC,EAAE;UACrCrB,KAAI,CAACM,KAAK,GAAQe,CAAC,GAAG,CAAC,YAAAH,SAAA,CAAAC,MAAA,IAALE,CAAC,GAAG,CAAC,OAAAC,SAAA,GAAAJ,SAAA,CAALG,CAAC,GAAG,CAAC,KAAC;UACxBrB,KAAI,CAACO,KAAK,GAAQc,CAAC,YAAAH,SAAA,CAAAC,MAAA,IAADE,CAAC,OAAAC,SAAA,GAAAJ,SAAA,CAADG,CAAC,KAAC;UACpBrB,KAAI,CAACI,IAAI,CAACa,IAAI,CAACjB,KAAI,CAACuB,MAAM,CAAC,CAACvB,KAAI,CAACM,KAAK,GAAGc,CAAC,CAACI,EAAE,IAAIJ,CAAC,CAACK,KAAK,CAAC,CAAC;UAC1DzB,KAAI,CAACI,IAAI,CAACa,IAAI,CAACjB,KAAI,CAACuB,MAAM,CAAC,CAACvB,KAAI,CAACO,KAAK,GAAGa,CAAC,CAACM,EAAE,IAAIN,CAAC,CAACK,KAAK,CAAC,CAAC;QAC9D;MACJ;IACJ,CAAC;IACD,IAAI,CAACE,SAAS,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;IAC1C,IAAI,CAACC,KAAK,CAAC,CAAC;EAChB;EACA;AACJ;AACA;EACID,kBAAkBA,CAAA,EAAG;IACjB,OAAO,IAAIjC,YAAY,CAAC,CAAC;EAC7B;EACA;AACJ;AACA;EACIkC,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAC5B,KAAK,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;IAC/B,IAAI,CAACC,MAAM,GAAG,EAAE;EACpB;EACA;AACJ;AACA;EACID,WAAWA,CAAA,EAAG;IACV,OAAO;MACHsB,EAAE,EAAE,CAAC;MACLE,EAAE,EAAE,CAAC;MACLD,KAAK,EAAE,CAAC;MACRK,KAAK,EAAE,CAAC;MACRC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC;MACdC,SAAS,EAAE3C,IAAI;MACf4C,iBAAiB,EAAE,CAAC;MACpBC,aAAa,EAAE7C,IAAI;MACnB8C,aAAa,EAAE,CAAC;MAChBC,iBAAiB,EAAEhD,SAAS,CAACiD,IAAI;MACjCC,WAAW,EAAEjD,IAAI;MACjBkD,WAAW,EAAE,CAAC;MACdC,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE,KAAK;MAClBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,MAAM;MACfC,QAAQ,EAAE,OAAO;MACjBC,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,SAAS;MACpBC,mBAAmB,EAAE1D,IAAI;MACzB2D,eAAe,EAAE3D,IAAI;MACrB4D,QAAQ,EAAE9D,gBAAgB;MAC1B+D,UAAU,EAAEhE,kBAAkB;MAC9BiE,SAAS,EAAE,CAAC;MACZC,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE/D,WAAW;MACxBgE,WAAW,EAAE7D,cAAc;MAC3B8D,QAAQ,EAAEhE,eAAe;MACzBiE,QAAQ,EAAEhE,eAAe;MACzBiE,QAAQ,EAAE,CAAC;MACXC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE;IAChB,CAAC;EACL;EACA;AACJ;AACA;EACIrC,MAAMA,CAACsC,KAAK,EAAE;IACV,OAAOC,IAAI,CAACC,KAAK,CAACF,KAAK,CAAC;EAC5B;EACA;AACJ;AACA;EACIG,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,EAAE,EAAEC,EAAE,EAAE;IAC7B,MAAMC,GAAG,GAAGH,KAAK,IAAIL,IAAI,CAACS,EAAE,GAAG,GAAG,CAAC;IACnC,OAAOrF,eAAe,CAAC,IAAIU,KAAK,CAACqE,CAAC,EAAEC,CAAC,CAAC,EAAEJ,IAAI,CAACU,GAAG,CAACF,GAAG,CAAC,EAAER,IAAI,CAACW,GAAG,CAACH,GAAG,CAAC,EAAE,IAAI1E,KAAK,CAACwE,EAAE,EAAEC,EAAE,CAAC,CAAC;EAC5F;EACA;AACJ;AACA;EACIK,IAAIA,CAAA,EAAG;IACH,IAAI,CAACvE,MAAM,CAACc,IAAI,CAAC,IAAI,CAAChB,KAAK,CAAC;IAC5B,IAAI,CAACA,KAAK,GAAGJ,KAAK,CAAC,IAAI,CAACI,KAAK,CAAC;EAClC;EACA;AACJ;AACA;EACI0E,OAAOA,CAAA,EAAG;IACN,MAAM1E,KAAK,GAAG,IAAI,CAACE,MAAM,CAACyE,GAAG,CAAC,CAAC;IAC/B,IAAI3E,KAAK,EACL,IAAI,CAACA,KAAK,GAAGA,KAAK;EAC1B;EACA;AACJ;AACA;EACI4E,OAAOA,CAACC,IAAI,EAAE;IACV;EAAA;EAEJ;AACJ;AACA;EACIrD,KAAKA,CAACoC,KAAK,EAAE;IACT,IAAI,CAAC5D,KAAK,CAACwB,KAAK,IAAIoC,KAAK;IACzB,IAAI,IAAI,CAAC5D,KAAK,CAACuC,WAAW,KAAK,IAAI,EAC/B,IAAI,CAACvC,KAAK,CAACuC,WAAW,IAAIqB,KAAK;EACvC;EACA;AACJ;AACA;EACIkB,SAASA,CAACvD,EAAE,EAAEE,EAAE,EAAE;IACd,IAAI,CAACzB,KAAK,CAACuB,EAAE,IAAIA,EAAE;IACnB,IAAI,CAACvB,KAAK,CAACyB,EAAE,IAAIA,EAAE;EACvB;EACA;AACJ;AACA;EACIsD,MAAMA,CAACb,KAAK,EAAEc,KAAK,EAAEC,KAAK,EAAEd,EAAE,EAAEC,EAAE,EAAE;IAChC;EAAA;EAEJ;AACJ;AACA;EACIc,QAAQA,CAACtB,KAAK,EAAE;IACZ,IAAI,CAAC5D,KAAK,CAAC6B,KAAK,GAAG+B,KAAK;EAC5B;EACA;AACJ;AACA;EACIuB,YAAYA,CAACvB,KAAK,EAAE;IAChB,IAAI,CAAC5D,KAAK,CAAC8B,SAAS,GAAG8B,KAAK;EAChC;EACA;AACJ;AACA;EACIwB,cAAcA,CAACxB,KAAK,EAAE;IAClB,IAAI,CAAC5D,KAAK,CAAC+B,WAAW,GAAG6B,KAAK;EAClC;EACA;AACJ;AACA;EACIyB,YAAYA,CAACzB,KAAK,EAAE;IAChB,IAAI,CAAC5D,KAAK,CAACgC,SAAS,GAAG4B,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIvE,IAAI;IACpC,IAAI,CAACW,KAAK,CAACkC,aAAa,GAAG7C,IAAI;EACnC;EACA;AACJ;AACA;EACIiG,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAExB,CAAC,EAAEC,CAAC,EAAEwB,CAAC,EAAEC,CAAC,EAAEC,SAAS,EAA0B;IAAA,IAAxBC,MAAM,GAAA3E,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAG,CAAC;IAAA,IAAE4E,MAAM,GAAA5E,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAG,CAAC;IACrE,MAAME,CAAC,GAAG,IAAI,CAACnB,KAAK;IACpBmB,CAAC,CAACa,SAAS,GAAGuD,MAAM;IACpBpE,CAAC,CAACc,iBAAiB,GAAG2D,MAAM;IAC5BzE,CAAC,CAACe,aAAa,GAAGsD,MAAM;IACxBrE,CAAC,CAACgB,aAAa,GAAG0D,MAAM;IACxB1E,CAAC,CAACiB,iBAAiB,GAAGuD,SAAS;EACnC;EACA;AACJ;AACA;EACIG,cAAcA,CAAClC,KAAK,EAAE;IAClB,IAAI,CAAC5D,KAAK,CAACsC,WAAW,GAAGsB,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIvE,IAAI;EAC1C;EACA;AACJ;AACA;EACI0G,cAAcA,CAACnC,KAAK,EAAE;IAClB,IAAI,CAAC5D,KAAK,CAACuC,WAAW,GAAGqB,KAAK;EAClC;EACA;AACJ;AACA;EACIoC,SAASA,CAACpC,KAAK,EAAmB;IAAA,IAAjBlB,OAAO,GAAAzB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAG,KAAK;IAC5B,IAAI,CAACjB,KAAK,CAACwC,MAAM,GAAGoB,KAAK;IACzB,IAAI,CAAC5D,KAAK,CAAC0C,OAAO,GAAGA,OAAO;EAChC;EACA;AACJ;AACA;EACIuD,cAAcA,CAACrC,KAAK,EAAE;IAClB,IAAI,CAAC5D,KAAK,CAACyC,WAAW,GAAGmB,KAAK;EAClC;EACA;AACJ;AACA;EACIsC,UAAUA,CAACtC,KAAK,EAAE;IACd,IAAI,CAAC5D,KAAK,CAAC2C,OAAO,GAAGiB,KAAK;EAC9B;EACA;AACJ;AACA;EACIuC,WAAWA,CAACvC,KAAK,EAAE;IACf,IAAI,CAAC5D,KAAK,CAAC4C,QAAQ,GAAGgB,KAAK;EAC/B;EACA;AACJ;AACA;EACIwC,aAAaA,CAACxC,KAAK,EAAE;IACjB,IAAI,CAAC5D,KAAK,CAAC6C,UAAU,GAAGe,KAAK;EACjC;EACA;AACJ;AACA;EACIyC,YAAYA,CAACzC,KAAK,EAAE;IAChB,IAAI,CAAC5D,KAAK,CAAC8C,SAAS,GAAGc,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIvE,IAAI;EACxC;EACA;AACJ;AACA;EACIiH,sBAAsBA,CAAC1C,KAAK,EAAE;IAC1B,IAAI,CAAC5D,KAAK,CAAC+C,mBAAmB,GAAGa,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIvE,IAAI;EAClD;EACA;AACJ;AACA;EACIkH,kBAAkBA,CAAC3C,KAAK,EAAE;IACtB,IAAI,CAAC5D,KAAK,CAACgD,eAAe,GAAGY,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIvE,IAAI;EAC9C;EACA;AACJ;AACA;EACImH,WAAWA,CAAC5C,KAAK,EAAE;IACf,IAAI,CAAC5D,KAAK,CAACiD,QAAQ,GAAGW,KAAK;EAC/B;EACA;AACJ;AACA;EACI6C,aAAaA,CAAC7C,KAAK,EAAE;IACjB,IAAI,CAAC5D,KAAK,CAACkD,UAAU,GAAGU,KAAK;EACjC;EACA;AACJ;AACA;EACI8C,YAAYA,CAAC9C,KAAK,EAAE;IAChB,IAAI,CAAC5D,KAAK,CAACmD,SAAS,GAAGS,KAAK;EAChC;EACA;AACJ;AACA;EACI+C,SAASA,CAACC,OAAO,EAAE;IACf,IAAI,CAAC5G,KAAK,CAACoD,MAAM,GAAGwD,OAAO;EAC/B;EACA;AACJ;AACA;EACIC,cAAcA,CAACjD,KAAK,EAAE;IAClB,IAAI,CAAC5D,KAAK,CAACqD,WAAW,GAAGO,KAAK,aAALA,KAAK,cAALA,KAAK,GAAIvE,IAAI;EAC1C;EACA;AACJ;AACA;EACIyH,cAAcA,CAAClD,KAAK,EAAE;IAClB,IAAI,CAAC5D,KAAK,CAACsD,WAAW,GAAGM,KAAK;EAClC;EACA;AACJ;AACA;EACImD,eAAeA,CAACxF,EAAE,EAAEE,EAAE,EAAE;IACpB,IAAI,CAACzB,KAAK,CAACuD,QAAQ,GAAGhC,EAAE;IACxB,IAAI,CAACvB,KAAK,CAACwD,QAAQ,GAAG/B,EAAE;EAC5B;EACA;AACJ;AACA;EACIuF,KAAKA,CAAA,EAAG;IACJ,IAAI,CAAC3G,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACH,IAAI,GAAG,EAAE;EAClB;EACA;AACJ;AACA;EACI8G,MAAMA,CAACjD,CAAC,EAAEC,CAAC,EAAE;IACT,IAAI,CAACnD,KAAK,CAAC,IAAI,CAACP,MAAM,EAAEyD,CAAC,EAAEC,CAAC,CAAC;EACjC;EACA;AACJ;AACA;EACIiD,MAAMA,CAAClD,CAAC,EAAEC,CAAC,EAAE;IACT,IAAI,CAACnD,KAAK,CAAC,IAAI,CAACN,MAAM,EAAEwD,CAAC,EAAEC,CAAC,CAAC;EACjC;EACA;AACJ;AACA;EACIkD,MAAMA,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACnB,IAAI,CAACzG,KAAK,CAAC,IAAI,CAACL,MAAM,EAAE2G,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC;EAC3C;EACA;AACJ;AACA;EACIC,OAAOA,CAACJ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAEC,EAAE,EAAE;IAC5B,IAAI,CAAC5G,KAAK,CAAC,IAAI,CAACJ,OAAO,EAAE0G,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAEC,EAAE,CAAC;EACpD;EACA;AACJ;AACA;AACA;EACIC,KAAKA,CAACC,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,YAAY,EAAEC,SAAS,EAAEhE,CAAC,EAAEC,CAAC,EAAE;IAChD,MAAMgE,MAAM,GAAGjJ,WAAW,CAAC,IAAI,CAACqB,KAAK,EAAE,IAAI,CAACC,KAAK,EAAEsH,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,YAAY,EAAEC,SAAS,EAAEhE,CAAC,EAAEC,CAAC,CAAC;IAChG,IAAIgE,MAAM,IAAI,IAAI,EAAE;MAChB,KAAK,IAAI7G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6G,MAAM,CAAC/G,MAAM,EAAEE,CAAC,IAAI,CAAC,EAAE;QACvC,IAAI,CAACoG,OAAO,CAACS,MAAM,CAAC7G,CAAC,CAAC,EAAE6G,MAAM,CAAC7G,CAAC,GAAG,CAAC,CAAC,EAAE6G,MAAM,CAAC7G,CAAC,GAAG,CAAC,CAAC,EAAE6G,MAAM,CAAC7G,CAAC,GAAG,CAAC,CAAC,EAAE6G,MAAM,CAAC7G,CAAC,GAAG,CAAC,CAAC,EAAE6G,MAAM,CAAC7G,CAAC,GAAG,CAAC,CAAC,CAAC;MACtG;IACJ;EACJ;EACA;AACJ;AACA;EACI8G,KAAKA,CAACd,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEE,EAAE,EAAEC,EAAE,EAAE;IAC1B,IAAI,CAAC5G,KAAK,CAAC,IAAI,CAACH,OAAO,CAAC;EAC5B;AACJ;AACA,eAAed,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
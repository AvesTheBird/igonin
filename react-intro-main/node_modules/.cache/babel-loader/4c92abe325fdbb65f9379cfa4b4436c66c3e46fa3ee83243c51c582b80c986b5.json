{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { LINE_ARCSIZE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement a polyline (a line with multiple points).\n * This shape is registered under {@link Constants#SHAPE_POLYLINE} in\n * {@link CellRenderer}.\n *\n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n *\n * @param points Array of <Point> that define the points. This is stored in\n * {@link Shape#points}.\n * @param stroke String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * @param strokewidth Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nclass PolylineShape extends Shape {\n  constructor(points, stroke) {\n    let strokeWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    super();\n    this.points = points;\n    this.stroke = stroke;\n    this.strokeWidth = strokeWidth;\n  }\n  /**\n   * Returns 0.\n   */\n  getRotation() {\n    return 0;\n  }\n  /**\n   * Returns 0.\n   */\n  getShapeRotation() {\n    return 0;\n  }\n  /**\n   * Returns false.\n   */\n  isPaintBoundsInverted() {\n    return false;\n  }\n  /**\n   * Paints the line shape.\n   */\n  paintEdgeShape(c, pts) {\n    const prev = c.pointerEventsValue;\n    c.pointerEventsValue = 'stroke';\n    if (!this.style || !this.style.curved) {\n      this.paintLine(c, pts, this.isRounded);\n    } else {\n      this.paintCurvedLine(c, pts);\n    }\n    c.pointerEventsValue = prev;\n  }\n  /**\n   * Paints the line shape.\n   */\n  paintLine(c, pts, rounded) {\n    var _this$style$arcSize, _this$style;\n    const arcSize = (_this$style$arcSize = (_this$style = this.style) === null || _this$style === void 0 ? void 0 : _this$style.arcSize) !== null && _this$style$arcSize !== void 0 ? _this$style$arcSize : LINE_ARCSIZE;\n    c.begin();\n    this.addPoints(c, pts, rounded, arcSize, false);\n    c.stroke();\n  }\n  /**\n   * Paints the line shape.\n   */\n  paintCurvedLine(c, pts) {\n    c.begin();\n    const pt = pts[0];\n    const n = pts.length;\n    c.moveTo(pt.x, pt.y);\n    for (let i = 1; i < n - 2; i += 1) {\n      const p0 = pts[i];\n      const p1 = pts[i + 1];\n      const ix = (p0.x + p1.x) / 2;\n      const iy = (p0.y + p1.y) / 2;\n      c.quadTo(p0.x, p0.y, ix, iy);\n    }\n    const p0 = pts[n - 2];\n    const p1 = pts[n - 1];\n    c.quadTo(p0.x, p0.y, p1.x, p1.y);\n    c.stroke();\n  }\n}\nexport default PolylineShape;","map":{"version":3,"names":["Shape","LINE_ARCSIZE","PolylineShape","constructor","points","stroke","strokeWidth","arguments","length","undefined","getRotation","getShapeRotation","isPaintBoundsInverted","paintEdgeShape","c","pts","prev","pointerEventsValue","style","curved","paintLine","isRounded","paintCurvedLine","rounded","_this$style$arcSize","_this$style","arcSize","begin","addPoints","pt","n","moveTo","x","y","i","p0","p1","ix","iy","quadTo"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/view/geometry/edge/PolylineShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { LINE_ARCSIZE } from '../../../util/Constants';\n/**\n * Extends {@link Shape} to implement a polyline (a line with multiple points).\n * This shape is registered under {@link Constants#SHAPE_POLYLINE} in\n * {@link CellRenderer}.\n *\n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n *\n * @param points Array of <Point> that define the points. This is stored in\n * {@link Shape#points}.\n * @param stroke String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * @param strokewidth Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nclass PolylineShape extends Shape {\n    constructor(points, stroke, strokeWidth = 1) {\n        super();\n        this.points = points;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n    }\n    /**\n     * Returns 0.\n     */\n    getRotation() {\n        return 0;\n    }\n    /**\n     * Returns 0.\n     */\n    getShapeRotation() {\n        return 0;\n    }\n    /**\n     * Returns false.\n     */\n    isPaintBoundsInverted() {\n        return false;\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintEdgeShape(c, pts) {\n        const prev = c.pointerEventsValue;\n        c.pointerEventsValue = 'stroke';\n        if (!this.style || !this.style.curved) {\n            this.paintLine(c, pts, this.isRounded);\n        }\n        else {\n            this.paintCurvedLine(c, pts);\n        }\n        c.pointerEventsValue = prev;\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintLine(c, pts, rounded) {\n        const arcSize = this.style?.arcSize ?? LINE_ARCSIZE;\n        c.begin();\n        this.addPoints(c, pts, rounded, arcSize, false);\n        c.stroke();\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintCurvedLine(c, pts) {\n        c.begin();\n        const pt = pts[0];\n        const n = pts.length;\n        c.moveTo(pt.x, pt.y);\n        for (let i = 1; i < n - 2; i += 1) {\n            const p0 = pts[i];\n            const p1 = pts[i + 1];\n            const ix = (p0.x + p1.x) / 2;\n            const iy = (p0.y + p1.y) / 2;\n            c.quadTo(p0.x, p0.y, ix, iy);\n        }\n        const p0 = pts[n - 2];\n        const p1 = pts[n - 1];\n        c.quadTo(p0.x, p0.y, p1.x, p1.y);\n        c.stroke();\n    }\n}\nexport default PolylineShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
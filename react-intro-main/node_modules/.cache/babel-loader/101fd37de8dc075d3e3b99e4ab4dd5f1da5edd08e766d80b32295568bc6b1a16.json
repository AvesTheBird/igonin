{"ast":null,"code":"var _DropIntoEditorController;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar DropIntoEditorController_1;\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { VSDataTransfer, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { toExternalVSDataTransfer } from '../../../browser/dnd.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { DraggedTreeItemsIdentifier } from '../../../common/services/treeViewsDnd.js';\nimport { ITreeViewsDnDService } from '../../../common/services/treeViewsDndService.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { LocalSelectionTransfer } from '../../../../platform/dnd/browser/dnd.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { sortEditsByYieldTo } from './edit.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nexport const defaultProviderConfig = 'editor.experimental.dropIntoEditor.defaultProvider';\nexport const changeDropTypeCommandId = 'editor.changeDropType';\nexport const dropWidgetVisibleCtx = new RawContextKey('dropWidgetVisible', false, localize('dropWidgetVisible', \"Whether the drop widget is showing\"));\nlet DropIntoEditorController = (_DropIntoEditorController = class DropIntoEditorController extends Disposable {\n  static get(editor) {\n    return editor.getContribution(DropIntoEditorController_1.ID);\n  }\n  constructor(editor, instantiationService, _configService, _languageFeaturesService, _treeViewsDragAndDropService) {\n    super();\n    this._configService = _configService;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._treeViewsDragAndDropService = _treeViewsDragAndDropService;\n    this.treeItemsTransfer = LocalSelectionTransfer.getInstance();\n    this._dropProgressManager = this._register(instantiationService.createInstance(InlineProgressManager, 'dropIntoEditor', editor));\n    this._postDropWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'dropIntoEditor', editor, dropWidgetVisibleCtx, {\n      id: changeDropTypeCommandId,\n      label: localize('postDropWidgetTitle', \"Show drop options...\")\n    }));\n    this._register(editor.onDropIntoEditor(e => this.onDropIntoEditor(editor, e.position, e.event)));\n  }\n  clearWidgets() {\n    this._postDropWidgetManager.clear();\n  }\n  changeDropType() {\n    this._postDropWidgetManager.tryShowSelector();\n  }\n  async onDropIntoEditor(editor, position, dragEvent) {\n    var _this$_currentOperati;\n    if (!dragEvent.dataTransfer || !editor.hasModel()) {\n      return;\n    }\n    (_this$_currentOperati = this._currentOperation) === null || _this$_currentOperati === void 0 || _this$_currentOperati.cancel();\n    editor.focus();\n    editor.setPosition(position);\n    const p = createCancelablePromise(async token => {\n      const disposables = new DisposableStore();\n      const tokenSource = disposables.add(new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */, undefined, token));\n      try {\n        const ourDataTransfer = await this.extractDataTransferData(dragEvent);\n        if (ourDataTransfer.size === 0 || tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        const model = editor.getModel();\n        if (!model) {\n          return;\n        }\n        const providers = this._languageFeaturesService.documentDropEditProvider.ordered(model).filter(provider => {\n          if (!provider.dropMimeTypes) {\n            // Keep all providers that don't specify mime types\n            return true;\n          }\n          return provider.dropMimeTypes.some(mime => ourDataTransfer.matches(mime));\n        });\n        const editSession = disposables.add(await this.getDropEdits(providers, model, position, ourDataTransfer, tokenSource));\n        if (tokenSource.token.isCancellationRequested) {\n          return;\n        }\n        if (editSession.edits.length) {\n          const activeEditIndex = this.getInitialActiveEditIndex(model, editSession.edits);\n          const canShowWidget = editor.getOption(36 /* EditorOption.dropIntoEditor */).showDropSelector === 'afterDrop';\n          // Pass in the parent token here as it tracks cancelling the entire drop operation\n          await this._postDropWidgetManager.applyEditAndShowIfNeeded([Range.fromPositions(position)], {\n            activeEditIndex,\n            allEdits: editSession.edits\n          }, canShowWidget, async edit => edit, token);\n        }\n      } finally {\n        disposables.dispose();\n        if (this._currentOperation === p) {\n          this._currentOperation = undefined;\n        }\n      }\n    });\n    this._dropProgressManager.showWhile(position, localize('dropIntoEditorProgress', \"Running drop handlers. Click to cancel\"), p, {\n      cancel: () => p.cancel()\n    });\n    this._currentOperation = p;\n  }\n  async getDropEdits(providers, model, position, dataTransfer, tokenSource) {\n    const disposables = new DisposableStore();\n    const results = await raceCancellation(Promise.all(providers.map(async provider => {\n      try {\n        const edits = await provider.provideDocumentDropEdits(model, position, dataTransfer, tokenSource.token);\n        if (edits) {\n          disposables.add(edits);\n        }\n        return edits === null || edits === void 0 ? void 0 : edits.edits.map(edit => ({\n          ...edit,\n          providerId: provider.id\n        }));\n      } catch (err) {\n        console.error(err);\n      }\n      return undefined;\n    })), tokenSource.token);\n    const edits = coalesce(results !== null && results !== void 0 ? results : []).flat();\n    return {\n      edits: sortEditsByYieldTo(edits),\n      dispose: () => disposables.dispose()\n    };\n  }\n  getInitialActiveEditIndex(model, edits) {\n    const preferredProviders = this._configService.getValue(defaultProviderConfig, {\n      resource: model.uri\n    });\n    for (const [configMime, desiredKindStr] of Object.entries(preferredProviders)) {\n      const desiredKind = new HierarchicalKind(desiredKindStr);\n      const editIndex = edits.findIndex(edit => desiredKind.value === edit.providerId && edit.handledMimeType && matchesMimeType(configMime, [edit.handledMimeType]));\n      if (editIndex >= 0) {\n        return editIndex;\n      }\n    }\n    return 0;\n  }\n  async extractDataTransferData(dragEvent) {\n    if (!dragEvent.dataTransfer) {\n      return new VSDataTransfer();\n    }\n    const dataTransfer = toExternalVSDataTransfer(dragEvent.dataTransfer);\n    if (this.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)) {\n      const data = this.treeItemsTransfer.getData(DraggedTreeItemsIdentifier.prototype);\n      if (Array.isArray(data)) {\n        for (const id of data) {\n          const treeDataTransfer = await this._treeViewsDragAndDropService.removeDragOperationTransfer(id.identifier);\n          if (treeDataTransfer) {\n            for (const [type, value] of treeDataTransfer) {\n              dataTransfer.replace(type, value);\n            }\n          }\n        }\n      }\n    }\n    return dataTransfer;\n  }\n}, DropIntoEditorController_1 = _DropIntoEditorController, _DropIntoEditorController.ID = 'editor.contrib.dropIntoEditorController', _DropIntoEditorController);\nDropIntoEditorController = DropIntoEditorController_1 = __decorate([__param(1, IInstantiationService), __param(2, IConfigurationService), __param(3, ILanguageFeaturesService), __param(4, ITreeViewsDnDService)], DropIntoEditorController);\nexport { DropIntoEditorController };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","DropIntoEditorController_1","coalesce","createCancelablePromise","raceCancellation","VSDataTransfer","matchesMimeType","HierarchicalKind","Disposable","DisposableStore","toExternalVSDataTransfer","Range","ILanguageFeaturesService","DraggedTreeItemsIdentifier","ITreeViewsDnDService","EditorStateCancellationTokenSource","InlineProgressManager","localize","IConfigurationService","RawContextKey","LocalSelectionTransfer","IInstantiationService","sortEditsByYieldTo","PostEditWidgetManager","defaultProviderConfig","changeDropTypeCommandId","dropWidgetVisibleCtx","DropIntoEditorController","_DropIntoEditorController","get","editor","getContribution","ID","constructor","instantiationService","_configService","_languageFeaturesService","_treeViewsDragAndDropService","treeItemsTransfer","getInstance","_dropProgressManager","_register","createInstance","_postDropWidgetManager","id","label","onDropIntoEditor","e","position","event","clearWidgets","clear","changeDropType","tryShowSelector","dragEvent","_this$_currentOperati","dataTransfer","hasModel","_currentOperation","cancel","focus","setPosition","p","token","disposables","tokenSource","add","undefined","ourDataTransfer","extractDataTransferData","size","isCancellationRequested","model","getModel","providers","documentDropEditProvider","ordered","filter","provider","dropMimeTypes","some","mime","matches","editSession","getDropEdits","edits","activeEditIndex","getInitialActiveEditIndex","canShowWidget","getOption","showDropSelector","applyEditAndShowIfNeeded","fromPositions","allEdits","edit","dispose","showWhile","results","Promise","all","map","provideDocumentDropEdits","providerId","err","console","error","flat","preferredProviders","getValue","resource","uri","configMime","desiredKindStr","entries","desiredKind","editIndex","findIndex","value","handledMimeType","hasData","prototype","data","getData","Array","isArray","treeDataTransfer","removeDragOperationTransfer","identifier","type","replace"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar DropIntoEditorController_1;\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { VSDataTransfer, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { toExternalVSDataTransfer } from '../../../browser/dnd.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { DraggedTreeItemsIdentifier } from '../../../common/services/treeViewsDnd.js';\nimport { ITreeViewsDnDService } from '../../../common/services/treeViewsDndService.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { localize } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { LocalSelectionTransfer } from '../../../../platform/dnd/browser/dnd.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { sortEditsByYieldTo } from './edit.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nexport const defaultProviderConfig = 'editor.experimental.dropIntoEditor.defaultProvider';\nexport const changeDropTypeCommandId = 'editor.changeDropType';\nexport const dropWidgetVisibleCtx = new RawContextKey('dropWidgetVisible', false, localize('dropWidgetVisible', \"Whether the drop widget is showing\"));\nlet DropIntoEditorController = class DropIntoEditorController extends Disposable {\n    static { DropIntoEditorController_1 = this; }\n    static { this.ID = 'editor.contrib.dropIntoEditorController'; }\n    static get(editor) {\n        return editor.getContribution(DropIntoEditorController_1.ID);\n    }\n    constructor(editor, instantiationService, _configService, _languageFeaturesService, _treeViewsDragAndDropService) {\n        super();\n        this._configService = _configService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._treeViewsDragAndDropService = _treeViewsDragAndDropService;\n        this.treeItemsTransfer = LocalSelectionTransfer.getInstance();\n        this._dropProgressManager = this._register(instantiationService.createInstance(InlineProgressManager, 'dropIntoEditor', editor));\n        this._postDropWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'dropIntoEditor', editor, dropWidgetVisibleCtx, { id: changeDropTypeCommandId, label: localize('postDropWidgetTitle', \"Show drop options...\") }));\n        this._register(editor.onDropIntoEditor(e => this.onDropIntoEditor(editor, e.position, e.event)));\n    }\n    clearWidgets() {\n        this._postDropWidgetManager.clear();\n    }\n    changeDropType() {\n        this._postDropWidgetManager.tryShowSelector();\n    }\n    async onDropIntoEditor(editor, position, dragEvent) {\n        if (!dragEvent.dataTransfer || !editor.hasModel()) {\n            return;\n        }\n        this._currentOperation?.cancel();\n        editor.focus();\n        editor.setPosition(position);\n        const p = createCancelablePromise(async (token) => {\n            const disposables = new DisposableStore();\n            const tokenSource = disposables.add(new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */, undefined, token));\n            try {\n                const ourDataTransfer = await this.extractDataTransferData(dragEvent);\n                if (ourDataTransfer.size === 0 || tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                const model = editor.getModel();\n                if (!model) {\n                    return;\n                }\n                const providers = this._languageFeaturesService.documentDropEditProvider\n                    .ordered(model)\n                    .filter(provider => {\n                    if (!provider.dropMimeTypes) {\n                        // Keep all providers that don't specify mime types\n                        return true;\n                    }\n                    return provider.dropMimeTypes.some(mime => ourDataTransfer.matches(mime));\n                });\n                const editSession = disposables.add(await this.getDropEdits(providers, model, position, ourDataTransfer, tokenSource));\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                if (editSession.edits.length) {\n                    const activeEditIndex = this.getInitialActiveEditIndex(model, editSession.edits);\n                    const canShowWidget = editor.getOption(36 /* EditorOption.dropIntoEditor */).showDropSelector === 'afterDrop';\n                    // Pass in the parent token here as it tracks cancelling the entire drop operation\n                    await this._postDropWidgetManager.applyEditAndShowIfNeeded([Range.fromPositions(position)], { activeEditIndex, allEdits: editSession.edits }, canShowWidget, async (edit) => edit, token);\n                }\n            }\n            finally {\n                disposables.dispose();\n                if (this._currentOperation === p) {\n                    this._currentOperation = undefined;\n                }\n            }\n        });\n        this._dropProgressManager.showWhile(position, localize('dropIntoEditorProgress', \"Running drop handlers. Click to cancel\"), p, { cancel: () => p.cancel() });\n        this._currentOperation = p;\n    }\n    async getDropEdits(providers, model, position, dataTransfer, tokenSource) {\n        const disposables = new DisposableStore();\n        const results = await raceCancellation(Promise.all(providers.map(async (provider) => {\n            try {\n                const edits = await provider.provideDocumentDropEdits(model, position, dataTransfer, tokenSource.token);\n                if (edits) {\n                    disposables.add(edits);\n                }\n                return edits?.edits.map(edit => ({ ...edit, providerId: provider.id }));\n            }\n            catch (err) {\n                console.error(err);\n            }\n            return undefined;\n        })), tokenSource.token);\n        const edits = coalesce(results ?? []).flat();\n        return {\n            edits: sortEditsByYieldTo(edits),\n            dispose: () => disposables.dispose()\n        };\n    }\n    getInitialActiveEditIndex(model, edits) {\n        const preferredProviders = this._configService.getValue(defaultProviderConfig, { resource: model.uri });\n        for (const [configMime, desiredKindStr] of Object.entries(preferredProviders)) {\n            const desiredKind = new HierarchicalKind(desiredKindStr);\n            const editIndex = edits.findIndex(edit => desiredKind.value === edit.providerId\n                && edit.handledMimeType && matchesMimeType(configMime, [edit.handledMimeType]));\n            if (editIndex >= 0) {\n                return editIndex;\n            }\n        }\n        return 0;\n    }\n    async extractDataTransferData(dragEvent) {\n        if (!dragEvent.dataTransfer) {\n            return new VSDataTransfer();\n        }\n        const dataTransfer = toExternalVSDataTransfer(dragEvent.dataTransfer);\n        if (this.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)) {\n            const data = this.treeItemsTransfer.getData(DraggedTreeItemsIdentifier.prototype);\n            if (Array.isArray(data)) {\n                for (const id of data) {\n                    const treeDataTransfer = await this._treeViewsDragAndDropService.removeDragOperationTransfer(id.identifier);\n                    if (treeDataTransfer) {\n                        for (const [type, value] of treeDataTransfer) {\n                            dataTransfer.replace(type, value);\n                        }\n                    }\n                }\n            }\n        }\n        return dataTransfer;\n    }\n};\nDropIntoEditorController = DropIntoEditorController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IConfigurationService),\n    __param(3, ILanguageFeaturesService),\n    __param(4, ITreeViewsDnDService)\n], DropIntoEditorController);\nexport { DropIntoEditorController };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\n/**\n * Scales an array of {@link Point}\n *\n * @param points array of {@link Point} to scale\n * @param scale the scaling to divide by\n */\nexport function scalePointArray(points, scale) {\n  let result = [];\n  if (points != null) {\n    for (let i = 0; i < points.length; i += 1) {\n      if (points[i] != null) {\n        result[i] = new Point(Math.round(points[i].x / scale * 10) / 10, Math.round(points[i].y / scale * 10) / 10);\n      } else {\n        result[i] = null;\n      }\n    }\n  } else {\n    result = null;\n  }\n  return result;\n}\n/**\n * Scales an {@link CellState}.\n *\n * @param state {@link CellState} to scale\n * @param scale the scaling to divide by\n */\nexport function scaleCellState(state, scale) {\n  let result = null;\n  if (state != null) {\n    result = state.clone();\n    result.setRect(Math.round(state.x / scale * 10) / 10, Math.round(state.y / scale * 10) / 10, Math.round(state.width / scale * 10) / 10, Math.round(state.height / scale * 10) / 10);\n  }\n  return result;\n}","map":{"version":3,"names":["Point","scalePointArray","points","scale","result","i","length","Math","round","x","y","scaleCellState","state","clone","setRect","width","height"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/style/edge/shared.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\n/**\n * Scales an array of {@link Point}\n *\n * @param points array of {@link Point} to scale\n * @param scale the scaling to divide by\n */\nexport function scalePointArray(points, scale) {\n    let result = [];\n    if (points != null) {\n        for (let i = 0; i < points.length; i += 1) {\n            if (points[i] != null) {\n                result[i] = new Point(Math.round((points[i].x / scale) * 10) / 10, Math.round((points[i].y / scale) * 10) / 10);\n            }\n            else {\n                result[i] = null;\n            }\n        }\n    }\n    else {\n        result = null;\n    }\n    return result;\n}\n/**\n * Scales an {@link CellState}.\n *\n * @param state {@link CellState} to scale\n * @param scale the scaling to divide by\n */\nexport function scaleCellState(state, scale) {\n    let result = null;\n    if (state != null) {\n        result = state.clone();\n        result.setRect(Math.round((state.x / scale) * 10) / 10, Math.round((state.y / scale) * 10) / 10, Math.round((state.width / scale) * 10) / 10, Math.round((state.height / scale) * 10) / 10);\n    }\n    return result;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,sBAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAC3C,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIF,MAAM,IAAI,IAAI,EAAE;IAChB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACvC,IAAIH,MAAM,CAACG,CAAC,CAAC,IAAI,IAAI,EAAE;QACnBD,MAAM,CAACC,CAAC,CAAC,GAAG,IAAIL,KAAK,CAACO,IAAI,CAACC,KAAK,CAAEN,MAAM,CAACG,CAAC,CAAC,CAACI,CAAC,GAAGN,KAAK,GAAI,EAAE,CAAC,GAAG,EAAE,EAAEI,IAAI,CAACC,KAAK,CAAEN,MAAM,CAACG,CAAC,CAAC,CAACK,CAAC,GAAGP,KAAK,GAAI,EAAE,CAAC,GAAG,EAAE,CAAC;MACnH,CAAC,MACI;QACDC,MAAM,CAACC,CAAC,CAAC,GAAG,IAAI;MACpB;IACJ;EACJ,CAAC,MACI;IACDD,MAAM,GAAG,IAAI;EACjB;EACA,OAAOA,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,cAAcA,CAACC,KAAK,EAAET,KAAK,EAAE;EACzC,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAIQ,KAAK,IAAI,IAAI,EAAE;IACfR,MAAM,GAAGQ,KAAK,CAACC,KAAK,CAAC,CAAC;IACtBT,MAAM,CAACU,OAAO,CAACP,IAAI,CAACC,KAAK,CAAEI,KAAK,CAACH,CAAC,GAAGN,KAAK,GAAI,EAAE,CAAC,GAAG,EAAE,EAAEI,IAAI,CAACC,KAAK,CAAEI,KAAK,CAACF,CAAC,GAAGP,KAAK,GAAI,EAAE,CAAC,GAAG,EAAE,EAAEI,IAAI,CAACC,KAAK,CAAEI,KAAK,CAACG,KAAK,GAAGZ,KAAK,GAAI,EAAE,CAAC,GAAG,EAAE,EAAEI,IAAI,CAACC,KAAK,CAAEI,KAAK,CAACI,MAAM,GAAGb,KAAK,GAAI,EAAE,CAAC,GAAG,EAAE,CAAC;EAC/L;EACA,OAAOC,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CodecRegistry from './CodecRegistry';\nimport { CellCodec, ChildChangeCodec, EditorCodec, EditorKeyHandlerCodec, EditorPopupMenuCodec, EditorToolbarCodec, GenericChangeCodec, GraphViewCodec, ModelCodec, mxCellCodec, mxGeometryCodec, RootChangeCodec, StylesheetCodec, TerminalChangeCodec } from './codecs';\nimport ObjectCodec from './ObjectCodec';\nimport Geometry from '../view/geometry/Geometry';\nimport Point from '../view/geometry/Point';\nimport CellAttributeChange from '../view/undoable_changes/CellAttributeChange';\nimport CollapseChange from '../view/undoable_changes/CollapseChange';\nimport GeometryChange from '../view/undoable_changes/GeometryChange';\nimport StyleChange from '../view/undoable_changes/StyleChange';\nimport ValueChange from '../view/undoable_changes/ValueChange';\nimport VisibleChange from '../view/undoable_changes/VisibleChange';\nconst registerGenericChangeCodecs = () => {\n  const __dummy = undefined;\n  CodecRegistry.register(new GenericChangeCodec(new CellAttributeChange(__dummy, __dummy, __dummy), 'value'));\n  CodecRegistry.register(new GenericChangeCodec(new CollapseChange(__dummy, __dummy, __dummy), 'collapsed'));\n  CodecRegistry.register(new GenericChangeCodec(new GeometryChange(__dummy, __dummy, __dummy), 'geometry'));\n  CodecRegistry.register(new GenericChangeCodec(new StyleChange(__dummy, __dummy, __dummy), 'style'));\n  CodecRegistry.register(new GenericChangeCodec(new ValueChange(__dummy, __dummy, __dummy), 'value'));\n  CodecRegistry.register(new GenericChangeCodec(new VisibleChange(__dummy, __dummy, __dummy), 'visible'));\n};\nconst createObjectCodec = (template, name) => {\n  const objectCodec = new ObjectCodec(template);\n  objectCodec.setName(name);\n  return objectCodec;\n};\nlet isCoreCodecsRegistered = false;\n/**\n * Register core editor i.e. codecs that don't relate to editor.\n *\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n */\nexport const registerCoreCodecs = (force = false) => {\n  if (!isCoreCodecsRegistered || force) {\n    CodecRegistry.register(new CellCodec());\n    CodecRegistry.register(new ChildChangeCodec());\n    CodecRegistry.register(new GraphViewCodec());\n    CodecRegistry.register(new ModelCodec());\n    CodecRegistry.register(new RootChangeCodec());\n    CodecRegistry.register(new StylesheetCodec());\n    CodecRegistry.register(new TerminalChangeCodec());\n    registerGenericChangeCodecs();\n    // To support decode/import executed before encode/export (see https://github.com/maxGraph/maxGraph/issues/178)\n    // Codecs are currently only registered automatically during encode/export\n    // in js-example, project built with webpack\n    // the name of the Geometry constructor is sometimes the same as the name of the Cell constructor\n    // registering an alias here would override the alias for Cell.\n    // Cell is the top level element while encoding, so the Cell alias must be set, otherwise \"Uncaught InternalError: too much recursion\" occurs\n    // But, then, the Geometry elements are not correctly encoded\n    // This hasn't been managed as part of https://github.com/maxGraph/maxGraph/issues/169 which only dealt with the encode/import feature.\n    CodecRegistry.register(createObjectCodec(new Geometry(), 'Geometry'), false);\n    CodecRegistry.register(createObjectCodec(new Point(), 'Point'));\n    CodecRegistry.register(new ObjectCodec({})); // Object\n    CodecRegistry.register(new ObjectCodec([])); // Array\n    // mxGraph support\n    CodecRegistry.addAlias('mxGraphModel', 'GraphDataModel');\n    CodecRegistry.register(new mxCellCodec(), false);\n    CodecRegistry.register(new mxGeometryCodec(), false);\n    isCoreCodecsRegistered = true;\n  }\n};\nlet isEditorCodecsRegistered = false;\n/**\n * Register only editor codecs.\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n */\nexport const registerEditorCodecs = (force = false) => {\n  if (!isEditorCodecsRegistered || force) {\n    CodecRegistry.register(new EditorCodec());\n    CodecRegistry.register(new EditorKeyHandlerCodec());\n    CodecRegistry.register(new EditorPopupMenuCodec());\n    CodecRegistry.register(new EditorToolbarCodec());\n    isEditorCodecsRegistered = true;\n  }\n};\n/**\n * Register all editors i.e. core codecs (as done by {@link registerCoreCodecs}) and editor codecs (as done by {@link registerEditorCodecs}).\n *\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n */\nexport const registerAllCodecs = (force = false) => {\n  registerCoreCodecs(force);\n  registerEditorCodecs(force);\n};","map":{"version":3,"names":["CodecRegistry","CellCodec","ChildChangeCodec","EditorCodec","EditorKeyHandlerCodec","EditorPopupMenuCodec","EditorToolbarCodec","GenericChangeCodec","GraphViewCodec","ModelCodec","mxCellCodec","mxGeometryCodec","RootChangeCodec","StylesheetCodec","TerminalChangeCodec","ObjectCodec","Geometry","Point","CellAttributeChange","CollapseChange","GeometryChange","StyleChange","ValueChange","VisibleChange","registerGenericChangeCodecs","__dummy","undefined","register","createObjectCodec","template","name","objectCodec","setName","isCoreCodecsRegistered","registerCoreCodecs","force","addAlias","isEditorCodecsRegistered","registerEditorCodecs","registerAllCodecs"],"sources":["D:/OSPanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/serialization/register.js"],"sourcesContent":["/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CodecRegistry from './CodecRegistry';\nimport { CellCodec, ChildChangeCodec, EditorCodec, EditorKeyHandlerCodec, EditorPopupMenuCodec, EditorToolbarCodec, GenericChangeCodec, GraphViewCodec, ModelCodec, mxCellCodec, mxGeometryCodec, RootChangeCodec, StylesheetCodec, TerminalChangeCodec, } from './codecs';\nimport ObjectCodec from './ObjectCodec';\nimport Geometry from '../view/geometry/Geometry';\nimport Point from '../view/geometry/Point';\nimport CellAttributeChange from '../view/undoable_changes/CellAttributeChange';\nimport CollapseChange from '../view/undoable_changes/CollapseChange';\nimport GeometryChange from '../view/undoable_changes/GeometryChange';\nimport StyleChange from '../view/undoable_changes/StyleChange';\nimport ValueChange from '../view/undoable_changes/ValueChange';\nimport VisibleChange from '../view/undoable_changes/VisibleChange';\nconst registerGenericChangeCodecs = () => {\n    const __dummy = undefined;\n    CodecRegistry.register(new GenericChangeCodec(new CellAttributeChange(__dummy, __dummy, __dummy), 'value'));\n    CodecRegistry.register(new GenericChangeCodec(new CollapseChange(__dummy, __dummy, __dummy), 'collapsed'));\n    CodecRegistry.register(new GenericChangeCodec(new GeometryChange(__dummy, __dummy, __dummy), 'geometry'));\n    CodecRegistry.register(new GenericChangeCodec(new StyleChange(__dummy, __dummy, __dummy), 'style'));\n    CodecRegistry.register(new GenericChangeCodec(new ValueChange(__dummy, __dummy, __dummy), 'value'));\n    CodecRegistry.register(new GenericChangeCodec(new VisibleChange(__dummy, __dummy, __dummy), 'visible'));\n};\nconst createObjectCodec = (template, name) => {\n    const objectCodec = new ObjectCodec(template);\n    objectCodec.setName(name);\n    return objectCodec;\n};\nlet isCoreCodecsRegistered = false;\n/**\n * Register core editor i.e. codecs that don't relate to editor.\n *\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n */\nexport const registerCoreCodecs = (force = false) => {\n    if (!isCoreCodecsRegistered || force) {\n        CodecRegistry.register(new CellCodec());\n        CodecRegistry.register(new ChildChangeCodec());\n        CodecRegistry.register(new GraphViewCodec());\n        CodecRegistry.register(new ModelCodec());\n        CodecRegistry.register(new RootChangeCodec());\n        CodecRegistry.register(new StylesheetCodec());\n        CodecRegistry.register(new TerminalChangeCodec());\n        registerGenericChangeCodecs();\n        // To support decode/import executed before encode/export (see https://github.com/maxGraph/maxGraph/issues/178)\n        // Codecs are currently only registered automatically during encode/export\n        // in js-example, project built with webpack\n        // the name of the Geometry constructor is sometimes the same as the name of the Cell constructor\n        // registering an alias here would override the alias for Cell.\n        // Cell is the top level element while encoding, so the Cell alias must be set, otherwise \"Uncaught InternalError: too much recursion\" occurs\n        // But, then, the Geometry elements are not correctly encoded\n        // This hasn't been managed as part of https://github.com/maxGraph/maxGraph/issues/169 which only dealt with the encode/import feature.\n        CodecRegistry.register(createObjectCodec(new Geometry(), 'Geometry'), false);\n        CodecRegistry.register(createObjectCodec(new Point(), 'Point'));\n        CodecRegistry.register(new ObjectCodec({})); // Object\n        CodecRegistry.register(new ObjectCodec([])); // Array\n        // mxGraph support\n        CodecRegistry.addAlias('mxGraphModel', 'GraphDataModel');\n        CodecRegistry.register(new mxCellCodec(), false);\n        CodecRegistry.register(new mxGeometryCodec(), false);\n        isCoreCodecsRegistered = true;\n    }\n};\nlet isEditorCodecsRegistered = false;\n/**\n * Register only editor codecs.\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n */\nexport const registerEditorCodecs = (force = false) => {\n    if (!isEditorCodecsRegistered || force) {\n        CodecRegistry.register(new EditorCodec());\n        CodecRegistry.register(new EditorKeyHandlerCodec());\n        CodecRegistry.register(new EditorPopupMenuCodec());\n        CodecRegistry.register(new EditorToolbarCodec());\n        isEditorCodecsRegistered = true;\n    }\n};\n/**\n * Register all editors i.e. core codecs (as done by {@link registerCoreCodecs}) and editor codecs (as done by {@link registerEditorCodecs}).\n *\n * @param force if `true` register the codecs even if they were already registered. If false, only register them\n *              if they have never been registered before.\n * @since 0.6.0\n */\nexport const registerAllCodecs = (force = false) => {\n    registerCoreCodecs(force);\n    registerEditorCodecs(force);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
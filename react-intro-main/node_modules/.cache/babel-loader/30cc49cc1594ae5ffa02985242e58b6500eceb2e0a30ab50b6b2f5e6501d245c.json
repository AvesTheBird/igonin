{"ast":null,"code":"var _jsxFileName = \"D:\\\\OSPanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditorWithCompiler = () => {\n  _s();\n  const [architectureCode, setArchitectureCode] = useState(`...`);\n  const [testbenchCode, setTestbenchCode] = useState(`...`);\n  const [output, setOutput] = useState('');\n  const compileCode = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          architectureCode,\n          testbenchCode\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Ошибка: ${response.statusText}`);\n      }\n      const result = await response.text();\n      setOutput(result);\n    } catch (error) {\n      setOutput('Ошибка компиляции: ' + error.message);\n    }\n  };\n  const downloadVCD = () => {\n    const link = document.createElement('a');\n    link.href = 'http://localhost:5000/download-vcd';\n    link.download = 'out.vcd';\n    link.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content-container\",\n    className: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"architecture-editor\",\n      onCodeChange: setArchitectureCode,\n      initialCode: architectureCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"testbench-editor\",\n      onCodeChange: setTestbenchCode,\n      initialCode: testbenchCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompilerConsole, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: compileCode,\n        children: \"\\u041A\\u043E\\u043C\\u043F\\u0438\\u043B\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadVCD,\n        children: \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C VCD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(VHDLEditorWithCompiler, \"eZWKx/q+TgQ7qYfFD2+F+wuqi0Q=\");\n_c = VHDLEditorWithCompiler;\nvar _c;\n$RefreshReg$(_c, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["VHDLEditorWithCompiler","_s","architectureCode","setArchitectureCode","useState","testbenchCode","setTestbenchCode","output","setOutput","compileCode","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","result","text","error","message","downloadVCD","link","document","createElement","href","download","click","_jsxDEV","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","VHDLEditor","onCodeChange","initialCode","CompilerConsole","onClick","_c","$RefreshReg$"],"sources":["D:/OSPanel/domains/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["const VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = useState(`...`);\r\n  const [testbenchCode, setTestbenchCode] = useState(`...`);\r\n  const [output, setOutput] = useState('');\r\n\r\n  const compileCode = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ architectureCode, testbenchCode }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Ошибка: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.text();\r\n      setOutput(result);\r\n    } catch (error) {\r\n      setOutput('Ошибка компиляции: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const downloadVCD = () => {\r\n    const link = document.createElement('a');\r\n    link.href = 'http://localhost:5000/download-vcd';\r\n    link.download = 'out.vcd';\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <div id=\"content-container\" className=\"content-container\">\r\n      <h3>Архитектура:</h3>\r\n      <VHDLEditor\r\n        id=\"architecture-editor\"\r\n        onCodeChange={setArchitectureCode}\r\n        initialCode={architectureCode}\r\n      />\r\n\r\n      <h3>Тестовый стенд:</h3>\r\n      <VHDLEditor\r\n        id=\"testbench-editor\"\r\n        onCodeChange={setTestbenchCode}\r\n        initialCode={testbenchCode}\r\n      />\r\n\r\n      <CompilerConsole output={output} />\r\n\r\n      <div>\r\n        <button onClick={compileCode}>Компилировать</button>\r\n        <button onClick={downloadVCD}>Скачать VCD</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
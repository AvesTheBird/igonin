{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport { hasScrollbars } from '../../util/styleUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { isConsumed, isControlDown, isLeftMouseButton, isMultiTouchEvent, isPopupTrigger, isShiftDown } from '../../util/EventUtils';\nimport PanningManager from '../other/PanningManager';\n/**\n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * {@link Graph#panningHandler} and enabled using {@link Graph#setPanning}.\n *\n * Constructor: mxPanningHandler\n *\n * Constructs an event handler that creates a {@link PopupMenu}\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding {@link MouseEvent}.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding {@link MouseEvent}.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding {@link MouseEvent}.\n */\nclass PanningHandler extends EventSource {\n  constructor(graph) {\n    super();\n    this.getPanningManager = () => this.panningManager;\n    /**\n     * Specifies if panning should be active for the left mouse button.\n     * Setting this to true may conflict with {@link Rubberband}. Default is false.\n     */\n    this.useLeftButtonForPanning = false;\n    /**\n     * Specifies if {@link Event#isPopupTrigger} should also be used for panning.\n     */\n    this.usePopupTrigger = true;\n    /**\n     * Specifies if panning should be active even if there is a cell under the\n     * mousepointer. Default is false.\n     */\n    this.ignoreCell = false;\n    /**\n     * Specifies if the panning should be previewed. Default is true.\n     */\n    this.previewEnabled = true;\n    /**\n     * Specifies if the panning steps should be aligned to the grid size.\n     * Default is false.\n     */\n    this.useGrid = false;\n    /**\n     * Specifies if panning should be enabled. Default is false.\n     */\n    this.panningEnabled = false;\n    /**\n     * Specifies if pinch gestures should be handled as zoom. Default is true.\n     */\n    this.pinchEnabled = true;\n    this.initialScale = 0;\n    /**\n     * Specifies the maximum scale. Default is 8.\n     */\n    this.maxScale = 8;\n    /**\n     * Specifies the minimum scale. Default is 0.01.\n     */\n    this.minScale = 0.01;\n    /**\n     * Holds the current horizontal offset.\n     */\n    this.dx = 0;\n    /**\n     * Holds the current vertical offset.\n     */\n    this.dy = 0;\n    /**\n     * Holds the x-coordinate of the start point.\n     */\n    this.startX = 0;\n    /**\n     * Holds the y-coordinate of the start point.\n     */\n    this.startY = 0;\n    this.dx0 = 0;\n    this.dy0 = 0;\n    this.panningTrigger = false;\n    this.active = false;\n    this.mouseDownEvent = null;\n    this.graph = graph;\n    this.graph.addMouseListener(this);\n    // Handles force panning event\n    this.forcePanningHandler = (sender, eo) => {\n      const evtName = eo.getProperty('eventName');\n      const me = eo.getProperty('event');\n      if (evtName === InternalEvent.MOUSE_DOWN && this.isForcePanningEvent(me)) {\n        this.start(me);\n        this.active = true;\n        this.fireEvent(new EventObject(InternalEvent.PAN_START, {\n          event: me\n        }));\n        me.consume();\n      }\n    };\n    this.graph.addListener(InternalEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n    // Handles pinch gestures\n    this.gestureHandler = (sender, eo) => {\n      if (this.isPinchEnabled()) {\n        const evt = eo.getProperty('event');\n        if (!isConsumed(evt) && evt.type === 'gesturestart') {\n          this.initialScale = this.graph.view.scale;\n          // Forces start of panning when pinch gesture starts\n          if (!this.active && this.mouseDownEvent) {\n            this.start(this.mouseDownEvent);\n            this.mouseDownEvent = null;\n          }\n        } else if (evt.type === 'gestureend' && this.initialScale !== 0) {\n          this.initialScale = 0;\n        }\n        if (this.initialScale !== 0) {\n          this.zoomGraph(evt);\n        }\n      }\n    };\n    this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n    this.mouseUpListener = () => {\n      if (this.active) {\n        this.reset();\n      }\n    };\n    // Stops scrolling on every mouseup anywhere in the document\n    InternalEvent.addListener(document, 'mouseup', this.mouseUpListener);\n    this.panningManager = new PanningManager(graph);\n  }\n  /**\n   * Returns true if the handler is currently active.\n   */\n  isActive() {\n    return this.active || this.initialScale !== null;\n  }\n  /**\n   * Returns <panningEnabled>.\n   */\n  isPanningEnabled() {\n    return this.panningEnabled;\n  }\n  /**\n   * Sets <panningEnabled>.\n   */\n  setPanningEnabled(value) {\n    this.panningEnabled = value;\n  }\n  /**\n   * Returns <pinchEnabled>.\n   */\n  isPinchEnabled() {\n    return this.pinchEnabled;\n  }\n  /**\n   * Sets <pinchEnabled>.\n   */\n  setPinchEnabled(value) {\n    this.pinchEnabled = value;\n  }\n  /**\n   * Returns true if the given event is a panning trigger for the optional\n   * given cell. This returns true if control-shift is pressed or if\n   * <usePopupTrigger> is true and the event is a popup trigger.\n   */\n  isPanningTrigger(me) {\n    const evt = me.getEvent();\n    return this.useLeftButtonForPanning && !me.getState() && isLeftMouseButton(evt) || isControlDown(evt) && isShiftDown(evt) || this.usePopupTrigger && isPopupTrigger(evt);\n  }\n  /**\n   * Returns true if the given {@link MouseEvent} should start panning. This\n   * implementation always returns true if <ignoreCell> is true or for\n   * multi touch events.\n   */\n  isForcePanningEvent(me) {\n    return this.ignoreCell || isMultiTouchEvent(me.getEvent());\n  }\n  /**\n   * Handles the event by initiating the panning. By consuming the event all\n   * subsequent events of the gesture are redirected to this handler.\n   */\n  mouseDown(sender, me) {\n    this.mouseDownEvent = me;\n    if (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me)) {\n      this.start(me);\n      this.consumePanningTrigger(me);\n    }\n  }\n  /**\n   * Starts panning at the given event.\n   */\n  start(me) {\n    this.dx0 = -this.graph.container.scrollLeft;\n    this.dy0 = -this.graph.container.scrollTop;\n    // Stores the location of the trigger event\n    this.startX = me.getX();\n    this.startY = me.getY();\n    this.dx = 0;\n    this.dy = 0;\n    this.panningTrigger = true;\n  }\n  /**\n   * Consumes the given {@link MouseEvent} if it was a panning trigger in\n   * {@link ouseDown}. The default is to invoke {@link MouseEvent#consume}. Note that this\n   * will block any further event processing. If you haven't disabled built-in\n   * context menus and require immediate selection of the cell on mouseDown in\n   * Safari and/or on the Mac, then use the following code:\n   *\n   * ```javascript\n   * consumePanningTrigger(me)\n   * {\n   *   if (me.evt.preventDefault)\n   *   {\n   *     me.evt.preventDefault();\n   *   }\n   *\n   *   // Stops event processing in IE\n   *   me.evt.returnValue = false;\n   *\n   *   // Sets local consumed state\n   *   if (!Client.IS_SF && !Client.IS_MAC)\n   *   {\n   *     me.consumed = true;\n   *   }\n   * };\n   * ```\n   */\n  consumePanningTrigger(me) {\n    me.consume();\n  }\n  /**\n   * Handles the event by updating the panning on the graph.\n   */\n  mouseMove(sender, me) {\n    this.dx = me.getX() - this.startX;\n    this.dy = me.getY() - this.startY;\n    if (this.active) {\n      if (this.previewEnabled) {\n        // Applies the grid to the panning steps\n        if (this.useGrid) {\n          this.dx = this.graph.snap(this.dx);\n          this.dy = this.graph.snap(this.dy);\n        }\n        this.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n      }\n      this.fireEvent(new EventObject(InternalEvent.PAN, {\n        event: me\n      }));\n    } else if (this.panningTrigger) {\n      const tmp = this.active;\n      // Panning is activated only if the mouse is moved\n      // beyond the graph tolerance\n      this.active = Math.abs(this.dx) > this.graph.getSnapTolerance() || Math.abs(this.dy) > this.graph.getSnapTolerance();\n      if (!tmp && this.active) {\n        this.fireEvent(new EventObject(InternalEvent.PAN_START, {\n          event: me\n        }));\n      }\n    }\n    if (this.active || this.panningTrigger) {\n      me.consume();\n    }\n  }\n  /**\n   * Handles the event by setting the translation on the view or showing the\n   * popupmenu.\n   */\n  mouseUp(sender, me) {\n    if (this.active) {\n      if (this.dx !== 0 && this.dy !== 0) {\n        // Ignores if scrollbars have been used for panning\n        if (!this.graph.isUseScrollbarsForPanning() || !hasScrollbars(this.graph.container)) {\n          const {\n            scale\n          } = this.graph.getView();\n          const t = this.graph.getView().translate;\n          this.graph.panGraph(0, 0);\n          this.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n        }\n        me.consume();\n      }\n      this.fireEvent(new EventObject(InternalEvent.PAN_END, {\n        event: me\n      }));\n    }\n    this.reset();\n  }\n  /**\n   * Zooms the graph to the given value and consumed the event if needed.\n   */\n  zoomGraph(evt) {\n    // @ts-ignore evt may have scale property\n    let value = Math.round(this.initialScale * evt.scale * 100) / 100;\n    value = Math.max(this.minScale, value);\n    value = Math.min(this.maxScale, value);\n    if (this.graph.view.scale !== value) {\n      this.graph.zoomTo(value);\n      InternalEvent.consume(evt);\n    }\n  }\n  /**\n   * Handles the event by setting the translation on the view or showing the\n   * popupmenu.\n   */\n  reset() {\n    this.panningTrigger = false;\n    this.mouseDownEvent = null;\n    this.active = false;\n    this.dx = 0;\n    this.dy = 0;\n  }\n  /**\n   * Pans <graph> by the given amount.\n   */\n  panGraph(dx, dy) {\n    this.graph.getView().setTranslate(dx, dy);\n  }\n  /**\n   * Destroys the handler and all its resources and DOM nodes.\n   */\n  onDestroy() {\n    this.graph.removeMouseListener(this);\n    this.graph.removeListener(this.forcePanningHandler);\n    this.graph.removeListener(this.gestureHandler);\n    InternalEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n  }\n}\nPanningHandler.pluginId = 'PanningHandler';\nexport default PanningHandler;","map":{"version":3,"names":["EventSource","hasScrollbars","EventObject","InternalEvent","isConsumed","isControlDown","isLeftMouseButton","isMultiTouchEvent","isPopupTrigger","isShiftDown","PanningManager","PanningHandler","constructor","graph","getPanningManager","panningManager","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","panningEnabled","pinchEnabled","initialScale","maxScale","minScale","dx","dy","startX","startY","dx0","dy0","panningTrigger","active","mouseDownEvent","addMouseListener","forcePanningHandler","sender","eo","evtName","getProperty","me","MOUSE_DOWN","isForcePanningEvent","start","fireEvent","PAN_START","event","consume","addListener","FIRE_MOUSE_EVENT","gestureHandler","isPinchEnabled","evt","type","view","scale","zoomGraph","GESTURE","mouseUpListener","reset","document","isActive","isPanningEnabled","setPanningEnabled","value","setPinchEnabled","isPanningTrigger","getEvent","getState","mouseDown","consumePanningTrigger","container","scrollLeft","scrollTop","getX","getY","mouseMove","snap","panGraph","PAN","tmp","Math","abs","getSnapTolerance","mouseUp","isUseScrollbarsForPanning","getView","t","translate","x","y","PAN_END","round","max","min","zoomTo","setTranslate","onDestroy","removeMouseListener","removeListener","pluginId"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/view/handler/PanningHandler.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport EventSource from '../event/EventSource';\nimport { hasScrollbars } from '../../util/styleUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { isConsumed, isControlDown, isLeftMouseButton, isMultiTouchEvent, isPopupTrigger, isShiftDown, } from '../../util/EventUtils';\nimport PanningManager from '../other/PanningManager';\n/**\n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * {@link Graph#panningHandler} and enabled using {@link Graph#setPanning}.\n *\n * Constructor: mxPanningHandler\n *\n * Constructs an event handler that creates a {@link PopupMenu}\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding {@link MouseEvent}.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding {@link MouseEvent}.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding {@link MouseEvent}.\n */\nclass PanningHandler extends EventSource {\n    constructor(graph) {\n        super();\n        this.getPanningManager = () => this.panningManager;\n        /**\n         * Specifies if panning should be active for the left mouse button.\n         * Setting this to true may conflict with {@link Rubberband}. Default is false.\n         */\n        this.useLeftButtonForPanning = false;\n        /**\n         * Specifies if {@link Event#isPopupTrigger} should also be used for panning.\n         */\n        this.usePopupTrigger = true;\n        /**\n         * Specifies if panning should be active even if there is a cell under the\n         * mousepointer. Default is false.\n         */\n        this.ignoreCell = false;\n        /**\n         * Specifies if the panning should be previewed. Default is true.\n         */\n        this.previewEnabled = true;\n        /**\n         * Specifies if the panning steps should be aligned to the grid size.\n         * Default is false.\n         */\n        this.useGrid = false;\n        /**\n         * Specifies if panning should be enabled. Default is false.\n         */\n        this.panningEnabled = false;\n        /**\n         * Specifies if pinch gestures should be handled as zoom. Default is true.\n         */\n        this.pinchEnabled = true;\n        this.initialScale = 0;\n        /**\n         * Specifies the maximum scale. Default is 8.\n         */\n        this.maxScale = 8;\n        /**\n         * Specifies the minimum scale. Default is 0.01.\n         */\n        this.minScale = 0.01;\n        /**\n         * Holds the current horizontal offset.\n         */\n        this.dx = 0;\n        /**\n         * Holds the current vertical offset.\n         */\n        this.dy = 0;\n        /**\n         * Holds the x-coordinate of the start point.\n         */\n        this.startX = 0;\n        /**\n         * Holds the y-coordinate of the start point.\n         */\n        this.startY = 0;\n        this.dx0 = 0;\n        this.dy0 = 0;\n        this.panningTrigger = false;\n        this.active = false;\n        this.mouseDownEvent = null;\n        this.graph = graph;\n        this.graph.addMouseListener(this);\n        // Handles force panning event\n        this.forcePanningHandler = (sender, eo) => {\n            const evtName = eo.getProperty('eventName');\n            const me = eo.getProperty('event');\n            if (evtName === InternalEvent.MOUSE_DOWN && this.isForcePanningEvent(me)) {\n                this.start(me);\n                this.active = true;\n                this.fireEvent(new EventObject(InternalEvent.PAN_START, { event: me }));\n                me.consume();\n            }\n        };\n        this.graph.addListener(InternalEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n        // Handles pinch gestures\n        this.gestureHandler = (sender, eo) => {\n            if (this.isPinchEnabled()) {\n                const evt = eo.getProperty('event');\n                if (!isConsumed(evt) && evt.type === 'gesturestart') {\n                    this.initialScale = this.graph.view.scale;\n                    // Forces start of panning when pinch gesture starts\n                    if (!this.active && this.mouseDownEvent) {\n                        this.start(this.mouseDownEvent);\n                        this.mouseDownEvent = null;\n                    }\n                }\n                else if (evt.type === 'gestureend' && this.initialScale !== 0) {\n                    this.initialScale = 0;\n                }\n                if (this.initialScale !== 0) {\n                    this.zoomGraph(evt);\n                }\n            }\n        };\n        this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n        this.mouseUpListener = () => {\n            if (this.active) {\n                this.reset();\n            }\n        };\n        // Stops scrolling on every mouseup anywhere in the document\n        InternalEvent.addListener(document, 'mouseup', this.mouseUpListener);\n        this.panningManager = new PanningManager(graph);\n    }\n    /**\n     * Returns true if the handler is currently active.\n     */\n    isActive() {\n        return this.active || this.initialScale !== null;\n    }\n    /**\n     * Returns <panningEnabled>.\n     */\n    isPanningEnabled() {\n        return this.panningEnabled;\n    }\n    /**\n     * Sets <panningEnabled>.\n     */\n    setPanningEnabled(value) {\n        this.panningEnabled = value;\n    }\n    /**\n     * Returns <pinchEnabled>.\n     */\n    isPinchEnabled() {\n        return this.pinchEnabled;\n    }\n    /**\n     * Sets <pinchEnabled>.\n     */\n    setPinchEnabled(value) {\n        this.pinchEnabled = value;\n    }\n    /**\n     * Returns true if the given event is a panning trigger for the optional\n     * given cell. This returns true if control-shift is pressed or if\n     * <usePopupTrigger> is true and the event is a popup trigger.\n     */\n    isPanningTrigger(me) {\n        const evt = me.getEvent();\n        return ((this.useLeftButtonForPanning && !me.getState() && isLeftMouseButton(evt)) ||\n            (isControlDown(evt) && isShiftDown(evt)) ||\n            (this.usePopupTrigger && isPopupTrigger(evt)));\n    }\n    /**\n     * Returns true if the given {@link MouseEvent} should start panning. This\n     * implementation always returns true if <ignoreCell> is true or for\n     * multi touch events.\n     */\n    isForcePanningEvent(me) {\n        return this.ignoreCell || isMultiTouchEvent(me.getEvent());\n    }\n    /**\n     * Handles the event by initiating the panning. By consuming the event all\n     * subsequent events of the gesture are redirected to this handler.\n     */\n    mouseDown(sender, me) {\n        this.mouseDownEvent = me;\n        if (!me.isConsumed() &&\n            this.isPanningEnabled() &&\n            !this.active &&\n            this.isPanningTrigger(me)) {\n            this.start(me);\n            this.consumePanningTrigger(me);\n        }\n    }\n    /**\n     * Starts panning at the given event.\n     */\n    start(me) {\n        this.dx0 = -this.graph.container.scrollLeft;\n        this.dy0 = -this.graph.container.scrollTop;\n        // Stores the location of the trigger event\n        this.startX = me.getX();\n        this.startY = me.getY();\n        this.dx = 0;\n        this.dy = 0;\n        this.panningTrigger = true;\n    }\n    /**\n     * Consumes the given {@link MouseEvent} if it was a panning trigger in\n     * {@link ouseDown}. The default is to invoke {@link MouseEvent#consume}. Note that this\n     * will block any further event processing. If you haven't disabled built-in\n     * context menus and require immediate selection of the cell on mouseDown in\n     * Safari and/or on the Mac, then use the following code:\n     *\n     * ```javascript\n     * consumePanningTrigger(me)\n     * {\n     *   if (me.evt.preventDefault)\n     *   {\n     *     me.evt.preventDefault();\n     *   }\n     *\n     *   // Stops event processing in IE\n     *   me.evt.returnValue = false;\n     *\n     *   // Sets local consumed state\n     *   if (!Client.IS_SF && !Client.IS_MAC)\n     *   {\n     *     me.consumed = true;\n     *   }\n     * };\n     * ```\n     */\n    consumePanningTrigger(me) {\n        me.consume();\n    }\n    /**\n     * Handles the event by updating the panning on the graph.\n     */\n    mouseMove(sender, me) {\n        this.dx = me.getX() - this.startX;\n        this.dy = me.getY() - this.startY;\n        if (this.active) {\n            if (this.previewEnabled) {\n                // Applies the grid to the panning steps\n                if (this.useGrid) {\n                    this.dx = this.graph.snap(this.dx);\n                    this.dy = this.graph.snap(this.dy);\n                }\n                this.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n            }\n            this.fireEvent(new EventObject(InternalEvent.PAN, { event: me }));\n        }\n        else if (this.panningTrigger) {\n            const tmp = this.active;\n            // Panning is activated only if the mouse is moved\n            // beyond the graph tolerance\n            this.active =\n                Math.abs(this.dx) > this.graph.getSnapTolerance() ||\n                    Math.abs(this.dy) > this.graph.getSnapTolerance();\n            if (!tmp && this.active) {\n                this.fireEvent(new EventObject(InternalEvent.PAN_START, { event: me }));\n            }\n        }\n        if (this.active || this.panningTrigger) {\n            me.consume();\n        }\n    }\n    /**\n     * Handles the event by setting the translation on the view or showing the\n     * popupmenu.\n     */\n    mouseUp(sender, me) {\n        if (this.active) {\n            if (this.dx !== 0 && this.dy !== 0) {\n                // Ignores if scrollbars have been used for panning\n                if (!this.graph.isUseScrollbarsForPanning() ||\n                    !hasScrollbars(this.graph.container)) {\n                    const { scale } = this.graph.getView();\n                    const t = this.graph.getView().translate;\n                    this.graph.panGraph(0, 0);\n                    this.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n                }\n                me.consume();\n            }\n            this.fireEvent(new EventObject(InternalEvent.PAN_END, { event: me }));\n        }\n        this.reset();\n    }\n    /**\n     * Zooms the graph to the given value and consumed the event if needed.\n     */\n    zoomGraph(evt) {\n        // @ts-ignore evt may have scale property\n        let value = Math.round(this.initialScale * evt.scale * 100) / 100;\n        value = Math.max(this.minScale, value);\n        value = Math.min(this.maxScale, value);\n        if (this.graph.view.scale !== value) {\n            this.graph.zoomTo(value);\n            InternalEvent.consume(evt);\n        }\n    }\n    /**\n     * Handles the event by setting the translation on the view or showing the\n     * popupmenu.\n     */\n    reset() {\n        this.panningTrigger = false;\n        this.mouseDownEvent = null;\n        this.active = false;\n        this.dx = 0;\n        this.dy = 0;\n    }\n    /**\n     * Pans <graph> by the given amount.\n     */\n    panGraph(dx, dy) {\n        this.graph.getView().setTranslate(dx, dy);\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    onDestroy() {\n        this.graph.removeMouseListener(this);\n        this.graph.removeListener(this.forcePanningHandler);\n        this.graph.removeListener(this.gestureHandler);\n        InternalEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n    }\n}\nPanningHandler.pluginId = 'PanningHandler';\nexport default PanningHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport MaxPopupMenu from '../../gui/MaxPopupMenu';\nimport InternalEvent from '../event/InternalEvent';\nimport { getScrollOrigin } from '../../util/styleUtils';\nimport { getMainEvent, isMultiTouchEvent } from '../../util/EventUtils';\n/**\n * Event handler that creates popupmenus.\n *\n * Constructor: mxPopupMenuHandler\n *\n * Constructs an event handler that creates a {@link PopupMenu}.\n */\nclass PopupMenuHandler extends MaxPopupMenu {\n  constructor(graph) {\n    super();\n    this.inTolerance = false;\n    this.popupTrigger = false;\n    /**\n     * Specifies if cells should be selected if a popupmenu is displayed for\n     * them. Default is true.\n     */\n    this.selectOnPopup = true;\n    /**\n     * Specifies if cells should be deselected if a popupmenu is displayed for\n     * the diagram background. Default is true.\n     */\n    this.clearSelectionOnBackground = true;\n    /**\n     * X-coordinate of the mouse down event.\n     */\n    this.triggerX = null;\n    /**\n     * Y-coordinate of the mouse down event.\n     */\n    this.triggerY = null;\n    /**\n     * Screen X-coordinate of the mouse down event.\n     */\n    this.screenX = null;\n    /**\n     * Screen Y-coordinate of the mouse down event.\n     */\n    this.screenY = null;\n    this.graph = graph;\n    this.graph.addMouseListener(this);\n    // Does not show menu if any touch gestures take place after the trigger\n    this.gestureHandler = (sender, eo) => {\n      this.inTolerance = false;\n    };\n    this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n    this.init();\n  }\n  /**\n   * Initializes the shapes required for this vertex handler.\n   */\n  init() {\n    // Hides the tooltip if the mouse is over the context menu\n    InternalEvent.addGestureListeners(this.div, evt => {\n      const tooltipHandler = this.graph.getPlugin('TooltipHandler');\n      tooltipHandler?.hide();\n    });\n  }\n  /**\n   * Hook for returning if a cell should be selected for a given {@link MouseEvent}.\n   * This implementation returns <selectOnPopup>.\n   */\n  isSelectOnPopup(me) {\n    return this.selectOnPopup;\n  }\n  /**\n   * Handles the event by initiating the panning. By consuming the event all\n   * subsequent events of the gesture are redirected to this handler.\n   */\n  mouseDown(sender, me) {\n    if (this.isEnabled() && !isMultiTouchEvent(me.getEvent())) {\n      // Hides the popupmenu if is is being displayed\n      this.hideMenu();\n      this.triggerX = me.getGraphX();\n      this.triggerY = me.getGraphY();\n      this.screenX = getMainEvent(me.getEvent()).screenX;\n      this.screenY = getMainEvent(me.getEvent()).screenY;\n      this.popupTrigger = this.isPopupTrigger(me);\n      this.inTolerance = true;\n    }\n  }\n  /**\n   * Handles the event by updating the panning on the graph.\n   */\n  mouseMove(sender, me) {\n    // Popup trigger may change on mouseUp so ignore it\n    if (this.inTolerance && this.screenX != null && this.screenY != null) {\n      if (Math.abs(getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.getEventTolerance() || Math.abs(getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.getEventTolerance()) {\n        this.inTolerance = false;\n      }\n    }\n  }\n  /**\n   * Handles the event by setting the translation on the view or showing the\n   * popupmenu.\n   */\n  mouseUp(sender, me) {\n    if (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null) {\n      const cell = this.getCellForPopupEvent(me);\n      // Selects the cell for which the context menu is being displayed\n      if (this.graph.isEnabled() && this.isSelectOnPopup(me) && cell != null && !this.graph.isCellSelected(cell)) {\n        this.graph.setSelectionCell(cell);\n      } else if (this.clearSelectionOnBackground && cell == null) {\n        this.graph.clearSelection();\n      }\n      // Hides the tooltip if there is one\n      const tooltipHandler = this.graph.getPlugin('TooltipHandler');\n      tooltipHandler?.hide();\n      // Menu is shifted by 1 pixel so that the mouse up event\n      // is routed via the underlying shape instead of the DIV\n      const origin = getScrollOrigin();\n      this.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n      me.consume();\n    }\n    this.popupTrigger = false;\n    this.inTolerance = false;\n  }\n  /**\n   * Hook to return the cell for the mouse up popup trigger handling.\n   */\n  getCellForPopupEvent(me) {\n    return me.getCell();\n  }\n  /**\n   * Destroys the handler and all its resources and DOM nodes.\n   */\n  onDestroy() {\n    this.graph.removeMouseListener(this);\n    this.graph.removeListener(this.gestureHandler);\n    // Supercall\n    super.destroy();\n  }\n}\nPopupMenuHandler.pluginId = 'PopupMenuHandler';\nexport default PopupMenuHandler;","map":{"version":3,"names":["MaxPopupMenu","InternalEvent","getScrollOrigin","getMainEvent","isMultiTouchEvent","PopupMenuHandler","constructor","graph","inTolerance","popupTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","addMouseListener","gestureHandler","sender","eo","addListener","GESTURE","init","addGestureListeners","div","evt","tooltipHandler","getPlugin","hide","isSelectOnPopup","me","mouseDown","isEnabled","getEvent","hideMenu","getGraphX","getGraphY","isPopupTrigger","mouseMove","Math","abs","getEventTolerance","mouseUp","cell","getCellForPopupEvent","isCellSelected","setSelectionCell","clearSelection","origin","popup","getX","x","getY","y","consume","getCell","onDestroy","removeMouseListener","removeListener","destroy","pluginId"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/view/handler/PopupMenuHandler.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport MaxPopupMenu from '../../gui/MaxPopupMenu';\nimport InternalEvent from '../event/InternalEvent';\nimport { getScrollOrigin } from '../../util/styleUtils';\nimport { getMainEvent, isMultiTouchEvent } from '../../util/EventUtils';\n/**\n * Event handler that creates popupmenus.\n *\n * Constructor: mxPopupMenuHandler\n *\n * Constructs an event handler that creates a {@link PopupMenu}.\n */\nclass PopupMenuHandler extends MaxPopupMenu {\n    constructor(graph) {\n        super();\n        this.inTolerance = false;\n        this.popupTrigger = false;\n        /**\n         * Specifies if cells should be selected if a popupmenu is displayed for\n         * them. Default is true.\n         */\n        this.selectOnPopup = true;\n        /**\n         * Specifies if cells should be deselected if a popupmenu is displayed for\n         * the diagram background. Default is true.\n         */\n        this.clearSelectionOnBackground = true;\n        /**\n         * X-coordinate of the mouse down event.\n         */\n        this.triggerX = null;\n        /**\n         * Y-coordinate of the mouse down event.\n         */\n        this.triggerY = null;\n        /**\n         * Screen X-coordinate of the mouse down event.\n         */\n        this.screenX = null;\n        /**\n         * Screen Y-coordinate of the mouse down event.\n         */\n        this.screenY = null;\n        this.graph = graph;\n        this.graph.addMouseListener(this);\n        // Does not show menu if any touch gestures take place after the trigger\n        this.gestureHandler = (sender, eo) => {\n            this.inTolerance = false;\n        };\n        this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n        this.init();\n    }\n    /**\n     * Initializes the shapes required for this vertex handler.\n     */\n    init() {\n        // Hides the tooltip if the mouse is over the context menu\n        InternalEvent.addGestureListeners(this.div, (evt) => {\n            const tooltipHandler = this.graph.getPlugin('TooltipHandler');\n            tooltipHandler?.hide();\n        });\n    }\n    /**\n     * Hook for returning if a cell should be selected for a given {@link MouseEvent}.\n     * This implementation returns <selectOnPopup>.\n     */\n    isSelectOnPopup(me) {\n        return this.selectOnPopup;\n    }\n    /**\n     * Handles the event by initiating the panning. By consuming the event all\n     * subsequent events of the gesture are redirected to this handler.\n     */\n    mouseDown(sender, me) {\n        if (this.isEnabled() && !isMultiTouchEvent(me.getEvent())) {\n            // Hides the popupmenu if is is being displayed\n            this.hideMenu();\n            this.triggerX = me.getGraphX();\n            this.triggerY = me.getGraphY();\n            this.screenX = getMainEvent(me.getEvent()).screenX;\n            this.screenY = getMainEvent(me.getEvent()).screenY;\n            this.popupTrigger = this.isPopupTrigger(me);\n            this.inTolerance = true;\n        }\n    }\n    /**\n     * Handles the event by updating the panning on the graph.\n     */\n    mouseMove(sender, me) {\n        // Popup trigger may change on mouseUp so ignore it\n        if (this.inTolerance && this.screenX != null && this.screenY != null) {\n            if (Math.abs(getMainEvent(me.getEvent()).screenX - this.screenX) >\n                this.graph.getEventTolerance() ||\n                Math.abs(getMainEvent(me.getEvent()).screenY - this.screenY) >\n                    this.graph.getEventTolerance()) {\n                this.inTolerance = false;\n            }\n        }\n    }\n    /**\n     * Handles the event by setting the translation on the view or showing the\n     * popupmenu.\n     */\n    mouseUp(sender, me) {\n        if (this.popupTrigger &&\n            this.inTolerance &&\n            this.triggerX != null &&\n            this.triggerY != null) {\n            const cell = this.getCellForPopupEvent(me);\n            // Selects the cell for which the context menu is being displayed\n            if (this.graph.isEnabled() &&\n                this.isSelectOnPopup(me) &&\n                cell != null &&\n                !this.graph.isCellSelected(cell)) {\n                this.graph.setSelectionCell(cell);\n            }\n            else if (this.clearSelectionOnBackground && cell == null) {\n                this.graph.clearSelection();\n            }\n            // Hides the tooltip if there is one\n            const tooltipHandler = this.graph.getPlugin('TooltipHandler');\n            tooltipHandler?.hide();\n            // Menu is shifted by 1 pixel so that the mouse up event\n            // is routed via the underlying shape instead of the DIV\n            const origin = getScrollOrigin();\n            this.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n            me.consume();\n        }\n        this.popupTrigger = false;\n        this.inTolerance = false;\n    }\n    /**\n     * Hook to return the cell for the mouse up popup trigger handling.\n     */\n    getCellForPopupEvent(me) {\n        return me.getCell();\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes.\n     */\n    onDestroy() {\n        this.graph.removeMouseListener(this);\n        this.graph.removeListener(this.gestureHandler);\n        // Supercall\n        super.destroy();\n    }\n}\nPopupMenuHandler.pluginId = 'PopupMenuHandler';\nexport default PopupMenuHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _CodeLensContribution;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { createCancelablePromise, disposableTimeout, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { onUnexpectedError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { getCodeLensModel } from './codelens.js';\nimport { ICodeLensCache } from './codeLensCache.js';\nimport { CodeLensHelper, CodeLensWidget } from './codelensWidget.js';\nimport { localize } from '../../../../nls.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nlet CodeLensContribution = (_CodeLensContribution = class CodeLensContribution {\n  constructor(_editor, _languageFeaturesService, debounceService, _commandService, _notificationService, _codeLensCache) {\n    this._editor = _editor;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._commandService = _commandService;\n    this._notificationService = _notificationService;\n    this._codeLensCache = _codeLensCache;\n    this._disposables = new DisposableStore();\n    this._localToDispose = new DisposableStore();\n    this._lenses = [];\n    this._oldCodeLensModels = new DisposableStore();\n    this._provideCodeLensDebounce = debounceService.for(_languageFeaturesService.codeLensProvider, 'CodeLensProvide', {\n      min: 250\n    });\n    this._resolveCodeLensesDebounce = debounceService.for(_languageFeaturesService.codeLensProvider, 'CodeLensResolve', {\n      min: 250,\n      salt: 'resolve'\n    });\n    this._resolveCodeLensesScheduler = new RunOnceScheduler(() => this._resolveCodeLensesInViewport(), this._resolveCodeLensesDebounce.default());\n    this._disposables.add(this._editor.onDidChangeModel(() => this._onModelChange()));\n    this._disposables.add(this._editor.onDidChangeModelLanguage(() => this._onModelChange()));\n    this._disposables.add(this._editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(50 /* EditorOption.fontInfo */) || e.hasChanged(19 /* EditorOption.codeLensFontSize */) || e.hasChanged(18 /* EditorOption.codeLensFontFamily */)) {\n        this._updateLensStyle();\n      }\n      if (e.hasChanged(17 /* EditorOption.codeLens */)) {\n        this._onModelChange();\n      }\n    }));\n    this._disposables.add(_languageFeaturesService.codeLensProvider.onDidChange(this._onModelChange, this));\n    this._onModelChange();\n    this._updateLensStyle();\n  }\n  dispose() {\n    var _this$_currentCodeLen;\n    this._localDispose();\n    this._disposables.dispose();\n    this._oldCodeLensModels.dispose();\n    (_this$_currentCodeLen = this._currentCodeLensModel) === null || _this$_currentCodeLen === void 0 || _this$_currentCodeLen.dispose();\n  }\n  _getLayoutInfo() {\n    const lineHeightFactor = Math.max(1.3, this._editor.getOption(67 /* EditorOption.lineHeight */) / this._editor.getOption(52 /* EditorOption.fontSize */));\n    let fontSize = this._editor.getOption(19 /* EditorOption.codeLensFontSize */);\n    if (!fontSize || fontSize < 5) {\n      fontSize = this._editor.getOption(52 /* EditorOption.fontSize */) * .9 | 0;\n    }\n    return {\n      fontSize,\n      codeLensHeight: fontSize * lineHeightFactor | 0\n    };\n  }\n  _updateLensStyle() {\n    const {\n      codeLensHeight,\n      fontSize\n    } = this._getLayoutInfo();\n    const fontFamily = this._editor.getOption(18 /* EditorOption.codeLensFontFamily */);\n    const editorFontInfo = this._editor.getOption(50 /* EditorOption.fontInfo */);\n    const {\n      style\n    } = this._editor.getContainerDomNode();\n    style.setProperty('--vscode-editorCodeLens-lineHeight', \"\".concat(codeLensHeight, \"px\"));\n    style.setProperty('--vscode-editorCodeLens-fontSize', \"\".concat(fontSize, \"px\"));\n    style.setProperty('--vscode-editorCodeLens-fontFeatureSettings', editorFontInfo.fontFeatureSettings);\n    if (fontFamily) {\n      style.setProperty('--vscode-editorCodeLens-fontFamily', fontFamily);\n      style.setProperty('--vscode-editorCodeLens-fontFamilyDefault', EDITOR_FONT_DEFAULTS.fontFamily);\n    }\n    //\n    this._editor.changeViewZones(accessor => {\n      for (const lens of this._lenses) {\n        lens.updateHeight(codeLensHeight, accessor);\n      }\n    });\n  }\n  _localDispose() {\n    var _this$_getCodeLensMod, _this$_resolveCodeLen, _this$_currentCodeLen2;\n    (_this$_getCodeLensMod = this._getCodeLensModelPromise) === null || _this$_getCodeLensMod === void 0 || _this$_getCodeLensMod.cancel();\n    this._getCodeLensModelPromise = undefined;\n    (_this$_resolveCodeLen = this._resolveCodeLensesPromise) === null || _this$_resolveCodeLen === void 0 || _this$_resolveCodeLen.cancel();\n    this._resolveCodeLensesPromise = undefined;\n    this._localToDispose.clear();\n    this._oldCodeLensModels.clear();\n    (_this$_currentCodeLen2 = this._currentCodeLensModel) === null || _this$_currentCodeLen2 === void 0 || _this$_currentCodeLen2.dispose();\n  }\n  _onModelChange() {\n    this._localDispose();\n    const model = this._editor.getModel();\n    if (!model) {\n      return;\n    }\n    if (!this._editor.getOption(17 /* EditorOption.codeLens */) || model.isTooLargeForTokenization()) {\n      return;\n    }\n    const cachedLenses = this._codeLensCache.get(model);\n    if (cachedLenses) {\n      this._renderCodeLensSymbols(cachedLenses);\n    }\n    if (!this._languageFeaturesService.codeLensProvider.has(model)) {\n      // no provider -> return but check with\n      // cached lenses. they expire after 30 seconds\n      if (cachedLenses) {\n        disposableTimeout(() => {\n          const cachedLensesNow = this._codeLensCache.get(model);\n          if (cachedLenses === cachedLensesNow) {\n            this._codeLensCache.delete(model);\n            this._onModelChange();\n          }\n        }, 30 * 1000, this._localToDispose);\n      }\n      return;\n    }\n    for (const provider of this._languageFeaturesService.codeLensProvider.all(model)) {\n      if (typeof provider.onDidChange === 'function') {\n        const registration = provider.onDidChange(() => scheduler.schedule());\n        this._localToDispose.add(registration);\n      }\n    }\n    const scheduler = new RunOnceScheduler(() => {\n      var _this$_getCodeLensMod2;\n      const t1 = Date.now();\n      (_this$_getCodeLensMod2 = this._getCodeLensModelPromise) === null || _this$_getCodeLensMod2 === void 0 || _this$_getCodeLensMod2.cancel();\n      this._getCodeLensModelPromise = createCancelablePromise(token => getCodeLensModel(this._languageFeaturesService.codeLensProvider, model, token));\n      this._getCodeLensModelPromise.then(result => {\n        if (this._currentCodeLensModel) {\n          this._oldCodeLensModels.add(this._currentCodeLensModel);\n        }\n        this._currentCodeLensModel = result;\n        // cache model to reduce flicker\n        this._codeLensCache.put(model, result);\n        // update moving average\n        const newDelay = this._provideCodeLensDebounce.update(model, Date.now() - t1);\n        scheduler.delay = newDelay;\n        // render lenses\n        this._renderCodeLensSymbols(result);\n        // dom.scheduleAtNextAnimationFrame(() => this._resolveCodeLensesInViewport());\n        this._resolveCodeLensesInViewportSoon();\n      }, onUnexpectedError);\n    }, this._provideCodeLensDebounce.get(model));\n    this._localToDispose.add(scheduler);\n    this._localToDispose.add(toDisposable(() => this._resolveCodeLensesScheduler.cancel()));\n    this._localToDispose.add(this._editor.onDidChangeModelContent(() => {\n      var _this$_resolveCodeLen2;\n      this._editor.changeDecorations(decorationsAccessor => {\n        this._editor.changeViewZones(viewZonesAccessor => {\n          const toDispose = [];\n          let lastLensLineNumber = -1;\n          this._lenses.forEach(lens => {\n            if (!lens.isValid() || lastLensLineNumber === lens.getLineNumber()) {\n              // invalid -> lens collapsed, attach range doesn't exist anymore\n              // line_number -> lenses should never be on the same line\n              toDispose.push(lens);\n            } else {\n              lens.update(viewZonesAccessor);\n              lastLensLineNumber = lens.getLineNumber();\n            }\n          });\n          const helper = new CodeLensHelper();\n          toDispose.forEach(l => {\n            l.dispose(helper, viewZonesAccessor);\n            this._lenses.splice(this._lenses.indexOf(l), 1);\n          });\n          helper.commit(decorationsAccessor);\n        });\n      });\n      // Ask for all references again\n      scheduler.schedule();\n      // Cancel pending and active resolve requests\n      this._resolveCodeLensesScheduler.cancel();\n      (_this$_resolveCodeLen2 = this._resolveCodeLensesPromise) === null || _this$_resolveCodeLen2 === void 0 || _this$_resolveCodeLen2.cancel();\n      this._resolveCodeLensesPromise = undefined;\n    }));\n    this._localToDispose.add(this._editor.onDidFocusEditorText(() => {\n      scheduler.schedule();\n    }));\n    this._localToDispose.add(this._editor.onDidBlurEditorText(() => {\n      scheduler.cancel();\n    }));\n    this._localToDispose.add(this._editor.onDidScrollChange(e => {\n      if (e.scrollTopChanged && this._lenses.length > 0) {\n        this._resolveCodeLensesInViewportSoon();\n      }\n    }));\n    this._localToDispose.add(this._editor.onDidLayoutChange(() => {\n      this._resolveCodeLensesInViewportSoon();\n    }));\n    this._localToDispose.add(toDisposable(() => {\n      if (this._editor.getModel()) {\n        const scrollState = StableEditorScrollState.capture(this._editor);\n        this._editor.changeDecorations(decorationsAccessor => {\n          this._editor.changeViewZones(viewZonesAccessor => {\n            this._disposeAllLenses(decorationsAccessor, viewZonesAccessor);\n          });\n        });\n        scrollState.restore(this._editor);\n      } else {\n        // No accessors available\n        this._disposeAllLenses(undefined, undefined);\n      }\n    }));\n    this._localToDispose.add(this._editor.onMouseDown(e => {\n      var _target, _target2;\n      if (e.target.type !== 9 /* MouseTargetType.CONTENT_WIDGET */) {\n        return;\n      }\n      let target = e.target.element;\n      if (((_target = target) === null || _target === void 0 ? void 0 : _target.tagName) === 'SPAN') {\n        target = target.parentElement;\n      }\n      if (((_target2 = target) === null || _target2 === void 0 ? void 0 : _target2.tagName) === 'A') {\n        for (const lens of this._lenses) {\n          const command = lens.getCommand(target);\n          if (command) {\n            this._commandService.executeCommand(command.id, ...(command.arguments || [])).catch(err => this._notificationService.error(err));\n            break;\n          }\n        }\n      }\n    }));\n    scheduler.schedule();\n  }\n  _disposeAllLenses(decChangeAccessor, viewZoneChangeAccessor) {\n    const helper = new CodeLensHelper();\n    for (const lens of this._lenses) {\n      lens.dispose(helper, viewZoneChangeAccessor);\n    }\n    if (decChangeAccessor) {\n      helper.commit(decChangeAccessor);\n    }\n    this._lenses.length = 0;\n  }\n  _renderCodeLensSymbols(symbols) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    const maxLineNumber = this._editor.getModel().getLineCount();\n    const groups = [];\n    let lastGroup;\n    for (const symbol of symbols.lenses) {\n      const line = symbol.symbol.range.startLineNumber;\n      if (line < 1 || line > maxLineNumber) {\n        // invalid code lens\n        continue;\n      } else if (lastGroup && lastGroup[lastGroup.length - 1].symbol.range.startLineNumber === line) {\n        // on same line as previous\n        lastGroup.push(symbol);\n      } else {\n        // on later line as previous\n        lastGroup = [symbol];\n        groups.push(lastGroup);\n      }\n    }\n    if (!groups.length && !this._lenses.length) {\n      // Nothing to change\n      return;\n    }\n    const scrollState = StableEditorScrollState.capture(this._editor);\n    const layoutInfo = this._getLayoutInfo();\n    this._editor.changeDecorations(decorationsAccessor => {\n      this._editor.changeViewZones(viewZoneAccessor => {\n        const helper = new CodeLensHelper();\n        let codeLensIndex = 0;\n        let groupsIndex = 0;\n        while (groupsIndex < groups.length && codeLensIndex < this._lenses.length) {\n          const symbolsLineNumber = groups[groupsIndex][0].symbol.range.startLineNumber;\n          const codeLensLineNumber = this._lenses[codeLensIndex].getLineNumber();\n          if (codeLensLineNumber < symbolsLineNumber) {\n            this._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);\n            this._lenses.splice(codeLensIndex, 1);\n          } else if (codeLensLineNumber === symbolsLineNumber) {\n            this._lenses[codeLensIndex].updateCodeLensSymbols(groups[groupsIndex], helper);\n            groupsIndex++;\n            codeLensIndex++;\n          } else {\n            this._lenses.splice(codeLensIndex, 0, new CodeLensWidget(groups[groupsIndex], this._editor, helper, viewZoneAccessor, layoutInfo.codeLensHeight, () => this._resolveCodeLensesInViewportSoon()));\n            codeLensIndex++;\n            groupsIndex++;\n          }\n        }\n        // Delete extra code lenses\n        while (codeLensIndex < this._lenses.length) {\n          this._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);\n          this._lenses.splice(codeLensIndex, 1);\n        }\n        // Create extra symbols\n        while (groupsIndex < groups.length) {\n          this._lenses.push(new CodeLensWidget(groups[groupsIndex], this._editor, helper, viewZoneAccessor, layoutInfo.codeLensHeight, () => this._resolveCodeLensesInViewportSoon()));\n          groupsIndex++;\n        }\n        helper.commit(decorationsAccessor);\n      });\n    });\n    scrollState.restore(this._editor);\n  }\n  _resolveCodeLensesInViewportSoon() {\n    const model = this._editor.getModel();\n    if (model) {\n      this._resolveCodeLensesScheduler.schedule();\n    }\n  }\n  _resolveCodeLensesInViewport() {\n    var _this$_resolveCodeLen3;\n    (_this$_resolveCodeLen3 = this._resolveCodeLensesPromise) === null || _this$_resolveCodeLen3 === void 0 || _this$_resolveCodeLen3.cancel();\n    this._resolveCodeLensesPromise = undefined;\n    const model = this._editor.getModel();\n    if (!model) {\n      return;\n    }\n    const toResolve = [];\n    const lenses = [];\n    this._lenses.forEach(lens => {\n      const request = lens.computeIfNecessary(model);\n      if (request) {\n        toResolve.push(request);\n        lenses.push(lens);\n      }\n    });\n    if (toResolve.length === 0) {\n      return;\n    }\n    const t1 = Date.now();\n    const resolvePromise = createCancelablePromise(token => {\n      const promises = toResolve.map((request, i) => {\n        const resolvedSymbols = new Array(request.length);\n        const promises = request.map((request, i) => {\n          if (!request.symbol.command && typeof request.provider.resolveCodeLens === 'function') {\n            return Promise.resolve(request.provider.resolveCodeLens(model, request.symbol, token)).then(symbol => {\n              resolvedSymbols[i] = symbol;\n            }, onUnexpectedExternalError);\n          } else {\n            resolvedSymbols[i] = request.symbol;\n            return Promise.resolve(undefined);\n          }\n        });\n        return Promise.all(promises).then(() => {\n          if (!token.isCancellationRequested && !lenses[i].isDisposed()) {\n            lenses[i].updateCommands(resolvedSymbols);\n          }\n        });\n      });\n      return Promise.all(promises);\n    });\n    this._resolveCodeLensesPromise = resolvePromise;\n    this._resolveCodeLensesPromise.then(() => {\n      // update moving average\n      const newDelay = this._resolveCodeLensesDebounce.update(model, Date.now() - t1);\n      this._resolveCodeLensesScheduler.delay = newDelay;\n      if (this._currentCodeLensModel) {\n        // update the cached state with new resolved items\n        this._codeLensCache.put(model, this._currentCodeLensModel);\n      }\n      this._oldCodeLensModels.clear(); // dispose old models once we have updated the UI with the current model\n      if (resolvePromise === this._resolveCodeLensesPromise) {\n        this._resolveCodeLensesPromise = undefined;\n      }\n    }, err => {\n      onUnexpectedError(err); // can also be cancellation!\n      if (resolvePromise === this._resolveCodeLensesPromise) {\n        this._resolveCodeLensesPromise = undefined;\n      }\n    });\n  }\n  async getModel() {\n    var _this$_currentCodeLen3;\n    await this._getCodeLensModelPromise;\n    await this._resolveCodeLensesPromise;\n    return !((_this$_currentCodeLen3 = this._currentCodeLensModel) !== null && _this$_currentCodeLen3 !== void 0 && _this$_currentCodeLen3.isDisposed) ? this._currentCodeLensModel : undefined;\n  }\n}, _CodeLensContribution.ID = 'css.editor.codeLens', _CodeLensContribution);\nCodeLensContribution = __decorate([__param(1, ILanguageFeaturesService), __param(2, ILanguageFeatureDebounceService), __param(3, ICommandService), __param(4, INotificationService), __param(5, ICodeLensCache)], CodeLensContribution);\nexport { CodeLensContribution };\nregisterEditorContribution(CodeLensContribution.ID, CodeLensContribution, 1 /* EditorContributionInstantiation.AfterFirstRender */);\nregisterEditorAction(class ShowLensesInCurrentLine extends EditorAction {\n  constructor() {\n    super({\n      id: 'codelens.showLensesInCurrentLine',\n      precondition: EditorContextKeys.hasCodeLensProvider,\n      label: localize('showLensOnLine', \"Show CodeLens Commands For Current Line\"),\n      alias: 'Show CodeLens Commands For Current Line'\n    });\n  }\n  async run(accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n    const quickInputService = accessor.get(IQuickInputService);\n    const commandService = accessor.get(ICommandService);\n    const notificationService = accessor.get(INotificationService);\n    const lineNumber = editor.getSelection().positionLineNumber;\n    const codelensController = editor.getContribution(CodeLensContribution.ID);\n    if (!codelensController) {\n      return;\n    }\n    const model = await codelensController.getModel();\n    if (!model) {\n      // nothing\n      return;\n    }\n    const items = [];\n    for (const lens of model.lenses) {\n      if (lens.symbol.command && lens.symbol.range.startLineNumber === lineNumber) {\n        items.push({\n          label: lens.symbol.command.title,\n          command: lens.symbol.command\n        });\n      }\n    }\n    if (items.length === 0) {\n      // We dont want an empty picker\n      return;\n    }\n    const item = await quickInputService.pick(items, {\n      canPickMany: false,\n      placeHolder: localize('placeHolder', \"Select a command\")\n    });\n    if (!item) {\n      // Nothing picked\n      return;\n    }\n    let command = item.command;\n    if (model.isDisposed) {\n      // try to find the same command again in-case the model has been re-created in the meantime\n      // this is a best attempt approach which shouldn't be needed because eager model re-creates\n      // shouldn't happen due to focus in/out anymore\n      const newModel = await codelensController.getModel();\n      const newLens = newModel === null || newModel === void 0 ? void 0 : newModel.lenses.find(lens => {\n        var _lens$symbol$command;\n        return lens.symbol.range.startLineNumber === lineNumber && ((_lens$symbol$command = lens.symbol.command) === null || _lens$symbol$command === void 0 ? void 0 : _lens$symbol$command.title) === command.title;\n      });\n      if (!newLens || !newLens.symbol.command) {\n        return;\n      }\n      command = newLens.symbol.command;\n    }\n    try {\n      await commandService.executeCommand(command.id, ...(command.arguments || []));\n    } catch (err) {\n      notificationService.error(err);\n    }\n  }\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","createCancelablePromise","disposableTimeout","RunOnceScheduler","onUnexpectedError","onUnexpectedExternalError","DisposableStore","toDisposable","StableEditorScrollState","EditorAction","registerEditorAction","registerEditorContribution","EDITOR_FONT_DEFAULTS","EditorContextKeys","getCodeLensModel","ICodeLensCache","CodeLensHelper","CodeLensWidget","localize","ICommandService","INotificationService","IQuickInputService","ILanguageFeatureDebounceService","ILanguageFeaturesService","CodeLensContribution","_CodeLensContribution","constructor","_editor","_languageFeaturesService","debounceService","_commandService","_notificationService","_codeLensCache","_disposables","_localToDispose","_lenses","_oldCodeLensModels","_provideCodeLensDebounce","for","codeLensProvider","min","_resolveCodeLensesDebounce","salt","_resolveCodeLensesScheduler","_resolveCodeLensesInViewport","default","add","onDidChangeModel","_onModelChange","onDidChangeModelLanguage","onDidChangeConfiguration","e","hasChanged","_updateLensStyle","onDidChange","dispose","_this$_currentCodeLen","_localDispose","_currentCodeLensModel","_getLayoutInfo","lineHeightFactor","Math","max","getOption","fontSize","codeLensHeight","fontFamily","editorFontInfo","style","getContainerDomNode","setProperty","concat","fontFeatureSettings","changeViewZones","accessor","lens","updateHeight","_this$_getCodeLensMod","_this$_resolveCodeLen","_this$_currentCodeLen2","_getCodeLensModelPromise","cancel","undefined","_resolveCodeLensesPromise","clear","model","getModel","isTooLargeForTokenization","cachedLenses","get","_renderCodeLensSymbols","has","cachedLensesNow","delete","provider","all","registration","scheduler","schedule","_this$_getCodeLensMod2","t1","Date","now","token","then","result","put","newDelay","update","delay","_resolveCodeLensesInViewportSoon","onDidChangeModelContent","_this$_resolveCodeLen2","changeDecorations","decorationsAccessor","viewZonesAccessor","toDispose","lastLensLineNumber","forEach","isValid","getLineNumber","push","helper","l","splice","indexOf","commit","onDidFocusEditorText","onDidBlurEditorText","onDidScrollChange","scrollTopChanged","onDidLayoutChange","scrollState","capture","_disposeAllLenses","restore","onMouseDown","_target","_target2","type","element","tagName","parentElement","command","getCommand","executeCommand","id","catch","err","error","decChangeAccessor","viewZoneChangeAccessor","symbols","hasModel","maxLineNumber","getLineCount","groups","lastGroup","symbol","lenses","line","range","startLineNumber","layoutInfo","viewZoneAccessor","codeLensIndex","groupsIndex","symbolsLineNumber","codeLensLineNumber","updateCodeLensSymbols","_this$_resolveCodeLen3","toResolve","request","computeIfNecessary","resolvePromise","promises","map","resolvedSymbols","Array","resolveCodeLens","Promise","resolve","isCancellationRequested","isDisposed","updateCommands","_this$_currentCodeLen3","ID","ShowLensesInCurrentLine","precondition","hasCodeLensProvider","label","alias","run","editor","quickInputService","commandService","notificationService","lineNumber","getSelection","positionLineNumber","codelensController","getContribution","items","title","item","pick","canPickMany","placeHolder","newModel","newLens","find","_lens$symbol$command"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/codelens/browser/codelensController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { createCancelablePromise, disposableTimeout, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { onUnexpectedError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EDITOR_FONT_DEFAULTS } from '../../../common/config/editorOptions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { getCodeLensModel } from './codelens.js';\nimport { ICodeLensCache } from './codeLensCache.js';\nimport { CodeLensHelper, CodeLensWidget } from './codelensWidget.js';\nimport { localize } from '../../../../nls.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nlet CodeLensContribution = class CodeLensContribution {\n    static { this.ID = 'css.editor.codeLens'; }\n    constructor(_editor, _languageFeaturesService, debounceService, _commandService, _notificationService, _codeLensCache) {\n        this._editor = _editor;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._commandService = _commandService;\n        this._notificationService = _notificationService;\n        this._codeLensCache = _codeLensCache;\n        this._disposables = new DisposableStore();\n        this._localToDispose = new DisposableStore();\n        this._lenses = [];\n        this._oldCodeLensModels = new DisposableStore();\n        this._provideCodeLensDebounce = debounceService.for(_languageFeaturesService.codeLensProvider, 'CodeLensProvide', { min: 250 });\n        this._resolveCodeLensesDebounce = debounceService.for(_languageFeaturesService.codeLensProvider, 'CodeLensResolve', { min: 250, salt: 'resolve' });\n        this._resolveCodeLensesScheduler = new RunOnceScheduler(() => this._resolveCodeLensesInViewport(), this._resolveCodeLensesDebounce.default());\n        this._disposables.add(this._editor.onDidChangeModel(() => this._onModelChange()));\n        this._disposables.add(this._editor.onDidChangeModelLanguage(() => this._onModelChange()));\n        this._disposables.add(this._editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(50 /* EditorOption.fontInfo */) || e.hasChanged(19 /* EditorOption.codeLensFontSize */) || e.hasChanged(18 /* EditorOption.codeLensFontFamily */)) {\n                this._updateLensStyle();\n            }\n            if (e.hasChanged(17 /* EditorOption.codeLens */)) {\n                this._onModelChange();\n            }\n        }));\n        this._disposables.add(_languageFeaturesService.codeLensProvider.onDidChange(this._onModelChange, this));\n        this._onModelChange();\n        this._updateLensStyle();\n    }\n    dispose() {\n        this._localDispose();\n        this._disposables.dispose();\n        this._oldCodeLensModels.dispose();\n        this._currentCodeLensModel?.dispose();\n    }\n    _getLayoutInfo() {\n        const lineHeightFactor = Math.max(1.3, this._editor.getOption(67 /* EditorOption.lineHeight */) / this._editor.getOption(52 /* EditorOption.fontSize */));\n        let fontSize = this._editor.getOption(19 /* EditorOption.codeLensFontSize */);\n        if (!fontSize || fontSize < 5) {\n            fontSize = (this._editor.getOption(52 /* EditorOption.fontSize */) * .9) | 0;\n        }\n        return {\n            fontSize,\n            codeLensHeight: (fontSize * lineHeightFactor) | 0,\n        };\n    }\n    _updateLensStyle() {\n        const { codeLensHeight, fontSize } = this._getLayoutInfo();\n        const fontFamily = this._editor.getOption(18 /* EditorOption.codeLensFontFamily */);\n        const editorFontInfo = this._editor.getOption(50 /* EditorOption.fontInfo */);\n        const { style } = this._editor.getContainerDomNode();\n        style.setProperty('--vscode-editorCodeLens-lineHeight', `${codeLensHeight}px`);\n        style.setProperty('--vscode-editorCodeLens-fontSize', `${fontSize}px`);\n        style.setProperty('--vscode-editorCodeLens-fontFeatureSettings', editorFontInfo.fontFeatureSettings);\n        if (fontFamily) {\n            style.setProperty('--vscode-editorCodeLens-fontFamily', fontFamily);\n            style.setProperty('--vscode-editorCodeLens-fontFamilyDefault', EDITOR_FONT_DEFAULTS.fontFamily);\n        }\n        //\n        this._editor.changeViewZones(accessor => {\n            for (const lens of this._lenses) {\n                lens.updateHeight(codeLensHeight, accessor);\n            }\n        });\n    }\n    _localDispose() {\n        this._getCodeLensModelPromise?.cancel();\n        this._getCodeLensModelPromise = undefined;\n        this._resolveCodeLensesPromise?.cancel();\n        this._resolveCodeLensesPromise = undefined;\n        this._localToDispose.clear();\n        this._oldCodeLensModels.clear();\n        this._currentCodeLensModel?.dispose();\n    }\n    _onModelChange() {\n        this._localDispose();\n        const model = this._editor.getModel();\n        if (!model) {\n            return;\n        }\n        if (!this._editor.getOption(17 /* EditorOption.codeLens */) || model.isTooLargeForTokenization()) {\n            return;\n        }\n        const cachedLenses = this._codeLensCache.get(model);\n        if (cachedLenses) {\n            this._renderCodeLensSymbols(cachedLenses);\n        }\n        if (!this._languageFeaturesService.codeLensProvider.has(model)) {\n            // no provider -> return but check with\n            // cached lenses. they expire after 30 seconds\n            if (cachedLenses) {\n                disposableTimeout(() => {\n                    const cachedLensesNow = this._codeLensCache.get(model);\n                    if (cachedLenses === cachedLensesNow) {\n                        this._codeLensCache.delete(model);\n                        this._onModelChange();\n                    }\n                }, 30 * 1000, this._localToDispose);\n            }\n            return;\n        }\n        for (const provider of this._languageFeaturesService.codeLensProvider.all(model)) {\n            if (typeof provider.onDidChange === 'function') {\n                const registration = provider.onDidChange(() => scheduler.schedule());\n                this._localToDispose.add(registration);\n            }\n        }\n        const scheduler = new RunOnceScheduler(() => {\n            const t1 = Date.now();\n            this._getCodeLensModelPromise?.cancel();\n            this._getCodeLensModelPromise = createCancelablePromise(token => getCodeLensModel(this._languageFeaturesService.codeLensProvider, model, token));\n            this._getCodeLensModelPromise.then(result => {\n                if (this._currentCodeLensModel) {\n                    this._oldCodeLensModels.add(this._currentCodeLensModel);\n                }\n                this._currentCodeLensModel = result;\n                // cache model to reduce flicker\n                this._codeLensCache.put(model, result);\n                // update moving average\n                const newDelay = this._provideCodeLensDebounce.update(model, Date.now() - t1);\n                scheduler.delay = newDelay;\n                // render lenses\n                this._renderCodeLensSymbols(result);\n                // dom.scheduleAtNextAnimationFrame(() => this._resolveCodeLensesInViewport());\n                this._resolveCodeLensesInViewportSoon();\n            }, onUnexpectedError);\n        }, this._provideCodeLensDebounce.get(model));\n        this._localToDispose.add(scheduler);\n        this._localToDispose.add(toDisposable(() => this._resolveCodeLensesScheduler.cancel()));\n        this._localToDispose.add(this._editor.onDidChangeModelContent(() => {\n            this._editor.changeDecorations(decorationsAccessor => {\n                this._editor.changeViewZones(viewZonesAccessor => {\n                    const toDispose = [];\n                    let lastLensLineNumber = -1;\n                    this._lenses.forEach((lens) => {\n                        if (!lens.isValid() || lastLensLineNumber === lens.getLineNumber()) {\n                            // invalid -> lens collapsed, attach range doesn't exist anymore\n                            // line_number -> lenses should never be on the same line\n                            toDispose.push(lens);\n                        }\n                        else {\n                            lens.update(viewZonesAccessor);\n                            lastLensLineNumber = lens.getLineNumber();\n                        }\n                    });\n                    const helper = new CodeLensHelper();\n                    toDispose.forEach((l) => {\n                        l.dispose(helper, viewZonesAccessor);\n                        this._lenses.splice(this._lenses.indexOf(l), 1);\n                    });\n                    helper.commit(decorationsAccessor);\n                });\n            });\n            // Ask for all references again\n            scheduler.schedule();\n            // Cancel pending and active resolve requests\n            this._resolveCodeLensesScheduler.cancel();\n            this._resolveCodeLensesPromise?.cancel();\n            this._resolveCodeLensesPromise = undefined;\n        }));\n        this._localToDispose.add(this._editor.onDidFocusEditorText(() => {\n            scheduler.schedule();\n        }));\n        this._localToDispose.add(this._editor.onDidBlurEditorText(() => {\n            scheduler.cancel();\n        }));\n        this._localToDispose.add(this._editor.onDidScrollChange(e => {\n            if (e.scrollTopChanged && this._lenses.length > 0) {\n                this._resolveCodeLensesInViewportSoon();\n            }\n        }));\n        this._localToDispose.add(this._editor.onDidLayoutChange(() => {\n            this._resolveCodeLensesInViewportSoon();\n        }));\n        this._localToDispose.add(toDisposable(() => {\n            if (this._editor.getModel()) {\n                const scrollState = StableEditorScrollState.capture(this._editor);\n                this._editor.changeDecorations(decorationsAccessor => {\n                    this._editor.changeViewZones(viewZonesAccessor => {\n                        this._disposeAllLenses(decorationsAccessor, viewZonesAccessor);\n                    });\n                });\n                scrollState.restore(this._editor);\n            }\n            else {\n                // No accessors available\n                this._disposeAllLenses(undefined, undefined);\n            }\n        }));\n        this._localToDispose.add(this._editor.onMouseDown(e => {\n            if (e.target.type !== 9 /* MouseTargetType.CONTENT_WIDGET */) {\n                return;\n            }\n            let target = e.target.element;\n            if (target?.tagName === 'SPAN') {\n                target = target.parentElement;\n            }\n            if (target?.tagName === 'A') {\n                for (const lens of this._lenses) {\n                    const command = lens.getCommand(target);\n                    if (command) {\n                        this._commandService.executeCommand(command.id, ...(command.arguments || [])).catch(err => this._notificationService.error(err));\n                        break;\n                    }\n                }\n            }\n        }));\n        scheduler.schedule();\n    }\n    _disposeAllLenses(decChangeAccessor, viewZoneChangeAccessor) {\n        const helper = new CodeLensHelper();\n        for (const lens of this._lenses) {\n            lens.dispose(helper, viewZoneChangeAccessor);\n        }\n        if (decChangeAccessor) {\n            helper.commit(decChangeAccessor);\n        }\n        this._lenses.length = 0;\n    }\n    _renderCodeLensSymbols(symbols) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        const maxLineNumber = this._editor.getModel().getLineCount();\n        const groups = [];\n        let lastGroup;\n        for (const symbol of symbols.lenses) {\n            const line = symbol.symbol.range.startLineNumber;\n            if (line < 1 || line > maxLineNumber) {\n                // invalid code lens\n                continue;\n            }\n            else if (lastGroup && lastGroup[lastGroup.length - 1].symbol.range.startLineNumber === line) {\n                // on same line as previous\n                lastGroup.push(symbol);\n            }\n            else {\n                // on later line as previous\n                lastGroup = [symbol];\n                groups.push(lastGroup);\n            }\n        }\n        if (!groups.length && !this._lenses.length) {\n            // Nothing to change\n            return;\n        }\n        const scrollState = StableEditorScrollState.capture(this._editor);\n        const layoutInfo = this._getLayoutInfo();\n        this._editor.changeDecorations(decorationsAccessor => {\n            this._editor.changeViewZones(viewZoneAccessor => {\n                const helper = new CodeLensHelper();\n                let codeLensIndex = 0;\n                let groupsIndex = 0;\n                while (groupsIndex < groups.length && codeLensIndex < this._lenses.length) {\n                    const symbolsLineNumber = groups[groupsIndex][0].symbol.range.startLineNumber;\n                    const codeLensLineNumber = this._lenses[codeLensIndex].getLineNumber();\n                    if (codeLensLineNumber < symbolsLineNumber) {\n                        this._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);\n                        this._lenses.splice(codeLensIndex, 1);\n                    }\n                    else if (codeLensLineNumber === symbolsLineNumber) {\n                        this._lenses[codeLensIndex].updateCodeLensSymbols(groups[groupsIndex], helper);\n                        groupsIndex++;\n                        codeLensIndex++;\n                    }\n                    else {\n                        this._lenses.splice(codeLensIndex, 0, new CodeLensWidget(groups[groupsIndex], this._editor, helper, viewZoneAccessor, layoutInfo.codeLensHeight, () => this._resolveCodeLensesInViewportSoon()));\n                        codeLensIndex++;\n                        groupsIndex++;\n                    }\n                }\n                // Delete extra code lenses\n                while (codeLensIndex < this._lenses.length) {\n                    this._lenses[codeLensIndex].dispose(helper, viewZoneAccessor);\n                    this._lenses.splice(codeLensIndex, 1);\n                }\n                // Create extra symbols\n                while (groupsIndex < groups.length) {\n                    this._lenses.push(new CodeLensWidget(groups[groupsIndex], this._editor, helper, viewZoneAccessor, layoutInfo.codeLensHeight, () => this._resolveCodeLensesInViewportSoon()));\n                    groupsIndex++;\n                }\n                helper.commit(decorationsAccessor);\n            });\n        });\n        scrollState.restore(this._editor);\n    }\n    _resolveCodeLensesInViewportSoon() {\n        const model = this._editor.getModel();\n        if (model) {\n            this._resolveCodeLensesScheduler.schedule();\n        }\n    }\n    _resolveCodeLensesInViewport() {\n        this._resolveCodeLensesPromise?.cancel();\n        this._resolveCodeLensesPromise = undefined;\n        const model = this._editor.getModel();\n        if (!model) {\n            return;\n        }\n        const toResolve = [];\n        const lenses = [];\n        this._lenses.forEach((lens) => {\n            const request = lens.computeIfNecessary(model);\n            if (request) {\n                toResolve.push(request);\n                lenses.push(lens);\n            }\n        });\n        if (toResolve.length === 0) {\n            return;\n        }\n        const t1 = Date.now();\n        const resolvePromise = createCancelablePromise(token => {\n            const promises = toResolve.map((request, i) => {\n                const resolvedSymbols = new Array(request.length);\n                const promises = request.map((request, i) => {\n                    if (!request.symbol.command && typeof request.provider.resolveCodeLens === 'function') {\n                        return Promise.resolve(request.provider.resolveCodeLens(model, request.symbol, token)).then(symbol => {\n                            resolvedSymbols[i] = symbol;\n                        }, onUnexpectedExternalError);\n                    }\n                    else {\n                        resolvedSymbols[i] = request.symbol;\n                        return Promise.resolve(undefined);\n                    }\n                });\n                return Promise.all(promises).then(() => {\n                    if (!token.isCancellationRequested && !lenses[i].isDisposed()) {\n                        lenses[i].updateCommands(resolvedSymbols);\n                    }\n                });\n            });\n            return Promise.all(promises);\n        });\n        this._resolveCodeLensesPromise = resolvePromise;\n        this._resolveCodeLensesPromise.then(() => {\n            // update moving average\n            const newDelay = this._resolveCodeLensesDebounce.update(model, Date.now() - t1);\n            this._resolveCodeLensesScheduler.delay = newDelay;\n            if (this._currentCodeLensModel) { // update the cached state with new resolved items\n                this._codeLensCache.put(model, this._currentCodeLensModel);\n            }\n            this._oldCodeLensModels.clear(); // dispose old models once we have updated the UI with the current model\n            if (resolvePromise === this._resolveCodeLensesPromise) {\n                this._resolveCodeLensesPromise = undefined;\n            }\n        }, err => {\n            onUnexpectedError(err); // can also be cancellation!\n            if (resolvePromise === this._resolveCodeLensesPromise) {\n                this._resolveCodeLensesPromise = undefined;\n            }\n        });\n    }\n    async getModel() {\n        await this._getCodeLensModelPromise;\n        await this._resolveCodeLensesPromise;\n        return !this._currentCodeLensModel?.isDisposed\n            ? this._currentCodeLensModel\n            : undefined;\n    }\n};\nCodeLensContribution = __decorate([\n    __param(1, ILanguageFeaturesService),\n    __param(2, ILanguageFeatureDebounceService),\n    __param(3, ICommandService),\n    __param(4, INotificationService),\n    __param(5, ICodeLensCache)\n], CodeLensContribution);\nexport { CodeLensContribution };\nregisterEditorContribution(CodeLensContribution.ID, CodeLensContribution, 1 /* EditorContributionInstantiation.AfterFirstRender */);\nregisterEditorAction(class ShowLensesInCurrentLine extends EditorAction {\n    constructor() {\n        super({\n            id: 'codelens.showLensesInCurrentLine',\n            precondition: EditorContextKeys.hasCodeLensProvider,\n            label: localize('showLensOnLine', \"Show CodeLens Commands For Current Line\"),\n            alias: 'Show CodeLens Commands For Current Line',\n        });\n    }\n    async run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const quickInputService = accessor.get(IQuickInputService);\n        const commandService = accessor.get(ICommandService);\n        const notificationService = accessor.get(INotificationService);\n        const lineNumber = editor.getSelection().positionLineNumber;\n        const codelensController = editor.getContribution(CodeLensContribution.ID);\n        if (!codelensController) {\n            return;\n        }\n        const model = await codelensController.getModel();\n        if (!model) {\n            // nothing\n            return;\n        }\n        const items = [];\n        for (const lens of model.lenses) {\n            if (lens.symbol.command && lens.symbol.range.startLineNumber === lineNumber) {\n                items.push({\n                    label: lens.symbol.command.title,\n                    command: lens.symbol.command\n                });\n            }\n        }\n        if (items.length === 0) {\n            // We dont want an empty picker\n            return;\n        }\n        const item = await quickInputService.pick(items, {\n            canPickMany: false,\n            placeHolder: localize('placeHolder', \"Select a command\")\n        });\n        if (!item) {\n            // Nothing picked\n            return;\n        }\n        let command = item.command;\n        if (model.isDisposed) {\n            // try to find the same command again in-case the model has been re-created in the meantime\n            // this is a best attempt approach which shouldn't be needed because eager model re-creates\n            // shouldn't happen due to focus in/out anymore\n            const newModel = await codelensController.getModel();\n            const newLens = newModel?.lenses.find(lens => lens.symbol.range.startLineNumber === lineNumber && lens.symbol.command?.title === command.title);\n            if (!newLens || !newLens.symbol.command) {\n                return;\n            }\n            command = newLens.symbol.command;\n        }\n        try {\n            await commandService.executeCommand(command.id, ...(command.arguments || []));\n        }\n        catch (err) {\n            notificationService.error(err);\n        }\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
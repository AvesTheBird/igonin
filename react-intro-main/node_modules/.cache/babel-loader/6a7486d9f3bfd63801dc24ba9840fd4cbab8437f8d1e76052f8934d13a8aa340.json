{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { strictEquals } from '../equals.js';\nimport { DisposableStore } from '../lifecycle.js';\nimport { BaseObservable, _setDerivedOpts } from './base.js';\nimport { DebugNameData } from './debugName.js';\nimport { getLogger } from './logging.js';\nexport function derived(computeFnOrOwner, computeFn) {\n  if (computeFn !== undefined) {\n    return new Derived(new DebugNameData(computeFnOrOwner, undefined, computeFn), computeFn, undefined, undefined, undefined, strictEquals);\n  }\n  return new Derived(new DebugNameData(undefined, undefined, computeFnOrOwner), computeFnOrOwner, undefined, undefined, undefined, strictEquals);\n}\nexport function derivedWithSetter(owner, computeFn, setter) {\n  return new DerivedWithSetter(new DebugNameData(owner, undefined, computeFn), computeFn, undefined, undefined, undefined, strictEquals, setter);\n}\nexport function derivedOpts(options, computeFn) {\n  var _options$equalsFn;\n  return new Derived(new DebugNameData(options.owner, options.debugName, options.debugReferenceFn), computeFn, undefined, undefined, options.onLastObserverRemoved, (_options$equalsFn = options.equalsFn) !== null && _options$equalsFn !== void 0 ? _options$equalsFn : strictEquals);\n}\n_setDerivedOpts(derivedOpts);\n/**\n * Represents an observable that is derived from other observables.\n * The value is only recomputed when absolutely needed.\n *\n * {@link computeFn} should start with a JS Doc using `@description` to name the derived.\n *\n * Use `createEmptyChangeSummary` to create a \"change summary\" that can collect the changes.\n * Use `handleChange` to add a reported change to the change summary.\n * The compute function is given the last change summary.\n * The change summary is discarded after the compute function was called.\n *\n * @see derived\n */\nexport function derivedHandleChanges(options, computeFn) {\n  var _options$equalityComp;\n  return new Derived(new DebugNameData(options.owner, options.debugName, undefined), computeFn, options.createEmptyChangeSummary, options.handleChange, undefined, (_options$equalityComp = options.equalityComparer) !== null && _options$equalityComp !== void 0 ? _options$equalityComp : strictEquals);\n}\nexport function derivedWithStore(computeFnOrOwner, computeFnOrUndefined) {\n  let computeFn;\n  let owner;\n  if (computeFnOrUndefined === undefined) {\n    computeFn = computeFnOrOwner;\n    owner = undefined;\n  } else {\n    owner = computeFnOrOwner;\n    computeFn = computeFnOrUndefined;\n  }\n  const store = new DisposableStore();\n  return new Derived(new DebugNameData(owner, undefined, computeFn), r => {\n    store.clear();\n    return computeFn(r, store);\n  }, undefined, undefined, () => store.dispose(), strictEquals);\n}\nexport function derivedDisposable(computeFnOrOwner, computeFnOrUndefined) {\n  let computeFn;\n  let owner;\n  if (computeFnOrUndefined === undefined) {\n    computeFn = computeFnOrOwner;\n    owner = undefined;\n  } else {\n    owner = computeFnOrOwner;\n    computeFn = computeFnOrUndefined;\n  }\n  let store = undefined;\n  return new Derived(new DebugNameData(owner, undefined, computeFn), r => {\n    if (!store) {\n      store = new DisposableStore();\n    } else {\n      store.clear();\n    }\n    const result = computeFn(r);\n    if (result) {\n      store.add(result);\n    }\n    return result;\n  }, undefined, undefined, () => {\n    if (store) {\n      store.dispose();\n      store = undefined;\n    }\n  }, strictEquals);\n}\nexport class Derived extends BaseObservable {\n  get debugName() {\n    var _this$_debugNameData$;\n    return (_this$_debugNameData$ = this._debugNameData.getDebugName(this)) !== null && _this$_debugNameData$ !== void 0 ? _this$_debugNameData$ : '(anonymous)';\n  }\n  constructor(_debugNameData, _computeFn, createChangeSummary, _handleChange) {\n    var _this$createChangeSum, _getLogger;\n    let _handleLastObserverRemoved = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    let _equalityComparator = arguments.length > 5 ? arguments[5] : undefined;\n    super();\n    this._debugNameData = _debugNameData;\n    this._computeFn = _computeFn;\n    this.createChangeSummary = createChangeSummary;\n    this._handleChange = _handleChange;\n    this._handleLastObserverRemoved = _handleLastObserverRemoved;\n    this._equalityComparator = _equalityComparator;\n    this.state = 0 /* DerivedState.initial */;\n    this.value = undefined;\n    this.updateCount = 0;\n    this.dependencies = new Set();\n    this.dependenciesToBeRemoved = new Set();\n    this.changeSummary = undefined;\n    this.changeSummary = (_this$createChangeSum = this.createChangeSummary) === null || _this$createChangeSum === void 0 ? void 0 : _this$createChangeSum.call(this);\n    (_getLogger = getLogger()) === null || _getLogger === void 0 || _getLogger.handleDerivedCreated(this);\n  }\n  onLastObserverRemoved() {\n    var _this$_handleLastObse;\n    /**\n     * We are not tracking changes anymore, thus we have to assume\n     * that our cache is invalid.\n     */\n    this.state = 0 /* DerivedState.initial */;\n    this.value = undefined;\n    for (const d of this.dependencies) {\n      d.removeObserver(this);\n    }\n    this.dependencies.clear();\n    (_this$_handleLastObse = this._handleLastObserverRemoved) === null || _this$_handleLastObse === void 0 || _this$_handleLastObse.call(this);\n  }\n  get() {\n    if (this.observers.size === 0) {\n      var _this$createChangeSum2;\n      // Without observers, we don't know when to clean up stuff.\n      // Thus, we don't cache anything to prevent memory leaks.\n      const result = this._computeFn(this, (_this$createChangeSum2 = this.createChangeSummary) === null || _this$createChangeSum2 === void 0 ? void 0 : _this$createChangeSum2.call(this));\n      // Clear new dependencies\n      this.onLastObserverRemoved();\n      return result;\n    } else {\n      do {\n        // We might not get a notification for a dependency that changed while it is updating,\n        // thus we also have to ask all our depedencies if they changed in this case.\n        if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n          for (const d of this.dependencies) {\n            /** might call {@link handleChange} indirectly, which could make us stale */\n            d.reportChanges();\n            if (this.state === 2 /* DerivedState.stale */) {\n              // The other dependencies will refresh on demand, so early break\n              break;\n            }\n          }\n        }\n        // We called report changes of all dependencies.\n        // If we are still not stale, we can assume to be up to date again.\n        if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n          this.state = 3 /* DerivedState.upToDate */;\n        }\n        this._recomputeIfNeeded();\n        // In case recomputation changed one of our dependencies, we need to recompute again.\n      } while (this.state !== 3 /* DerivedState.upToDate */);\n      return this.value;\n    }\n  }\n  _recomputeIfNeeded() {\n    var _this$createChangeSum3, _getLogger2;\n    if (this.state === 3 /* DerivedState.upToDate */) {\n      return;\n    }\n    const emptySet = this.dependenciesToBeRemoved;\n    this.dependenciesToBeRemoved = this.dependencies;\n    this.dependencies = emptySet;\n    const hadValue = this.state !== 0 /* DerivedState.initial */;\n    const oldValue = this.value;\n    this.state = 3 /* DerivedState.upToDate */;\n    const changeSummary = this.changeSummary;\n    this.changeSummary = (_this$createChangeSum3 = this.createChangeSummary) === null || _this$createChangeSum3 === void 0 ? void 0 : _this$createChangeSum3.call(this);\n    try {\n      /** might call {@link handleChange} indirectly, which could invalidate us */\n      this.value = this._computeFn(this, changeSummary);\n    } finally {\n      // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n      // Thus, we only unsubscribe from observables that are definitely not read anymore.\n      for (const o of this.dependenciesToBeRemoved) {\n        o.removeObserver(this);\n      }\n      this.dependenciesToBeRemoved.clear();\n    }\n    const didChange = hadValue && !this._equalityComparator(oldValue, this.value);\n    (_getLogger2 = getLogger()) === null || _getLogger2 === void 0 || _getLogger2.handleDerivedRecomputed(this, {\n      oldValue,\n      newValue: this.value,\n      change: undefined,\n      didChange,\n      hadValue\n    });\n    if (didChange) {\n      for (const r of this.observers) {\n        r.handleChange(this, undefined);\n      }\n    }\n  }\n  toString() {\n    return \"LazyDerived<\".concat(this.debugName, \">\");\n  }\n  // IObserver Implementation\n  beginUpdate(_observable) {\n    this.updateCount++;\n    const propagateBeginUpdate = this.updateCount === 1;\n    if (this.state === 3 /* DerivedState.upToDate */) {\n      this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n      // If we propagate begin update, that will already signal a possible change.\n      if (!propagateBeginUpdate) {\n        for (const r of this.observers) {\n          r.handlePossibleChange(this);\n        }\n      }\n    }\n    if (propagateBeginUpdate) {\n      for (const r of this.observers) {\n        r.beginUpdate(this); // This signals a possible change\n      }\n    }\n  }\n  endUpdate(_observable) {\n    this.updateCount--;\n    if (this.updateCount === 0) {\n      // End update could change the observer list.\n      const observers = [...this.observers];\n      for (const r of observers) {\n        r.endUpdate(this);\n      }\n    }\n    assertFn(() => this.updateCount >= 0);\n  }\n  handlePossibleChange(observable) {\n    // In all other states, observers already know that we might have changed.\n    if (this.state === 3 /* DerivedState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n      for (const r of this.observers) {\n        r.handlePossibleChange(this);\n      }\n    }\n  }\n  handleChange(observable, change) {\n    if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n      const shouldReact = this._handleChange ? this._handleChange({\n        changedObservable: observable,\n        change,\n        didChange: o => o === observable\n      }, this.changeSummary) : true;\n      const wasUpToDate = this.state === 3 /* DerivedState.upToDate */;\n      if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ || wasUpToDate)) {\n        this.state = 2 /* DerivedState.stale */;\n        if (wasUpToDate) {\n          for (const r of this.observers) {\n            r.handlePossibleChange(this);\n          }\n        }\n      }\n    }\n  }\n  // IReader Implementation\n  readObservable(observable) {\n    // Subscribe before getting the value to enable caching\n    observable.addObserver(this);\n    /** This might call {@link handleChange} indirectly, which could invalidate us */\n    const value = observable.get();\n    // Which is why we only add the observable to the dependencies now.\n    this.dependencies.add(observable);\n    this.dependenciesToBeRemoved.delete(observable);\n    return value;\n  }\n  addObserver(observer) {\n    const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;\n    super.addObserver(observer);\n    if (shouldCallBeginUpdate) {\n      observer.beginUpdate(this);\n    }\n  }\n  removeObserver(observer) {\n    const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;\n    super.removeObserver(observer);\n    if (shouldCallEndUpdate) {\n      // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n      observer.endUpdate(this);\n    }\n  }\n}\nexport class DerivedWithSetter extends Derived {\n  constructor(debugNameData, computeFn, createChangeSummary, handleChange) {\n    let handleLastObserverRemoved = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    let equalityComparator = arguments.length > 5 ? arguments[5] : undefined;\n    let set = arguments.length > 6 ? arguments[6] : undefined;\n    super(debugNameData, computeFn, createChangeSummary, handleChange, handleLastObserverRemoved, equalityComparator);\n    this.set = set;\n  }\n}","map":{"version":3,"names":["assertFn","strictEquals","DisposableStore","BaseObservable","_setDerivedOpts","DebugNameData","getLogger","derived","computeFnOrOwner","computeFn","undefined","Derived","derivedWithSetter","owner","setter","DerivedWithSetter","derivedOpts","options","_options$equalsFn","debugName","debugReferenceFn","onLastObserverRemoved","equalsFn","derivedHandleChanges","_options$equalityComp","createEmptyChangeSummary","handleChange","equalityComparer","derivedWithStore","computeFnOrUndefined","store","r","clear","dispose","derivedDisposable","result","add","_this$_debugNameData$","_debugNameData","getDebugName","constructor","_computeFn","createChangeSummary","_handleChange","_this$createChangeSum","_getLogger","_handleLastObserverRemoved","arguments","length","_equalityComparator","state","value","updateCount","dependencies","Set","dependenciesToBeRemoved","changeSummary","call","handleDerivedCreated","_this$_handleLastObse","d","removeObserver","get","observers","size","_this$createChangeSum2","reportChanges","_recomputeIfNeeded","_this$createChangeSum3","_getLogger2","emptySet","hadValue","oldValue","o","didChange","handleDerivedRecomputed","newValue","change","toString","concat","beginUpdate","_observable","propagateBeginUpdate","handlePossibleChange","endUpdate","observable","has","shouldReact","changedObservable","wasUpToDate","readObservable","addObserver","delete","observer","shouldCallBeginUpdate","shouldCallEndUpdate","debugNameData","handleLastObserverRemoved","equalityComparator","set"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/base/common/observableInternal/derived.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { assertFn } from '../assert.js';\nimport { strictEquals } from '../equals.js';\nimport { DisposableStore } from '../lifecycle.js';\nimport { BaseObservable, _setDerivedOpts } from './base.js';\nimport { DebugNameData } from './debugName.js';\nimport { getLogger } from './logging.js';\nexport function derived(computeFnOrOwner, computeFn) {\n    if (computeFn !== undefined) {\n        return new Derived(new DebugNameData(computeFnOrOwner, undefined, computeFn), computeFn, undefined, undefined, undefined, strictEquals);\n    }\n    return new Derived(new DebugNameData(undefined, undefined, computeFnOrOwner), computeFnOrOwner, undefined, undefined, undefined, strictEquals);\n}\nexport function derivedWithSetter(owner, computeFn, setter) {\n    return new DerivedWithSetter(new DebugNameData(owner, undefined, computeFn), computeFn, undefined, undefined, undefined, strictEquals, setter);\n}\nexport function derivedOpts(options, computeFn) {\n    return new Derived(new DebugNameData(options.owner, options.debugName, options.debugReferenceFn), computeFn, undefined, undefined, options.onLastObserverRemoved, options.equalsFn ?? strictEquals);\n}\n_setDerivedOpts(derivedOpts);\n/**\n * Represents an observable that is derived from other observables.\n * The value is only recomputed when absolutely needed.\n *\n * {@link computeFn} should start with a JS Doc using `@description` to name the derived.\n *\n * Use `createEmptyChangeSummary` to create a \"change summary\" that can collect the changes.\n * Use `handleChange` to add a reported change to the change summary.\n * The compute function is given the last change summary.\n * The change summary is discarded after the compute function was called.\n *\n * @see derived\n */\nexport function derivedHandleChanges(options, computeFn) {\n    return new Derived(new DebugNameData(options.owner, options.debugName, undefined), computeFn, options.createEmptyChangeSummary, options.handleChange, undefined, options.equalityComparer ?? strictEquals);\n}\nexport function derivedWithStore(computeFnOrOwner, computeFnOrUndefined) {\n    let computeFn;\n    let owner;\n    if (computeFnOrUndefined === undefined) {\n        computeFn = computeFnOrOwner;\n        owner = undefined;\n    }\n    else {\n        owner = computeFnOrOwner;\n        computeFn = computeFnOrUndefined;\n    }\n    const store = new DisposableStore();\n    return new Derived(new DebugNameData(owner, undefined, computeFn), r => {\n        store.clear();\n        return computeFn(r, store);\n    }, undefined, undefined, () => store.dispose(), strictEquals);\n}\nexport function derivedDisposable(computeFnOrOwner, computeFnOrUndefined) {\n    let computeFn;\n    let owner;\n    if (computeFnOrUndefined === undefined) {\n        computeFn = computeFnOrOwner;\n        owner = undefined;\n    }\n    else {\n        owner = computeFnOrOwner;\n        computeFn = computeFnOrUndefined;\n    }\n    let store = undefined;\n    return new Derived(new DebugNameData(owner, undefined, computeFn), r => {\n        if (!store) {\n            store = new DisposableStore();\n        }\n        else {\n            store.clear();\n        }\n        const result = computeFn(r);\n        if (result) {\n            store.add(result);\n        }\n        return result;\n    }, undefined, undefined, () => {\n        if (store) {\n            store.dispose();\n            store = undefined;\n        }\n    }, strictEquals);\n}\nexport class Derived extends BaseObservable {\n    get debugName() {\n        return this._debugNameData.getDebugName(this) ?? '(anonymous)';\n    }\n    constructor(_debugNameData, _computeFn, createChangeSummary, _handleChange, _handleLastObserverRemoved = undefined, _equalityComparator) {\n        super();\n        this._debugNameData = _debugNameData;\n        this._computeFn = _computeFn;\n        this.createChangeSummary = createChangeSummary;\n        this._handleChange = _handleChange;\n        this._handleLastObserverRemoved = _handleLastObserverRemoved;\n        this._equalityComparator = _equalityComparator;\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        this.updateCount = 0;\n        this.dependencies = new Set();\n        this.dependenciesToBeRemoved = new Set();\n        this.changeSummary = undefined;\n        this.changeSummary = this.createChangeSummary?.();\n        getLogger()?.handleDerivedCreated(this);\n    }\n    onLastObserverRemoved() {\n        /**\n         * We are not tracking changes anymore, thus we have to assume\n         * that our cache is invalid.\n         */\n        this.state = 0 /* DerivedState.initial */;\n        this.value = undefined;\n        for (const d of this.dependencies) {\n            d.removeObserver(this);\n        }\n        this.dependencies.clear();\n        this._handleLastObserverRemoved?.();\n    }\n    get() {\n        if (this.observers.size === 0) {\n            // Without observers, we don't know when to clean up stuff.\n            // Thus, we don't cache anything to prevent memory leaks.\n            const result = this._computeFn(this, this.createChangeSummary?.());\n            // Clear new dependencies\n            this.onLastObserverRemoved();\n            return result;\n        }\n        else {\n            do {\n                // We might not get a notification for a dependency that changed while it is updating,\n                // thus we also have to ask all our depedencies if they changed in this case.\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    for (const d of this.dependencies) {\n                        /** might call {@link handleChange} indirectly, which could make us stale */\n                        d.reportChanges();\n                        if (this.state === 2 /* DerivedState.stale */) {\n                            // The other dependencies will refresh on demand, so early break\n                            break;\n                        }\n                    }\n                }\n                // We called report changes of all dependencies.\n                // If we are still not stale, we can assume to be up to date again.\n                if (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */) {\n                    this.state = 3 /* DerivedState.upToDate */;\n                }\n                this._recomputeIfNeeded();\n                // In case recomputation changed one of our dependencies, we need to recompute again.\n            } while (this.state !== 3 /* DerivedState.upToDate */);\n            return this.value;\n        }\n    }\n    _recomputeIfNeeded() {\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            return;\n        }\n        const emptySet = this.dependenciesToBeRemoved;\n        this.dependenciesToBeRemoved = this.dependencies;\n        this.dependencies = emptySet;\n        const hadValue = this.state !== 0 /* DerivedState.initial */;\n        const oldValue = this.value;\n        this.state = 3 /* DerivedState.upToDate */;\n        const changeSummary = this.changeSummary;\n        this.changeSummary = this.createChangeSummary?.();\n        try {\n            /** might call {@link handleChange} indirectly, which could invalidate us */\n            this.value = this._computeFn(this, changeSummary);\n        }\n        finally {\n            // We don't want our observed observables to think that they are (not even temporarily) not being observed.\n            // Thus, we only unsubscribe from observables that are definitely not read anymore.\n            for (const o of this.dependenciesToBeRemoved) {\n                o.removeObserver(this);\n            }\n            this.dependenciesToBeRemoved.clear();\n        }\n        const didChange = hadValue && !(this._equalityComparator(oldValue, this.value));\n        getLogger()?.handleDerivedRecomputed(this, {\n            oldValue,\n            newValue: this.value,\n            change: undefined,\n            didChange,\n            hadValue,\n        });\n        if (didChange) {\n            for (const r of this.observers) {\n                r.handleChange(this, undefined);\n            }\n        }\n    }\n    toString() {\n        return `LazyDerived<${this.debugName}>`;\n    }\n    // IObserver Implementation\n    beginUpdate(_observable) {\n        this.updateCount++;\n        const propagateBeginUpdate = this.updateCount === 1;\n        if (this.state === 3 /* DerivedState.upToDate */) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            // If we propagate begin update, that will already signal a possible change.\n            if (!propagateBeginUpdate) {\n                for (const r of this.observers) {\n                    r.handlePossibleChange(this);\n                }\n            }\n        }\n        if (propagateBeginUpdate) {\n            for (const r of this.observers) {\n                r.beginUpdate(this); // This signals a possible change\n            }\n        }\n    }\n    endUpdate(_observable) {\n        this.updateCount--;\n        if (this.updateCount === 0) {\n            // End update could change the observer list.\n            const observers = [...this.observers];\n            for (const r of observers) {\n                r.endUpdate(this);\n            }\n        }\n        assertFn(() => this.updateCount >= 0);\n    }\n    handlePossibleChange(observable) {\n        // In all other states, observers already know that we might have changed.\n        if (this.state === 3 /* DerivedState.upToDate */ && this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            this.state = 1 /* DerivedState.dependenciesMightHaveChanged */;\n            for (const r of this.observers) {\n                r.handlePossibleChange(this);\n            }\n        }\n    }\n    handleChange(observable, change) {\n        if (this.dependencies.has(observable) && !this.dependenciesToBeRemoved.has(observable)) {\n            const shouldReact = this._handleChange ? this._handleChange({\n                changedObservable: observable,\n                change,\n                didChange: (o) => o === observable,\n            }, this.changeSummary) : true;\n            const wasUpToDate = this.state === 3 /* DerivedState.upToDate */;\n            if (shouldReact && (this.state === 1 /* DerivedState.dependenciesMightHaveChanged */ || wasUpToDate)) {\n                this.state = 2 /* DerivedState.stale */;\n                if (wasUpToDate) {\n                    for (const r of this.observers) {\n                        r.handlePossibleChange(this);\n                    }\n                }\n            }\n        }\n    }\n    // IReader Implementation\n    readObservable(observable) {\n        // Subscribe before getting the value to enable caching\n        observable.addObserver(this);\n        /** This might call {@link handleChange} indirectly, which could invalidate us */\n        const value = observable.get();\n        // Which is why we only add the observable to the dependencies now.\n        this.dependencies.add(observable);\n        this.dependenciesToBeRemoved.delete(observable);\n        return value;\n    }\n    addObserver(observer) {\n        const shouldCallBeginUpdate = !this.observers.has(observer) && this.updateCount > 0;\n        super.addObserver(observer);\n        if (shouldCallBeginUpdate) {\n            observer.beginUpdate(this);\n        }\n    }\n    removeObserver(observer) {\n        const shouldCallEndUpdate = this.observers.has(observer) && this.updateCount > 0;\n        super.removeObserver(observer);\n        if (shouldCallEndUpdate) {\n            // Calling end update after removing the observer makes sure endUpdate cannot be called twice here.\n            observer.endUpdate(this);\n        }\n    }\n}\nexport class DerivedWithSetter extends Derived {\n    constructor(debugNameData, computeFn, createChangeSummary, handleChange, handleLastObserverRemoved = undefined, equalityComparator, set) {\n        super(debugNameData, computeFn, createChangeSummary, handleChange, handleLastObserverRemoved, equalityComparator);\n        this.set = set;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
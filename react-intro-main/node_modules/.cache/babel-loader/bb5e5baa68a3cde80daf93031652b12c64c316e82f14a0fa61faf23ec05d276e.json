{"ast":null,"code":"/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport { Stylesheet } from '../../view/style/Stylesheet';\nimport StyleRegistry from '../../view/style/StyleRegistry';\nimport { clone } from '../../util/cloneUtils';\nimport MaxLog from '../../gui/MaxLog';\nimport { NODETYPE } from '../../util/Constants';\nimport { isNumeric } from '../../util/mathUtils';\nimport { getTextContent } from '../../util/domUtils';\n/**\n * Codec for {@link Stylesheet}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n */\nexport class StylesheetCodec extends ObjectCodec {\n  constructor() {\n    super(new Stylesheet());\n  }\n  /**\n   * Encodes a stylesheet. See {@link decode} for a description of the format.\n   */\n  encode(enc, obj) {\n    const node = enc.document.createElement(this.getName());\n    for (const i in obj.styles) {\n      const style = obj.styles[i];\n      const styleNode = enc.document.createElement('add');\n      if (i != null) {\n        styleNode.setAttribute('as', i);\n        for (const j in style) {\n          const value = this.getStringValue(j, style[j]);\n          if (value != null) {\n            const entry = enc.document.createElement('add');\n            entry.setAttribute('value', value);\n            entry.setAttribute('as', j);\n            styleNode.appendChild(entry);\n          }\n        }\n        if (styleNode.childNodes.length > 0) {\n          node.appendChild(styleNode);\n        }\n      }\n    }\n    return node;\n  }\n  /**\n   * Returns the string for encoding the given value.\n   */\n  getStringValue(key, value) {\n    const type = typeof value;\n    if (type === 'function') {\n      value = StyleRegistry.getName(value);\n    } else if (type === 'object') {\n      value = null;\n    }\n    return value;\n  }\n  /**\n   * Reads a sequence of the following child nodes and attributes:\n   *\n   * Child Nodes:\n   *\n   * add - Adds a new style.\n   *\n   * Attributes:\n   *\n   * as - Name of the style.\n   * extend - Name of the style to inherit from.\n   *\n   * Each node contains another sequence of add and remove nodes with the following attributes:\n   *\n   * as - Name of the style (see {@link Constants}).\n   * value - Value for the style.\n   *\n   * Instead of the value-attribute, one can put Javascript expressions into the node as follows if {@link allowEval} is `true`:\n   * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n   *\n   * A remove node will remove the entry with the name given in the as-attribute from the style.\n   *\n   * Example:\n   *\n   * ```javascript\n   * <mxStylesheet as=\"stylesheet\">\n   *   <add as=\"text\">\n   *     <add as=\"fontSize\" value=\"12\"/>\n   *   </add>\n   *   <add as=\"defaultVertex\" extend=\"text\">\n   *     <add as=\"shape\" value=\"rectangle\"/>\n   *   </add>\n   * </mxStylesheet>\n   * ```\n   */\n  decode(dec, _node, into) {\n    const obj = into || new this.template.constructor();\n    const id = _node.getAttribute('id');\n    if (id != null) {\n      dec.objects[id] = obj;\n    }\n    let node = _node.firstChild;\n    while (node != null) {\n      if (!this.processInclude(dec, node, obj) && node.nodeName === 'add') {\n        const as = node.getAttribute('as');\n        if (as != null) {\n          const extend = node.getAttribute('extend');\n          let style = extend != null ? clone(obj.styles[extend]) : null;\n          if (style == null) {\n            if (extend != null) {\n              MaxLog.warn(`StylesheetCodec.decode: stylesheet ${extend} not found to extend`);\n            }\n            style = {};\n          }\n          let entry = node.firstChild;\n          while (entry != null) {\n            if (entry.nodeType === NODETYPE.ELEMENT) {\n              const key = entry.getAttribute('as');\n              if (entry.nodeName === 'add') {\n                const text = getTextContent(entry);\n                let value = null;\n                if (text != null && text.length > 0 && StylesheetCodec.allowEval) {\n                  value = eval(text);\n                } else {\n                  value = entry.getAttribute('value');\n                  if (isNumeric(value)) {\n                    value = parseFloat(value);\n                  }\n                }\n                if (value != null) {\n                  style[key] = value;\n                }\n              } else if (entry.nodeName === 'remove') {\n                delete style[key];\n              }\n            }\n            entry = entry.nextSibling;\n          }\n          obj.putCellStyle(as, style);\n        }\n      }\n      node = node.nextSibling;\n    }\n    return obj;\n  }\n}\n/**\n * Static global switch that specifies if the use of eval is allowed for evaluating text content. Default is true.\n * Set this to `false` if stylesheets may contain user input.\n */\nStylesheetCodec.allowEval = true;","map":{"version":3,"names":["ObjectCodec","Stylesheet","StyleRegistry","clone","MaxLog","NODETYPE","isNumeric","getTextContent","StylesheetCodec","constructor","encode","enc","obj","node","document","createElement","getName","i","styles","style","styleNode","setAttribute","j","value","getStringValue","entry","appendChild","childNodes","length","key","type","decode","dec","_node","into","template","id","getAttribute","objects","firstChild","processInclude","nodeName","as","extend","warn","nodeType","ELEMENT","text","allowEval","eval","parseFloat","nextSibling","putCellStyle"],"sources":["D:/ospanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/serialization/codecs/StylesheetCodec.js"],"sourcesContent":["/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport { Stylesheet } from '../../view/style/Stylesheet';\nimport StyleRegistry from '../../view/style/StyleRegistry';\nimport { clone } from '../../util/cloneUtils';\nimport MaxLog from '../../gui/MaxLog';\nimport { NODETYPE } from '../../util/Constants';\nimport { isNumeric } from '../../util/mathUtils';\nimport { getTextContent } from '../../util/domUtils';\n/**\n * Codec for {@link Stylesheet}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n */\nexport class StylesheetCodec extends ObjectCodec {\n    constructor() {\n        super(new Stylesheet());\n    }\n    /**\n     * Encodes a stylesheet. See {@link decode} for a description of the format.\n     */\n    encode(enc, obj) {\n        const node = enc.document.createElement(this.getName());\n        for (const i in obj.styles) {\n            const style = obj.styles[i];\n            const styleNode = enc.document.createElement('add');\n            if (i != null) {\n                styleNode.setAttribute('as', i);\n                for (const j in style) {\n                    const value = this.getStringValue(j, style[j]);\n                    if (value != null) {\n                        const entry = enc.document.createElement('add');\n                        entry.setAttribute('value', value);\n                        entry.setAttribute('as', j);\n                        styleNode.appendChild(entry);\n                    }\n                }\n                if (styleNode.childNodes.length > 0) {\n                    node.appendChild(styleNode);\n                }\n            }\n        }\n        return node;\n    }\n    /**\n     * Returns the string for encoding the given value.\n     */\n    getStringValue(key, value) {\n        const type = typeof value;\n        if (type === 'function') {\n            value = StyleRegistry.getName(value);\n        }\n        else if (type === 'object') {\n            value = null;\n        }\n        return value;\n    }\n    /**\n     * Reads a sequence of the following child nodes and attributes:\n     *\n     * Child Nodes:\n     *\n     * add - Adds a new style.\n     *\n     * Attributes:\n     *\n     * as - Name of the style.\n     * extend - Name of the style to inherit from.\n     *\n     * Each node contains another sequence of add and remove nodes with the following attributes:\n     *\n     * as - Name of the style (see {@link Constants}).\n     * value - Value for the style.\n     *\n     * Instead of the value-attribute, one can put Javascript expressions into the node as follows if {@link allowEval} is `true`:\n     * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n     *\n     * A remove node will remove the entry with the name given in the as-attribute from the style.\n     *\n     * Example:\n     *\n     * ```javascript\n     * <mxStylesheet as=\"stylesheet\">\n     *   <add as=\"text\">\n     *     <add as=\"fontSize\" value=\"12\"/>\n     *   </add>\n     *   <add as=\"defaultVertex\" extend=\"text\">\n     *     <add as=\"shape\" value=\"rectangle\"/>\n     *   </add>\n     * </mxStylesheet>\n     * ```\n     */\n    decode(dec, _node, into) {\n        const obj = into || new this.template.constructor();\n        const id = _node.getAttribute('id');\n        if (id != null) {\n            dec.objects[id] = obj;\n        }\n        let node = _node.firstChild;\n        while (node != null) {\n            if (!this.processInclude(dec, node, obj) && node.nodeName === 'add') {\n                const as = node.getAttribute('as');\n                if (as != null) {\n                    const extend = node.getAttribute('extend');\n                    let style = extend != null ? clone(obj.styles[extend]) : null;\n                    if (style == null) {\n                        if (extend != null) {\n                            MaxLog.warn(`StylesheetCodec.decode: stylesheet ${extend} not found to extend`);\n                        }\n                        style = {};\n                    }\n                    let entry = node.firstChild;\n                    while (entry != null) {\n                        if (entry.nodeType === NODETYPE.ELEMENT) {\n                            const key = entry.getAttribute('as');\n                            if (entry.nodeName === 'add') {\n                                const text = getTextContent(entry);\n                                let value = null;\n                                if (text != null && text.length > 0 && StylesheetCodec.allowEval) {\n                                    value = eval(text);\n                                }\n                                else {\n                                    value = entry.getAttribute('value');\n                                    if (isNumeric(value)) {\n                                        value = parseFloat(value);\n                                    }\n                                }\n                                if (value != null) {\n                                    style[key] = value;\n                                }\n                            }\n                            else if (entry.nodeName === 'remove') {\n                                delete style[key];\n                            }\n                        }\n                        entry = entry.nextSibling;\n                    }\n                    obj.putCellStyle(as, style);\n                }\n            }\n            node = node.nextSibling;\n        }\n        return obj;\n    }\n}\n/**\n * Static global switch that specifies if the use of eval is allowed for evaluating text content. Default is true.\n * Set this to `false` if stylesheets may contain user input.\n */\nStylesheetCodec.allowEval = true;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
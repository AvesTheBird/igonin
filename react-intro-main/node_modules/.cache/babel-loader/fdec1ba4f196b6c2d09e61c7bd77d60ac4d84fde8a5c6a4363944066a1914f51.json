{"ast":null,"code":"var _BracketSearchCanceled;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CallbackIterable, compareBy } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../core/range.js';\nimport { ignoreBracketsInToken } from '../../languages/supports.js';\nimport { BracketsUtils } from '../../languages/supports/richEditBrackets.js';\nimport { BracketPairsTree } from './bracketPairsTree/bracketPairsTree.js';\nexport class BracketPairsTextModelPart extends Disposable {\n  get canBuildAST() {\n    const maxSupportedDocumentLength = /* max lines */50000 * /* average column count */100;\n    return this.textModel.getValueLength() <= maxSupportedDocumentLength;\n  }\n  constructor(textModel, languageConfigurationService) {\n    super();\n    this.textModel = textModel;\n    this.languageConfigurationService = languageConfigurationService;\n    this.bracketPairsTree = this._register(new MutableDisposable());\n    this.onDidChangeEmitter = new Emitter();\n    this.onDidChange = this.onDidChangeEmitter.event;\n    this.bracketsRequested = false;\n  }\n  //#region TextModel events\n  handleLanguageConfigurationServiceChange(e) {\n    var _this$bracketPairsTre;\n    if (!e.languageId || (_this$bracketPairsTre = this.bracketPairsTree.value) !== null && _this$bracketPairsTre !== void 0 && _this$bracketPairsTre.object.didLanguageChange(e.languageId)) {\n      this.bracketPairsTree.clear();\n      this.updateBracketPairsTree();\n    }\n  }\n  handleDidChangeOptions(e) {\n    this.bracketPairsTree.clear();\n    this.updateBracketPairsTree();\n  }\n  handleDidChangeLanguage(e) {\n    this.bracketPairsTree.clear();\n    this.updateBracketPairsTree();\n  }\n  handleDidChangeContent(change) {\n    var _this$bracketPairsTre2;\n    (_this$bracketPairsTre2 = this.bracketPairsTree.value) === null || _this$bracketPairsTre2 === void 0 || _this$bracketPairsTre2.object.handleContentChanged(change);\n  }\n  handleDidChangeBackgroundTokenizationState() {\n    var _this$bracketPairsTre3;\n    (_this$bracketPairsTre3 = this.bracketPairsTree.value) === null || _this$bracketPairsTre3 === void 0 || _this$bracketPairsTre3.object.handleDidChangeBackgroundTokenizationState();\n  }\n  handleDidChangeTokens(e) {\n    var _this$bracketPairsTre4;\n    (_this$bracketPairsTre4 = this.bracketPairsTree.value) === null || _this$bracketPairsTre4 === void 0 || _this$bracketPairsTre4.object.handleDidChangeTokens(e);\n  }\n  //#endregion\n  updateBracketPairsTree() {\n    if (this.bracketsRequested && this.canBuildAST) {\n      if (!this.bracketPairsTree.value) {\n        const store = new DisposableStore();\n        this.bracketPairsTree.value = createDisposableRef(store.add(new BracketPairsTree(this.textModel, languageId => {\n          return this.languageConfigurationService.getLanguageConfiguration(languageId);\n        })), store);\n        store.add(this.bracketPairsTree.value.object.onDidChange(e => this.onDidChangeEmitter.fire(e)));\n        this.onDidChangeEmitter.fire();\n      }\n    } else {\n      if (this.bracketPairsTree.value) {\n        this.bracketPairsTree.clear();\n        // Important: Don't call fire if there was no change!\n        this.onDidChangeEmitter.fire();\n      }\n    }\n  }\n  /**\n   * Returns all bracket pairs that intersect the given range.\n   * The result is sorted by the start position.\n  */\n  getBracketPairsInRange(range) {\n    var _this$bracketPairsTre5;\n    this.bracketsRequested = true;\n    this.updateBracketPairsTree();\n    return ((_this$bracketPairsTre5 = this.bracketPairsTree.value) === null || _this$bracketPairsTre5 === void 0 ? void 0 : _this$bracketPairsTre5.object.getBracketPairsInRange(range, false)) || CallbackIterable.empty;\n  }\n  getBracketPairsInRangeWithMinIndentation(range) {\n    var _this$bracketPairsTre6;\n    this.bracketsRequested = true;\n    this.updateBracketPairsTree();\n    return ((_this$bracketPairsTre6 = this.bracketPairsTree.value) === null || _this$bracketPairsTre6 === void 0 ? void 0 : _this$bracketPairsTre6.object.getBracketPairsInRange(range, true)) || CallbackIterable.empty;\n  }\n  getBracketsInRange(range) {\n    var _this$bracketPairsTre7;\n    let onlyColorizedBrackets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.bracketsRequested = true;\n    this.updateBracketPairsTree();\n    return ((_this$bracketPairsTre7 = this.bracketPairsTree.value) === null || _this$bracketPairsTre7 === void 0 ? void 0 : _this$bracketPairsTre7.object.getBracketsInRange(range, onlyColorizedBrackets)) || CallbackIterable.empty;\n  }\n  findMatchingBracketUp(_bracket, _position, maxDuration) {\n    const position = this.textModel.validatePosition(_position);\n    const languageId = this.textModel.getLanguageIdAtPosition(position.lineNumber, position.column);\n    if (this.canBuildAST) {\n      const closingBracketInfo = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew.getClosingBracketInfo(_bracket);\n      if (!closingBracketInfo) {\n        return null;\n      }\n      const bracketPair = this.getBracketPairsInRange(Range.fromPositions(_position, _position)).findLast(b => closingBracketInfo.closes(b.openingBracketInfo));\n      if (bracketPair) {\n        return bracketPair.openingBracketRange;\n      }\n      return null;\n    } else {\n      // Fallback to old bracket matching code:\n      const bracket = _bracket.toLowerCase();\n      const bracketsSupport = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n      if (!bracketsSupport) {\n        return null;\n      }\n      const data = bracketsSupport.textIsBracket[bracket];\n      if (!data) {\n        return null;\n      }\n      return stripBracketSearchCanceled(this._findMatchingBracketUp(data, position, createTimeBasedContinueBracketSearchPredicate(maxDuration)));\n    }\n  }\n  matchBracket(position, maxDuration) {\n    if (this.canBuildAST) {\n      const bracketPair = this.getBracketPairsInRange(Range.fromPositions(position, position)).filter(item => item.closingBracketRange !== undefined && (item.openingBracketRange.containsPosition(position) || item.closingBracketRange.containsPosition(position))).findLastMaxBy(compareBy(item => item.openingBracketRange.containsPosition(position) ? item.openingBracketRange : item.closingBracketRange, Range.compareRangesUsingStarts));\n      if (bracketPair) {\n        return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n      }\n      return null;\n    } else {\n      // Fallback to old bracket matching code:\n      const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n      return this._matchBracket(this.textModel.validatePosition(position), continueSearchPredicate);\n    }\n  }\n  _establishBracketSearchOffsets(position, lineTokens, modeBrackets, tokenIndex) {\n    const tokenCount = lineTokens.getCount();\n    const currentLanguageId = lineTokens.getLanguageId(tokenIndex);\n    // limit search to not go before `maxBracketLength`\n    let searchStartOffset = Math.max(0, position.column - 1 - modeBrackets.maxBracketLength);\n    for (let i = tokenIndex - 1; i >= 0; i--) {\n      const tokenEndOffset = lineTokens.getEndOffset(i);\n      if (tokenEndOffset <= searchStartOffset) {\n        break;\n      }\n      if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n        searchStartOffset = tokenEndOffset;\n        break;\n      }\n    }\n    // limit search to not go after `maxBracketLength`\n    let searchEndOffset = Math.min(lineTokens.getLineContent().length, position.column - 1 + modeBrackets.maxBracketLength);\n    for (let i = tokenIndex + 1; i < tokenCount; i++) {\n      const tokenStartOffset = lineTokens.getStartOffset(i);\n      if (tokenStartOffset >= searchEndOffset) {\n        break;\n      }\n      if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n        searchEndOffset = tokenStartOffset;\n        break;\n      }\n    }\n    return {\n      searchStartOffset,\n      searchEndOffset\n    };\n  }\n  _matchBracket(position, continueSearchPredicate) {\n    const lineNumber = position.lineNumber;\n    const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n    const lineText = this.textModel.getLineContent(lineNumber);\n    const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n    if (tokenIndex < 0) {\n      return null;\n    }\n    const currentModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).brackets;\n    // check that the token is not to be ignored\n    if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n      let {\n        searchStartOffset,\n        searchEndOffset\n      } = this._establishBracketSearchOffsets(position, lineTokens, currentModeBrackets, tokenIndex);\n      // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n      // `bestResult` will contain the most right-side result\n      let bestResult = null;\n      while (true) {\n        const foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (!foundBracket) {\n          // there are no more brackets in this text\n          break;\n        }\n        // check that we didn't hit a bracket too far away from position\n        if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n          const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n          const r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n          if (r) {\n            if (r instanceof BracketSearchCanceled) {\n              return null;\n            }\n            bestResult = r;\n          }\n        }\n        searchStartOffset = foundBracket.endColumn - 1;\n      }\n      if (bestResult) {\n        return bestResult;\n      }\n    }\n    // If position is in between two tokens, try also looking in the previous token\n    if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n      const prevTokenIndex = tokenIndex - 1;\n      const prevModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(prevTokenIndex)).brackets;\n      // check that previous token is not to be ignored\n      if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n        const {\n          searchStartOffset,\n          searchEndOffset\n        } = this._establishBracketSearchOffsets(position, lineTokens, prevModeBrackets, prevTokenIndex);\n        const foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        // check that we didn't hit a bracket too far away from position\n        if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n          const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n          const r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n          if (r) {\n            if (r instanceof BracketSearchCanceled) {\n              return null;\n            }\n            return r;\n          }\n        }\n      }\n    }\n    return null;\n  }\n  _matchFoundBracket(foundBracket, data, isOpen, continueSearchPredicate) {\n    if (!data) {\n      return null;\n    }\n    const matched = isOpen ? this._findMatchingBracketDown(data, foundBracket.getEndPosition(), continueSearchPredicate) : this._findMatchingBracketUp(data, foundBracket.getStartPosition(), continueSearchPredicate);\n    if (!matched) {\n      return null;\n    }\n    if (matched instanceof BracketSearchCanceled) {\n      return matched;\n    }\n    return [foundBracket, matched];\n  }\n  _findMatchingBracketUp(bracket, position, continueSearchPredicate) {\n    // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n    const languageId = bracket.languageId;\n    const reversedBracketRegex = bracket.reversedRegex;\n    let count = -1;\n    let totalCallCount = 0;\n    const searchPrevMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n      while (true) {\n        if (continueSearchPredicate && ++totalCallCount % 100 === 0 && !continueSearchPredicate()) {\n          return BracketSearchCanceled.INSTANCE;\n        }\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (!r) {\n          break;\n        }\n        const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        if (bracket.isOpen(hitText)) {\n          count++;\n        } else if (bracket.isClose(hitText)) {\n          count--;\n        }\n        if (count === 0) {\n          return r;\n        }\n        searchEndOffset = r.startColumn - 1;\n      }\n      return null;\n    };\n    for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n      const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n      const tokenCount = lineTokens.getCount();\n      const lineText = this.textModel.getLineContent(lineNumber);\n      let tokenIndex = tokenCount - 1;\n      let searchStartOffset = lineText.length;\n      let searchEndOffset = lineText.length;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n      }\n      let prevSearchInToken = true;\n      for (; tokenIndex >= 0; tokenIndex--) {\n        const searchInToken = lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchStartOffset\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return r;\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return r;\n        }\n      }\n    }\n    return null;\n  }\n  _findMatchingBracketDown(bracket, position, continueSearchPredicate) {\n    // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n    const languageId = bracket.languageId;\n    const bracketRegex = bracket.forwardRegex;\n    let count = 1;\n    let totalCallCount = 0;\n    const searchNextMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n      while (true) {\n        if (continueSearchPredicate && ++totalCallCount % 100 === 0 && !continueSearchPredicate()) {\n          return BracketSearchCanceled.INSTANCE;\n        }\n        const r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (!r) {\n          break;\n        }\n        const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        if (bracket.isOpen(hitText)) {\n          count++;\n        } else if (bracket.isClose(hitText)) {\n          count--;\n        }\n        if (count === 0) {\n          return r;\n        }\n        searchStartOffset = r.endColumn - 1;\n      }\n      return null;\n    };\n    const lineCount = this.textModel.getLineCount();\n    for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n      const tokenCount = lineTokens.getCount();\n      const lineText = this.textModel.getLineContent(lineNumber);\n      let tokenIndex = 0;\n      let searchStartOffset = 0;\n      let searchEndOffset = 0;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n      }\n      let prevSearchInToken = true;\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        const searchInToken = lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return r;\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return r;\n        }\n      }\n    }\n    return null;\n  }\n  findPrevBracket(_position) {\n    const position = this.textModel.validatePosition(_position);\n    if (this.canBuildAST) {\n      var _this$bracketPairsTre8;\n      this.bracketsRequested = true;\n      this.updateBracketPairsTree();\n      return ((_this$bracketPairsTre8 = this.bracketPairsTree.value) === null || _this$bracketPairsTre8 === void 0 ? void 0 : _this$bracketPairsTre8.object.getFirstBracketBefore(position)) || null;\n    }\n    let languageId = null;\n    let modeBrackets = null;\n    let bracketConfig = null;\n    for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n      const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n      const tokenCount = lineTokens.getCount();\n      const lineText = this.textModel.getLineContent(lineNumber);\n      let tokenIndex = tokenCount - 1;\n      let searchStartOffset = lineText.length;\n      let searchEndOffset = lineText.length;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n          bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n        }\n      }\n      let prevSearchInToken = true;\n      for (; tokenIndex >= 0; tokenIndex--) {\n        const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (modeBrackets && bracketConfig && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return this._toFoundBracket(bracketConfig, r);\n            }\n            prevSearchInToken = false;\n          }\n          languageId = tokenLanguageId;\n          modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n          bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n        }\n        const searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchStartOffset\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return this._toFoundBracket(bracketConfig, r);\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return this._toFoundBracket(bracketConfig, r);\n        }\n      }\n    }\n    return null;\n  }\n  findNextBracket(_position) {\n    const position = this.textModel.validatePosition(_position);\n    if (this.canBuildAST) {\n      var _this$bracketPairsTre9;\n      this.bracketsRequested = true;\n      this.updateBracketPairsTree();\n      return ((_this$bracketPairsTre9 = this.bracketPairsTree.value) === null || _this$bracketPairsTre9 === void 0 ? void 0 : _this$bracketPairsTre9.object.getFirstBracketAfter(position)) || null;\n    }\n    const lineCount = this.textModel.getLineCount();\n    let languageId = null;\n    let modeBrackets = null;\n    let bracketConfig = null;\n    for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n      const tokenCount = lineTokens.getCount();\n      const lineText = this.textModel.getLineContent(lineNumber);\n      let tokenIndex = 0;\n      let searchStartOffset = 0;\n      let searchEndOffset = 0;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n          bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n        }\n      }\n      let prevSearchInToken = true;\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return this._toFoundBracket(bracketConfig, r);\n            }\n            prevSearchInToken = false;\n          }\n          languageId = tokenLanguageId;\n          modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n          bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n        }\n        const searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return this._toFoundBracket(bracketConfig, r);\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return this._toFoundBracket(bracketConfig, r);\n        }\n      }\n    }\n    return null;\n  }\n  findEnclosingBrackets(_position, maxDuration) {\n    const position = this.textModel.validatePosition(_position);\n    if (this.canBuildAST) {\n      const range = Range.fromPositions(position);\n      const bracketPair = this.getBracketPairsInRange(Range.fromPositions(position, position)).findLast(item => item.closingBracketRange !== undefined && item.range.strictContainsRange(range));\n      if (bracketPair) {\n        return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n      }\n      return null;\n    }\n    const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n    const lineCount = this.textModel.getLineCount();\n    const savedCounts = new Map();\n    let counts = [];\n    const resetCounts = (languageId, modeBrackets) => {\n      if (!savedCounts.has(languageId)) {\n        const tmp = [];\n        for (let i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n          tmp[i] = 0;\n        }\n        savedCounts.set(languageId, tmp);\n      }\n      counts = savedCounts.get(languageId);\n    };\n    let totalCallCount = 0;\n    const searchInRange = (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n      while (true) {\n        if (continueSearchPredicate && ++totalCallCount % 100 === 0 && !continueSearchPredicate()) {\n          return BracketSearchCanceled.INSTANCE;\n        }\n        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (!r) {\n          break;\n        }\n        const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        const bracket = modeBrackets.textIsBracket[hitText];\n        if (bracket) {\n          if (bracket.isOpen(hitText)) {\n            counts[bracket.index]++;\n          } else if (bracket.isClose(hitText)) {\n            counts[bracket.index]--;\n          }\n          if (counts[bracket.index] === -1) {\n            return this._matchFoundBracket(r, bracket, false, continueSearchPredicate);\n          }\n        }\n        searchStartOffset = r.endColumn - 1;\n      }\n      return null;\n    };\n    let languageId = null;\n    let modeBrackets = null;\n    for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n      const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n      const tokenCount = lineTokens.getCount();\n      const lineText = this.textModel.getLineContent(lineNumber);\n      let tokenIndex = 0;\n      let searchStartOffset = 0;\n      let searchEndOffset = 0;\n      if (lineNumber === position.lineNumber) {\n        tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        searchStartOffset = position.column - 1;\n        searchEndOffset = position.column - 1;\n        const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          languageId = tokenLanguageId;\n          modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n          resetCounts(languageId, modeBrackets);\n        }\n      }\n      let prevSearchInToken = true;\n      for (; tokenIndex < tokenCount; tokenIndex++) {\n        const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n        if (languageId !== tokenLanguageId) {\n          // language id change!\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return stripBracketSearchCanceled(r);\n            }\n            prevSearchInToken = false;\n          }\n          languageId = tokenLanguageId;\n          modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n          resetCounts(languageId, modeBrackets);\n        }\n        const searchInToken = !!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex));\n        if (searchInToken) {\n          // this token should be searched\n          if (prevSearchInToken) {\n            // the previous token should be searched, simply extend searchEndOffset\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          } else {\n            // the previous token should not be searched\n            searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n            searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n          }\n        } else {\n          // this token should not be searched\n          if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n            const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n            if (r) {\n              return stripBracketSearchCanceled(r);\n            }\n          }\n        }\n        prevSearchInToken = searchInToken;\n      }\n      if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n        if (r) {\n          return stripBracketSearchCanceled(r);\n        }\n      }\n    }\n    return null;\n  }\n  _toFoundBracket(bracketConfig, r) {\n    if (!r) {\n      return null;\n    }\n    let text = this.textModel.getValueInRange(r);\n    text = text.toLowerCase();\n    const bracketInfo = bracketConfig.getBracketInfo(text);\n    if (!bracketInfo) {\n      return null;\n    }\n    return {\n      range: r,\n      bracketInfo\n    };\n  }\n}\nfunction createDisposableRef(object, disposable) {\n  return {\n    object,\n    dispose: () => disposable === null || disposable === void 0 ? void 0 : disposable.dispose()\n  };\n}\nfunction createTimeBasedContinueBracketSearchPredicate(maxDuration) {\n  if (typeof maxDuration === 'undefined') {\n    return () => true;\n  } else {\n    const startTime = Date.now();\n    return () => {\n      return Date.now() - startTime <= maxDuration;\n    };\n  }\n}\nclass BracketSearchCanceled {\n  constructor() {\n    this._searchCanceledBrand = undefined;\n  }\n}\n_BracketSearchCanceled = BracketSearchCanceled;\n_BracketSearchCanceled.INSTANCE = new _BracketSearchCanceled();\nfunction stripBracketSearchCanceled(result) {\n  if (result instanceof BracketSearchCanceled) {\n    return null;\n  }\n  return result;\n}","map":{"version":3,"names":["CallbackIterable","compareBy","Emitter","Disposable","DisposableStore","MutableDisposable","Range","ignoreBracketsInToken","BracketsUtils","BracketPairsTree","BracketPairsTextModelPart","canBuildAST","maxSupportedDocumentLength","textModel","getValueLength","constructor","languageConfigurationService","bracketPairsTree","_register","onDidChangeEmitter","onDidChange","event","bracketsRequested","handleLanguageConfigurationServiceChange","e","_this$bracketPairsTre","languageId","value","object","didLanguageChange","clear","updateBracketPairsTree","handleDidChangeOptions","handleDidChangeLanguage","handleDidChangeContent","change","_this$bracketPairsTre2","handleContentChanged","handleDidChangeBackgroundTokenizationState","_this$bracketPairsTre3","handleDidChangeTokens","_this$bracketPairsTre4","store","createDisposableRef","add","getLanguageConfiguration","fire","getBracketPairsInRange","range","_this$bracketPairsTre5","empty","getBracketPairsInRangeWithMinIndentation","_this$bracketPairsTre6","getBracketsInRange","_this$bracketPairsTre7","onlyColorizedBrackets","arguments","length","undefined","findMatchingBracketUp","_bracket","_position","maxDuration","position","validatePosition","getLanguageIdAtPosition","lineNumber","column","closingBracketInfo","bracketsNew","getClosingBracketInfo","bracketPair","fromPositions","findLast","b","closes","openingBracketInfo","openingBracketRange","bracket","toLowerCase","bracketsSupport","brackets","data","textIsBracket","stripBracketSearchCanceled","_findMatchingBracketUp","createTimeBasedContinueBracketSearchPredicate","matchBracket","filter","item","closingBracketRange","containsPosition","findLastMaxBy","compareRangesUsingStarts","continueSearchPredicate","_matchBracket","_establishBracketSearchOffsets","lineTokens","modeBrackets","tokenIndex","tokenCount","getCount","currentLanguageId","getLanguageId","searchStartOffset","Math","max","maxBracketLength","i","tokenEndOffset","getEndOffset","getStandardTokenType","searchEndOffset","min","getLineContent","tokenStartOffset","getStartOffset","tokenization","getLineTokens","lineText","findTokenIndexAtOffset","currentModeBrackets","bestResult","foundBracket","findNextBracketInRange","forwardRegex","startColumn","endColumn","foundBracketText","substring","r","_matchFoundBracket","textIsOpenBracket","BracketSearchCanceled","prevTokenIndex","prevModeBrackets","findPrevBracketInRange","reversedRegex","isOpen","matched","_findMatchingBracketDown","getEndPosition","getStartPosition","reversedBracketRegex","count","totalCallCount","searchPrevMatchingBracketInRange","INSTANCE","hitText","isClose","prevSearchInToken","searchInToken","bracketRegex","searchNextMatchingBracketInRange","lineCount","getLineCount","findPrevBracket","_this$bracketPairsTre8","getFirstBracketBefore","bracketConfig","tokenLanguageId","_toFoundBracket","findNextBracket","_this$bracketPairsTre9","getFirstBracketAfter","findEnclosingBrackets","strictContainsRange","savedCounts","Map","counts","resetCounts","has","tmp","len","set","get","searchInRange","index","text","getValueInRange","bracketInfo","getBracketInfo","disposable","dispose","startTime","Date","now","_searchCanceledBrand","_BracketSearchCanceled","result"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CallbackIterable, compareBy } from '../../../../base/common/arrays.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { Range } from '../../core/range.js';\nimport { ignoreBracketsInToken } from '../../languages/supports.js';\nimport { BracketsUtils } from '../../languages/supports/richEditBrackets.js';\nimport { BracketPairsTree } from './bracketPairsTree/bracketPairsTree.js';\nexport class BracketPairsTextModelPart extends Disposable {\n    get canBuildAST() {\n        const maxSupportedDocumentLength = /* max lines */ 50_000 * /* average column count */ 100;\n        return this.textModel.getValueLength() <= maxSupportedDocumentLength;\n    }\n    constructor(textModel, languageConfigurationService) {\n        super();\n        this.textModel = textModel;\n        this.languageConfigurationService = languageConfigurationService;\n        this.bracketPairsTree = this._register(new MutableDisposable());\n        this.onDidChangeEmitter = new Emitter();\n        this.onDidChange = this.onDidChangeEmitter.event;\n        this.bracketsRequested = false;\n    }\n    //#region TextModel events\n    handleLanguageConfigurationServiceChange(e) {\n        if (!e.languageId || this.bracketPairsTree.value?.object.didLanguageChange(e.languageId)) {\n            this.bracketPairsTree.clear();\n            this.updateBracketPairsTree();\n        }\n    }\n    handleDidChangeOptions(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeLanguage(e) {\n        this.bracketPairsTree.clear();\n        this.updateBracketPairsTree();\n    }\n    handleDidChangeContent(change) {\n        this.bracketPairsTree.value?.object.handleContentChanged(change);\n    }\n    handleDidChangeBackgroundTokenizationState() {\n        this.bracketPairsTree.value?.object.handleDidChangeBackgroundTokenizationState();\n    }\n    handleDidChangeTokens(e) {\n        this.bracketPairsTree.value?.object.handleDidChangeTokens(e);\n    }\n    //#endregion\n    updateBracketPairsTree() {\n        if (this.bracketsRequested && this.canBuildAST) {\n            if (!this.bracketPairsTree.value) {\n                const store = new DisposableStore();\n                this.bracketPairsTree.value = createDisposableRef(store.add(new BracketPairsTree(this.textModel, (languageId) => {\n                    return this.languageConfigurationService.getLanguageConfiguration(languageId);\n                })), store);\n                store.add(this.bracketPairsTree.value.object.onDidChange(e => this.onDidChangeEmitter.fire(e)));\n                this.onDidChangeEmitter.fire();\n            }\n        }\n        else {\n            if (this.bracketPairsTree.value) {\n                this.bracketPairsTree.clear();\n                // Important: Don't call fire if there was no change!\n                this.onDidChangeEmitter.fire();\n            }\n        }\n    }\n    /**\n     * Returns all bracket pairs that intersect the given range.\n     * The result is sorted by the start position.\n    */\n    getBracketPairsInRange(range) {\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return this.bracketPairsTree.value?.object.getBracketPairsInRange(range, false) || CallbackIterable.empty;\n    }\n    getBracketPairsInRangeWithMinIndentation(range) {\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return this.bracketPairsTree.value?.object.getBracketPairsInRange(range, true) || CallbackIterable.empty;\n    }\n    getBracketsInRange(range, onlyColorizedBrackets = false) {\n        this.bracketsRequested = true;\n        this.updateBracketPairsTree();\n        return this.bracketPairsTree.value?.object.getBracketsInRange(range, onlyColorizedBrackets) || CallbackIterable.empty;\n    }\n    findMatchingBracketUp(_bracket, _position, maxDuration) {\n        const position = this.textModel.validatePosition(_position);\n        const languageId = this.textModel.getLanguageIdAtPosition(position.lineNumber, position.column);\n        if (this.canBuildAST) {\n            const closingBracketInfo = this.languageConfigurationService\n                .getLanguageConfiguration(languageId)\n                .bracketsNew.getClosingBracketInfo(_bracket);\n            if (!closingBracketInfo) {\n                return null;\n            }\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(_position, _position)).findLast((b) => closingBracketInfo.closes(b.openingBracketInfo));\n            if (bracketPair) {\n                return bracketPair.openingBracketRange;\n            }\n            return null;\n        }\n        else {\n            // Fallback to old bracket matching code:\n            const bracket = _bracket.toLowerCase();\n            const bracketsSupport = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n            if (!bracketsSupport) {\n                return null;\n            }\n            const data = bracketsSupport.textIsBracket[bracket];\n            if (!data) {\n                return null;\n            }\n            return stripBracketSearchCanceled(this._findMatchingBracketUp(data, position, createTimeBasedContinueBracketSearchPredicate(maxDuration)));\n        }\n    }\n    matchBracket(position, maxDuration) {\n        if (this.canBuildAST) {\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(position, position)).filter((item) => item.closingBracketRange !== undefined &&\n                (item.openingBracketRange.containsPosition(position) ||\n                    item.closingBracketRange.containsPosition(position))).findLastMaxBy(compareBy((item) => item.openingBracketRange.containsPosition(position)\n                ? item.openingBracketRange\n                : item.closingBracketRange, Range.compareRangesUsingStarts));\n            if (bracketPair) {\n                return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n            }\n            return null;\n        }\n        else {\n            // Fallback to old bracket matching code:\n            const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n            return this._matchBracket(this.textModel.validatePosition(position), continueSearchPredicate);\n        }\n    }\n    _establishBracketSearchOffsets(position, lineTokens, modeBrackets, tokenIndex) {\n        const tokenCount = lineTokens.getCount();\n        const currentLanguageId = lineTokens.getLanguageId(tokenIndex);\n        // limit search to not go before `maxBracketLength`\n        let searchStartOffset = Math.max(0, position.column - 1 - modeBrackets.maxBracketLength);\n        for (let i = tokenIndex - 1; i >= 0; i--) {\n            const tokenEndOffset = lineTokens.getEndOffset(i);\n            if (tokenEndOffset <= searchStartOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchStartOffset = tokenEndOffset;\n                break;\n            }\n        }\n        // limit search to not go after `maxBracketLength`\n        let searchEndOffset = Math.min(lineTokens.getLineContent().length, position.column - 1 + modeBrackets.maxBracketLength);\n        for (let i = tokenIndex + 1; i < tokenCount; i++) {\n            const tokenStartOffset = lineTokens.getStartOffset(i);\n            if (tokenStartOffset >= searchEndOffset) {\n                break;\n            }\n            if (ignoreBracketsInToken(lineTokens.getStandardTokenType(i)) || lineTokens.getLanguageId(i) !== currentLanguageId) {\n                searchEndOffset = tokenStartOffset;\n                break;\n            }\n        }\n        return { searchStartOffset, searchEndOffset };\n    }\n    _matchBracket(position, continueSearchPredicate) {\n        const lineNumber = position.lineNumber;\n        const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n        const lineText = this.textModel.getLineContent(lineNumber);\n        const tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n        if (tokenIndex < 0) {\n            return null;\n        }\n        const currentModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).brackets;\n        // check that the token is not to be ignored\n        if (currentModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex))) {\n            let { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, currentModeBrackets, tokenIndex);\n            // it might be the case that [currentTokenStart -> currentTokenEnd] contains multiple brackets\n            // `bestResult` will contain the most right-side result\n            let bestResult = null;\n            while (true) {\n                const foundBracket = BracketsUtils.findNextBracketInRange(currentModeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!foundBracket) {\n                    // there are no more brackets in this text\n                    break;\n                }\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, currentModeBrackets.textIsBracket[foundBracketText], currentModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        bestResult = r;\n                    }\n                }\n                searchStartOffset = foundBracket.endColumn - 1;\n            }\n            if (bestResult) {\n                return bestResult;\n            }\n        }\n        // If position is in between two tokens, try also looking in the previous token\n        if (tokenIndex > 0 && lineTokens.getStartOffset(tokenIndex) === position.column - 1) {\n            const prevTokenIndex = tokenIndex - 1;\n            const prevModeBrackets = this.languageConfigurationService.getLanguageConfiguration(lineTokens.getLanguageId(prevTokenIndex)).brackets;\n            // check that previous token is not to be ignored\n            if (prevModeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(prevTokenIndex))) {\n                const { searchStartOffset, searchEndOffset } = this._establishBracketSearchOffsets(position, lineTokens, prevModeBrackets, prevTokenIndex);\n                const foundBracket = BracketsUtils.findPrevBracketInRange(prevModeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                // check that we didn't hit a bracket too far away from position\n                if (foundBracket && foundBracket.startColumn <= position.column && position.column <= foundBracket.endColumn) {\n                    const foundBracketText = lineText.substring(foundBracket.startColumn - 1, foundBracket.endColumn - 1).toLowerCase();\n                    const r = this._matchFoundBracket(foundBracket, prevModeBrackets.textIsBracket[foundBracketText], prevModeBrackets.textIsOpenBracket[foundBracketText], continueSearchPredicate);\n                    if (r) {\n                        if (r instanceof BracketSearchCanceled) {\n                            return null;\n                        }\n                        return r;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    _matchFoundBracket(foundBracket, data, isOpen, continueSearchPredicate) {\n        if (!data) {\n            return null;\n        }\n        const matched = (isOpen\n            ? this._findMatchingBracketDown(data, foundBracket.getEndPosition(), continueSearchPredicate)\n            : this._findMatchingBracketUp(data, foundBracket.getStartPosition(), continueSearchPredicate));\n        if (!matched) {\n            return null;\n        }\n        if (matched instanceof BracketSearchCanceled) {\n            return matched;\n        }\n        return [foundBracket, matched];\n    }\n    _findMatchingBracketUp(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketUp: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const reversedBracketRegex = bracket.reversedRegex;\n        let count = -1;\n        let totalCallCount = 0;\n        const searchPrevMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchEndOffset = r.startColumn - 1;\n            }\n            return null;\n        };\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchPrevMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    _findMatchingBracketDown(bracket, position, continueSearchPredicate) {\n        // console.log('_findMatchingBracketDown: ', 'bracket: ', JSON.stringify(bracket), 'startPosition: ', String(position));\n        const languageId = bracket.languageId;\n        const bracketRegex = bracket.forwardRegex;\n        let count = 1;\n        let totalCallCount = 0;\n        const searchNextMatchingBracketInRange = (lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(bracketRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                if (bracket.isOpen(hitText)) {\n                    count++;\n                }\n                else if (bracket.isClose(hitText)) {\n                    count--;\n                }\n                if (count === 0) {\n                    return r;\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        const lineCount = this.textModel.getLineCount();\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const searchInToken = (lineTokens.getLanguageId(tokenIndex) === languageId && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return r;\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchNextMatchingBracketInRange(lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return r;\n                }\n            }\n        }\n        return null;\n    }\n    findPrevBracket(_position) {\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            this.bracketsRequested = true;\n            this.updateBracketPairsTree();\n            return this.bracketPairsTree.value?.object.getFirstBracketBefore(position) || null;\n        }\n        let languageId = null;\n        let modeBrackets = null;\n        let bracketConfig = null;\n        for (let lineNumber = position.lineNumber; lineNumber >= 1; lineNumber--) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = tokenCount - 1;\n            let searchStartOffset = lineText.length;\n            let searchEndOffset = lineText.length;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex >= 0; tokenIndex--) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && bracketConfig && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchStartOffset\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findPrevBracketInRange(modeBrackets.reversedRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(bracketConfig, r);\n                }\n            }\n        }\n        return null;\n    }\n    findNextBracket(_position) {\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            this.bracketsRequested = true;\n            this.updateBracketPairsTree();\n            return this.bracketPairsTree.value?.object.getFirstBracketAfter(position) || null;\n        }\n        const lineCount = this.textModel.getLineCount();\n        let languageId = null;\n        let modeBrackets = null;\n        let bracketConfig = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    bracketConfig = this.languageConfigurationService.getLanguageConfiguration(languageId).bracketsNew;\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return this._toFoundBracket(bracketConfig, r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (bracketConfig && modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return this._toFoundBracket(bracketConfig, r);\n                }\n            }\n        }\n        return null;\n    }\n    findEnclosingBrackets(_position, maxDuration) {\n        const position = this.textModel.validatePosition(_position);\n        if (this.canBuildAST) {\n            const range = Range.fromPositions(position);\n            const bracketPair = this.getBracketPairsInRange(Range.fromPositions(position, position)).findLast((item) => item.closingBracketRange !== undefined && item.range.strictContainsRange(range));\n            if (bracketPair) {\n                return [bracketPair.openingBracketRange, bracketPair.closingBracketRange];\n            }\n            return null;\n        }\n        const continueSearchPredicate = createTimeBasedContinueBracketSearchPredicate(maxDuration);\n        const lineCount = this.textModel.getLineCount();\n        const savedCounts = new Map();\n        let counts = [];\n        const resetCounts = (languageId, modeBrackets) => {\n            if (!savedCounts.has(languageId)) {\n                const tmp = [];\n                for (let i = 0, len = modeBrackets ? modeBrackets.brackets.length : 0; i < len; i++) {\n                    tmp[i] = 0;\n                }\n                savedCounts.set(languageId, tmp);\n            }\n            counts = savedCounts.get(languageId);\n        };\n        let totalCallCount = 0;\n        const searchInRange = (modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset) => {\n            while (true) {\n                if (continueSearchPredicate && (++totalCallCount) % 100 === 0 && !continueSearchPredicate()) {\n                    return BracketSearchCanceled.INSTANCE;\n                }\n                const r = BracketsUtils.findNextBracketInRange(modeBrackets.forwardRegex, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (!r) {\n                    break;\n                }\n                const hitText = lineText.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n                const bracket = modeBrackets.textIsBracket[hitText];\n                if (bracket) {\n                    if (bracket.isOpen(hitText)) {\n                        counts[bracket.index]++;\n                    }\n                    else if (bracket.isClose(hitText)) {\n                        counts[bracket.index]--;\n                    }\n                    if (counts[bracket.index] === -1) {\n                        return this._matchFoundBracket(r, bracket, false, continueSearchPredicate);\n                    }\n                }\n                searchStartOffset = r.endColumn - 1;\n            }\n            return null;\n        };\n        let languageId = null;\n        let modeBrackets = null;\n        for (let lineNumber = position.lineNumber; lineNumber <= lineCount; lineNumber++) {\n            const lineTokens = this.textModel.tokenization.getLineTokens(lineNumber);\n            const tokenCount = lineTokens.getCount();\n            const lineText = this.textModel.getLineContent(lineNumber);\n            let tokenIndex = 0;\n            let searchStartOffset = 0;\n            let searchEndOffset = 0;\n            if (lineNumber === position.lineNumber) {\n                tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n                searchStartOffset = position.column - 1;\n                searchEndOffset = position.column - 1;\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n            }\n            let prevSearchInToken = true;\n            for (; tokenIndex < tokenCount; tokenIndex++) {\n                const tokenLanguageId = lineTokens.getLanguageId(tokenIndex);\n                if (languageId !== tokenLanguageId) {\n                    // language id change!\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                        prevSearchInToken = false;\n                    }\n                    languageId = tokenLanguageId;\n                    modeBrackets = this.languageConfigurationService.getLanguageConfiguration(languageId).brackets;\n                    resetCounts(languageId, modeBrackets);\n                }\n                const searchInToken = (!!modeBrackets && !ignoreBracketsInToken(lineTokens.getStandardTokenType(tokenIndex)));\n                if (searchInToken) {\n                    // this token should be searched\n                    if (prevSearchInToken) {\n                        // the previous token should be searched, simply extend searchEndOffset\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                    else {\n                        // the previous token should not be searched\n                        searchStartOffset = lineTokens.getStartOffset(tokenIndex);\n                        searchEndOffset = lineTokens.getEndOffset(tokenIndex);\n                    }\n                }\n                else {\n                    // this token should not be searched\n                    if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                        const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                        if (r) {\n                            return stripBracketSearchCanceled(r);\n                        }\n                    }\n                }\n                prevSearchInToken = searchInToken;\n            }\n            if (modeBrackets && prevSearchInToken && searchStartOffset !== searchEndOffset) {\n                const r = searchInRange(modeBrackets, lineNumber, lineText, searchStartOffset, searchEndOffset);\n                if (r) {\n                    return stripBracketSearchCanceled(r);\n                }\n            }\n        }\n        return null;\n    }\n    _toFoundBracket(bracketConfig, r) {\n        if (!r) {\n            return null;\n        }\n        let text = this.textModel.getValueInRange(r);\n        text = text.toLowerCase();\n        const bracketInfo = bracketConfig.getBracketInfo(text);\n        if (!bracketInfo) {\n            return null;\n        }\n        return {\n            range: r,\n            bracketInfo\n        };\n    }\n}\nfunction createDisposableRef(object, disposable) {\n    return {\n        object,\n        dispose: () => disposable?.dispose(),\n    };\n}\nfunction createTimeBasedContinueBracketSearchPredicate(maxDuration) {\n    if (typeof maxDuration === 'undefined') {\n        return () => true;\n    }\n    else {\n        const startTime = Date.now();\n        return () => {\n            return (Date.now() - startTime <= maxDuration);\n        };\n    }\n}\nclass BracketSearchCanceled {\n    static { this.INSTANCE = new BracketSearchCanceled(); }\n    constructor() {\n        this._searchCanceledBrand = undefined;\n    }\n}\nfunction stripBracketSearchCanceled(result) {\n    if (result instanceof BracketSearchCanceled) {\n        return null;\n    }\n    return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DIALECT, NODETYPE, NS_SVG } from './Constants';\nimport Point from '../view/geometry/Point';\nimport { htmlEntities, trim } from './StringUtils';\nimport TemporaryCellStates from '../view/cell/TemporaryCellStates';\nimport { getTextContent } from './domUtils';\nimport Codec from '../serialization/Codec';\n/**\n * Returns a new, empty XML document.\n */\nexport const createXmlDocument = () => {\n  return document.implementation.createDocument('', '', null);\n};\nexport const parseXml = xmlString => {\n  return new DOMParser().parseFromString(xmlString, 'text/xml');\n};\nexport const getViewXml = function (graph) {\n  let scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let cells = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let x0 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let y0 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  if (cells == null) {\n    const model = graph.getDataModel();\n    cells = [model.getRoot()];\n  }\n  const view = graph.getView();\n  let result = null;\n  // Disables events on the view\n  const eventsEnabled = view.isEventsEnabled();\n  view.setEventsEnabled(false);\n  // Workaround for label bounds not taken into account for image export.\n  // Creates a temporary draw pane which is used for rendering the text.\n  // Text rendering is required for finding the bounds of the labels.\n  const {\n    drawPane\n  } = view;\n  const {\n    overlayPane\n  } = view;\n  if (graph.dialect === DIALECT.SVG) {\n    view.drawPane = document.createElementNS(NS_SVG, 'g');\n    view.canvas.appendChild(view.drawPane);\n    // Redirects cell overlays into temporary container\n    view.overlayPane = document.createElementNS(NS_SVG, 'g');\n    view.canvas.appendChild(view.overlayPane);\n  } else {\n    view.drawPane = view.drawPane.cloneNode(false);\n    view.canvas.appendChild(view.drawPane);\n    // Redirects cell overlays into temporary container\n    view.overlayPane = view.overlayPane.cloneNode(false);\n    view.canvas.appendChild(view.overlayPane);\n  }\n  // Resets the translation\n  const translate = view.getTranslate();\n  view.translate = new Point(x0, y0);\n  // Creates the temporary cell states in the view\n  const temp = new TemporaryCellStates(graph.getView(), scale, cells);\n  try {\n    const enc = new Codec();\n    result = enc.encode(graph.getView());\n  } finally {\n    temp.destroy();\n    view.translate = translate;\n    view.canvas.removeChild(view.drawPane);\n    view.canvas.removeChild(view.overlayPane);\n    view.drawPane = drawPane;\n    view.overlayPane = overlayPane;\n    view.setEventsEnabled(eventsEnabled);\n  }\n  return result;\n};\n/**\n * Returns the XML content of the specified node. For Internet Explorer,\n * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n * no linefeed is defined.\n *\n * @param node DOM node to return the XML for.\n * @param linefeed Optional string that linefeeds are converted into. Default is\n * &#xa;\n */\nexport const getXml = function (node) {\n  let linefeed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '&#xa;';\n  const xmlSerializer = new XMLSerializer();\n  let xml = xmlSerializer.serializeToString(node);\n  // Replaces linefeeds with HTML Entities.\n  linefeed = linefeed || '&#xa;';\n  xml = xml.replace(/\\n/g, linefeed);\n  return xml;\n};\n/**\n * Returns a pretty printed string that represents the XML tree for the\n * given node. This method should only be used to print XML for reading,\n * use <getXml> instead to obtain a string for processing.\n *\n * @param node DOM node to return the XML for.\n * @param tab Optional string that specifies the indentation for one level.\n * @param indent Optional string that represents the current indentation.\n * @param newline Optional string that represents a linefeed.\n * @param ns Optional string that represents the target namespace URI.\n */\nexport const getPrettyXml = function (node) {\n  let tab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '  ';\n  let indent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  let newline = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '\\n';\n  let ns = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  const result = [];\n  if (node != null) {\n    if (node.namespaceURI != null && node.namespaceURI !== ns) {\n      ns = node.namespaceURI;\n      if (node.getAttribute('xmlns') == null) {\n        node.setAttribute('xmlns', node.namespaceURI);\n      }\n    }\n    if (node.nodeType === NODETYPE.DOCUMENT) {\n      result.push(getPrettyXml(node.documentElement, tab, indent, newline, ns));\n    } else if (node.nodeType === NODETYPE.DOCUMENT_FRAGMENT) {\n      let tmp = node.firstChild;\n      if (tmp != null) {\n        while (tmp != null) {\n          result.push(getPrettyXml(tmp, tab, indent, newline, ns));\n          tmp = tmp.nextSibling;\n        }\n      }\n    } else if (node.nodeType === NODETYPE.COMMENT) {\n      const value = getTextContent(node);\n      if (value.length > 0) {\n        result.push(\"\".concat(indent, \"<!--\").concat(value, \"-->\").concat(newline));\n      }\n    } else if (node.nodeType === NODETYPE.TEXT) {\n      const value = trim(getTextContent(node));\n      if (value && value.length > 0) {\n        result.push(indent + htmlEntities(value, false) + newline);\n      }\n    } else if (node.nodeType === NODETYPE.CDATA) {\n      const value = getTextContent(node);\n      if (value.length > 0) {\n        result.push(\"\".concat(indent, \"<![CDATA[\").concat(value, \"]]\").concat(newline));\n      }\n    } else {\n      result.push(\"\".concat(indent, \"<\").concat(node.nodeName));\n      // Creates the string with the node attributes\n      // and converts all HTML entities in the values\n      const attrs = node.attributes;\n      if (attrs != null) {\n        for (let i = 0; i < attrs.length; i += 1) {\n          const val = htmlEntities(attrs[i].value);\n          result.push(\" \".concat(attrs[i].nodeName, \"=\\\"\").concat(val, \"\\\"\"));\n        }\n      }\n      // Recursively creates the XML string for each child\n      // node and appends it here with an indentation\n      let tmp = node.firstChild;\n      if (tmp != null) {\n        result.push(\">\".concat(newline));\n        while (tmp != null) {\n          result.push(getPrettyXml(tmp, tab, indent + tab, newline, ns));\n          tmp = tmp.nextSibling;\n        }\n        result.push(\"\".concat(indent, \"</\").concat(node.nodeName, \">\").concat(newline));\n      } else {\n        result.push(\" />\".concat(newline));\n      }\n    }\n  }\n  return result.join('');\n};\n/**\n * Returns the first node where attr equals value.\n * This implementation does not use XPath.\n */\nexport const findNode = (node, attr, value) => {\n  if (node.nodeType === NODETYPE.ELEMENT) {\n    const tmp = node.getAttribute(attr);\n    if (tmp && tmp === value) {\n      return node;\n    }\n  }\n  node = node.firstChild;\n  while (node) {\n    const result = findNode(node, attr, value);\n    if (result) {\n      return result;\n    }\n    node = node.nextSibling;\n  }\n  return null;\n};","map":{"version":3,"names":["DIALECT","NODETYPE","NS_SVG","Point","htmlEntities","trim","TemporaryCellStates","getTextContent","Codec","createXmlDocument","document","implementation","createDocument","parseXml","xmlString","DOMParser","parseFromString","getViewXml","graph","scale","arguments","length","undefined","cells","x0","y0","model","getDataModel","getRoot","view","getView","result","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","SVG","createElementNS","canvas","appendChild","cloneNode","translate","getTranslate","temp","enc","encode","destroy","removeChild","getXml","node","linefeed","xmlSerializer","XMLSerializer","xml","serializeToString","replace","getPrettyXml","tab","indent","newline","ns","namespaceURI","getAttribute","setAttribute","nodeType","DOCUMENT","push","documentElement","DOCUMENT_FRAGMENT","tmp","firstChild","nextSibling","COMMENT","value","concat","TEXT","CDATA","nodeName","attrs","attributes","i","val","join","findNode","attr","ELEMENT"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/util/xmlUtils.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DIALECT, NODETYPE, NS_SVG } from './Constants';\nimport Point from '../view/geometry/Point';\nimport { htmlEntities, trim } from './StringUtils';\nimport TemporaryCellStates from '../view/cell/TemporaryCellStates';\nimport { getTextContent } from './domUtils';\nimport Codec from '../serialization/Codec';\n/**\n * Returns a new, empty XML document.\n */\nexport const createXmlDocument = () => {\n    return document.implementation.createDocument('', '', null);\n};\nexport const parseXml = (xmlString) => {\n    return new DOMParser().parseFromString(xmlString, 'text/xml');\n};\nexport const getViewXml = (graph, scale = 1, cells = null, x0 = 0, y0 = 0) => {\n    if (cells == null) {\n        const model = graph.getDataModel();\n        cells = [model.getRoot()];\n    }\n    const view = graph.getView();\n    let result = null;\n    // Disables events on the view\n    const eventsEnabled = view.isEventsEnabled();\n    view.setEventsEnabled(false);\n    // Workaround for label bounds not taken into account for image export.\n    // Creates a temporary draw pane which is used for rendering the text.\n    // Text rendering is required for finding the bounds of the labels.\n    const { drawPane } = view;\n    const { overlayPane } = view;\n    if (graph.dialect === DIALECT.SVG) {\n        view.drawPane = document.createElementNS(NS_SVG, 'g');\n        view.canvas.appendChild(view.drawPane);\n        // Redirects cell overlays into temporary container\n        view.overlayPane = document.createElementNS(NS_SVG, 'g');\n        view.canvas.appendChild(view.overlayPane);\n    }\n    else {\n        view.drawPane = view.drawPane.cloneNode(false);\n        view.canvas.appendChild(view.drawPane);\n        // Redirects cell overlays into temporary container\n        view.overlayPane = view.overlayPane.cloneNode(false);\n        view.canvas.appendChild(view.overlayPane);\n    }\n    // Resets the translation\n    const translate = view.getTranslate();\n    view.translate = new Point(x0, y0);\n    // Creates the temporary cell states in the view\n    const temp = new TemporaryCellStates(graph.getView(), scale, cells);\n    try {\n        const enc = new Codec();\n        result = enc.encode(graph.getView());\n    }\n    finally {\n        temp.destroy();\n        view.translate = translate;\n        view.canvas.removeChild(view.drawPane);\n        view.canvas.removeChild(view.overlayPane);\n        view.drawPane = drawPane;\n        view.overlayPane = overlayPane;\n        view.setEventsEnabled(eventsEnabled);\n    }\n    return result;\n};\n/**\n * Returns the XML content of the specified node. For Internet Explorer,\n * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n * no linefeed is defined.\n *\n * @param node DOM node to return the XML for.\n * @param linefeed Optional string that linefeeds are converted into. Default is\n * &#xa;\n */\nexport const getXml = (node, linefeed = '&#xa;') => {\n    const xmlSerializer = new XMLSerializer();\n    let xml = xmlSerializer.serializeToString(node);\n    // Replaces linefeeds with HTML Entities.\n    linefeed = linefeed || '&#xa;';\n    xml = xml.replace(/\\n/g, linefeed);\n    return xml;\n};\n/**\n * Returns a pretty printed string that represents the XML tree for the\n * given node. This method should only be used to print XML for reading,\n * use <getXml> instead to obtain a string for processing.\n *\n * @param node DOM node to return the XML for.\n * @param tab Optional string that specifies the indentation for one level.\n * @param indent Optional string that represents the current indentation.\n * @param newline Optional string that represents a linefeed.\n * @param ns Optional string that represents the target namespace URI.\n */\nexport const getPrettyXml = (node, tab = '  ', indent = '', newline = '\\n', ns = null) => {\n    const result = [];\n    if (node != null) {\n        if (node.namespaceURI != null && node.namespaceURI !== ns) {\n            ns = node.namespaceURI;\n            if (node.getAttribute('xmlns') == null) {\n                node.setAttribute('xmlns', node.namespaceURI);\n            }\n        }\n        if (node.nodeType === NODETYPE.DOCUMENT) {\n            result.push(getPrettyXml(node.documentElement, tab, indent, newline, ns));\n        }\n        else if (node.nodeType === NODETYPE.DOCUMENT_FRAGMENT) {\n            let tmp = node.firstChild;\n            if (tmp != null) {\n                while (tmp != null) {\n                    result.push(getPrettyXml(tmp, tab, indent, newline, ns));\n                    tmp = tmp.nextSibling;\n                }\n            }\n        }\n        else if (node.nodeType === NODETYPE.COMMENT) {\n            const value = getTextContent(node);\n            if (value.length > 0) {\n                result.push(`${indent}<!--${value}-->${newline}`);\n            }\n        }\n        else if (node.nodeType === NODETYPE.TEXT) {\n            const value = trim(getTextContent(node));\n            if (value && value.length > 0) {\n                result.push(indent + htmlEntities(value, false) + newline);\n            }\n        }\n        else if (node.nodeType === NODETYPE.CDATA) {\n            const value = getTextContent(node);\n            if (value.length > 0) {\n                result.push(`${indent}<![CDATA[${value}]]${newline}`);\n            }\n        }\n        else {\n            result.push(`${indent}<${node.nodeName}`);\n            // Creates the string with the node attributes\n            // and converts all HTML entities in the values\n            const attrs = node.attributes;\n            if (attrs != null) {\n                for (let i = 0; i < attrs.length; i += 1) {\n                    const val = htmlEntities(attrs[i].value);\n                    result.push(` ${attrs[i].nodeName}=\"${val}\"`);\n                }\n            }\n            // Recursively creates the XML string for each child\n            // node and appends it here with an indentation\n            let tmp = node.firstChild;\n            if (tmp != null) {\n                result.push(`>${newline}`);\n                while (tmp != null) {\n                    result.push(getPrettyXml(tmp, tab, indent + tab, newline, ns));\n                    tmp = tmp.nextSibling;\n                }\n                result.push(`${indent}</${node.nodeName}>${newline}`);\n            }\n            else {\n                result.push(` />${newline}`);\n            }\n        }\n    }\n    return result.join('');\n};\n/**\n * Returns the first node where attr equals value.\n * This implementation does not use XPath.\n */\nexport const findNode = (node, attr, value) => {\n    if (node.nodeType === NODETYPE.ELEMENT) {\n        const tmp = node.getAttribute(attr);\n        if (tmp && tmp === value) {\n            return node;\n        }\n    }\n    node = node.firstChild;\n    while (node) {\n        const result = findNode(node, attr, value);\n        if (result) {\n            return result;\n        }\n        node = node.nextSibling;\n    }\n    return null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { stripIcons } from '../../../../base/common/iconLabels.js';\nimport { isLocalizedString } from '../../../../platform/action/common/action.js';\nimport { AbstractCommandsQuickAccessProvider } from '../../../../platform/quickinput/browser/commandsQuickAccess.js';\nexport class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n  constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n    super(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n  }\n  getCodeEditorCommandPicks() {\n    const activeTextEditorControl = this.activeTextEditorControl;\n    if (!activeTextEditorControl) {\n      return [];\n    }\n    const editorCommandPicks = [];\n    for (const editorAction of activeTextEditorControl.getSupportedActions()) {\n      var _editorAction$metadat;\n      let commandDescription;\n      if ((_editorAction$metadat = editorAction.metadata) !== null && _editorAction$metadat !== void 0 && _editorAction$metadat.description) {\n        if (isLocalizedString(editorAction.metadata.description)) {\n          commandDescription = editorAction.metadata.description;\n        } else {\n          commandDescription = {\n            original: editorAction.metadata.description,\n            value: editorAction.metadata.description\n          };\n        }\n      }\n      editorCommandPicks.push({\n        commandId: editorAction.id,\n        commandAlias: editorAction.alias,\n        commandDescription,\n        label: stripIcons(editorAction.label) || editorAction.id\n      });\n    }\n    return editorCommandPicks;\n  }\n}","map":{"version":3,"names":["stripIcons","isLocalizedString","AbstractCommandsQuickAccessProvider","AbstractEditorCommandsQuickAccessProvider","constructor","options","instantiationService","keybindingService","commandService","telemetryService","dialogService","getCodeEditorCommandPicks","activeTextEditorControl","editorCommandPicks","editorAction","getSupportedActions","_editorAction$metadat","commandDescription","metadata","description","original","value","push","commandId","id","commandAlias","alias","label"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/quickAccess/browser/commandsQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { stripIcons } from '../../../../base/common/iconLabels.js';\nimport { isLocalizedString } from '../../../../platform/action/common/action.js';\nimport { AbstractCommandsQuickAccessProvider } from '../../../../platform/quickinput/browser/commandsQuickAccess.js';\nexport class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n        super(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n    }\n    getCodeEditorCommandPicks() {\n        const activeTextEditorControl = this.activeTextEditorControl;\n        if (!activeTextEditorControl) {\n            return [];\n        }\n        const editorCommandPicks = [];\n        for (const editorAction of activeTextEditorControl.getSupportedActions()) {\n            let commandDescription;\n            if (editorAction.metadata?.description) {\n                if (isLocalizedString(editorAction.metadata.description)) {\n                    commandDescription = editorAction.metadata.description;\n                }\n                else {\n                    commandDescription = { original: editorAction.metadata.description, value: editorAction.metadata.description };\n                }\n            }\n            editorCommandPicks.push({\n                commandId: editorAction.id,\n                commandAlias: editorAction.alias,\n                commandDescription,\n                label: stripIcons(editorAction.label) || editorAction.id,\n            });\n        }\n        return editorCommandPicks;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,uCAAuC;AAClE,SAASC,iBAAiB,QAAQ,8CAA8C;AAChF,SAASC,mCAAmC,QAAQ,gEAAgE;AACpH,OAAO,MAAMC,yCAAyC,SAASD,mCAAmC,CAAC;EAC/FE,WAAWA,CAACC,OAAO,EAAEC,oBAAoB,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,aAAa,EAAE;IAC3G,KAAK,CAACL,OAAO,EAAEC,oBAAoB,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,aAAa,CAAC;EAC5G;EACAC,yBAAyBA,CAAA,EAAG;IACxB,MAAMC,uBAAuB,GAAG,IAAI,CAACA,uBAAuB;IAC5D,IAAI,CAACA,uBAAuB,EAAE;MAC1B,OAAO,EAAE;IACb;IACA,MAAMC,kBAAkB,GAAG,EAAE;IAC7B,KAAK,MAAMC,YAAY,IAAIF,uBAAuB,CAACG,mBAAmB,CAAC,CAAC,EAAE;MAAA,IAAAC,qBAAA;MACtE,IAAIC,kBAAkB;MACtB,KAAAD,qBAAA,GAAIF,YAAY,CAACI,QAAQ,cAAAF,qBAAA,eAArBA,qBAAA,CAAuBG,WAAW,EAAE;QACpC,IAAIlB,iBAAiB,CAACa,YAAY,CAACI,QAAQ,CAACC,WAAW,CAAC,EAAE;UACtDF,kBAAkB,GAAGH,YAAY,CAACI,QAAQ,CAACC,WAAW;QAC1D,CAAC,MACI;UACDF,kBAAkB,GAAG;YAAEG,QAAQ,EAAEN,YAAY,CAACI,QAAQ,CAACC,WAAW;YAAEE,KAAK,EAAEP,YAAY,CAACI,QAAQ,CAACC;UAAY,CAAC;QAClH;MACJ;MACAN,kBAAkB,CAACS,IAAI,CAAC;QACpBC,SAAS,EAAET,YAAY,CAACU,EAAE;QAC1BC,YAAY,EAAEX,YAAY,CAACY,KAAK;QAChCT,kBAAkB;QAClBU,KAAK,EAAE3B,UAAU,CAACc,YAAY,CAACa,KAAK,CAAC,IAAIb,YAAY,CAACU;MAC1D,CAAC,CAAC;IACN;IACA,OAAOX,kBAAkB;EAC7B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
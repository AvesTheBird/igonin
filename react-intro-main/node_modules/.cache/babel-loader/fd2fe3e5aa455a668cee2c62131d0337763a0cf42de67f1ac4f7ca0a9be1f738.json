{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro\\\\src\\\\components\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { Graph, CellRenderer, GraphView, SelectionHandler, PanningHandler, TooltipHandler, SelectionCellsHandler, PopupMenuHandler, RubberBandHandler, UndoManager } from '@maxgraph/core';\nimport '@maxgraph/core/css/common.css'; // стили\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const graphContainerRef = useRef(null);\n  useEffect(() => {\n    const graphContainer = graphContainerRef.current;\n    if (!graphContainer) return;\n    const graph = new Graph(graphContainer, null, [TooltipHandler, SelectionCellsHandler, PopupMenuHandler, PanningHandler, SelectionHandler, RubberBandHandler]);\n    graph.view.scale = 1;\n    graph.setPanning(true);\n    graph.setConnectable(true);\n    graph.setConnectableEdges(true);\n    graph.setDisconnectOnMove(false);\n    graph.foldingEnabled = false;\n\n    //Maximum size\n    graph.maximumGraphBounds = new Rectangle(0, 0, 800, 600);\n    graph.border = 50;\n\n    // Enables return key to stop editing (use shift-enter for newlines)\n    graph.setEnterStopsCellEditing(true);\n\n    // Undo/redo\n    const undoManager = new UndoManager();\n    const listener = function (sender, evt) {\n      undoManager.undoableEditHappened(evt.getProperty('edit'));\n    };\n    graph.getDataModel().addListener(InternalEvent.UNDO, listener);\n    graph.getView().addListener(InternalEvent.UNDO, listener);\n\n    // Показывает XML для отладки фактической модели\n    const deleteButton = document.createElement('button');\n    deleteButton.textContent = 'Delete';\n    deleteButton.addEventListener('click', function () {\n      graph.removeCells();\n    });\n    graphContainer.appendChild(deleteButton);\n\n    // Wire-mode\n    const wireModeCheckbox = document.createElement('input');\n    wireModeCheckbox.setAttribute('type', 'checkbox');\n    graphContainer.appendChild(wireModeCheckbox);\n    const wireModeLabel = document.createElement('span');\n    wireModeLabel.textContent = 'Wire Mode';\n    graphContainer.appendChild(wireModeLabel);\n\n    // Grid\n    const gridCheckbox = document.createElement('input');\n    gridCheckbox.setAttribute('type', 'checkbox');\n    gridCheckbox.setAttribute('checked', 'true');\n    graphContainer.appendChild(gridCheckbox);\n    const gridLabel = document.createElement('span');\n    gridLabel.textContent = 'Grid';\n    graphContainer.appendChild(gridLabel);\n    gridCheckbox.addEventListener('click', function (evt) {\n      if (gridCheckbox.checked) {\n        graphContainer.style.background = 'url(./images/grid.gif)';\n      } else {\n        graphContainer.style.background = '';\n      }\n    });\n    return () => {\n      // Очистка ресурсов или подписок при размонтировании компонента\n    };\n  }, []); // пустой массив зависимостей означает, что эффект будет запущен только один раз после монтирования\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: graphContainerRef,\n    style: {\n      overflow: 'auto',\n      position: 'relative',\n      width: '800px',\n      height: '600px',\n      border: '1px solid gray',\n      background: \"url('images/wires-grid.gif')\",\n      backgroundPosition: '-1px 0px',\n      cursor: 'crosshair'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphComponent, \"T2LhyAvPiiq95tTQ9P6wK78bc+c=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useRef","useEffect","Graph","CellRenderer","GraphView","SelectionHandler","PanningHandler","TooltipHandler","SelectionCellsHandler","PopupMenuHandler","RubberBandHandler","UndoManager","jsxDEV","_jsxDEV","GraphComponent","_s","graphContainerRef","graphContainer","current","graph","view","scale","setPanning","setConnectable","setConnectableEdges","setDisconnectOnMove","foldingEnabled","maximumGraphBounds","Rectangle","border","setEnterStopsCellEditing","undoManager","listener","sender","evt","undoableEditHappened","getProperty","getDataModel","addListener","InternalEvent","UNDO","getView","deleteButton","document","createElement","textContent","addEventListener","removeCells","appendChild","wireModeCheckbox","setAttribute","wireModeLabel","gridCheckbox","gridLabel","checked","style","background","ref","overflow","position","width","height","backgroundPosition","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro/src/components/GraphComponent.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport {\r\n  Graph,\r\n  CellRenderer,\r\n  GraphView,\r\n  SelectionHandler,\r\n  PanningHandler,\r\n  TooltipHandler,\r\n  SelectionCellsHandler,\r\n  PopupMenuHandler,\r\n  RubberBandHandler,\r\n  UndoManager,\r\n} from '@maxgraph/core';\r\nimport '@maxgraph/core/css/common.css'; // стили\r\n\r\nconst GraphComponent = () => {\r\n  const graphContainerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const graphContainer = graphContainerRef.current;\r\n\r\n    if (!graphContainer) return;\r\n\r\n    const graph = new Graph(graphContainer, null, [\r\n      TooltipHandler,\r\n      SelectionCellsHandler,\r\n      PopupMenuHandler,\r\n      PanningHandler,\r\n      SelectionHandler,\r\n      RubberBandHandler,\r\n    ]);\r\n\r\n    graph.view.scale = 1;\r\n    graph.setPanning(true);\r\n    graph.setConnectable(true);\r\n    graph.setConnectableEdges(true);\r\n    graph.setDisconnectOnMove(false);\r\n    graph.foldingEnabled = false;\r\n\r\n    //Maximum size\r\n    graph.maximumGraphBounds = new Rectangle(0, 0, 800, 600);\r\n    graph.border = 50;\r\n\r\n    // Enables return key to stop editing (use shift-enter for newlines)\r\n    graph.setEnterStopsCellEditing(true);\r\n\r\n    // Undo/redo\r\n    const undoManager = new UndoManager();\r\n    const listener = function (sender, evt) {\r\n      undoManager.undoableEditHappened(evt.getProperty('edit'));\r\n    };\r\n    graph.getDataModel().addListener(InternalEvent.UNDO, listener);\r\n    graph.getView().addListener(InternalEvent.UNDO, listener);\r\n\r\n    // Показывает XML для отладки фактической модели\r\n    const deleteButton = document.createElement('button');\r\n    deleteButton.textContent = 'Delete';\r\n    deleteButton.addEventListener('click', function () {\r\n      graph.removeCells();\r\n    });\r\n    graphContainer.appendChild(deleteButton);\r\n\r\n    // Wire-mode\r\n    const wireModeCheckbox = document.createElement('input');\r\n    wireModeCheckbox.setAttribute('type', 'checkbox');\r\n    graphContainer.appendChild(wireModeCheckbox);\r\n    const wireModeLabel = document.createElement('span');\r\n    wireModeLabel.textContent = 'Wire Mode';\r\n    graphContainer.appendChild(wireModeLabel);\r\n\r\n    // Grid\r\n    const gridCheckbox = document.createElement('input');\r\n    gridCheckbox.setAttribute('type', 'checkbox');\r\n    gridCheckbox.setAttribute('checked', 'true');\r\n    graphContainer.appendChild(gridCheckbox);\r\n    const gridLabel = document.createElement('span');\r\n    gridLabel.textContent = 'Grid';\r\n    graphContainer.appendChild(gridLabel);\r\n\r\n    gridCheckbox.addEventListener('click', function (evt) {\r\n      if (gridCheckbox.checked) {\r\n        graphContainer.style.background = 'url(./images/grid.gif)';\r\n      } else {\r\n        graphContainer.style.background = '';\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      // Очистка ресурсов или подписок при размонтировании компонента\r\n    };\r\n  }, []); // пустой массив зависимостей означает, что эффект будет запущен только один раз после монтирования\r\n\r\n  return (\r\n    <div\r\n      ref={graphContainerRef}\r\n      style={{\r\n        overflow: 'auto',\r\n        position: 'relative',\r\n        width: '800px',\r\n        height: '600px',\r\n        border: '1px solid gray',\r\n        background: \"url('images/wires-grid.gif')\",\r\n        backgroundPosition: '-1px 0px',\r\n        cursor: 'crosshair',\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
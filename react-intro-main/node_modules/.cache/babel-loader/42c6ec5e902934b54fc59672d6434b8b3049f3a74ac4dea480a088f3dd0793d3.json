{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellMarker from './CellMarker';\n/**\n * Event handler that highlights cells\n *\n * ```javascript\n * new mxCellTracker(graph, '#00FF00');\n * ```\n *\n * For detecting dragEnter, dragOver and dragLeave on cells, the following code can be used:\n * ```javascript\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *\n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *\n *       this.cell = tmp;\n *\n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *\n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     MaxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     MaxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     MaxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * ```\n */\nclass CellTracker extends CellMarker {\n  constructor(graph, color) {\n    let funct = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(graph, color);\n    this.destroyed = false;\n    this.graph.addMouseListener(this);\n    if (funct) {\n      this.getCell = funct;\n    }\n  }\n  /**\n   * Ignores the event. The event is not consumed.\n   */\n  mouseDown(sender, me) {\n    return;\n  }\n  /**\n   * Handles the event by highlighting the cell under the mousepointer if it\n   * is over the hotspot region of the cell.\n   */\n  mouseMove(sender, me) {\n    if (this.isEnabled()) {\n      this.process(me);\n    }\n  }\n  /**\n   * Handles the event by resetting the highlight.\n   */\n  mouseUp(sender, me) {\n    return;\n  }\n  /**\n   * Destroys the object and all its resources and DOM nodes. This doesn't\n   * normally need to be called. It is called automatically when the window\n   * unloads.\n   */\n  destroy() {\n    if (!this.destroyed) {\n      this.destroyed = true;\n      this.graph.removeMouseListener(this);\n      super.destroy();\n    }\n  }\n}\nexport default CellTracker;","map":{"version":3,"names":["CellMarker","CellTracker","constructor","graph","color","funct","arguments","length","undefined","destroyed","addMouseListener","getCell","mouseDown","sender","me","mouseMove","isEnabled","process","mouseUp","destroy","removeMouseListener"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/view/cell/CellTracker.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellMarker from './CellMarker';\n/**\n * Event handler that highlights cells\n *\n * ```javascript\n * new mxCellTracker(graph, '#00FF00');\n * ```\n *\n * For detecting dragEnter, dragOver and dragLeave on cells, the following code can be used:\n * ```javascript\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *\n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *\n *       this.cell = tmp;\n *\n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *\n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     MaxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     MaxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     MaxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * ```\n */\nclass CellTracker extends CellMarker {\n    constructor(graph, color, funct = null) {\n        super(graph, color);\n        this.destroyed = false;\n        this.graph.addMouseListener(this);\n        if (funct) {\n            this.getCell = funct;\n        }\n    }\n    /**\n     * Ignores the event. The event is not consumed.\n     */\n    mouseDown(sender, me) {\n        return;\n    }\n    /**\n     * Handles the event by highlighting the cell under the mousepointer if it\n     * is over the hotspot region of the cell.\n     */\n    mouseMove(sender, me) {\n        if (this.isEnabled()) {\n            this.process(me);\n        }\n    }\n    /**\n     * Handles the event by resetting the highlight.\n     */\n    mouseUp(sender, me) {\n        return;\n    }\n    /**\n     * Destroys the object and all its resources and DOM nodes. This doesn't\n     * normally need to be called. It is called automatically when the window\n     * unloads.\n     */\n    destroy() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            this.graph.removeMouseListener(this);\n            super.destroy();\n        }\n    }\n}\nexport default CellTracker;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASD,UAAU,CAAC;EACjCE,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAgB;IAAA,IAAdC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAClC,KAAK,CAACH,KAAK,EAAEC,KAAK,CAAC;IACnB,IAAI,CAACK,SAAS,GAAG,KAAK;IACtB,IAAI,CAACN,KAAK,CAACO,gBAAgB,CAAC,IAAI,CAAC;IACjC,IAAIL,KAAK,EAAE;MACP,IAAI,CAACM,OAAO,GAAGN,KAAK;IACxB;EACJ;EACA;AACJ;AACA;EACIO,SAASA,CAACC,MAAM,EAAEC,EAAE,EAAE;IAClB;EACJ;EACA;AACJ;AACA;AACA;EACIC,SAASA,CAACF,MAAM,EAAEC,EAAE,EAAE;IAClB,IAAI,IAAI,CAACE,SAAS,CAAC,CAAC,EAAE;MAClB,IAAI,CAACC,OAAO,CAACH,EAAE,CAAC;IACpB;EACJ;EACA;AACJ;AACA;EACII,OAAOA,CAACL,MAAM,EAAEC,EAAE,EAAE;IAChB;EACJ;EACA;AACJ;AACA;AACA;AACA;EACIK,OAAOA,CAAA,EAAG;IACN,IAAI,CAAC,IAAI,CAACV,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,CAACN,KAAK,CAACiB,mBAAmB,CAAC,IAAI,CAAC;MACpC,KAAK,CAACD,OAAO,CAAC,CAAC;IACnB;EACJ;AACJ;AACA,eAAelB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
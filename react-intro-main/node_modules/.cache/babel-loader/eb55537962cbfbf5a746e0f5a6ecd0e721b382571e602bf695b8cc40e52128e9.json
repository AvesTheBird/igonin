{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Editor } from '@monaco-editor/react';\nimport registerVHDL from './monaco-vhdl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditor = ({\n  id,\n  onCodeChange,\n  initialCode\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const editorInstanceRef = useRef(null);\n  useEffect(() => {\n    if (editorRef.current) {\n      const editorInstance = monaco.editor.create(editorRef.current, {\n        value: initialCode,\n        language: 'vhdl',\n        theme: 'my-custom-dark',\n        automaticLayout: true\n      });\n      editorInstanceRef.current = editorInstance;\n      return () => {\n        contentChangeListener.dispose();\n        editorInstance.dispose();\n      };\n    }\n  }, [initialCode, onCodeChange]);\n  useEffect(() => {\n    if (editorInstanceRef.current) {\n      const editorInstance = editorInstanceRef.current;\n      const currentValue = editorInstance.getValue();\n\n      // Avoid resetting content if it's already the same\n      if (currentValue !== initialCode) {\n        const cursorPosition = editorInstance.getPosition();\n        editorInstance.setValue(initialCode);\n\n        // Restore the cursor position after updating content\n        if (cursorPosition) {\n          editorInstance.setPosition(cursorPosition);\n        }\n      }\n    }\n  }, [initialCode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    ref: editorRef,\n    style: {\n      height: '400px',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 10\n  }, this);\n};\n_s(VHDLEditor, \"mx6G7OvDCwisvYbdJ5Is3sSGAL4=\");\n_c = VHDLEditor;\nconst VHDLEditorWithCompiler = () => {\n  _s2();\n  const [architectureCode, setArchitectureCode] = React.useState(`library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity adder is\n  generic (\n    operand_width_g: natural\n  );\n\n  port (\n    clk : in std_logic;\n    rst_n : in std_logic;\n\n    -- a_in, b_in and sum_out are signed numbers (2's complement)\n    a_in : in std_logic_vector(operand_width_g - 1 downto 0);\n    b_in : in std_logic_vector(operand_width_g - 1 downto 0);\n    sum_out : out std_logic_vector(operand_width_g downto 0)\n  );\nend entity;\n\narchitecture rtl of adder is\n  constant outw: natural := operand_width_g + 1; -- Output width\n  signal result_r: signed(operand_width_g downto 0);\nbegin\n  -- Internal signal result_r goes to output port\n  sum_out <= std_logic_vector(result_r);\n\n  -- Synchronous process performs addition on clock edge\n  sync: process(rst_n, clk)\n  begin\n    if (rst_n = '0') then\n      result_r <= to_signed(0, outw);\n    elsif rising_edge(clk) then\n      result_r <= resize(signed(a_in), outw) + resize(signed(b_in), outw);\n    end if;\n  end process;\nend architecture;`);\n  const [testbenchCode, setTestbenchCode] = React.useState(`library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity tb_adder is\nend tb_adder;\n\narchitecture testbench of tb_adder is\n\n  -- Define constants: bit widths and duration of clk period\n  constant input_w_c : integer := 8;\n  constant output_w_c : integer := 9;\n  constant clk_period_c : time := 100 ns;\n\n  -- Calculate minimum and maximum values of input values\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\n\n  -- Component declaration of DUV\n  component adder\n    generic (\n      operand_width_g : integer\n    );\n    port (\n      clk : in std_logic;\n      rst_n : in std_logic;\n      a_in : in std_logic_vector(operand_width_g-1 downto 0);\n      b_in : in std_logic_vector(operand_width_g-1 downto 0);\n      sum_out : out std_logic_vector(operand_width_g downto 0)\n    );\n  end component;\n\n  -- Define the needed signals\n  signal clk : std_logic := '0';\n  signal rst_n : std_logic := '0';\n  signal term1_r : signed(input_w_c-1 downto 0);\n  signal term2_r : signed(input_w_c-1 downto 0);\n  signal sum : std_logic_vector(output_w_c-1 downto 0);\n  signal expected_sum_r : signed(output_w_c-1 downto 0);\n  signal end_simulation_r : std_logic;\n\nbegin -- testbench\n\n  adder_1 : adder\n    generic map (\n      operand_width_g => input_w_c)\n    port map (\n      clk => clk,\n      rst_n => rst_n,\n      a_in => std_logic_vector(term1_r),\n      b_in => std_logic_vector(term2_r),\n      sum_out => sum);\n\n  rst_n <= '1' after clk_period_c*2;\n\n  clk_gen : process (clk)\n  begin\n    clk <= not clk after clk_period_c/2;\n  end process clk_gen;\n\n  input_gen_output_check : process (clk, rst_n)\n  begin\n    if rst_n = '0' then\n      term1_r <= min_value_c;\n      term2_r <= min_value_c;\n      expected_sum_r <= (others => '0');\n      end_simulation_r <= '0';\n    elsif clk'event and clk = '1' then\n      if ( term1_r = max_value_c ) then\n        term1_r <= min_value_c;\n        if ( term2_r = max_value_c ) then\n          term2_r <= min_value_c;\n          end_simulation_r <= '1';\n        else\n          term2_r <= term2_r + to_signed(1, input_w_c);\n        end if;\n      else\n        term1_r <= term1_r + to_signed(1, input_w_c);\n      end if;\n      expected_sum_r <= resize(term1_r, output_w_c) + resize(term2_r, output_w_c);\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\n        report \"output signal is not equal to the sum of the inputs\"\n        severity failure;\n      assert end_simulation_r = '0'\n        report \"Simulation ended!\" severity failure;\n    end if;\n  end process input_gen_output_check;\n\nend testbench;\n`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"architecture-editor\",\n      onCodeChange: setArchitectureCode,\n      initialCode: architectureCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"testbench-editor\",\n      onCodeChange: setTestbenchCode,\n      initialCode: testbenchCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 3\n  }, this);\n};\n_s2(VHDLEditorWithCompiler, \"hpBUoV32Bp3uTqlW0akQEXiCLVw=\");\n_c2 = VHDLEditorWithCompiler;\nexport default VHDLEditorWithCompiler;\nvar _c, _c2;\n$RefreshReg$(_c, \"VHDLEditor\");\n$RefreshReg$(_c2, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Editor","registerVHDL","jsxDEV","_jsxDEV","VHDLEditor","id","onCodeChange","initialCode","_s","editorRef","editorInstanceRef","current","editorInstance","monaco","editor","create","value","language","theme","automaticLayout","contentChangeListener","dispose","currentValue","getValue","cursorPosition","getPosition","setValue","setPosition","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","VHDLEditorWithCompiler","_s2","architectureCode","setArchitectureCode","testbenchCode","setTestbenchCode","children","_c2","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Editor } from '@monaco-editor/react';\r\nimport registerVHDL from './monaco-vhdl';\r\n\r\nconst VHDLEditor = ({ id, onCodeChange, initialCode }) => {\r\n  const editorRef = useRef(null);\r\n  const editorInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (editorRef.current) {\r\n      const editorInstance = monaco.editor.create(editorRef.current, {\r\n        value: initialCode,\r\n        language: 'vhdl',\r\n        theme: 'my-custom-dark',\r\n        automaticLayout: true,\r\n      });\r\n\r\n      editorInstanceRef.current = editorInstance;\r\n\r\n      return () => {\r\n        contentChangeListener.dispose();\r\n        editorInstance.dispose();\r\n      };\r\n    }\r\n  }, [initialCode, onCodeChange]);\r\n\r\n  useEffect(() => {\r\n    if (editorInstanceRef.current) {\r\n      const editorInstance = editorInstanceRef.current;\r\n      const currentValue = editorInstance.getValue();\r\n\r\n      // Avoid resetting content if it's already the same\r\n      if (currentValue !== initialCode) {\r\n        const cursorPosition = editorInstance.getPosition();\r\n\r\n        editorInstance.setValue(initialCode);\r\n\r\n        // Restore the cursor position after updating content\r\n        if (cursorPosition) {\r\n          editorInstance.setPosition(cursorPosition);\r\n        }\r\n      }\r\n    }\r\n  }, [initialCode]);\r\n\r\n  return <div id={id} ref={editorRef} style={{ height: '400px', width: '100%' }} />;\r\n};\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = React.useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity adder is\r\n  generic (\r\n    operand_width_g: natural\r\n  );\r\n\r\n  port (\r\n    clk : in std_logic;\r\n    rst_n : in std_logic;\r\n\r\n    -- a_in, b_in and sum_out are signed numbers (2's complement)\r\n    a_in : in std_logic_vector(operand_width_g - 1 downto 0);\r\n    b_in : in std_logic_vector(operand_width_g - 1 downto 0);\r\n    sum_out : out std_logic_vector(operand_width_g downto 0)\r\n  );\r\nend entity;\r\n\r\narchitecture rtl of adder is\r\n  constant outw: natural := operand_width_g + 1; -- Output width\r\n  signal result_r: signed(operand_width_g downto 0);\r\nbegin\r\n  -- Internal signal result_r goes to output port\r\n  sum_out <= std_logic_vector(result_r);\r\n\r\n  -- Synchronous process performs addition on clock edge\r\n  sync: process(rst_n, clk)\r\n  begin\r\n    if (rst_n = '0') then\r\n      result_r <= to_signed(0, outw);\r\n    elsif rising_edge(clk) then\r\n      result_r <= resize(signed(a_in), outw) + resize(signed(b_in), outw);\r\n    end if;\r\n  end process;\r\nend architecture;`);\r\n\r\n  const [testbenchCode, setTestbenchCode] = React.useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity tb_adder is\r\nend tb_adder;\r\n\r\narchitecture testbench of tb_adder is\r\n\r\n  -- Define constants: bit widths and duration of clk period\r\n  constant input_w_c : integer := 8;\r\n  constant output_w_c : integer := 9;\r\n  constant clk_period_c : time := 100 ns;\r\n\r\n  -- Calculate minimum and maximum values of input values\r\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\r\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\r\n\r\n  -- Component declaration of DUV\r\n  component adder\r\n    generic (\r\n      operand_width_g : integer\r\n    );\r\n    port (\r\n      clk : in std_logic;\r\n      rst_n : in std_logic;\r\n      a_in : in std_logic_vector(operand_width_g-1 downto 0);\r\n      b_in : in std_logic_vector(operand_width_g-1 downto 0);\r\n      sum_out : out std_logic_vector(operand_width_g downto 0)\r\n    );\r\n  end component;\r\n\r\n  -- Define the needed signals\r\n  signal clk : std_logic := '0';\r\n  signal rst_n : std_logic := '0';\r\n  signal term1_r : signed(input_w_c-1 downto 0);\r\n  signal term2_r : signed(input_w_c-1 downto 0);\r\n  signal sum : std_logic_vector(output_w_c-1 downto 0);\r\n  signal expected_sum_r : signed(output_w_c-1 downto 0);\r\n  signal end_simulation_r : std_logic;\r\n\r\nbegin -- testbench\r\n\r\n  adder_1 : adder\r\n    generic map (\r\n      operand_width_g => input_w_c)\r\n    port map (\r\n      clk => clk,\r\n      rst_n => rst_n,\r\n      a_in => std_logic_vector(term1_r),\r\n      b_in => std_logic_vector(term2_r),\r\n      sum_out => sum);\r\n\r\n  rst_n <= '1' after clk_period_c*2;\r\n\r\n  clk_gen : process (clk)\r\n  begin\r\n    clk <= not clk after clk_period_c/2;\r\n  end process clk_gen;\r\n\r\n  input_gen_output_check : process (clk, rst_n)\r\n  begin\r\n    if rst_n = '0' then\r\n      term1_r <= min_value_c;\r\n      term2_r <= min_value_c;\r\n      expected_sum_r <= (others => '0');\r\n      end_simulation_r <= '0';\r\n    elsif clk'event and clk = '1' then\r\n      if ( term1_r = max_value_c ) then\r\n        term1_r <= min_value_c;\r\n        if ( term2_r = max_value_c ) then\r\n          term2_r <= min_value_c;\r\n          end_simulation_r <= '1';\r\n        else\r\n          term2_r <= term2_r + to_signed(1, input_w_c);\r\n        end if;\r\n      else\r\n        term1_r <= term1_r + to_signed(1, input_w_c);\r\n      end if;\r\n      expected_sum_r <= resize(term1_r, output_w_c) + resize(term2_r, output_w_c);\r\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\r\n        report \"output signal is not equal to the sum of the inputs\"\r\n        severity failure;\r\n      assert end_simulation_r = '0'\r\n        report \"Simulation ended!\" severity failure;\r\n    end if;\r\n  end process input_gen_output_check;\r\n\r\nend testbench;\r\n`);\r\n\r\nreturn (\r\n  <div>\r\n    <h3>Архитектура</h3>\r\n    <VHDLEditor id=\"architecture-editor\" onCodeChange={setArchitectureCode} initialCode={architectureCode} />\r\n    <h3>Тестовый стенд</h3>\r\n    <VHDLEditor id=\"testbench-editor\" onCodeChange={setTestbenchCode} initialCode={testbenchCode} />\r\n  </div>\r\n);\r\n};\r\n\r\nexport default VHDLEditorWithCompiler;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport RectangleShape from './RectangleShape';\nimport { NONE } from '../../../util/Constants';\n/**\n * Extends {@link mxShape} to implement an image shape.\n * This shape is registered under {@link mxConstants.SHAPE_IMAGE} in {@link cellRenderer}.\n *\n * @class ImageShape\n * @extends {RectangleShape}\n */\nclass ImageShape extends RectangleShape {\n  constructor(bounds, imageSrc) {\n    let fill = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#FFFFFF';\n    let stroke = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#000000';\n    let strokeWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    super(bounds, fill, stroke, strokeWidth);\n    // Used in mxCellRenderer\n    this.overlay = null;\n    /**\n     * Switch to preserve image aspect. Default is true.\n     * @default true\n     */\n    // preserveImageAspect: boolean;\n    this.preserveImageAspect = true;\n    this.imageSrc = imageSrc;\n    this.shadow = false;\n  }\n  /**\n   * Disables offset in IE9 for crisper image output.\n   */\n  getSvgScreenOffset() {\n    return 0;\n  }\n  /**\n   * Overrides {@link mxShape.apply} to replace the fill and stroke colors with the\n   * respective values from {@link 'imageBackground'} and\n   * {@link 'imageBorder'}.\n   *\n   * Applies the style of the given {@link CellState} to the shape. This\n   * implementation assigns the following styles to local fields:\n   *\n   * - {@link 'imageBackground'} => fill\n   * - {@link 'imageBorder'} => stroke\n   *\n   * @param {CellState} state   {@link CellState} of the corresponding cell.\n   */\n  // apply(state: CellState): void;\n  apply(state) {\n    super.apply(state);\n    this.fill = NONE;\n    this.stroke = NONE;\n    this.gradient = NONE;\n    if (this.style && this.style.imageAspect != null) {\n      this.preserveImageAspect = this.style.imageAspect;\n    }\n  }\n  /**\n   * Returns true if HTML is allowed for this shape. This implementation always\n   * returns false.\n   */\n  isHtmlAllowed() {\n    return !this.preserveImageAspect;\n  }\n  /**\n   * Creates and returns the HTML DOM node(s) to represent\n   * this shape. This implementation falls back to <createVml>\n   * so that the HTML creation is optional.\n   */\n  createHtml() {\n    const node = document.createElement('div');\n    node.style.position = 'absolute';\n    return node;\n  }\n  /**\n   * Disables inherited roundable support.\n   */\n  isRoundable(c, x, y, w, h) {\n    return false;\n  }\n  /**\n   * Generic background painting implementation.\n   */\n  paintVertexShape(c, x, y, w, h) {\n    if (this.imageSrc) {\n      var _this$style$imageBack, _this$style, _this$style$imageBord, _this$style2;\n      const fill = (_this$style$imageBack = (_this$style = this.style) === null || _this$style === void 0 ? void 0 : _this$style.imageBackground) !== null && _this$style$imageBack !== void 0 ? _this$style$imageBack : NONE;\n      const stroke = (_this$style$imageBord = (_this$style2 = this.style) === null || _this$style2 === void 0 ? void 0 : _this$style2.imageBorder) !== null && _this$style$imageBord !== void 0 ? _this$style$imageBord : NONE;\n      if (fill !== NONE) {\n        // Stroke rendering required for shadow\n        c.setFillColor(fill);\n        c.setStrokeColor(stroke);\n        c.rect(x, y, w, h);\n        c.fillAndStroke();\n      }\n      // FlipH/V are implicit via mxShape.updateTransform\n      c.image(x, y, w, h, this.imageSrc, this.preserveImageAspect, false, false);\n      if (stroke !== NONE) {\n        c.setShadow(false);\n        c.setStrokeColor(stroke);\n        c.rect(x, y, w, h);\n        c.stroke();\n      }\n    } else {\n      this.paintBackground(c, x, y, w, h);\n    }\n  }\n}\nexport default ImageShape;","map":{"version":3,"names":["RectangleShape","NONE","ImageShape","constructor","bounds","imageSrc","fill","arguments","length","undefined","stroke","strokeWidth","overlay","preserveImageAspect","shadow","getSvgScreenOffset","apply","state","gradient","style","imageAspect","isHtmlAllowed","createHtml","node","document","createElement","position","isRoundable","c","x","y","w","h","paintVertexShape","_this$style$imageBack","_this$style","_this$style$imageBord","_this$style2","imageBackground","imageBorder","setFillColor","setStrokeColor","rect","fillAndStroke","image","setShadow","paintBackground"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/view/geometry/node/ImageShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport RectangleShape from './RectangleShape';\nimport { NONE } from '../../../util/Constants';\n/**\n * Extends {@link mxShape} to implement an image shape.\n * This shape is registered under {@link mxConstants.SHAPE_IMAGE} in {@link cellRenderer}.\n *\n * @class ImageShape\n * @extends {RectangleShape}\n */\nclass ImageShape extends RectangleShape {\n    constructor(bounds, imageSrc, fill = '#FFFFFF', stroke = '#000000', strokeWidth = 1) {\n        super(bounds, fill, stroke, strokeWidth);\n        // Used in mxCellRenderer\n        this.overlay = null;\n        /**\n         * Switch to preserve image aspect. Default is true.\n         * @default true\n         */\n        // preserveImageAspect: boolean;\n        this.preserveImageAspect = true;\n        this.imageSrc = imageSrc;\n        this.shadow = false;\n    }\n    /**\n     * Disables offset in IE9 for crisper image output.\n     */\n    getSvgScreenOffset() {\n        return 0;\n    }\n    /**\n     * Overrides {@link mxShape.apply} to replace the fill and stroke colors with the\n     * respective values from {@link 'imageBackground'} and\n     * {@link 'imageBorder'}.\n     *\n     * Applies the style of the given {@link CellState} to the shape. This\n     * implementation assigns the following styles to local fields:\n     *\n     * - {@link 'imageBackground'} => fill\n     * - {@link 'imageBorder'} => stroke\n     *\n     * @param {CellState} state   {@link CellState} of the corresponding cell.\n     */\n    // apply(state: CellState): void;\n    apply(state) {\n        super.apply(state);\n        this.fill = NONE;\n        this.stroke = NONE;\n        this.gradient = NONE;\n        if (this.style && this.style.imageAspect != null) {\n            this.preserveImageAspect = this.style.imageAspect;\n        }\n    }\n    /**\n     * Returns true if HTML is allowed for this shape. This implementation always\n     * returns false.\n     */\n    isHtmlAllowed() {\n        return !this.preserveImageAspect;\n    }\n    /**\n     * Creates and returns the HTML DOM node(s) to represent\n     * this shape. This implementation falls back to <createVml>\n     * so that the HTML creation is optional.\n     */\n    createHtml() {\n        const node = document.createElement('div');\n        node.style.position = 'absolute';\n        return node;\n    }\n    /**\n     * Disables inherited roundable support.\n     */\n    isRoundable(c, x, y, w, h) {\n        return false;\n    }\n    /**\n     * Generic background painting implementation.\n     */\n    paintVertexShape(c, x, y, w, h) {\n        if (this.imageSrc) {\n            const fill = this.style?.imageBackground ?? NONE;\n            const stroke = this.style?.imageBorder ?? NONE;\n            if (fill !== NONE) {\n                // Stroke rendering required for shadow\n                c.setFillColor(fill);\n                c.setStrokeColor(stroke);\n                c.rect(x, y, w, h);\n                c.fillAndStroke();\n            }\n            // FlipH/V are implicit via mxShape.updateTransform\n            c.image(x, y, w, h, this.imageSrc, this.preserveImageAspect, false, false);\n            if (stroke !== NONE) {\n                c.setShadow(false);\n                c.setStrokeColor(stroke);\n                c.rect(x, y, w, h);\n                c.stroke();\n            }\n        }\n        else {\n            this.paintBackground(c, x, y, w, h);\n        }\n    }\n}\nexport default ImageShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
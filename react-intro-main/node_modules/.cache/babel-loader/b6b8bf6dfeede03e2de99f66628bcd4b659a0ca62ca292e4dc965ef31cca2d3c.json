{"ast":null,"code":"var _jsxFileName = \"D:\\\\OSPanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Editor from '@monaco-editor/react';\nimport registerVHDL from './monaco-vhdl';\nimport LogicElementManager from './LogicElementManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditor = ({\n  id,\n  onCodeChange,\n  initialCode\n}) => {\n  const handleEditorWillMount = monaco => {\n    registerVHDL(monaco); // Регистрируем язык VHDL\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    className: \"vhdl-editor\",\n    children: /*#__PURE__*/_jsxDEV(Editor, {\n      defaultLanguage: \"vhdl\",\n      defaultValue: initialCode,\n      theme: \"my-custom-dark\",\n      beforeMount: handleEditorWillMount,\n      onChange: value => onCodeChange(value || '') // Обработчик изменений\n      ,\n      options: {\n        automaticLayout: true // Автоматическое изменение размера\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = VHDLEditor;\nconst CompilerConsole = ({\n  output\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"compiler-console\",\n  id: \"compilerconsole\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    style: {\n      color: 'black',\n      marginLeft: '15px'\n    },\n    children: \"\\u041A\\u043E\\u043D\\u0441\\u043E\\u043B\\u044C\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n    style: {\n      color: 'black',\n      marginLeft: '15px'\n    },\n    children: output\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 27,\n  columnNumber: 3\n}, this);\n_c2 = CompilerConsole;\nconst VHDLEditorWithCompiler = () => {\n  _s();\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\n  use ieee.std_logic_1164.all;\n  use ieee.numeric_std.all;\n\n  entity adder is\n  end adder;\n\n  architecture rtl of adder is\n  begin\n    -- Здесь можно добавить логику схемы\n  end architecture;\n\n  `);\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\n  use ieee.std_logic_1164.all;\n  use ieee.numeric_std.all;\n\n  entity tb_adder is\n  end tb_adder;\n\n  architecture testbench of tb_adder is\n  begin\n    -- Здесь можно добавить тестовую логику\n  end testbench;\n  `);\n  const [graphData, setGraphData] = useState({\n    elements: [{\n      type: 'AND',\n      inputs: ['A', 'B'],\n      output: 'Y1'\n    }, {\n      type: 'NOT',\n      inputs: ['Y1'],\n      output: 'Y2'\n    }]\n  });\n  const handleCodeGenerated = generatedCode => {\n    setArchitectureCode(generatedCode);\n  };\n  const [output, setOutput] = useState('');\n  const compileCode = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          architectureCode,\n          testbenchCode\n        })\n      });\n      const text = await response.text();\n      try {\n        const result = JSON.parse(text);\n        if (result.success) {\n          setOutput(`Компиляция успешна:\\n${result.stdout}`);\n        } else {\n          setOutput(`Ошибка компиляции:\\n${result.stderr}`);\n        }\n      } catch {\n        throw new Error(`Некорректный JSON-ответ: ${text}`);\n      }\n    } catch (error) {\n      setOutput(`Ошибка запроса: ${error.message}`);\n    }\n  };\n  const compileButton = document.getElementById('compile-html');\n  if (compileButton) {\n    compileButton.addEventListener('click', compileCode);\n  }\n  const downloadVCD = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/download-vcd', {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`Ошибка: ${response.statusText}`);\n      }\n      const blob = await response.blob();\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = 'out.vcd';\n      link.click();\n    } catch (error) {\n      setOutput('Ошибка скачивания VCD: ' + error.message);\n    }\n  };\n  const downloadButton = document.getElementById('download-vcd-html');\n  if (downloadButton) {\n    downloadButton.addEventListener('click', downloadVCD);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content-container\",\n    className: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"editors-container\",\n      className: \"editors-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color: 'white',\n          marginLeft: '15px',\n          marginBottom: '8px',\n          marginTop: '15px'\n        },\n        children: \"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n        id: \"architecture-editor\",\n        className: \"architecture-editor\",\n        onCodeChange: setArchitectureCode,\n        initialCode: architectureCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color: 'white',\n          marginLeft: '15px',\n          marginBottom: '8px',\n          marginTop: '5px'\n        },\n        children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n        id: \"testbench-editor\",\n        className: \"testbench-editor\",\n        onCodeChange: setTestbenchCode,\n        initialCode: testbenchCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LogicElementManager, {\n        onGenerateCode: setArchitectureCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompilerConsole, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(VHDLEditorWithCompiler, \"hp4Ylke7HiZ8MA+TFHYJZ6hvdPY=\");\n_c3 = VHDLEditorWithCompiler;\nexport default VHDLEditorWithCompiler;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"VHDLEditor\");\n$RefreshReg$(_c2, \"CompilerConsole\");\n$RefreshReg$(_c3, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["React","useState","Editor","registerVHDL","LogicElementManager","jsxDEV","_jsxDEV","VHDLEditor","id","onCodeChange","initialCode","handleEditorWillMount","monaco","className","children","defaultLanguage","defaultValue","theme","beforeMount","onChange","value","options","automaticLayout","fileName","_jsxFileName","lineNumber","columnNumber","_c","CompilerConsole","output","style","color","marginLeft","_c2","VHDLEditorWithCompiler","_s","architectureCode","setArchitectureCode","testbenchCode","setTestbenchCode","graphData","setGraphData","elements","type","inputs","handleCodeGenerated","generatedCode","setOutput","compileCode","response","fetch","method","headers","body","JSON","stringify","text","result","parse","success","stdout","stderr","Error","error","message","compileButton","document","getElementById","addEventListener","downloadVCD","ok","statusText","blob","link","createElement","href","URL","createObjectURL","download","click","downloadButton","marginBottom","marginTop","onGenerateCode","_c3","$RefreshReg$"],"sources":["D:/OSPanel/domains/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Editor from '@monaco-editor/react';\r\nimport registerVHDL from './monaco-vhdl';\r\nimport LogicElementManager from './LogicElementManager';\r\n\r\nconst VHDLEditor = ({ id, onCodeChange, initialCode }) => {\r\n  const handleEditorWillMount = (monaco) => {\r\n    registerVHDL(monaco); // Регистрируем язык VHDL\r\n  };\r\n  return (\r\n    <div id={id} className=\"vhdl-editor\">\r\n      <Editor\r\n        defaultLanguage=\"vhdl\"\r\n        defaultValue={initialCode}\r\n        theme=\"my-custom-dark\"\r\n        beforeMount={handleEditorWillMount}\r\n        onChange={(value) => onCodeChange(value || '')} // Обработчик изменений\r\n        options={{\r\n          automaticLayout: true, // Автоматическое изменение размера\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CompilerConsole = ({ output }) => (\r\n  <div className=\"compiler-console\" id=\"compilerconsole\">\r\n    <h3 style={{ color: 'black', marginLeft: '15px' }}>Консоль</h3>\r\n    <pre style={{ color: 'black', marginLeft: '15px' }}>{output}</pre>\r\n  </div>\r\n);\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\r\n  use ieee.std_logic_1164.all;\r\n  use ieee.numeric_std.all;\r\n\r\n  entity adder is\r\n  end adder;\r\n\r\n  architecture rtl of adder is\r\n  begin\r\n    -- Здесь можно добавить логику схемы\r\n  end architecture;\r\n\r\n  `);\r\n\r\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\r\n  use ieee.std_logic_1164.all;\r\n  use ieee.numeric_std.all;\r\n\r\n  entity tb_adder is\r\n  end tb_adder;\r\n\r\n  architecture testbench of tb_adder is\r\n  begin\r\n    -- Здесь можно добавить тестовую логику\r\n  end testbench;\r\n  `);\r\n\r\n  const [graphData, setGraphData] = useState({\r\n    elements: [\r\n      { type: 'AND', inputs: ['A', 'B'], output: 'Y1' },\r\n      { type: 'NOT', inputs: ['Y1'], output: 'Y2' }\r\n    ]\r\n  });\r\n\r\n  const handleCodeGenerated = (generatedCode) => {\r\n    setArchitectureCode(generatedCode);\r\n  };\r\n\r\n  const [output, setOutput] = useState('');\r\n\r\n  const compileCode = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ architectureCode, testbenchCode }),\r\n      });\r\n\r\n      const text = await response.text();\r\n      try {\r\n        const result = JSON.parse(text);\r\n        if (result.success) {\r\n          setOutput(`Компиляция успешна:\\n${result.stdout}`);\r\n        } else {\r\n          setOutput(`Ошибка компиляции:\\n${result.stderr}`);\r\n        }\r\n      } catch {\r\n        throw new Error(`Некорректный JSON-ответ: ${text}`);\r\n      }\r\n    } catch (error) {\r\n      setOutput(`Ошибка запроса: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  const compileButton = document.getElementById('compile-html');\r\n  if (compileButton) {\r\n    compileButton.addEventListener('click', compileCode);\r\n  }\r\n\r\n  const downloadVCD = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/download-vcd', {\r\n        method: 'GET',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Ошибка: ${response.statusText}`);\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const link = document.createElement('a');\r\n      link.href = URL.createObjectURL(blob);\r\n      link.download = 'out.vcd';\r\n      link.click();\r\n    } catch (error) {\r\n      setOutput('Ошибка скачивания VCD: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const downloadButton = document.getElementById('download-vcd-html');\r\n  if (downloadButton) {\r\n    downloadButton.addEventListener('click', downloadVCD);\r\n  }\r\n\r\n  return (\r\n    <div id=\"content-container\" className=\"content-container\">\r\n      <div id=\"editors-container\" className=\"editors-container\">\r\n        <h4 style={{ color: 'white', marginLeft: '15px', marginBottom: '8px', marginTop: '15px'  }}>Архитектура:</h4>\r\n        <VHDLEditor\r\n          id=\"architecture-editor\" \r\n          className=\"architecture-editor\"\r\n          onCodeChange={setArchitectureCode}\r\n          initialCode={architectureCode}\r\n        />\r\n    \r\n        <h4 style={{ color: 'white', marginLeft: '15px', marginBottom: '8px', marginTop: '5px'}}>Тестовый стенд:</h4>\r\n        <VHDLEditor\r\n          id=\"testbench-editor\"\r\n          className=\"testbench-editor\"\r\n          onCodeChange={setTestbenchCode}\r\n          initialCode={testbenchCode}\r\n        />\r\n        <LogicElementManager onGenerateCode={setArchitectureCode} />\r\n      </div>\r\n      <CompilerConsole output={output} />\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default VHDLEditorWithCompiler;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
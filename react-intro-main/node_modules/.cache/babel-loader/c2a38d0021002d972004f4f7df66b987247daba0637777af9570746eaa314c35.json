{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { mixInto } from '../../util/Utils';\nimport { sortCells } from '../../util/styleUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { Graph } from '../Graph';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst OrderMixin = {\n  /*****************************************************************************\n   * Group: Order\n   *****************************************************************************/\n  /**\n   * Moves the given cells to the front or back. The change is carried out\n   * using {@link cellsOrdered}. This method fires {@link InternalEvent.ORDER_CELLS} while the\n   * transaction is in progress.\n   *\n   * @param back Boolean that specifies if the cells should be moved to back.\n   * @param cells Array of {@link mxCell} to move to the background. If null is\n   * specified then the selection cells are used.\n   */\n  orderCells(back = false, cells) {\n    if (!cells) cells = this.getSelectionCells();\n    if (!cells) {\n      cells = sortCells(this.getSelectionCells(), true);\n    }\n    this.batchUpdate(() => {\n      this.cellsOrdered(cells, back);\n      const event = new EventObject(InternalEvent.ORDER_CELLS, 'back', back, 'cells', cells);\n      this.fireEvent(event);\n    });\n    return cells;\n  },\n  /**\n   * Moves the given cells to the front or back. This method fires\n   * {@link InternalEvent.CELLS_ORDERED} while the transaction is in progress.\n   *\n   * @param cells Array of {@link mxCell} whose order should be changed.\n   * @param back Boolean that specifies if the cells should be moved to back.\n   */\n  cellsOrdered(cells, back = false) {\n    this.batchUpdate(() => {\n      for (let i = 0; i < cells.length; i += 1) {\n        const parent = cells[i].getParent();\n        if (back) {\n          this.getDataModel().add(parent, cells[i], i);\n        } else {\n          this.getDataModel().add(parent, cells[i], parent ? parent.getChildCount() - 1 : 0);\n        }\n      }\n      this.fireEvent(new EventObject(InternalEvent.CELLS_ORDERED, {\n        back,\n        cells\n      }));\n    });\n  }\n};\nmixInto(Graph)(OrderMixin);","map":{"version":3,"names":["mixInto","sortCells","EventObject","InternalEvent","Graph","OrderMixin","orderCells","back","cells","getSelectionCells","batchUpdate","cellsOrdered","event","ORDER_CELLS","fireEvent","i","length","parent","getParent","getDataModel","add","getChildCount","CELLS_ORDERED"],"sources":["D:/OSPanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/mixins/OrderMixin.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { mixInto } from '../../util/Utils';\nimport { sortCells } from '../../util/styleUtils';\nimport EventObject from '../event/EventObject';\nimport InternalEvent from '../event/InternalEvent';\nimport { Graph } from '../Graph';\n// @ts-expect-error The properties of PartialGraph are defined elsewhere.\nconst OrderMixin = {\n    /*****************************************************************************\n     * Group: Order\n     *****************************************************************************/\n    /**\n     * Moves the given cells to the front or back. The change is carried out\n     * using {@link cellsOrdered}. This method fires {@link InternalEvent.ORDER_CELLS} while the\n     * transaction is in progress.\n     *\n     * @param back Boolean that specifies if the cells should be moved to back.\n     * @param cells Array of {@link mxCell} to move to the background. If null is\n     * specified then the selection cells are used.\n     */\n    orderCells(back = false, cells) {\n        if (!cells)\n            cells = this.getSelectionCells();\n        if (!cells) {\n            cells = sortCells(this.getSelectionCells(), true);\n        }\n        this.batchUpdate(() => {\n            this.cellsOrdered(cells, back);\n            const event = new EventObject(InternalEvent.ORDER_CELLS, 'back', back, 'cells', cells);\n            this.fireEvent(event);\n        });\n        return cells;\n    },\n    /**\n     * Moves the given cells to the front or back. This method fires\n     * {@link InternalEvent.CELLS_ORDERED} while the transaction is in progress.\n     *\n     * @param cells Array of {@link mxCell} whose order should be changed.\n     * @param back Boolean that specifies if the cells should be moved to back.\n     */\n    cellsOrdered(cells, back = false) {\n        this.batchUpdate(() => {\n            for (let i = 0; i < cells.length; i += 1) {\n                const parent = cells[i].getParent();\n                if (back) {\n                    this.getDataModel().add(parent, cells[i], i);\n                }\n                else {\n                    this.getDataModel().add(parent, cells[i], parent ? parent.getChildCount() - 1 : 0);\n                }\n            }\n            this.fireEvent(new EventObject(InternalEvent.CELLS_ORDERED, { back, cells }));\n        });\n    },\n};\nmixInto(Graph)(OrderMixin);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,SAAS,QAAQ,uBAAuB;AACjD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,aAAa,MAAM,wBAAwB;AAClD,SAASC,KAAK,QAAQ,UAAU;AAChC;AACA,MAAMC,UAAU,GAAG;EACf;AACJ;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,IAAI,GAAG,KAAK,EAAEC,KAAK,EAAE;IAC5B,IAAI,CAACA,KAAK,EACNA,KAAK,GAAG,IAAI,CAACC,iBAAiB,CAAC,CAAC;IACpC,IAAI,CAACD,KAAK,EAAE;MACRA,KAAK,GAAGP,SAAS,CAAC,IAAI,CAACQ,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC;IACrD;IACA,IAAI,CAACC,WAAW,CAAC,MAAM;MACnB,IAAI,CAACC,YAAY,CAACH,KAAK,EAAED,IAAI,CAAC;MAC9B,MAAMK,KAAK,GAAG,IAAIV,WAAW,CAACC,aAAa,CAACU,WAAW,EAAE,MAAM,EAAEN,IAAI,EAAE,OAAO,EAAEC,KAAK,CAAC;MACtF,IAAI,CAACM,SAAS,CAACF,KAAK,CAAC;IACzB,CAAC,CAAC;IACF,OAAOJ,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,YAAYA,CAACH,KAAK,EAAED,IAAI,GAAG,KAAK,EAAE;IAC9B,IAAI,CAACG,WAAW,CAAC,MAAM;MACnB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QACtC,MAAME,MAAM,GAAGT,KAAK,CAACO,CAAC,CAAC,CAACG,SAAS,CAAC,CAAC;QACnC,IAAIX,IAAI,EAAE;UACN,IAAI,CAACY,YAAY,CAAC,CAAC,CAACC,GAAG,CAACH,MAAM,EAAET,KAAK,CAACO,CAAC,CAAC,EAAEA,CAAC,CAAC;QAChD,CAAC,MACI;UACD,IAAI,CAACI,YAAY,CAAC,CAAC,CAACC,GAAG,CAACH,MAAM,EAAET,KAAK,CAACO,CAAC,CAAC,EAAEE,MAAM,GAAGA,MAAM,CAACI,aAAa,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACtF;MACJ;MACA,IAAI,CAACP,SAAS,CAAC,IAAIZ,WAAW,CAACC,aAAa,CAACmB,aAAa,EAAE;QAAEf,IAAI;QAAEC;MAAM,CAAC,CAAC,CAAC;IACjF,CAAC,CAAC;EACN;AACJ,CAAC;AACDR,OAAO,CAACI,KAAK,CAAC,CAACC,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor } from '../../../browser/editorBrowser.js';\nimport { AbstractEditorNavigationQuickAccessProvider } from './editorNavigationQuickAccess.js';\nimport { localize } from '../../../../nls.js';\nexport class AbstractGotoLineQuickAccessProvider extends AbstractEditorNavigationQuickAccessProvider {\n  static {\n    this.PREFIX = ':';\n  }\n  constructor() {\n    super({\n      canAcceptInBackground: true\n    });\n  }\n  provideWithoutTextEditor(picker) {\n    const label = localize('cannotRunGotoLine', \"Open a text editor first to go to a line.\");\n    picker.items = [{\n      label\n    }];\n    picker.ariaLabel = label;\n    return Disposable.None;\n  }\n  provideWithTextEditor(context, picker, token) {\n    const editor = context.editor;\n    const disposables = new DisposableStore();\n    // Goto line once picked\n    disposables.add(picker.onDidAccept(event => {\n      const [item] = picker.selectedItems;\n      if (item) {\n        if (!this.isValidLineNumber(editor, item.lineNumber)) {\n          return;\n        }\n        this.gotoLocation(context, {\n          range: this.toRange(item.lineNumber, item.column),\n          keyMods: picker.keyMods,\n          preserveFocus: event.inBackground\n        });\n        if (!event.inBackground) {\n          picker.hide();\n        }\n      }\n    }));\n    // React to picker changes\n    const updatePickerAndEditor = () => {\n      const position = this.parsePosition(editor, picker.value.trim().substr(AbstractGotoLineQuickAccessProvider.PREFIX.length));\n      const label = this.getPickLabel(editor, position.lineNumber, position.column);\n      // Picker\n      picker.items = [{\n        lineNumber: position.lineNumber,\n        column: position.column,\n        label\n      }];\n      // ARIA Label\n      picker.ariaLabel = label;\n      // Clear decorations for invalid range\n      if (!this.isValidLineNumber(editor, position.lineNumber)) {\n        this.clearDecorations(editor);\n        return;\n      }\n      // Reveal\n      const range = this.toRange(position.lineNumber, position.column);\n      editor.revealRangeInCenter(range, 0 /* ScrollType.Smooth */);\n      // Decorate\n      this.addDecorations(editor, range);\n    };\n    updatePickerAndEditor();\n    disposables.add(picker.onDidChangeValue(() => updatePickerAndEditor()));\n    // Adjust line number visibility as needed\n    const codeEditor = getCodeEditor(editor);\n    if (codeEditor) {\n      const options = codeEditor.getOptions();\n      const lineNumbers = options.get(68 /* EditorOption.lineNumbers */);\n      if (lineNumbers.renderType === 2 /* RenderLineNumbersType.Relative */) {\n        codeEditor.updateOptions({\n          lineNumbers: 'on'\n        });\n        disposables.add(toDisposable(() => codeEditor.updateOptions({\n          lineNumbers: 'relative'\n        })));\n      }\n    }\n    return disposables;\n  }\n  toRange(lineNumber = 1, column = 1) {\n    return {\n      startLineNumber: lineNumber,\n      startColumn: column,\n      endLineNumber: lineNumber,\n      endColumn: column\n    };\n  }\n  parsePosition(editor, value) {\n    // Support line-col formats of `line,col`, `line:col`, `line#col`\n    const numbers = value.split(/,|:|#/).map(part => parseInt(part, 10)).filter(part => !isNaN(part));\n    const endLine = this.lineCount(editor) + 1;\n    return {\n      lineNumber: numbers[0] > 0 ? numbers[0] : endLine + numbers[0],\n      column: numbers[1]\n    };\n  }\n  getPickLabel(editor, lineNumber, column) {\n    // Location valid: indicate this as picker label\n    if (this.isValidLineNumber(editor, lineNumber)) {\n      if (this.isValidColumn(editor, lineNumber, column)) {\n        return localize('gotoLineColumnLabel', \"Go to line {0} and character {1}.\", lineNumber, column);\n      }\n      return localize('gotoLineLabel', \"Go to line {0}.\", lineNumber);\n    }\n    // Location invalid: show generic label\n    const position = editor.getPosition() || {\n      lineNumber: 1,\n      column: 1\n    };\n    const lineCount = this.lineCount(editor);\n    if (lineCount > 1) {\n      return localize('gotoLineLabelEmptyWithLimit', \"Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.\", position.lineNumber, position.column, lineCount);\n    }\n    return localize('gotoLineLabelEmpty', \"Current Line: {0}, Character: {1}. Type a line number to navigate to.\", position.lineNumber, position.column);\n  }\n  isValidLineNumber(editor, lineNumber) {\n    if (!lineNumber || typeof lineNumber !== 'number') {\n      return false;\n    }\n    return lineNumber > 0 && lineNumber <= this.lineCount(editor);\n  }\n  isValidColumn(editor, lineNumber, column) {\n    if (!column || typeof column !== 'number') {\n      return false;\n    }\n    const model = this.getModel(editor);\n    if (!model) {\n      return false;\n    }\n    const positionCandidate = {\n      lineNumber,\n      column\n    };\n    return model.validatePosition(positionCandidate).equals(positionCandidate);\n  }\n  lineCount(editor) {\n    return this.getModel(editor)?.getLineCount() ?? 0;\n  }\n}","map":{"version":3,"names":["Disposable","DisposableStore","toDisposable","getCodeEditor","AbstractEditorNavigationQuickAccessProvider","localize","AbstractGotoLineQuickAccessProvider","PREFIX","constructor","canAcceptInBackground","provideWithoutTextEditor","picker","label","items","ariaLabel","None","provideWithTextEditor","context","token","editor","disposables","add","onDidAccept","event","item","selectedItems","isValidLineNumber","lineNumber","gotoLocation","range","toRange","column","keyMods","preserveFocus","inBackground","hide","updatePickerAndEditor","position","parsePosition","value","trim","substr","length","getPickLabel","clearDecorations","revealRangeInCenter","addDecorations","onDidChangeValue","codeEditor","options","getOptions","lineNumbers","get","renderType","updateOptions","startLineNumber","startColumn","endLineNumber","endColumn","numbers","split","map","part","parseInt","filter","isNaN","endLine","lineCount","isValidColumn","getPosition","model","getModel","positionCandidate","validatePosition","equals","getLineCount"],"sources":["D:/OSPanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor } from '../../../browser/editorBrowser.js';\nimport { AbstractEditorNavigationQuickAccessProvider } from './editorNavigationQuickAccess.js';\nimport { localize } from '../../../../nls.js';\nexport class AbstractGotoLineQuickAccessProvider extends AbstractEditorNavigationQuickAccessProvider {\n    static { this.PREFIX = ':'; }\n    constructor() {\n        super({ canAcceptInBackground: true });\n    }\n    provideWithoutTextEditor(picker) {\n        const label = localize('cannotRunGotoLine', \"Open a text editor first to go to a line.\");\n        picker.items = [{ label }];\n        picker.ariaLabel = label;\n        return Disposable.None;\n    }\n    provideWithTextEditor(context, picker, token) {\n        const editor = context.editor;\n        const disposables = new DisposableStore();\n        // Goto line once picked\n        disposables.add(picker.onDidAccept(event => {\n            const [item] = picker.selectedItems;\n            if (item) {\n                if (!this.isValidLineNumber(editor, item.lineNumber)) {\n                    return;\n                }\n                this.gotoLocation(context, { range: this.toRange(item.lineNumber, item.column), keyMods: picker.keyMods, preserveFocus: event.inBackground });\n                if (!event.inBackground) {\n                    picker.hide();\n                }\n            }\n        }));\n        // React to picker changes\n        const updatePickerAndEditor = () => {\n            const position = this.parsePosition(editor, picker.value.trim().substr(AbstractGotoLineQuickAccessProvider.PREFIX.length));\n            const label = this.getPickLabel(editor, position.lineNumber, position.column);\n            // Picker\n            picker.items = [{\n                    lineNumber: position.lineNumber,\n                    column: position.column,\n                    label\n                }];\n            // ARIA Label\n            picker.ariaLabel = label;\n            // Clear decorations for invalid range\n            if (!this.isValidLineNumber(editor, position.lineNumber)) {\n                this.clearDecorations(editor);\n                return;\n            }\n            // Reveal\n            const range = this.toRange(position.lineNumber, position.column);\n            editor.revealRangeInCenter(range, 0 /* ScrollType.Smooth */);\n            // Decorate\n            this.addDecorations(editor, range);\n        };\n        updatePickerAndEditor();\n        disposables.add(picker.onDidChangeValue(() => updatePickerAndEditor()));\n        // Adjust line number visibility as needed\n        const codeEditor = getCodeEditor(editor);\n        if (codeEditor) {\n            const options = codeEditor.getOptions();\n            const lineNumbers = options.get(68 /* EditorOption.lineNumbers */);\n            if (lineNumbers.renderType === 2 /* RenderLineNumbersType.Relative */) {\n                codeEditor.updateOptions({ lineNumbers: 'on' });\n                disposables.add(toDisposable(() => codeEditor.updateOptions({ lineNumbers: 'relative' })));\n            }\n        }\n        return disposables;\n    }\n    toRange(lineNumber = 1, column = 1) {\n        return {\n            startLineNumber: lineNumber,\n            startColumn: column,\n            endLineNumber: lineNumber,\n            endColumn: column\n        };\n    }\n    parsePosition(editor, value) {\n        // Support line-col formats of `line,col`, `line:col`, `line#col`\n        const numbers = value.split(/,|:|#/).map(part => parseInt(part, 10)).filter(part => !isNaN(part));\n        const endLine = this.lineCount(editor) + 1;\n        return {\n            lineNumber: numbers[0] > 0 ? numbers[0] : endLine + numbers[0],\n            column: numbers[1]\n        };\n    }\n    getPickLabel(editor, lineNumber, column) {\n        // Location valid: indicate this as picker label\n        if (this.isValidLineNumber(editor, lineNumber)) {\n            if (this.isValidColumn(editor, lineNumber, column)) {\n                return localize('gotoLineColumnLabel', \"Go to line {0} and character {1}.\", lineNumber, column);\n            }\n            return localize('gotoLineLabel', \"Go to line {0}.\", lineNumber);\n        }\n        // Location invalid: show generic label\n        const position = editor.getPosition() || { lineNumber: 1, column: 1 };\n        const lineCount = this.lineCount(editor);\n        if (lineCount > 1) {\n            return localize('gotoLineLabelEmptyWithLimit', \"Current Line: {0}, Character: {1}. Type a line number between 1 and {2} to navigate to.\", position.lineNumber, position.column, lineCount);\n        }\n        return localize('gotoLineLabelEmpty', \"Current Line: {0}, Character: {1}. Type a line number to navigate to.\", position.lineNumber, position.column);\n    }\n    isValidLineNumber(editor, lineNumber) {\n        if (!lineNumber || typeof lineNumber !== 'number') {\n            return false;\n        }\n        return lineNumber > 0 && lineNumber <= this.lineCount(editor);\n    }\n    isValidColumn(editor, lineNumber, column) {\n        if (!column || typeof column !== 'number') {\n            return false;\n        }\n        const model = this.getModel(editor);\n        if (!model) {\n            return false;\n        }\n        const positionCandidate = { lineNumber, column };\n        return model.validatePosition(positionCandidate).equals(positionCandidate);\n    }\n    lineCount(editor) {\n        return this.getModel(editor)?.getLineCount() ?? 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2016, JGraph Ltd\nCopyright (c) 2006-2016, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { convertPoint, getOffset, getScrollOrigin, setOpacity, setPrefixedStyle } from '../../util/styleUtils';\nimport InternalEvent from '../event/InternalEvent';\nimport Point from '../geometry/Point';\nimport InternalMouseEvent from '../event/InternalMouseEvent';\nimport Client from '../../Client';\nimport Rectangle from '../geometry/Rectangle';\nimport { isAltDown, isMultiTouchEvent } from '../../util/EventUtils';\nimport { clearSelection } from '../../util/domUtils';\n/**\n * Event handler that selects rectangular regions.\n * This is not built-into [mxGraph].\n * To enable rubberband selection in a graph, use the following code.\n */\nclass RubberBandHandler {\n  constructor(graph) {\n    this.first = null;\n    this.destroyed = false;\n    this.dragHandler = null;\n    this.dropHandler = null;\n    this.x = 0;\n    this.y = 0;\n    this.width = 0;\n    this.height = 0;\n    /**\n     * Specifies the default opacity to be used for the rubberband div.  Default is 20.\n     */\n    this.defaultOpacity = 20;\n    /**\n     * Specifies if events are handled. Default is true.\n     */\n    this.enabled = true;\n    /**\n     * Holds the DIV element which is currently visible.\n     */\n    this.div = null;\n    /**\n     * Holds the DIV element which is used to display the rubberband.\n     */\n    this.sharedDiv = null;\n    /**\n     * Holds the value of the x argument in the last call to <update>.\n     */\n    this.currentX = 0;\n    /**\n     * Holds the value of the y argument in the last call to <update>.\n     */\n    this.currentY = 0;\n    /**\n     * Optional fade out effect.  Default is false.\n     */\n    this.fadeOut = false;\n    this.graph = graph;\n    this.graph.addMouseListener(this);\n    // Handles force rubberband event\n    this.forceRubberbandHandler = (sender, evt) => {\n      const evtName = evt.getProperty('eventName');\n      const me = evt.getProperty('event');\n      if (evtName === InternalEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me)) {\n        const offset = getOffset(this.graph.container);\n        const origin = getScrollOrigin(this.graph.container);\n        origin.x -= offset.x;\n        origin.y -= offset.y;\n        this.start(me.getX() + origin.x, me.getY() + origin.y);\n        me.consume(false);\n      }\n    };\n    this.graph.addListener(InternalEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n    // Repaints the marquee after autoscroll\n    this.panHandler = () => {\n      this.repaint();\n    };\n    this.graph.addListener(InternalEvent.PAN, this.panHandler);\n    // Does not show menu if any touch gestures take place after the trigger\n    this.gestureHandler = (sender, eo) => {\n      if (this.first) {\n        this.reset();\n      }\n    };\n    this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n  }\n  /**\n   * Creates the rubberband selection shape.\n   */\n  isEnabled() {\n    return this.enabled;\n  }\n  /**\n   * Enables or disables event handling. This implementation updates\n   * <enabled>.\n   */\n  setEnabled(enabled) {\n    this.enabled = enabled;\n  }\n  /**\n   * Returns true if the given {@link MouseEvent} should start rubberband selection.\n   * This implementation returns true if the alt key is pressed.\n   */\n  isForceRubberbandEvent(me) {\n    return isAltDown(me.getEvent());\n  }\n  /**\n   * Handles the event by initiating a rubberband selection. By consuming the\n   * event all subsequent events of the gesture are redirected to this\n   * handler.\n   */\n  mouseDown(sender, me) {\n    if (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() && !me.getState() && !isMultiTouchEvent(me.getEvent())) {\n      const offset = getOffset(this.graph.container);\n      const origin = getScrollOrigin(this.graph.container);\n      origin.x -= offset.x;\n      origin.y -= offset.y;\n      this.start(me.getX() + origin.x, me.getY() + origin.y);\n      // Does not prevent the default for this event so that the\n      // event processing chain is still executed even if we start\n      // rubberbanding. This is required eg. in ExtJs to hide the\n      // current context menu. In mouseMove we'll make sure we're\n      // not selecting anything while we're rubberbanding.\n      me.consume(false);\n    }\n  }\n  /**\n   * Creates the rubberband selection shape.\n   */\n  start(x, y) {\n    this.first = new Point(x, y);\n    const {\n      container\n    } = this.graph;\n    function createMouseEvent(evt) {\n      const me = new InternalMouseEvent(evt);\n      const pt = convertPoint(container, me.getX(), me.getY());\n      me.graphX = pt.x;\n      me.graphY = pt.y;\n      return me;\n    }\n    this.dragHandler = evt => {\n      this.mouseMove(this.graph, createMouseEvent(evt));\n    };\n    this.dropHandler = evt => {\n      this.mouseUp(this.graph, createMouseEvent(evt));\n    };\n    // Workaround for rubberband stopping if the mouse leaves the container in Firefox\n    if (Client.IS_FF) {\n      InternalEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n    }\n  }\n  /**\n   * Handles the event by updating therubberband selection.\n   */\n  mouseMove(sender, me) {\n    if (!me.isConsumed() && this.first) {\n      const origin = getScrollOrigin(this.graph.container);\n      const offset = getOffset(this.graph.container);\n      origin.x -= offset.x;\n      origin.y -= offset.y;\n      const x = me.getX() + origin.x;\n      const y = me.getY() + origin.y;\n      const dx = this.first.x - x;\n      const dy = this.first.y - y;\n      const tol = this.graph.getEventTolerance();\n      if (this.div || Math.abs(dx) > tol || Math.abs(dy) > tol) {\n        if (!this.div) {\n          this.div = this.createShape();\n        }\n        // Clears selection while rubberbanding. This is required because\n        // the event is not consumed in mouseDown.\n        clearSelection();\n        this.update(x, y);\n        me.consume();\n      }\n    }\n  }\n  /**\n   * Creates the rubberband selection shape.\n   */\n  createShape() {\n    if (!this.sharedDiv) {\n      this.sharedDiv = document.createElement('div');\n      this.sharedDiv.className = 'mxRubberband';\n      setOpacity(this.sharedDiv, this.defaultOpacity);\n    }\n    this.graph.container.appendChild(this.sharedDiv);\n    const result = this.sharedDiv;\n    if (Client.IS_SVG && this.fadeOut) {\n      this.sharedDiv = null;\n    }\n    return result;\n  }\n  /**\n   * Returns true if this handler is active.\n   */\n  isActive(sender, me) {\n    return this.div && this.div.style.display !== 'none';\n  }\n  /**\n   * Handles the event by selecting the region of the rubberband using\n   * {@link Graph#selectRegion}.\n   */\n  mouseUp(sender, me) {\n    const active = this.isActive();\n    this.reset();\n    if (active) {\n      this.execute(me.getEvent());\n      me.consume();\n    }\n  }\n  /**\n   * Resets the state of this handler and selects the current region\n   * for the given event.\n   */\n  execute(evt) {\n    const rect = new Rectangle(this.x, this.y, this.width, this.height);\n    this.graph.selectRegion(rect, evt);\n  }\n  /**\n   * Resets the state of the rubberband selection.\n   */\n  reset() {\n    if (this.div) {\n      if (Client.IS_SVG && this.fadeOut) {\n        const temp = this.div;\n        setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n        temp.style.pointerEvents = 'none';\n        temp.style.opacity = String(0);\n        window.setTimeout(() => {\n          if (temp.parentNode) temp.parentNode.removeChild(temp);\n        }, 200);\n      } else {\n        if (this.div.parentNode) this.div.parentNode.removeChild(this.div);\n      }\n    }\n    InternalEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n    this.dragHandler = null;\n    this.dropHandler = null;\n    this.currentX = 0;\n    this.currentY = 0;\n    this.first = null;\n    this.div = null;\n  }\n  /**\n   * Sets <currentX> and <currentY> and calls <repaint>.\n   */\n  update(x, y) {\n    this.currentX = x;\n    this.currentY = y;\n    this.repaint();\n  }\n  /**\n   * Computes the bounding box and updates the style of the <div>.\n   */\n  repaint() {\n    if (this.div && this.first) {\n      const x = this.currentX - this.graph.getPanDx();\n      const y = this.currentY - this.graph.getPanDy();\n      this.x = Math.min(this.first.x, x);\n      this.y = Math.min(this.first.y, y);\n      this.width = Math.max(this.first.x, x) - this.x;\n      this.height = Math.max(this.first.y, y) - this.y;\n      const dx = 0;\n      const dy = 0;\n      this.div.style.left = \"\".concat(this.x + dx, \"px\");\n      this.div.style.top = \"\".concat(this.y + dy, \"px\");\n      this.div.style.width = \"\".concat(Math.max(1, this.width), \"px\");\n      this.div.style.height = \"\".concat(Math.max(1, this.height), \"px\");\n    }\n  }\n  /**\n   * Destroys the handler and all its resources and DOM nodes. This does\n   * normally not need to be called, it is called automatically when the\n   * window unloads.\n   */\n  onDestroy() {\n    if (!this.destroyed) {\n      this.destroyed = true;\n      this.graph.removeMouseListener(this);\n      this.graph.removeListener(this.forceRubberbandHandler);\n      this.graph.removeListener(this.panHandler);\n      this.reset();\n      if (this.sharedDiv) {\n        this.sharedDiv = null;\n      }\n    }\n  }\n}\nRubberBandHandler.pluginId = 'RubberBandHandler';\nexport default RubberBandHandler;","map":{"version":3,"names":["convertPoint","getOffset","getScrollOrigin","setOpacity","setPrefixedStyle","InternalEvent","Point","InternalMouseEvent","Client","Rectangle","isAltDown","isMultiTouchEvent","clearSelection","RubberBandHandler","constructor","graph","first","destroyed","dragHandler","dropHandler","x","y","width","height","defaultOpacity","enabled","div","sharedDiv","currentX","currentY","fadeOut","addMouseListener","forceRubberbandHandler","sender","evt","evtName","getProperty","me","MOUSE_DOWN","isForceRubberbandEvent","offset","container","origin","start","getX","getY","consume","addListener","FIRE_MOUSE_EVENT","panHandler","repaint","PAN","gestureHandler","eo","reset","GESTURE","isEnabled","setEnabled","getEvent","mouseDown","isConsumed","getState","createMouseEvent","pt","graphX","graphY","mouseMove","mouseUp","IS_FF","addGestureListeners","document","dx","dy","tol","getEventTolerance","Math","abs","createShape","update","createElement","className","appendChild","result","IS_SVG","isActive","style","display","active","execute","rect","selectRegion","temp","pointerEvents","opacity","String","window","setTimeout","parentNode","removeChild","removeGestureListeners","getPanDx","getPanDy","min","max","left","concat","top","onDestroy","removeMouseListener","removeListener","pluginId"],"sources":["D:/OSPanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/handler/RubberBandHandler.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2016, JGraph Ltd\nCopyright (c) 2006-2016, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { convertPoint, getOffset, getScrollOrigin, setOpacity, setPrefixedStyle, } from '../../util/styleUtils';\nimport InternalEvent from '../event/InternalEvent';\nimport Point from '../geometry/Point';\nimport InternalMouseEvent from '../event/InternalMouseEvent';\nimport Client from '../../Client';\nimport Rectangle from '../geometry/Rectangle';\nimport { isAltDown, isMultiTouchEvent } from '../../util/EventUtils';\nimport { clearSelection } from '../../util/domUtils';\n/**\n * Event handler that selects rectangular regions.\n * This is not built-into [mxGraph].\n * To enable rubberband selection in a graph, use the following code.\n */\nclass RubberBandHandler {\n    constructor(graph) {\n        this.first = null;\n        this.destroyed = false;\n        this.dragHandler = null;\n        this.dropHandler = null;\n        this.x = 0;\n        this.y = 0;\n        this.width = 0;\n        this.height = 0;\n        /**\n         * Specifies the default opacity to be used for the rubberband div.  Default is 20.\n         */\n        this.defaultOpacity = 20;\n        /**\n         * Specifies if events are handled. Default is true.\n         */\n        this.enabled = true;\n        /**\n         * Holds the DIV element which is currently visible.\n         */\n        this.div = null;\n        /**\n         * Holds the DIV element which is used to display the rubberband.\n         */\n        this.sharedDiv = null;\n        /**\n         * Holds the value of the x argument in the last call to <update>.\n         */\n        this.currentX = 0;\n        /**\n         * Holds the value of the y argument in the last call to <update>.\n         */\n        this.currentY = 0;\n        /**\n         * Optional fade out effect.  Default is false.\n         */\n        this.fadeOut = false;\n        this.graph = graph;\n        this.graph.addMouseListener(this);\n        // Handles force rubberband event\n        this.forceRubberbandHandler = (sender, evt) => {\n            const evtName = evt.getProperty('eventName');\n            const me = evt.getProperty('event');\n            if (evtName === InternalEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me)) {\n                const offset = getOffset(this.graph.container);\n                const origin = getScrollOrigin(this.graph.container);\n                origin.x -= offset.x;\n                origin.y -= offset.y;\n                this.start(me.getX() + origin.x, me.getY() + origin.y);\n                me.consume(false);\n            }\n        };\n        this.graph.addListener(InternalEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n        // Repaints the marquee after autoscroll\n        this.panHandler = () => {\n            this.repaint();\n        };\n        this.graph.addListener(InternalEvent.PAN, this.panHandler);\n        // Does not show menu if any touch gestures take place after the trigger\n        this.gestureHandler = (sender, eo) => {\n            if (this.first) {\n                this.reset();\n            }\n        };\n        this.graph.addListener(InternalEvent.GESTURE, this.gestureHandler);\n    }\n    /**\n     * Creates the rubberband selection shape.\n     */\n    isEnabled() {\n        return this.enabled;\n    }\n    /**\n     * Enables or disables event handling. This implementation updates\n     * <enabled>.\n     */\n    setEnabled(enabled) {\n        this.enabled = enabled;\n    }\n    /**\n     * Returns true if the given {@link MouseEvent} should start rubberband selection.\n     * This implementation returns true if the alt key is pressed.\n     */\n    isForceRubberbandEvent(me) {\n        return isAltDown(me.getEvent());\n    }\n    /**\n     * Handles the event by initiating a rubberband selection. By consuming the\n     * event all subsequent events of the gesture are redirected to this\n     * handler.\n     */\n    mouseDown(sender, me) {\n        if (!me.isConsumed() &&\n            this.isEnabled() &&\n            this.graph.isEnabled() &&\n            !me.getState() &&\n            !isMultiTouchEvent(me.getEvent())) {\n            const offset = getOffset(this.graph.container);\n            const origin = getScrollOrigin(this.graph.container);\n            origin.x -= offset.x;\n            origin.y -= offset.y;\n            this.start(me.getX() + origin.x, me.getY() + origin.y);\n            // Does not prevent the default for this event so that the\n            // event processing chain is still executed even if we start\n            // rubberbanding. This is required eg. in ExtJs to hide the\n            // current context menu. In mouseMove we'll make sure we're\n            // not selecting anything while we're rubberbanding.\n            me.consume(false);\n        }\n    }\n    /**\n     * Creates the rubberband selection shape.\n     */\n    start(x, y) {\n        this.first = new Point(x, y);\n        const { container } = this.graph;\n        function createMouseEvent(evt) {\n            const me = new InternalMouseEvent(evt);\n            const pt = convertPoint(container, me.getX(), me.getY());\n            me.graphX = pt.x;\n            me.graphY = pt.y;\n            return me;\n        }\n        this.dragHandler = (evt) => {\n            this.mouseMove(this.graph, createMouseEvent(evt));\n        };\n        this.dropHandler = (evt) => {\n            this.mouseUp(this.graph, createMouseEvent(evt));\n        };\n        // Workaround for rubberband stopping if the mouse leaves the container in Firefox\n        if (Client.IS_FF) {\n            InternalEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n        }\n    }\n    /**\n     * Handles the event by updating therubberband selection.\n     */\n    mouseMove(sender, me) {\n        if (!me.isConsumed() && this.first) {\n            const origin = getScrollOrigin(this.graph.container);\n            const offset = getOffset(this.graph.container);\n            origin.x -= offset.x;\n            origin.y -= offset.y;\n            const x = me.getX() + origin.x;\n            const y = me.getY() + origin.y;\n            const dx = this.first.x - x;\n            const dy = this.first.y - y;\n            const tol = this.graph.getEventTolerance();\n            if (this.div || Math.abs(dx) > tol || Math.abs(dy) > tol) {\n                if (!this.div) {\n                    this.div = this.createShape();\n                }\n                // Clears selection while rubberbanding. This is required because\n                // the event is not consumed in mouseDown.\n                clearSelection();\n                this.update(x, y);\n                me.consume();\n            }\n        }\n    }\n    /**\n     * Creates the rubberband selection shape.\n     */\n    createShape() {\n        if (!this.sharedDiv) {\n            this.sharedDiv = document.createElement('div');\n            this.sharedDiv.className = 'mxRubberband';\n            setOpacity(this.sharedDiv, this.defaultOpacity);\n        }\n        this.graph.container.appendChild(this.sharedDiv);\n        const result = this.sharedDiv;\n        if (Client.IS_SVG && this.fadeOut) {\n            this.sharedDiv = null;\n        }\n        return result;\n    }\n    /**\n     * Returns true if this handler is active.\n     */\n    isActive(sender, me) {\n        return this.div && this.div.style.display !== 'none';\n    }\n    /**\n     * Handles the event by selecting the region of the rubberband using\n     * {@link Graph#selectRegion}.\n     */\n    mouseUp(sender, me) {\n        const active = this.isActive();\n        this.reset();\n        if (active) {\n            this.execute(me.getEvent());\n            me.consume();\n        }\n    }\n    /**\n     * Resets the state of this handler and selects the current region\n     * for the given event.\n     */\n    execute(evt) {\n        const rect = new Rectangle(this.x, this.y, this.width, this.height);\n        this.graph.selectRegion(rect, evt);\n    }\n    /**\n     * Resets the state of the rubberband selection.\n     */\n    reset() {\n        if (this.div) {\n            if (Client.IS_SVG && this.fadeOut) {\n                const temp = this.div;\n                setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n                temp.style.pointerEvents = 'none';\n                temp.style.opacity = String(0);\n                window.setTimeout(() => {\n                    if (temp.parentNode)\n                        temp.parentNode.removeChild(temp);\n                }, 200);\n            }\n            else {\n                if (this.div.parentNode)\n                    this.div.parentNode.removeChild(this.div);\n            }\n        }\n        InternalEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n        this.dragHandler = null;\n        this.dropHandler = null;\n        this.currentX = 0;\n        this.currentY = 0;\n        this.first = null;\n        this.div = null;\n    }\n    /**\n     * Sets <currentX> and <currentY> and calls <repaint>.\n     */\n    update(x, y) {\n        this.currentX = x;\n        this.currentY = y;\n        this.repaint();\n    }\n    /**\n     * Computes the bounding box and updates the style of the <div>.\n     */\n    repaint() {\n        if (this.div && this.first) {\n            const x = this.currentX - this.graph.getPanDx();\n            const y = this.currentY - this.graph.getPanDy();\n            this.x = Math.min(this.first.x, x);\n            this.y = Math.min(this.first.y, y);\n            this.width = Math.max(this.first.x, x) - this.x;\n            this.height = Math.max(this.first.y, y) - this.y;\n            const dx = 0;\n            const dy = 0;\n            this.div.style.left = `${this.x + dx}px`;\n            this.div.style.top = `${this.y + dy}px`;\n            this.div.style.width = `${Math.max(1, this.width)}px`;\n            this.div.style.height = `${Math.max(1, this.height)}px`;\n        }\n    }\n    /**\n     * Destroys the handler and all its resources and DOM nodes. This does\n     * normally not need to be called, it is called automatically when the\n     * window unloads.\n     */\n    onDestroy() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            this.graph.removeMouseListener(this);\n            this.graph.removeListener(this.forceRubberbandHandler);\n            this.graph.removeListener(this.panHandler);\n            this.reset();\n            if (this.sharedDiv) {\n                this.sharedDiv = null;\n            }\n        }\n    }\n}\nRubberBandHandler.pluginId = 'RubberBandHandler';\nexport default RubberBandHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
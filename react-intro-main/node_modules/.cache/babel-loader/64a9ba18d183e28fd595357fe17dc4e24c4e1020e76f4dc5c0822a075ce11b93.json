{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n  static {\n    AbstractCommandsQuickAccessProvider_1 = this;\n  }\n  static {\n    this.PREFIX = '>';\n  }\n  static {\n    this.TFIDF_THRESHOLD = 0.5;\n  }\n  static {\n    this.TFIDF_MAX_RESULTS = 5;\n  }\n  static {\n    this.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\n  }\n  constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n    super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n    this.instantiationService = instantiationService;\n    this.keybindingService = keybindingService;\n    this.commandService = commandService;\n    this.telemetryService = telemetryService;\n    this.dialogService = dialogService;\n    this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n    this.options = options;\n  }\n  async _getPicks(filter, _disposables, token, runOptions) {\n    // Ask subclass for all command picks\n    const allCommandPicks = await this.getCommandPicks(token);\n    if (token.isCancellationRequested) {\n      return [];\n    }\n    const runTfidf = createSingleCallFunction(() => {\n      const tfidf = new TfIdfCalculator();\n      tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n        key: commandPick.commandId,\n        textChunks: [this.getTfIdfChunk(commandPick)]\n      })));\n      const result = tfidf.calculateScores(filter, token);\n      return normalizeTfIdfScores(result).filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD).slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n    });\n    // Filter\n    const filteredCommandPicks = [];\n    for (const commandPick of allCommandPicks) {\n      const labelHighlights = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label) ?? undefined;\n      const aliasHighlights = commandPick.commandAlias ? AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias) ?? undefined : undefined;\n      // Add if matching in label or alias\n      if (labelHighlights || aliasHighlights) {\n        commandPick.highlights = {\n          label: labelHighlights,\n          detail: this.options.showAlias ? aliasHighlights : undefined\n        };\n        filteredCommandPicks.push(commandPick);\n      }\n      // Also add if we have a 100% command ID match\n      else if (filter === commandPick.commandId) {\n        filteredCommandPicks.push(commandPick);\n      }\n      // Handle tf-idf scoring for the rest if there's a filter\n      else if (filter.length >= 3) {\n        const tfidf = runTfidf();\n        if (token.isCancellationRequested) {\n          return [];\n        }\n        // Add if we have a tf-idf score\n        const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n        if (tfidfScore) {\n          commandPick.tfIdfScore = tfidfScore.score;\n          filteredCommandPicks.push(commandPick);\n        }\n      }\n    }\n    // Add description to commands that have duplicate labels\n    const mapLabelToCommand = new Map();\n    for (const commandPick of filteredCommandPicks) {\n      const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n      if (existingCommandForLabel) {\n        commandPick.description = commandPick.commandId;\n        existingCommandForLabel.description = existingCommandForLabel.commandId;\n      } else {\n        mapLabelToCommand.set(commandPick.label, commandPick);\n      }\n    }\n    // Sort by MRU order and fallback to name otherwise\n    filteredCommandPicks.sort((commandPickA, commandPickB) => {\n      // If a result came from tf-idf, we want to put that towards the bottom\n      if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n        if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n          return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n        }\n        return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n      } else if (commandPickA.tfIdfScore) {\n        return 1; // first command has a score but other doesn't so other wins\n      } else if (commandPickB.tfIdfScore) {\n        return -1; // other command has a score but first doesn't so first wins\n      }\n      const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n      const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n      if (commandACounter && commandBCounter) {\n        return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n      }\n      if (commandACounter) {\n        return -1; // first command was used, so it wins over the non used one\n      }\n      if (commandBCounter) {\n        return 1; // other command was used so it wins over the command\n      }\n      if (this.options.suggestedCommandIds) {\n        const commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n        const commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n        if (commandASuggestion && commandBSuggestion) {\n          return 0; // honor the order of the array\n        }\n        if (commandASuggestion) {\n          return -1; // first command was suggested, so it wins over the non suggested one\n        }\n        if (commandBSuggestion) {\n          return 1; // other command was suggested so it wins over the command\n        }\n      }\n      // both commands were never used, so we sort by name\n      return commandPickA.label.localeCompare(commandPickB.label);\n    });\n    const commandPicks = [];\n    let addOtherSeparator = false;\n    let addSuggestedSeparator = true;\n    let addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n    for (let i = 0; i < filteredCommandPicks.length; i++) {\n      const commandPick = filteredCommandPicks[i];\n      // Separator: recently used\n      if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n        commandPicks.push({\n          type: 'separator',\n          label: localize('recentlyUsed', \"recently used\")\n        });\n        addOtherSeparator = true;\n      }\n      if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n        commandPicks.push({\n          type: 'separator',\n          label: localize('suggested', \"similar commands\")\n        });\n        addSuggestedSeparator = false;\n      }\n      // Separator: commonly used\n      if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n        commandPicks.push({\n          type: 'separator',\n          label: localize('commonlyUsed', \"commonly used\")\n        });\n        addOtherSeparator = true;\n        addCommonlyUsedSeparator = false;\n      }\n      // Separator: other commands\n      if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n        commandPicks.push({\n          type: 'separator',\n          label: localize('morecCommands', \"other commands\")\n        });\n        addOtherSeparator = false;\n      }\n      // Command\n      commandPicks.push(this.toCommandPick(commandPick, runOptions));\n    }\n    if (!this.hasAdditionalCommandPicks(filter, token)) {\n      return commandPicks;\n    }\n    return {\n      picks: commandPicks,\n      additionalPicks: (async () => {\n        const additionalCommandPicks = await this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n        if (token.isCancellationRequested) {\n          return [];\n        }\n        const commandPicks = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n        // Basically, if we haven't already added a separator, we add one before the additional picks so long\n        // as one hasn't been added to the start of the array.\n        if (addSuggestedSeparator && commandPicks[0]?.type !== 'separator') {\n          commandPicks.unshift({\n            type: 'separator',\n            label: localize('suggested', \"similar commands\")\n          });\n        }\n        return commandPicks;\n      })()\n    };\n  }\n  toCommandPick(commandPick, runOptions) {\n    if (commandPick.type === 'separator') {\n      return commandPick;\n    }\n    const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n    const ariaLabel = keybinding ? localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) : commandPick.label;\n    return {\n      ...commandPick,\n      ariaLabel,\n      detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n      keybinding,\n      accept: async () => {\n        // Add to history\n        this.commandsHistory.push(commandPick.commandId);\n        // Telementry\n        this.telemetryService.publicLog2('workbenchActionExecuted', {\n          id: commandPick.commandId,\n          from: runOptions?.from ?? 'quick open'\n        });\n        // Run\n        try {\n          commandPick.args?.length ? await this.commandService.executeCommand(commandPick.commandId, ...commandPick.args) : await this.commandService.executeCommand(commandPick.commandId);\n        } catch (error) {\n          if (!isCancellationError(error)) {\n            this.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n          }\n        }\n      }\n    };\n  }\n  // TF-IDF string to be indexed\n  getTfIdfChunk({\n    label,\n    commandAlias,\n    commandDescription\n  }) {\n    let chunk = label;\n    if (commandAlias && commandAlias !== label) {\n      chunk += ` - ${commandAlias}`;\n    }\n    if (commandDescription && commandDescription.value !== label) {\n      // If the original is the same as the value, don't add it\n      chunk += ` - ${commandDescription.value === commandDescription.original ? commandDescription.value : `${commandDescription.value} (${commandDescription.original})`}`;\n    }\n    return chunk;\n  }\n};\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService), __param(3, ICommandService), __param(4, ITelemetryService), __param(5, IDialogService)], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = class CommandsHistory extends Disposable {\n  static {\n    CommandsHistory_1 = this;\n  }\n  static {\n    this.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\n  }\n  static {\n    this.PREF_KEY_CACHE = 'commandPalette.mru.cache';\n  }\n  static {\n    this.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\n  }\n  static {\n    this.counter = 1;\n  }\n  static {\n    this.hasChanges = false;\n  }\n  constructor(storageService, configurationService, logService) {\n    super();\n    this.storageService = storageService;\n    this.configurationService = configurationService;\n    this.logService = logService;\n    this.configuredCommandsHistoryLength = 0;\n    this.updateConfiguration();\n    this.load();\n    this.registerListeners();\n  }\n  registerListeners() {\n    this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n    this._register(this.storageService.onWillSaveState(e => {\n      if (e.reason === WillSaveStateReason.SHUTDOWN) {\n        // Commands history is very dynamic and so we limit impact\n        // on storage to only save on shutdown. This helps reduce\n        // the overhead of syncing this data across machines.\n        this.saveState();\n      }\n    }));\n  }\n  updateConfiguration(e) {\n    if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n      return;\n    }\n    this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n    if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n      CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n      CommandsHistory_1.hasChanges = true;\n    }\n  }\n  load() {\n    const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n    let serializedCache;\n    if (raw) {\n      try {\n        serializedCache = JSON.parse(raw);\n      } catch (error) {\n        this.logService.error(`[CommandsHistory] invalid data: ${error}`);\n      }\n    }\n    const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n    if (serializedCache) {\n      let entries;\n      if (serializedCache.usesLRU) {\n        entries = serializedCache.entries;\n      } else {\n        entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n      }\n      entries.forEach(entry => cache.set(entry.key, entry.value));\n    }\n    CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n  }\n  push(commandId) {\n    if (!CommandsHistory_1.cache) {\n      return;\n    }\n    CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n    CommandsHistory_1.hasChanges = true;\n  }\n  peek(commandId) {\n    return CommandsHistory_1.cache?.peek(commandId);\n  }\n  saveState() {\n    if (!CommandsHistory_1.cache) {\n      return;\n    }\n    if (!CommandsHistory_1.hasChanges) {\n      return;\n    }\n    const serializedCache = {\n      usesLRU: true,\n      entries: []\n    };\n    CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({\n      key,\n      value\n    }));\n    this.storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n    this.storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n    CommandsHistory_1.hasChanges = false;\n  }\n  static getConfiguredCommandHistoryLength(configurationService) {\n    const config = configurationService.getValue();\n    const configuredCommandHistoryLength = config.workbench?.commandPalette?.history;\n    if (typeof configuredCommandHistoryLength === 'number') {\n      return configuredCommandHistoryLength;\n    }\n    return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n  }\n};\nCommandsHistory = CommandsHistory_1 = __decorate([__param(0, IStorageService), __param(1, IConfigurationService), __param(2, ILogService)], CommandsHistory);\nexport { CommandsHistory };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","AbstractCommandsQuickAccessProvider_1","CommandsHistory_1","toErrorMessage","isCancellationError","matchesContiguousSubString","matchesPrefix","matchesWords","or","createSingleCallFunction","Disposable","LRUCache","TfIdfCalculator","normalizeTfIdfScores","localize","ICommandService","IConfigurationService","IDialogService","IInstantiationService","IKeybindingService","ILogService","PickerQuickAccessProvider","IStorageService","WillSaveStateReason","ITelemetryService","AbstractCommandsQuickAccessProvider","PREFIX","TFIDF_THRESHOLD","TFIDF_MAX_RESULTS","WORD_FILTER","constructor","options","instantiationService","keybindingService","commandService","telemetryService","dialogService","commandsHistory","_register","createInstance","CommandsHistory","_getPicks","filter","_disposables","token","runOptions","allCommandPicks","getCommandPicks","isCancellationRequested","runTfidf","tfidf","updateDocuments","map","commandPick","commandId","textChunks","getTfIdfChunk","result","calculateScores","score","slice","filteredCommandPicks","labelHighlights","label","undefined","aliasHighlights","commandAlias","highlights","detail","showAlias","push","tfidfScore","find","tfIdfScore","mapLabelToCommand","Map","existingCommandForLabel","get","description","set","sort","commandPickA","commandPickB","localeCompare","commandACounter","peek","commandBCounter","suggestedCommandIds","commandASuggestion","has","commandBSuggestion","commandPicks","addOtherSeparator","addSuggestedSeparator","addCommonlyUsedSeparator","type","toCommandPick","hasAdditionalCommandPicks","picks","additionalPicks","additionalCommandPicks","getAdditionalCommandPicks","unshift","keybinding","lookupKeybinding","ariaLabel","getAriaLabel","accept","publicLog2","id","from","args","executeCommand","error","commandDescription","chunk","value","original","DEFAULT_COMMANDS_HISTORY_LENGTH","PREF_KEY_CACHE","PREF_KEY_COUNTER","counter","hasChanges","storageService","configurationService","logService","configuredCommandsHistoryLength","updateConfiguration","load","registerListeners","onDidChangeConfiguration","e","onWillSaveState","reason","SHUTDOWN","saveState","affectsConfiguration","getConfiguredCommandHistoryLength","cache","limit","raw","serializedCache","JSON","parse","entries","usesLRU","a","b","forEach","entry","getNumber","store","stringify","config","getValue","configuredCommandHistoryLength","workbench","commandPalette","history"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/commandsQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n    static { AbstractCommandsQuickAccessProvider_1 = this; }\n    static { this.PREFIX = '>'; }\n    static { this.TFIDF_THRESHOLD = 0.5; }\n    static { this.TFIDF_MAX_RESULTS = 5; }\n    static { this.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString); }\n    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n        super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n        this.instantiationService = instantiationService;\n        this.keybindingService = keybindingService;\n        this.commandService = commandService;\n        this.telemetryService = telemetryService;\n        this.dialogService = dialogService;\n        this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n        this.options = options;\n    }\n    async _getPicks(filter, _disposables, token, runOptions) {\n        // Ask subclass for all command picks\n        const allCommandPicks = await this.getCommandPicks(token);\n        if (token.isCancellationRequested) {\n            return [];\n        }\n        const runTfidf = createSingleCallFunction(() => {\n            const tfidf = new TfIdfCalculator();\n            tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n                key: commandPick.commandId,\n                textChunks: [this.getTfIdfChunk(commandPick)]\n            })));\n            const result = tfidf.calculateScores(filter, token);\n            return normalizeTfIdfScores(result)\n                .filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD)\n                .slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n        });\n        // Filter\n        const filteredCommandPicks = [];\n        for (const commandPick of allCommandPicks) {\n            const labelHighlights = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label) ?? undefined;\n            const aliasHighlights = commandPick.commandAlias ? AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias) ?? undefined : undefined;\n            // Add if matching in label or alias\n            if (labelHighlights || aliasHighlights) {\n                commandPick.highlights = {\n                    label: labelHighlights,\n                    detail: this.options.showAlias ? aliasHighlights : undefined\n                };\n                filteredCommandPicks.push(commandPick);\n            }\n            // Also add if we have a 100% command ID match\n            else if (filter === commandPick.commandId) {\n                filteredCommandPicks.push(commandPick);\n            }\n            // Handle tf-idf scoring for the rest if there's a filter\n            else if (filter.length >= 3) {\n                const tfidf = runTfidf();\n                if (token.isCancellationRequested) {\n                    return [];\n                }\n                // Add if we have a tf-idf score\n                const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n                if (tfidfScore) {\n                    commandPick.tfIdfScore = tfidfScore.score;\n                    filteredCommandPicks.push(commandPick);\n                }\n            }\n        }\n        // Add description to commands that have duplicate labels\n        const mapLabelToCommand = new Map();\n        for (const commandPick of filteredCommandPicks) {\n            const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n            if (existingCommandForLabel) {\n                commandPick.description = commandPick.commandId;\n                existingCommandForLabel.description = existingCommandForLabel.commandId;\n            }\n            else {\n                mapLabelToCommand.set(commandPick.label, commandPick);\n            }\n        }\n        // Sort by MRU order and fallback to name otherwise\n        filteredCommandPicks.sort((commandPickA, commandPickB) => {\n            // If a result came from tf-idf, we want to put that towards the bottom\n            if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n                if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n                    return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n                }\n                return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n            }\n            else if (commandPickA.tfIdfScore) {\n                return 1; // first command has a score but other doesn't so other wins\n            }\n            else if (commandPickB.tfIdfScore) {\n                return -1; // other command has a score but first doesn't so first wins\n            }\n            const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n            const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n            if (commandACounter && commandBCounter) {\n                return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n            }\n            if (commandACounter) {\n                return -1; // first command was used, so it wins over the non used one\n            }\n            if (commandBCounter) {\n                return 1; // other command was used so it wins over the command\n            }\n            if (this.options.suggestedCommandIds) {\n                const commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n                const commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n                if (commandASuggestion && commandBSuggestion) {\n                    return 0; // honor the order of the array\n                }\n                if (commandASuggestion) {\n                    return -1; // first command was suggested, so it wins over the non suggested one\n                }\n                if (commandBSuggestion) {\n                    return 1; // other command was suggested so it wins over the command\n                }\n            }\n            // both commands were never used, so we sort by name\n            return commandPickA.label.localeCompare(commandPickB.label);\n        });\n        const commandPicks = [];\n        let addOtherSeparator = false;\n        let addSuggestedSeparator = true;\n        let addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n        for (let i = 0; i < filteredCommandPicks.length; i++) {\n            const commandPick = filteredCommandPicks[i];\n            // Separator: recently used\n            if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n                commandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\n                addOtherSeparator = true;\n            }\n            if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n                commandPicks.push({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                addSuggestedSeparator = false;\n            }\n            // Separator: commonly used\n            if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n                commandPicks.push({ type: 'separator', label: localize('commonlyUsed', \"commonly used\") });\n                addOtherSeparator = true;\n                addCommonlyUsedSeparator = false;\n            }\n            // Separator: other commands\n            if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !this.options.suggestedCommandIds?.has(commandPick.commandId)) {\n                commandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\n                addOtherSeparator = false;\n            }\n            // Command\n            commandPicks.push(this.toCommandPick(commandPick, runOptions));\n        }\n        if (!this.hasAdditionalCommandPicks(filter, token)) {\n            return commandPicks;\n        }\n        return {\n            picks: commandPicks,\n            additionalPicks: (async () => {\n                const additionalCommandPicks = await this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n                if (token.isCancellationRequested) {\n                    return [];\n                }\n                const commandPicks = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n                // Basically, if we haven't already added a separator, we add one before the additional picks so long\n                // as one hasn't been added to the start of the array.\n                if (addSuggestedSeparator && commandPicks[0]?.type !== 'separator') {\n                    commandPicks.unshift({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                }\n                return commandPicks;\n            })()\n        };\n    }\n    toCommandPick(commandPick, runOptions) {\n        if (commandPick.type === 'separator') {\n            return commandPick;\n        }\n        const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n        const ariaLabel = keybinding ?\n            localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\n            commandPick.label;\n        return {\n            ...commandPick,\n            ariaLabel,\n            detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n            keybinding,\n            accept: async () => {\n                // Add to history\n                this.commandsHistory.push(commandPick.commandId);\n                // Telementry\n                this.telemetryService.publicLog2('workbenchActionExecuted', {\n                    id: commandPick.commandId,\n                    from: runOptions?.from ?? 'quick open'\n                });\n                // Run\n                try {\n                    commandPick.args?.length\n                        ? await this.commandService.executeCommand(commandPick.commandId, ...commandPick.args)\n                        : await this.commandService.executeCommand(commandPick.commandId);\n                }\n                catch (error) {\n                    if (!isCancellationError(error)) {\n                        this.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n                    }\n                }\n            }\n        };\n    }\n    // TF-IDF string to be indexed\n    getTfIdfChunk({ label, commandAlias, commandDescription }) {\n        let chunk = label;\n        if (commandAlias && commandAlias !== label) {\n            chunk += ` - ${commandAlias}`;\n        }\n        if (commandDescription && commandDescription.value !== label) {\n            // If the original is the same as the value, don't add it\n            chunk += ` - ${commandDescription.value === commandDescription.original ? commandDescription.value : `${commandDescription.value} (${commandDescription.original})`}`;\n        }\n        return chunk;\n    }\n};\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IKeybindingService),\n    __param(3, ICommandService),\n    __param(4, ITelemetryService),\n    __param(5, IDialogService)\n], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = class CommandsHistory extends Disposable {\n    static { CommandsHistory_1 = this; }\n    static { this.DEFAULT_COMMANDS_HISTORY_LENGTH = 50; }\n    static { this.PREF_KEY_CACHE = 'commandPalette.mru.cache'; }\n    static { this.PREF_KEY_COUNTER = 'commandPalette.mru.counter'; }\n    static { this.counter = 1; }\n    static { this.hasChanges = false; }\n    constructor(storageService, configurationService, logService) {\n        super();\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.logService = logService;\n        this.configuredCommandsHistoryLength = 0;\n        this.updateConfiguration();\n        this.load();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n        this._register(this.storageService.onWillSaveState(e => {\n            if (e.reason === WillSaveStateReason.SHUTDOWN) {\n                // Commands history is very dynamic and so we limit impact\n                // on storage to only save on shutdown. This helps reduce\n                // the overhead of syncing this data across machines.\n                this.saveState();\n            }\n        }));\n    }\n    updateConfiguration(e) {\n        if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n            return;\n        }\n        this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n        if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n            CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n            CommandsHistory_1.hasChanges = true;\n        }\n    }\n    load() {\n        const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n        let serializedCache;\n        if (raw) {\n            try {\n                serializedCache = JSON.parse(raw);\n            }\n            catch (error) {\n                this.logService.error(`[CommandsHistory] invalid data: ${error}`);\n            }\n        }\n        const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n        if (serializedCache) {\n            let entries;\n            if (serializedCache.usesLRU) {\n                entries = serializedCache.entries;\n            }\n            else {\n                entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n            }\n            entries.forEach(entry => cache.set(entry.key, entry.value));\n        }\n        CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n    }\n    push(commandId) {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n        CommandsHistory_1.hasChanges = true;\n    }\n    peek(commandId) {\n        return CommandsHistory_1.cache?.peek(commandId);\n    }\n    saveState() {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        if (!CommandsHistory_1.hasChanges) {\n            return;\n        }\n        const serializedCache = { usesLRU: true, entries: [] };\n        CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\n        this.storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        this.storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        CommandsHistory_1.hasChanges = false;\n    }\n    static getConfiguredCommandHistoryLength(configurationService) {\n        const config = configurationService.getValue();\n        const configuredCommandHistoryLength = config.workbench?.commandPalette?.history;\n        if (typeof configuredCommandHistoryLength === 'number') {\n            return configuredCommandHistoryLength;\n        }\n        return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n};\nCommandsHistory = CommandsHistory_1 = __decorate([\n    __param(0, IStorageService),\n    __param(1, IConfigurationService),\n    __param(2, ILogService)\n], CommandsHistory);\nexport { CommandsHistory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
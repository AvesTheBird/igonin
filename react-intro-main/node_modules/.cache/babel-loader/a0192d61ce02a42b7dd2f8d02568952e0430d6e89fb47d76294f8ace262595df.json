{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { binarySearch, isFalsyOrEmpty } from '../../../../base/common/arrays.js';\nimport { Range } from '../../../common/core/range.js';\nimport { BracketSelectionRangeProvider } from '../../smartSelect/browser/bracketSelections.js';\nexport class WordDistance {\n  static {\n    this.None = new class extends WordDistance {\n      distance() {\n        return 0;\n      }\n    }();\n  }\n  static async create(service, editor) {\n    if (!editor.getOption(119 /* EditorOption.suggest */).localityBonus) {\n      return WordDistance.None;\n    }\n    if (!editor.hasModel()) {\n      return WordDistance.None;\n    }\n    const model = editor.getModel();\n    const position = editor.getPosition();\n    if (!service.canComputeWordRanges(model.uri)) {\n      return WordDistance.None;\n    }\n    const [ranges] = await new BracketSelectionRangeProvider().provideSelectionRanges(model, [position]);\n    if (ranges.length === 0) {\n      return WordDistance.None;\n    }\n    const wordRanges = await service.computeWordRanges(model.uri, ranges[0].range);\n    if (!wordRanges) {\n      return WordDistance.None;\n    }\n    // remove current word\n    const wordUntilPos = model.getWordUntilPosition(position);\n    delete wordRanges[wordUntilPos.word];\n    return new class extends WordDistance {\n      distance(anchor, item) {\n        if (!position.equals(editor.getPosition())) {\n          return 0;\n        }\n        if (item.kind === 17 /* CompletionItemKind.Keyword */) {\n          return 2 << 20;\n        }\n        const word = typeof item.label === 'string' ? item.label : item.label.label;\n        const wordLines = wordRanges[word];\n        if (isFalsyOrEmpty(wordLines)) {\n          return 2 << 20;\n        }\n        const idx = binarySearch(wordLines, Range.fromPositions(anchor), Range.compareRangesUsingStarts);\n        const bestWordRange = idx >= 0 ? wordLines[idx] : wordLines[Math.max(0, ~idx - 1)];\n        let blockDistance = ranges.length;\n        for (const range of ranges) {\n          if (!Range.containsRange(range.range, bestWordRange)) {\n            break;\n          }\n          blockDistance -= 1;\n        }\n        return blockDistance;\n      }\n    }();\n  }\n}","map":{"version":3,"names":["binarySearch","isFalsyOrEmpty","Range","BracketSelectionRangeProvider","WordDistance","None","distance","create","service","editor","getOption","localityBonus","hasModel","model","getModel","position","getPosition","canComputeWordRanges","uri","ranges","provideSelectionRanges","length","wordRanges","computeWordRanges","range","wordUntilPos","getWordUntilPosition","word","anchor","item","equals","kind","label","wordLines","idx","fromPositions","compareRangesUsingStarts","bestWordRange","Math","max","blockDistance","containsRange"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/wordDistance.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { binarySearch, isFalsyOrEmpty } from '../../../../base/common/arrays.js';\nimport { Range } from '../../../common/core/range.js';\nimport { BracketSelectionRangeProvider } from '../../smartSelect/browser/bracketSelections.js';\nexport class WordDistance {\n    static { this.None = new class extends WordDistance {\n        distance() { return 0; }\n    }; }\n    static async create(service, editor) {\n        if (!editor.getOption(119 /* EditorOption.suggest */).localityBonus) {\n            return WordDistance.None;\n        }\n        if (!editor.hasModel()) {\n            return WordDistance.None;\n        }\n        const model = editor.getModel();\n        const position = editor.getPosition();\n        if (!service.canComputeWordRanges(model.uri)) {\n            return WordDistance.None;\n        }\n        const [ranges] = await new BracketSelectionRangeProvider().provideSelectionRanges(model, [position]);\n        if (ranges.length === 0) {\n            return WordDistance.None;\n        }\n        const wordRanges = await service.computeWordRanges(model.uri, ranges[0].range);\n        if (!wordRanges) {\n            return WordDistance.None;\n        }\n        // remove current word\n        const wordUntilPos = model.getWordUntilPosition(position);\n        delete wordRanges[wordUntilPos.word];\n        return new class extends WordDistance {\n            distance(anchor, item) {\n                if (!position.equals(editor.getPosition())) {\n                    return 0;\n                }\n                if (item.kind === 17 /* CompletionItemKind.Keyword */) {\n                    return 2 << 20;\n                }\n                const word = typeof item.label === 'string' ? item.label : item.label.label;\n                const wordLines = wordRanges[word];\n                if (isFalsyOrEmpty(wordLines)) {\n                    return 2 << 20;\n                }\n                const idx = binarySearch(wordLines, Range.fromPositions(anchor), Range.compareRangesUsingStarts);\n                const bestWordRange = idx >= 0 ? wordLines[idx] : wordLines[Math.max(0, ~idx - 1)];\n                let blockDistance = ranges.length;\n                for (const range of ranges) {\n                    if (!Range.containsRange(range.range, bestWordRange)) {\n                        break;\n                    }\n                    blockDistance -= 1;\n                }\n                return blockDistance;\n            }\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
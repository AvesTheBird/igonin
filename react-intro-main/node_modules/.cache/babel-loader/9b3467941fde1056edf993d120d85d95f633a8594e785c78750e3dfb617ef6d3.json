{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { DIRECTION } from '../../../util/Constants';\nimport { intersection } from '../../../util/mathUtils';\nexport const HexagonPerimeter = (bounds, vertex, next, orthogonal = false) => {\n  const {\n    x\n  } = bounds;\n  const {\n    y\n  } = bounds;\n  const w = bounds.width;\n  const h = bounds.height;\n  const cx = bounds.getCenterX();\n  const cy = bounds.getCenterY();\n  const px = next.x;\n  const py = next.y;\n  const dx = px - cx;\n  const dy = py - cy;\n  const alpha = -Math.atan2(dy, dx);\n  const pi = Math.PI;\n  const pi2 = Math.PI / 2;\n  let result = new Point(cx, cy);\n  const direction = vertex?.style?.direction ?? DIRECTION.EAST;\n  const vertical = direction === DIRECTION.NORTH || direction === DIRECTION.SOUTH;\n  let a = new Point();\n  let b = new Point();\n  // Only consider corrects quadrants for the orthogonal case.\n  if (px < x && py < y || px < x && py > y + h || px > x + w && py < y || px > x + w && py > y + h) {\n    orthogonal = false;\n  }\n  if (orthogonal) {\n    if (vertical) {\n      // Special cases where intersects with hexagon corners\n      if (px === cx) {\n        if (py <= y) {\n          return new Point(cx, y);\n        }\n        if (py >= y + h) {\n          return new Point(cx, y + h);\n        }\n      } else if (px < x) {\n        if (py === y + h / 4) {\n          return new Point(x, y + h / 4);\n        }\n        if (py === y + 3 * h / 4) {\n          return new Point(x, y + 3 * h / 4);\n        }\n      } else if (px > x + w) {\n        if (py === y + h / 4) {\n          return new Point(x + w, y + h / 4);\n        }\n        if (py === y + 3 * h / 4) {\n          return new Point(x + w, y + 3 * h / 4);\n        }\n      } else if (px === x) {\n        if (py < cy) {\n          return new Point(x, y + h / 4);\n        }\n        if (py > cy) {\n          return new Point(x, y + 3 * h / 4);\n        }\n      } else if (px === x + w) {\n        if (py < cy) {\n          return new Point(x + w, y + h / 4);\n        }\n        if (py > cy) {\n          return new Point(x + w, y + 3 * h / 4);\n        }\n      }\n      if (py === y) {\n        return new Point(cx, y);\n      }\n      if (py === y + h) {\n        return new Point(cx, y + h);\n      }\n      if (px < cx) {\n        if (py > y + h / 4 && py < y + 3 * h / 4) {\n          a = new Point(x, y);\n          b = new Point(x, y + h);\n        } else if (py < y + h / 4) {\n          a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n          b = new Point(x + w, y - Math.floor(0.25 * h));\n        } else if (py > y + 3 * h / 4) {\n          a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n          b = new Point(x + w, y + Math.floor(1.25 * h));\n        }\n      } else if (px > cx) {\n        if (py > y + h / 4 && py < y + 3 * h / 4) {\n          a = new Point(x + w, y);\n          b = new Point(x + w, y + h);\n        } else if (py < y + h / 4) {\n          a = new Point(x, y - Math.floor(0.25 * h));\n          b = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n        } else if (py > y + 3 * h / 4) {\n          a = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n          b = new Point(x, y + Math.floor(1.25 * h));\n        }\n      }\n    } else {\n      // Special cases where intersects with hexagon corners\n      if (py === cy) {\n        if (px <= x) {\n          return new Point(x, y + h / 2);\n        }\n        if (px >= x + w) {\n          return new Point(x + w, y + h / 2);\n        }\n      } else if (py < y) {\n        if (px === x + w / 4) {\n          return new Point(x + w / 4, y);\n        }\n        if (px === x + 3 * w / 4) {\n          return new Point(x + 3 * w / 4, y);\n        }\n      } else if (py > y + h) {\n        if (px === x + w / 4) {\n          return new Point(x + w / 4, y + h);\n        }\n        if (px === x + 3 * w / 4) {\n          return new Point(x + 3 * w / 4, y + h);\n        }\n      } else if (py === y) {\n        if (px < cx) {\n          return new Point(x + w / 4, y);\n        }\n        if (px > cx) {\n          return new Point(x + 3 * w / 4, y);\n        }\n      } else if (py === y + h) {\n        if (px < cx) {\n          return new Point(x + w / 4, y + h);\n        }\n        if (py > cy) {\n          return new Point(x + 3 * w / 4, y + h);\n        }\n      }\n      if (px === x) {\n        return new Point(x, cy);\n      }\n      if (px === x + w) {\n        return new Point(x + w, cy);\n      }\n      if (py < cy) {\n        if (px > x + w / 4 && px < x + 3 * w / 4) {\n          a = new Point(x, y);\n          b = new Point(x + w, y);\n        } else if (px < x + w / 4) {\n          a = new Point(x - Math.floor(0.25 * w), y + h);\n          b = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n        } else if (px > x + 3 * w / 4) {\n          a = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n          b = new Point(x + Math.floor(1.25 * w), y + h);\n        }\n      } else if (py > cy) {\n        if (px > x + w / 4 && px < x + 3 * w / 4) {\n          a = new Point(x, y + h);\n          b = new Point(x + w, y + h);\n        } else if (px < x + w / 4) {\n          a = new Point(x - Math.floor(0.25 * w), y);\n          b = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n        } else if (px > x + 3 * w / 4) {\n          a = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n          b = new Point(x + Math.floor(1.25 * w), y);\n        }\n      }\n    }\n    let tx = cx;\n    let ty = cy;\n    if (px >= x && px <= x + w) {\n      tx = px;\n      if (py < cy) {\n        ty = y + h;\n      } else {\n        ty = y;\n      }\n    } else if (py >= y && py <= y + h) {\n      ty = py;\n      if (px < cx) {\n        tx = x + w;\n      } else {\n        tx = x;\n      }\n    }\n    result = intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n  } else {\n    if (vertical) {\n      const beta = Math.atan2(h / 4, w / 2);\n      // Special cases where intersects with hexagon corners\n      if (alpha === beta) {\n        return new Point(x + w, y + Math.floor(0.25 * h));\n      }\n      if (alpha === pi2) {\n        return new Point(x + Math.floor(0.5 * w), y);\n      }\n      if (alpha === pi - beta) {\n        return new Point(x, y + Math.floor(0.25 * h));\n      }\n      if (alpha === -beta) {\n        return new Point(x + w, y + Math.floor(0.75 * h));\n      }\n      if (alpha === -pi2) {\n        return new Point(x + Math.floor(0.5 * w), y + h);\n      }\n      if (alpha === -pi + beta) {\n        return new Point(x, y + Math.floor(0.75 * h));\n      }\n      if (alpha < beta && alpha > -beta) {\n        a = new Point(x + w, y);\n        b = new Point(x + w, y + h);\n      } else if (alpha > beta && alpha < pi2) {\n        a = new Point(x, y - Math.floor(0.25 * h));\n        b = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n      } else if (alpha > pi2 && alpha < pi - beta) {\n        a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n        b = new Point(x + w, y - Math.floor(0.25 * h));\n      } else if (alpha > pi - beta && alpha <= pi || alpha < -pi + beta && alpha >= -pi) {\n        a = new Point(x, y);\n        b = new Point(x, y + h);\n      } else if (alpha < -beta && alpha > -pi2) {\n        a = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n        b = new Point(x, y + Math.floor(1.25 * h));\n      } else if (alpha < -pi2 && alpha > -pi + beta) {\n        a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n        b = new Point(x + w, y + Math.floor(1.25 * h));\n      }\n    } else {\n      const beta = Math.atan2(h / 2, w / 4);\n      // Special cases where intersects with hexagon corners\n      if (alpha === beta) {\n        return new Point(x + Math.floor(0.75 * w), y);\n      }\n      if (alpha === pi - beta) {\n        return new Point(x + Math.floor(0.25 * w), y);\n      }\n      if (alpha === pi || alpha === -pi) {\n        return new Point(x, y + Math.floor(0.5 * h));\n      }\n      if (alpha === 0) {\n        return new Point(x + w, y + Math.floor(0.5 * h));\n      }\n      if (alpha === -beta) {\n        return new Point(x + Math.floor(0.75 * w), y + h);\n      }\n      if (alpha === -pi + beta) {\n        return new Point(x + Math.floor(0.25 * w), y + h);\n      }\n      if (alpha > 0 && alpha < beta) {\n        a = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n        b = new Point(x + Math.floor(1.25 * w), y + h);\n      } else if (alpha > beta && alpha < pi - beta) {\n        a = new Point(x, y);\n        b = new Point(x + w, y);\n      } else if (alpha > pi - beta && alpha < pi) {\n        a = new Point(x - Math.floor(0.25 * w), y + h);\n        b = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n      } else if (alpha < 0 && alpha > -beta) {\n        a = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n        b = new Point(x + Math.floor(1.25 * w), y);\n      } else if (alpha < -beta && alpha > -pi + beta) {\n        a = new Point(x, y + h);\n        b = new Point(x + w, y + h);\n      } else if (alpha < -pi + beta && alpha > -pi) {\n        a = new Point(x - Math.floor(0.25 * w), y);\n        b = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n      }\n    }\n    result = intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n  }\n  if (result == null) {\n    return new Point(cx, cy);\n  }\n  return result;\n};","map":{"version":3,"names":["Point","DIRECTION","intersection","HexagonPerimeter","bounds","vertex","next","orthogonal","x","y","w","width","h","height","cx","getCenterX","cy","getCenterY","px","py","dx","dy","alpha","Math","atan2","pi","PI","pi2","result","direction","style","EAST","vertical","NORTH","SOUTH","a","b","floor","tx","ty","beta"],"sources":["D:/ospanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/style/perimeter/HexagonPerimeter.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../../geometry/Point';\nimport { DIRECTION } from '../../../util/Constants';\nimport { intersection } from '../../../util/mathUtils';\nexport const HexagonPerimeter = (bounds, vertex, next, orthogonal = false) => {\n    const { x } = bounds;\n    const { y } = bounds;\n    const w = bounds.width;\n    const h = bounds.height;\n    const cx = bounds.getCenterX();\n    const cy = bounds.getCenterY();\n    const px = next.x;\n    const py = next.y;\n    const dx = px - cx;\n    const dy = py - cy;\n    const alpha = -Math.atan2(dy, dx);\n    const pi = Math.PI;\n    const pi2 = Math.PI / 2;\n    let result = new Point(cx, cy);\n    const direction = vertex?.style?.direction ?? DIRECTION.EAST;\n    const vertical = direction === DIRECTION.NORTH || direction === DIRECTION.SOUTH;\n    let a = new Point();\n    let b = new Point();\n    // Only consider corrects quadrants for the orthogonal case.\n    if ((px < x && py < y) ||\n        (px < x && py > y + h) ||\n        (px > x + w && py < y) ||\n        (px > x + w && py > y + h)) {\n        orthogonal = false;\n    }\n    if (orthogonal) {\n        if (vertical) {\n            // Special cases where intersects with hexagon corners\n            if (px === cx) {\n                if (py <= y) {\n                    return new Point(cx, y);\n                }\n                if (py >= y + h) {\n                    return new Point(cx, y + h);\n                }\n            }\n            else if (px < x) {\n                if (py === y + h / 4) {\n                    return new Point(x, y + h / 4);\n                }\n                if (py === y + (3 * h) / 4) {\n                    return new Point(x, y + (3 * h) / 4);\n                }\n            }\n            else if (px > x + w) {\n                if (py === y + h / 4) {\n                    return new Point(x + w, y + h / 4);\n                }\n                if (py === y + (3 * h) / 4) {\n                    return new Point(x + w, y + (3 * h) / 4);\n                }\n            }\n            else if (px === x) {\n                if (py < cy) {\n                    return new Point(x, y + h / 4);\n                }\n                if (py > cy) {\n                    return new Point(x, y + (3 * h) / 4);\n                }\n            }\n            else if (px === x + w) {\n                if (py < cy) {\n                    return new Point(x + w, y + h / 4);\n                }\n                if (py > cy) {\n                    return new Point(x + w, y + (3 * h) / 4);\n                }\n            }\n            if (py === y) {\n                return new Point(cx, y);\n            }\n            if (py === y + h) {\n                return new Point(cx, y + h);\n            }\n            if (px < cx) {\n                if (py > y + h / 4 && py < y + (3 * h) / 4) {\n                    a = new Point(x, y);\n                    b = new Point(x, y + h);\n                }\n                else if (py < y + h / 4) {\n                    a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n                    b = new Point(x + w, y - Math.floor(0.25 * h));\n                }\n                else if (py > y + (3 * h) / 4) {\n                    a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n                    b = new Point(x + w, y + Math.floor(1.25 * h));\n                }\n            }\n            else if (px > cx) {\n                if (py > y + h / 4 && py < y + (3 * h) / 4) {\n                    a = new Point(x + w, y);\n                    b = new Point(x + w, y + h);\n                }\n                else if (py < y + h / 4) {\n                    a = new Point(x, y - Math.floor(0.25 * h));\n                    b = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n                }\n                else if (py > y + (3 * h) / 4) {\n                    a = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n                    b = new Point(x, y + Math.floor(1.25 * h));\n                }\n            }\n        }\n        else {\n            // Special cases where intersects with hexagon corners\n            if (py === cy) {\n                if (px <= x) {\n                    return new Point(x, y + h / 2);\n                }\n                if (px >= x + w) {\n                    return new Point(x + w, y + h / 2);\n                }\n            }\n            else if (py < y) {\n                if (px === x + w / 4) {\n                    return new Point(x + w / 4, y);\n                }\n                if (px === x + (3 * w) / 4) {\n                    return new Point(x + (3 * w) / 4, y);\n                }\n            }\n            else if (py > y + h) {\n                if (px === x + w / 4) {\n                    return new Point(x + w / 4, y + h);\n                }\n                if (px === x + (3 * w) / 4) {\n                    return new Point(x + (3 * w) / 4, y + h);\n                }\n            }\n            else if (py === y) {\n                if (px < cx) {\n                    return new Point(x + w / 4, y);\n                }\n                if (px > cx) {\n                    return new Point(x + (3 * w) / 4, y);\n                }\n            }\n            else if (py === y + h) {\n                if (px < cx) {\n                    return new Point(x + w / 4, y + h);\n                }\n                if (py > cy) {\n                    return new Point(x + (3 * w) / 4, y + h);\n                }\n            }\n            if (px === x) {\n                return new Point(x, cy);\n            }\n            if (px === x + w) {\n                return new Point(x + w, cy);\n            }\n            if (py < cy) {\n                if (px > x + w / 4 && px < x + (3 * w) / 4) {\n                    a = new Point(x, y);\n                    b = new Point(x + w, y);\n                }\n                else if (px < x + w / 4) {\n                    a = new Point(x - Math.floor(0.25 * w), y + h);\n                    b = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n                }\n                else if (px > x + (3 * w) / 4) {\n                    a = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n                    b = new Point(x + Math.floor(1.25 * w), y + h);\n                }\n            }\n            else if (py > cy) {\n                if (px > x + w / 4 && px < x + (3 * w) / 4) {\n                    a = new Point(x, y + h);\n                    b = new Point(x + w, y + h);\n                }\n                else if (px < x + w / 4) {\n                    a = new Point(x - Math.floor(0.25 * w), y);\n                    b = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n                }\n                else if (px > x + (3 * w) / 4) {\n                    a = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n                    b = new Point(x + Math.floor(1.25 * w), y);\n                }\n            }\n        }\n        let tx = cx;\n        let ty = cy;\n        if (px >= x && px <= x + w) {\n            tx = px;\n            if (py < cy) {\n                ty = y + h;\n            }\n            else {\n                ty = y;\n            }\n        }\n        else if (py >= y && py <= y + h) {\n            ty = py;\n            if (px < cx) {\n                tx = x + w;\n            }\n            else {\n                tx = x;\n            }\n        }\n        result = intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n    }\n    else {\n        if (vertical) {\n            const beta = Math.atan2(h / 4, w / 2);\n            // Special cases where intersects with hexagon corners\n            if (alpha === beta) {\n                return new Point(x + w, y + Math.floor(0.25 * h));\n            }\n            if (alpha === pi2) {\n                return new Point(x + Math.floor(0.5 * w), y);\n            }\n            if (alpha === pi - beta) {\n                return new Point(x, y + Math.floor(0.25 * h));\n            }\n            if (alpha === -beta) {\n                return new Point(x + w, y + Math.floor(0.75 * h));\n            }\n            if (alpha === -pi2) {\n                return new Point(x + Math.floor(0.5 * w), y + h);\n            }\n            if (alpha === -pi + beta) {\n                return new Point(x, y + Math.floor(0.75 * h));\n            }\n            if (alpha < beta && alpha > -beta) {\n                a = new Point(x + w, y);\n                b = new Point(x + w, y + h);\n            }\n            else if (alpha > beta && alpha < pi2) {\n                a = new Point(x, y - Math.floor(0.25 * h));\n                b = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n            }\n            else if (alpha > pi2 && alpha < pi - beta) {\n                a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n                b = new Point(x + w, y - Math.floor(0.25 * h));\n            }\n            else if ((alpha > pi - beta && alpha <= pi) ||\n                (alpha < -pi + beta && alpha >= -pi)) {\n                a = new Point(x, y);\n                b = new Point(x, y + h);\n            }\n            else if (alpha < -beta && alpha > -pi2) {\n                a = new Point(x + Math.floor(1.5 * w), y + Math.floor(0.5 * h));\n                b = new Point(x, y + Math.floor(1.25 * h));\n            }\n            else if (alpha < -pi2 && alpha > -pi + beta) {\n                a = new Point(x - Math.floor(0.5 * w), y + Math.floor(0.5 * h));\n                b = new Point(x + w, y + Math.floor(1.25 * h));\n            }\n        }\n        else {\n            const beta = Math.atan2(h / 2, w / 4);\n            // Special cases where intersects with hexagon corners\n            if (alpha === beta) {\n                return new Point(x + Math.floor(0.75 * w), y);\n            }\n            if (alpha === pi - beta) {\n                return new Point(x + Math.floor(0.25 * w), y);\n            }\n            if (alpha === pi || alpha === -pi) {\n                return new Point(x, y + Math.floor(0.5 * h));\n            }\n            if (alpha === 0) {\n                return new Point(x + w, y + Math.floor(0.5 * h));\n            }\n            if (alpha === -beta) {\n                return new Point(x + Math.floor(0.75 * w), y + h);\n            }\n            if (alpha === -pi + beta) {\n                return new Point(x + Math.floor(0.25 * w), y + h);\n            }\n            if (alpha > 0 && alpha < beta) {\n                a = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n                b = new Point(x + Math.floor(1.25 * w), y + h);\n            }\n            else if (alpha > beta && alpha < pi - beta) {\n                a = new Point(x, y);\n                b = new Point(x + w, y);\n            }\n            else if (alpha > pi - beta && alpha < pi) {\n                a = new Point(x - Math.floor(0.25 * w), y + h);\n                b = new Point(x + Math.floor(0.5 * w), y - Math.floor(0.5 * h));\n            }\n            else if (alpha < 0 && alpha > -beta) {\n                a = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n                b = new Point(x + Math.floor(1.25 * w), y);\n            }\n            else if (alpha < -beta && alpha > -pi + beta) {\n                a = new Point(x, y + h);\n                b = new Point(x + w, y + h);\n            }\n            else if (alpha < -pi + beta && alpha > -pi) {\n                a = new Point(x - Math.floor(0.25 * w), y);\n                b = new Point(x + Math.floor(0.5 * w), y + Math.floor(1.5 * h));\n            }\n        }\n        result = intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n    }\n    if (result == null) {\n        return new Point(cx, cy);\n    }\n    return result;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
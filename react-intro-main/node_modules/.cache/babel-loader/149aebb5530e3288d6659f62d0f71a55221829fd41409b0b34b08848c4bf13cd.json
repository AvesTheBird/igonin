{"ast":null,"code":"'use strict';\n\nconst rec = require('./rec.js');\nconst lane = require('./lane.js');\nconst parseConfig = require('./parse-config.js');\nconst parseWaveLanes = require('./parse-wave-lanes.js');\nconst renderGroups = require('./render-groups.js');\nconst renderLanes = require('./render-lanes.js');\nconst renderWaveLane = require('./render-wave-lane.js');\nconst insertSVGTemplate = require('./insert-svg-template.js');\nfunction laneParamsFromSkin(index, source, lane, waveSkin) {\n  if (index !== 0) {\n    return;\n  }\n  const waveSkinNames = Object.keys(waveSkin);\n  if (waveSkinNames.length === 0) {\n    throw new Error('no skins found');\n  }\n  let skin = waveSkin.default || waveSkin[waveSkinNames[0]];\n  if (source && source.config && source.config.skin && waveSkin[source.config.skin]) {\n    skin = waveSkin[source.config.skin];\n  }\n  const socket = skin[3][1][2][1];\n  lane.xs = Number(socket.width);\n  lane.ys = Number(socket.height);\n  lane.xlabel = Number(socket.x);\n  lane.ym = Number(socket.y);\n}\nfunction renderSignal(index, source, waveSkin, notFirstSignal) {\n  laneParamsFromSkin(index, source, lane, waveSkin);\n  parseConfig(source, lane);\n  const ret = rec(source.signal, {\n    x: 0,\n    y: 0,\n    xmax: 0,\n    width: [],\n    lanes: [],\n    groups: []\n  });\n  const content = parseWaveLanes(ret.lanes, lane);\n  const waveLanes = renderWaveLane(content, index, lane);\n  const waveGroups = renderGroups(ret.groups, index, lane);\n  const xmax = waveLanes.glengths.reduce((res, len, i) => Math.max(res, len + ret.width[i]), 0);\n  lane.xg = Math.ceil((xmax - lane.tgo) / lane.xs) * lane.xs;\n  return insertSVGTemplate(index, source, lane, waveSkin, content, renderLanes(index, content, waveLanes, ret, source, lane), waveGroups, notFirstSignal);\n}\nmodule.exports = renderSignal;","map":{"version":3,"names":["rec","require","lane","parseConfig","parseWaveLanes","renderGroups","renderLanes","renderWaveLane","insertSVGTemplate","laneParamsFromSkin","index","source","waveSkin","waveSkinNames","Object","keys","length","Error","skin","default","config","socket","xs","Number","width","ys","height","xlabel","x","ym","y","renderSignal","notFirstSignal","ret","signal","xmax","lanes","groups","content","waveLanes","waveGroups","glengths","reduce","res","len","i","Math","max","xg","ceil","tgo","module","exports"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/wavedrom/lib/render-signal.js"],"sourcesContent":["'use strict';\n\nconst rec = require('./rec.js');\nconst lane = require('./lane.js');\nconst parseConfig = require('./parse-config.js');\nconst parseWaveLanes = require('./parse-wave-lanes.js');\nconst renderGroups = require('./render-groups.js');\nconst renderLanes = require('./render-lanes.js');\nconst renderWaveLane = require('./render-wave-lane.js');\n\nconst insertSVGTemplate = require('./insert-svg-template.js');\n\nfunction laneParamsFromSkin (index, source, lane, waveSkin) {\n\n    if (index !== 0) {\n        return;\n    }\n\n    const waveSkinNames = Object.keys(waveSkin);\n    if (waveSkinNames.length === 0) {\n        throw new Error('no skins found');\n    }\n\n    let skin = waveSkin.default || waveSkin[waveSkinNames[0]];\n\n    if (source && source.config && source.config.skin && waveSkin[source.config.skin]) {\n        skin = waveSkin[source.config.skin];\n    }\n\n    const socket = skin[3][1][2][1];\n\n    lane.xs     = Number(socket.width);\n    lane.ys     = Number(socket.height);\n    lane.xlabel = Number(socket.x);\n    lane.ym     = Number(socket.y);\n}\n\nfunction renderSignal (index, source, waveSkin, notFirstSignal) {\n\n    laneParamsFromSkin (index, source, lane, waveSkin);\n\n    parseConfig(source, lane);\n    const ret = rec(source.signal, {x: 0, y: 0, xmax: 0, width: [], lanes: [], groups: []});\n    const content = parseWaveLanes(ret.lanes, lane);\n\n    const waveLanes = renderWaveLane(content, index, lane);\n    const waveGroups = renderGroups(ret.groups, index, lane);\n\n    const xmax = waveLanes.glengths.reduce((res, len, i) =>\n        Math.max(res, len + ret.width[i]), 0);\n\n    lane.xg = Math.ceil((xmax - lane.tgo) / lane.xs) * lane.xs;\n\n    return insertSVGTemplate(\n        index, source, lane, waveSkin, content,\n        renderLanes(index, content, waveLanes, ret, source, lane),\n        waveGroups,\n        notFirstSignal\n    );\n\n}\n\nmodule.exports = renderSignal;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,UAAU,CAAC;AAC/B,MAAMC,IAAI,GAAGD,OAAO,CAAC,WAAW,CAAC;AACjC,MAAME,WAAW,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMG,cAAc,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACvD,MAAMI,YAAY,GAAGJ,OAAO,CAAC,oBAAoB,CAAC;AAClD,MAAMK,WAAW,GAAGL,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMM,cAAc,GAAGN,OAAO,CAAC,uBAAuB,CAAC;AAEvD,MAAMO,iBAAiB,GAAGP,OAAO,CAAC,0BAA0B,CAAC;AAE7D,SAASQ,kBAAkBA,CAAEC,KAAK,EAAEC,MAAM,EAAET,IAAI,EAAEU,QAAQ,EAAE;EAExD,IAAIF,KAAK,KAAK,CAAC,EAAE;IACb;EACJ;EAEA,MAAMG,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC;EAC3C,IAAIC,aAAa,CAACG,MAAM,KAAK,CAAC,EAAE;IAC5B,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;EACrC;EAEA,IAAIC,IAAI,GAAGN,QAAQ,CAACO,OAAO,IAAIP,QAAQ,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC;EAEzD,IAAIF,MAAM,IAAIA,MAAM,CAACS,MAAM,IAAIT,MAAM,CAACS,MAAM,CAACF,IAAI,IAAIN,QAAQ,CAACD,MAAM,CAACS,MAAM,CAACF,IAAI,CAAC,EAAE;IAC/EA,IAAI,GAAGN,QAAQ,CAACD,MAAM,CAACS,MAAM,CAACF,IAAI,CAAC;EACvC;EAEA,MAAMG,MAAM,GAAGH,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAE/BhB,IAAI,CAACoB,EAAE,GAAOC,MAAM,CAACF,MAAM,CAACG,KAAK,CAAC;EAClCtB,IAAI,CAACuB,EAAE,GAAOF,MAAM,CAACF,MAAM,CAACK,MAAM,CAAC;EACnCxB,IAAI,CAACyB,MAAM,GAAGJ,MAAM,CAACF,MAAM,CAACO,CAAC,CAAC;EAC9B1B,IAAI,CAAC2B,EAAE,GAAON,MAAM,CAACF,MAAM,CAACS,CAAC,CAAC;AAClC;AAEA,SAASC,YAAYA,CAAErB,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEoB,cAAc,EAAE;EAE5DvB,kBAAkB,CAAEC,KAAK,EAAEC,MAAM,EAAET,IAAI,EAAEU,QAAQ,CAAC;EAElDT,WAAW,CAACQ,MAAM,EAAET,IAAI,CAAC;EACzB,MAAM+B,GAAG,GAAGjC,GAAG,CAACW,MAAM,CAACuB,MAAM,EAAE;IAACN,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE,CAAC;IAAEK,IAAI,EAAE,CAAC;IAAEX,KAAK,EAAE,EAAE;IAAEY,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAE,CAAC,CAAC;EACvF,MAAMC,OAAO,GAAGlC,cAAc,CAAC6B,GAAG,CAACG,KAAK,EAAElC,IAAI,CAAC;EAE/C,MAAMqC,SAAS,GAAGhC,cAAc,CAAC+B,OAAO,EAAE5B,KAAK,EAAER,IAAI,CAAC;EACtD,MAAMsC,UAAU,GAAGnC,YAAY,CAAC4B,GAAG,CAACI,MAAM,EAAE3B,KAAK,EAAER,IAAI,CAAC;EAExD,MAAMiC,IAAI,GAAGI,SAAS,CAACE,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,EAAEC,CAAC,KAC/CC,IAAI,CAACC,GAAG,CAACJ,GAAG,EAAEC,GAAG,GAAGX,GAAG,CAACT,KAAK,CAACqB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAEzC3C,IAAI,CAAC8C,EAAE,GAAGF,IAAI,CAACG,IAAI,CAAC,CAACd,IAAI,GAAGjC,IAAI,CAACgD,GAAG,IAAIhD,IAAI,CAACoB,EAAE,CAAC,GAAGpB,IAAI,CAACoB,EAAE;EAE1D,OAAOd,iBAAiB,CACpBE,KAAK,EAAEC,MAAM,EAAET,IAAI,EAAEU,QAAQ,EAAE0B,OAAO,EACtChC,WAAW,CAACI,KAAK,EAAE4B,OAAO,EAAEC,SAAS,EAAEN,GAAG,EAAEtB,MAAM,EAAET,IAAI,CAAC,EACzDsC,UAAU,EACVR,cACJ,CAAC;AAEL;AAEAmB,MAAM,CAACC,OAAO,GAAGrB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}
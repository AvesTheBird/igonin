{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectIdentity from './ObjectIdentity';\n/**\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses {@link ObjectIdentitiy} to turn object keys into strings.\n *\n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nclass Dictionary {\n  constructor() {\n    /**\n     * Stores the (key, value) pairs in this dictionary.\n     */\n    this.map = {};\n    this.clear();\n  }\n  /**\n   * Clears the dictionary.\n   */\n  clear() {\n    this.map = {};\n  }\n  /**\n   * Returns the value for the given key.\n   */\n  get(key) {\n    var _this$map$id;\n    const id = ObjectIdentity.get(key);\n    return (_this$map$id = this.map[id]) !== null && _this$map$id !== void 0 ? _this$map$id : null;\n  }\n  /**\n   * Stores the value under the given key and returns the previous\n   * value for that key.\n   */\n  put(key, value) {\n    const id = ObjectIdentity.get(key);\n    const previous = this.map[id];\n    this.map[id] = value;\n    return previous !== null && previous !== void 0 ? previous : null;\n  }\n  /**\n   * Removes the value for the given key and returns the value that\n   * has been removed.\n   */\n  remove(key) {\n    const id = ObjectIdentity.get(key);\n    const previous = this.map[id];\n    delete this.map[id];\n    return previous !== null && previous !== void 0 ? previous : null;\n  }\n  /**\n   * Returns all keys as an array.\n   */\n  getKeys() {\n    const result = [];\n    for (const key in this.map) {\n      result.push(key);\n    }\n    return result;\n  }\n  /**\n   * Returns all values as an array.\n   */\n  getValues() {\n    const result = [];\n    for (const key in this.map) {\n      result.push(this.map[key]);\n    }\n    return result;\n  }\n  /**\n   * Visits all entries in the dictionary using the given function with the\n   * following signature: (key, value)=> where key is a string and\n   * value is an object.\n   *\n   * @param visitor A function that takes the key and value as arguments.\n   */\n  visit(visitor) {\n    for (const key in this.map) {\n      visitor(key, this.map[key]);\n    }\n  }\n}\nexport default Dictionary;","map":{"version":3,"names":["ObjectIdentity","Dictionary","constructor","map","clear","get","key","_this$map$id","id","put","value","previous","remove","getKeys","result","push","getValues","visit","visitor"],"sources":["D:/ospanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/util/Dictionary.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectIdentity from './ObjectIdentity';\n/**\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses {@link ObjectIdentitiy} to turn object keys into strings.\n *\n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nclass Dictionary {\n    constructor() {\n        /**\n         * Stores the (key, value) pairs in this dictionary.\n         */\n        this.map = {};\n        this.clear();\n    }\n    /**\n     * Clears the dictionary.\n     */\n    clear() {\n        this.map = {};\n    }\n    /**\n     * Returns the value for the given key.\n     */\n    get(key) {\n        const id = ObjectIdentity.get(key);\n        return this.map[id] ?? null;\n    }\n    /**\n     * Stores the value under the given key and returns the previous\n     * value for that key.\n     */\n    put(key, value) {\n        const id = ObjectIdentity.get(key);\n        const previous = this.map[id];\n        this.map[id] = value;\n        return previous ?? null;\n    }\n    /**\n     * Removes the value for the given key and returns the value that\n     * has been removed.\n     */\n    remove(key) {\n        const id = ObjectIdentity.get(key);\n        const previous = this.map[id];\n        delete this.map[id];\n        return previous ?? null;\n    }\n    /**\n     * Returns all keys as an array.\n     */\n    getKeys() {\n        const result = [];\n        for (const key in this.map) {\n            result.push(key);\n        }\n        return result;\n    }\n    /**\n     * Returns all values as an array.\n     */\n    getValues() {\n        const result = [];\n        for (const key in this.map) {\n            result.push(this.map[key]);\n        }\n        return result;\n    }\n    /**\n     * Visits all entries in the dictionary using the given function with the\n     * following signature: (key, value)=> where key is a string and\n     * value is an object.\n     *\n     * @param visitor A function that takes the key and value as arguments.\n     */\n    visit(visitor) {\n        for (const key in this.map) {\n            visitor(key, this.map[key]);\n        }\n    }\n}\nexport default Dictionary;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,cAAc,MAAM,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACbC,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,IAAI,CAACC,GAAG,GAAG,CAAC,CAAC;IACb,IAAI,CAACC,KAAK,CAAC,CAAC;EAChB;EACA;AACJ;AACA;EACIA,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACD,GAAG,GAAG,CAAC,CAAC;EACjB;EACA;AACJ;AACA;EACIE,GAAGA,CAACC,GAAG,EAAE;IAAA,IAAAC,YAAA;IACL,MAAMC,EAAE,GAAGR,cAAc,CAACK,GAAG,CAACC,GAAG,CAAC;IAClC,QAAAC,YAAA,GAAO,IAAI,CAACJ,GAAG,CAACK,EAAE,CAAC,cAAAD,YAAA,cAAAA,YAAA,GAAI,IAAI;EAC/B;EACA;AACJ;AACA;AACA;EACIE,GAAGA,CAACH,GAAG,EAAEI,KAAK,EAAE;IACZ,MAAMF,EAAE,GAAGR,cAAc,CAACK,GAAG,CAACC,GAAG,CAAC;IAClC,MAAMK,QAAQ,GAAG,IAAI,CAACR,GAAG,CAACK,EAAE,CAAC;IAC7B,IAAI,CAACL,GAAG,CAACK,EAAE,CAAC,GAAGE,KAAK;IACpB,OAAOC,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,IAAI;EAC3B;EACA;AACJ;AACA;AACA;EACIC,MAAMA,CAACN,GAAG,EAAE;IACR,MAAME,EAAE,GAAGR,cAAc,CAACK,GAAG,CAACC,GAAG,CAAC;IAClC,MAAMK,QAAQ,GAAG,IAAI,CAACR,GAAG,CAACK,EAAE,CAAC;IAC7B,OAAO,IAAI,CAACL,GAAG,CAACK,EAAE,CAAC;IACnB,OAAOG,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,IAAI;EAC3B;EACA;AACJ;AACA;EACIE,OAAOA,CAAA,EAAG;IACN,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,MAAMR,GAAG,IAAI,IAAI,CAACH,GAAG,EAAE;MACxBW,MAAM,CAACC,IAAI,CAACT,GAAG,CAAC;IACpB;IACA,OAAOQ,MAAM;EACjB;EACA;AACJ;AACA;EACIE,SAASA,CAAA,EAAG;IACR,MAAMF,MAAM,GAAG,EAAE;IACjB,KAAK,MAAMR,GAAG,IAAI,IAAI,CAACH,GAAG,EAAE;MACxBW,MAAM,CAACC,IAAI,CAAC,IAAI,CAACZ,GAAG,CAACG,GAAG,CAAC,CAAC;IAC9B;IACA,OAAOQ,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,KAAKA,CAACC,OAAO,EAAE;IACX,KAAK,MAAMZ,GAAG,IAAI,IAAI,CAACH,GAAG,EAAE;MACxBe,OAAO,CAACZ,GAAG,EAAE,IAAI,CAACH,GAAG,CAACG,GAAG,CAAC,CAAC;IAC/B;EACJ;AACJ;AACA,eAAeL,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
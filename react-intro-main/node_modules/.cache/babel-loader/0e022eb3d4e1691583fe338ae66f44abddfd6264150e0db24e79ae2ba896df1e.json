{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro\\\\src\\\\components\\\\GraphComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { configureImagesBasePath, createGraphContainer, Graph, EdgeStyle, RubberBandHandler, DomHelpers, ModelXmlSerializer } from '@maxgraph/core'; // Замените 'your-graph-library' на вашу библиотеку графов\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphComponent = ({\n  label,\n  ...args\n}) => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    if (graphRef.current) {\n      configureImagesBasePath();\n      const container = createGraphContainer(args);\n      graphRef.current.appendChild(container);\n      const graph = new Graph(container);\n      graph.setConnectable(true);\n      graph.setTooltips(true);\n      const style = graph.getStylesheet().getDefaultEdgeStyle();\n      style.edgeStyle = EdgeStyle.ElbowConnector;\n      graph.isPort = function (cell) {\n        var _geo$relative;\n        const geo = cell === null || cell === void 0 ? void 0 : cell.getGeometry();\n        return (_geo$relative = geo === null || geo === void 0 ? void 0 : geo.relative) !== null && _geo$relative !== void 0 ? _geo$relative : false;\n      };\n      graph.getTooltipForCell = function (cell) {\n        if (cell && cell.isEdge()) {\n          const source = cell.getTerminal(true);\n          const target = cell.getTerminal(false);\n          if (source && target) {\n            return `${this.convertValueToString(source)} => ${this.convertValueToString(target)}`;\n          }\n        }\n        return Graph.prototype.getTooltipForCell.apply(this, [cell]);\n      };\n      graph.isCellFoldable = _cell => false;\n      if (args.rubberBand) new RubberBandHandler(graph);\n      const parent = graph.getDefaultParent();\n      graph.batchUpdate(() => {\n        const v1 = graph.insertVertex(parent, null, 'Hello', 20, 80, 80, 30);\n        v1.setConnectable(false);\n        const v11 = graph.insertVertex(v1, null, '', 1, 1, 10, 10);\n        if (v11.geometry) {\n          v11.geometry.offset = new Point(-5, -5);\n          v11.geometry.relative = true;\n        }\n        const v12 = graph.insertVertex(v1, null, '', 1, 0, 10, 10);\n        if (v12.geometry) {\n          v12.geometry.offset = new Point(-5, -5);\n          v12.geometry.relative = true;\n        }\n        const v2 = graph.insertVertex(parent, null, 'World!', 200, 150, 80, 30);\n        const v3 = graph.insertVertex(parent, null, 'World2', 200, 20, 80, 30);\n        graph.insertEdge(parent, null, '', v11, v2);\n        graph.insertEdge(parent, null, '', v12, v3);\n      });\n      const controller = document.createElementNS('div');\n      graphRef.current.appendChild(controller);\n      const button = DomHelpers.button('View XML', function () {\n        const xml = new ModelXmlSerializer(graph.getDataModel()).export();\n        popup(xml, true); // Обратите внимание, что popup не определён в данном контексте. Вам нужно обеспечить его реализацию.\n      });\n      controller.appendChild(button);\n    }\n  }, [args]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: graphRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 10\n  }, this);\n};\n_s(GraphComponent, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = GraphComponent;\nexport default GraphComponent;\nvar _c;\n$RefreshReg$(_c, \"GraphComponent\");","map":{"version":3,"names":["React","useEffect","useRef","configureImagesBasePath","createGraphContainer","Graph","EdgeStyle","RubberBandHandler","DomHelpers","ModelXmlSerializer","jsxDEV","_jsxDEV","GraphComponent","label","args","_s","graphRef","current","container","appendChild","graph","setConnectable","setTooltips","style","getStylesheet","getDefaultEdgeStyle","edgeStyle","ElbowConnector","isPort","cell","_geo$relative","geo","getGeometry","relative","getTooltipForCell","isEdge","source","getTerminal","target","convertValueToString","prototype","apply","isCellFoldable","_cell","rubberBand","parent","getDefaultParent","batchUpdate","v1","insertVertex","v11","geometry","offset","Point","v12","v2","v3","insertEdge","controller","document","createElementNS","button","xml","getDataModel","export","popup","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro/src/components/GraphComponent.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { configureImagesBasePath, createGraphContainer, Graph, EdgeStyle, RubberBandHandler, DomHelpers, ModelXmlSerializer } from '@maxgraph/core'; // Замените 'your-graph-library' на вашу библиотеку графов\r\n\r\nconst GraphComponent = ({ label, ...args }) => {\r\n  const graphRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (graphRef.current) {\r\n      configureImagesBasePath();\r\n\r\n      const container = createGraphContainer(args);\r\n      graphRef.current.appendChild(container);\r\n\r\n      const graph = new Graph(container);\r\n      graph.setConnectable(true);\r\n      graph.setTooltips(true);\r\n\r\n      const style = graph.getStylesheet().getDefaultEdgeStyle();\r\n      style.edgeStyle = EdgeStyle.ElbowConnector;\r\n\r\n      graph.isPort = function (cell) {\r\n        const geo = cell?.getGeometry();\r\n        return geo?.relative ?? false;\r\n      };\r\n\r\n      graph.getTooltipForCell = function (cell) {\r\n        if (cell && cell.isEdge()) {\r\n          const source = cell.getTerminal(true);\r\n          const target = cell.getTerminal(false);\r\n          if (source && target) {\r\n            return `${this.convertValueToString(source)} => ${this.convertValueToString(\r\n              target\r\n            )}`;\r\n          }\r\n        }\r\n\r\n        return Graph.prototype.getTooltipForCell.apply(this, [cell]);\r\n      };\r\n\r\n      graph.isCellFoldable = (_cell) => false;\r\n\r\n      if (args.rubberBand) new RubberBandHandler(graph);\r\n\r\n      const parent = graph.getDefaultParent();\r\n\r\n      graph.batchUpdate(() => {\r\n        const v1 = graph.insertVertex(parent, null, 'Hello', 20, 80, 80, 30);\r\n        v1.setConnectable(false);\r\n        const v11 = graph.insertVertex(v1, null, '', 1, 1, 10, 10);\r\n        if (v11.geometry) {\r\n          v11.geometry.offset = new Point(-5, -5);\r\n          v11.geometry.relative = true;\r\n        }\r\n        const v12 = graph.insertVertex(v1, null, '', 1, 0, 10, 10);\r\n        if (v12.geometry) {\r\n          v12.geometry.offset = new Point(-5, -5);\r\n          v12.geometry.relative = true;\r\n        }\r\n        const v2 = graph.insertVertex(parent, null, 'World!', 200, 150, 80, 30);\r\n        const v3 = graph.insertVertex(parent, null, 'World2', 200, 20, 80, 30);\r\n        graph.insertEdge(parent, null, '', v11, v2);\r\n        graph.insertEdge(parent, null, '', v12, v3);\r\n      });\r\n\r\n      const controller = document.createElementNS('div');\r\n      graphRef.current.appendChild(controller);\r\n\r\n      const button = DomHelpers.button('View XML', function () {\r\n        const xml = new ModelXmlSerializer(graph.getDataModel()).export();\r\n        popup(xml, true); // Обратите внимание, что popup не определён в данном контексте. Вам нужно обеспечить его реализацию.\r\n      });\r\n\r\n      controller.appendChild(button);\r\n    }\r\n  }, [args]);\r\n\r\n  return <div ref={graphRef} />;\r\n};\r\n\r\nexport default GraphComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import GraphLayout from './GraphLayout';\n/**\n * Allows to compose multiple layouts into a single layout.\n *\n * The {@link master} layout is the layout that handles move operations if another layout than the first\n * element in {@link GraphLayout}s should be used. The {@link master} layout is not executed as\n * the code assumes that it is part of {@link layouts}.\n *\n * Example:\n * ```javascript\n * const first = new FastOrganicLayout(graph);\n * const second = new ParallelEdgeLayout(graph);\n * const layout = new CompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing {@link Graph}.\n * layouts - Array of {@link GraphLayout}s.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nclass CompositeLayout extends GraphLayout {\n  /**\n   * Constructs a new layout using the given layouts. The graph instance is\n   * required for creating the transaction that contains all layouts.\n   *\n   * @param graph Reference to the enclosing {@link Graph}.\n   * @param layouts Array of {@link GraphLayout}s.\n   * @param master Optional layout that handles moves. If no layout is given, then the first layout of the above array is used to handle moves.\n   */\n  constructor(graph, layouts, master) {\n    super(graph);\n    this.layouts = layouts;\n    this.master = master;\n  }\n  /**\n   * Calls `move` on {@link master} or the first layout in {@link layouts}.\n   */\n  moveCell(cell, x, y) {\n    if (this.master != null) {\n      this.master.moveCell.apply(this.master, [cell, x, y]);\n    } else {\n      this.layouts[0].moveCell.apply(this.layouts[0], [cell, x, y]);\n    }\n  }\n  /**\n   * Implements {@link GraphLayout#execute} by executing all {@link layouts} in a single transaction.\n   */\n  execute(parent) {\n    this.graph.batchUpdate(() => {\n      for (let i = 0; i < this.layouts.length; i += 1) {\n        this.layouts[i].execute.apply(this.layouts[i], [parent]);\n      }\n    });\n  }\n}\nexport default CompositeLayout;","map":{"version":3,"names":["GraphLayout","CompositeLayout","constructor","graph","layouts","master","moveCell","cell","x","y","apply","execute","parent","batchUpdate","i","length"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/layout/CompositeLayout.js"],"sourcesContent":["import GraphLayout from './GraphLayout';\n/**\n * Allows to compose multiple layouts into a single layout.\n *\n * The {@link master} layout is the layout that handles move operations if another layout than the first\n * element in {@link GraphLayout}s should be used. The {@link master} layout is not executed as\n * the code assumes that it is part of {@link layouts}.\n *\n * Example:\n * ```javascript\n * const first = new FastOrganicLayout(graph);\n * const second = new ParallelEdgeLayout(graph);\n * const layout = new CompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n *\n * graph - Reference to the enclosing {@link Graph}.\n * layouts - Array of {@link GraphLayout}s.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nclass CompositeLayout extends GraphLayout {\n    /**\n     * Constructs a new layout using the given layouts. The graph instance is\n     * required for creating the transaction that contains all layouts.\n     *\n     * @param graph Reference to the enclosing {@link Graph}.\n     * @param layouts Array of {@link GraphLayout}s.\n     * @param master Optional layout that handles moves. If no layout is given, then the first layout of the above array is used to handle moves.\n     */\n    constructor(graph, layouts, master) {\n        super(graph);\n        this.layouts = layouts;\n        this.master = master;\n    }\n    /**\n     * Calls `move` on {@link master} or the first layout in {@link layouts}.\n     */\n    moveCell(cell, x, y) {\n        if (this.master != null) {\n            this.master.moveCell.apply(this.master, [cell, x, y]);\n        }\n        else {\n            this.layouts[0].moveCell.apply(this.layouts[0], [cell, x, y]);\n        }\n    }\n    /**\n     * Implements {@link GraphLayout#execute} by executing all {@link layouts} in a single transaction.\n     */\n    execute(parent) {\n        this.graph.batchUpdate(() => {\n            for (let i = 0; i < this.layouts.length; i += 1) {\n                this.layouts[i].execute.apply(this.layouts[i], [parent]);\n            }\n        });\n    }\n}\nexport default CompositeLayout;\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASD,WAAW,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,WAAWA,CAACC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAChC,KAAK,CAACF,KAAK,CAAC;IACZ,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACA;AACJ;AACA;EACIC,QAAQA,CAACC,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACjB,IAAI,IAAI,CAACJ,MAAM,IAAI,IAAI,EAAE;MACrB,IAAI,CAACA,MAAM,CAACC,QAAQ,CAACI,KAAK,CAAC,IAAI,CAACL,MAAM,EAAE,CAACE,IAAI,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;IACzD,CAAC,MACI;MACD,IAAI,CAACL,OAAO,CAAC,CAAC,CAAC,CAACE,QAAQ,CAACI,KAAK,CAAC,IAAI,CAACN,OAAO,CAAC,CAAC,CAAC,EAAE,CAACG,IAAI,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC;IACjE;EACJ;EACA;AACJ;AACA;EACIE,OAAOA,CAACC,MAAM,EAAE;IACZ,IAAI,CAACT,KAAK,CAACU,WAAW,CAAC,MAAM;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,OAAO,CAACW,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;QAC7C,IAAI,CAACV,OAAO,CAACU,CAAC,CAAC,CAACH,OAAO,CAACD,KAAK,CAAC,IAAI,CAACN,OAAO,CAACU,CAAC,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC;MAC5D;IACJ,CAAC,CAAC;EACN;AACJ;AACA,eAAeX,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
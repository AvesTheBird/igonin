{"ast":null,"code":"/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { registerCoreCodecs } from './register';\nimport { getPrettyXml, parseXml } from '../util/xmlUtils';\nimport { Codec } from '../index';\n/**\n * Convenient utility class using {@link Codec} to manage maxGraph model import and export.\n *\n * **WARN**: this is an experimental feature that is subject to change (class and method names).\n *\n * @alpha\n * @experimental\n * @since 0.6.0\n */\n// Include 'XML' in the class name as there were past discussions about supporting other format like JSON for example\n// See https://github.com/maxGraph/maxGraph/discussions/60 for more details.\nexport class ModelXmlSerializer {\n  constructor(dataModel) {\n    this.dataModel = dataModel;\n    this.registerCodecs();\n  }\n  import(xml) {\n    const doc = parseXml(xml);\n    new Codec(doc).decode(doc.documentElement, this.dataModel);\n  }\n  export(options) {\n    var _options$pretty;\n    const encodedNode = new Codec().encode(this.dataModel);\n    return ((_options$pretty = options === null || options === void 0 ? void 0 : options.pretty) !== null && _options$pretty !== void 0 ? _options$pretty : true) ? getPrettyXml(encodedNode) : getPrettyXml(encodedNode, '', '', '');\n  }\n  /**\n   * Hook for replacing codecs registered by default (core codecs).\n   */\n  registerCodecs() {\n    registerCoreCodecs();\n  }\n}","map":{"version":3,"names":["registerCoreCodecs","getPrettyXml","parseXml","Codec","ModelXmlSerializer","constructor","dataModel","registerCodecs","import","xml","doc","decode","documentElement","export","options","_options$pretty","encodedNode","encode","pretty"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/serialization/ModelXmlSerializer.js"],"sourcesContent":["/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { registerCoreCodecs } from './register';\nimport { getPrettyXml, parseXml } from '../util/xmlUtils';\nimport { Codec } from '../index';\n/**\n * Convenient utility class using {@link Codec} to manage maxGraph model import and export.\n *\n * **WARN**: this is an experimental feature that is subject to change (class and method names).\n *\n * @alpha\n * @experimental\n * @since 0.6.0\n */\n// Include 'XML' in the class name as there were past discussions about supporting other format like JSON for example\n// See https://github.com/maxGraph/maxGraph/discussions/60 for more details.\nexport class ModelXmlSerializer {\n    constructor(dataModel) {\n        this.dataModel = dataModel;\n        this.registerCodecs();\n    }\n    import(xml) {\n        const doc = parseXml(xml);\n        new Codec(doc).decode(doc.documentElement, this.dataModel);\n    }\n    export(options) {\n        const encodedNode = new Codec().encode(this.dataModel);\n        return options?.pretty ?? true\n            ? getPrettyXml(encodedNode)\n            : getPrettyXml(encodedNode, '', '', '');\n    }\n    /**\n     * Hook for replacing codecs registered by default (core codecs).\n     */\n    registerCodecs() {\n        registerCoreCodecs();\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAkB,QAAQ,YAAY;AAC/C,SAASC,YAAY,EAAEC,QAAQ,QAAQ,kBAAkB;AACzD,SAASC,KAAK,QAAQ,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,CAAC;EAC5BC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,cAAc,CAAC,CAAC;EACzB;EACAC,MAAMA,CAACC,GAAG,EAAE;IACR,MAAMC,GAAG,GAAGR,QAAQ,CAACO,GAAG,CAAC;IACzB,IAAIN,KAAK,CAACO,GAAG,CAAC,CAACC,MAAM,CAACD,GAAG,CAACE,eAAe,EAAE,IAAI,CAACN,SAAS,CAAC;EAC9D;EACAO,MAAMA,CAACC,OAAO,EAAE;IAAA,IAAAC,eAAA;IACZ,MAAMC,WAAW,GAAG,IAAIb,KAAK,CAAC,CAAC,CAACc,MAAM,CAAC,IAAI,CAACX,SAAS,CAAC;IACtD,OAAO,EAAAS,eAAA,GAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,MAAM,cAAAH,eAAA,cAAAA,eAAA,GAAI,IAAI,IACxBd,YAAY,CAACe,WAAW,CAAC,GACzBf,YAAY,CAACe,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAC/C;EACA;AACJ;AACA;EACIT,cAAcA,CAAA,EAAG;IACbP,kBAAkB,CAAC,CAAC;EACxB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
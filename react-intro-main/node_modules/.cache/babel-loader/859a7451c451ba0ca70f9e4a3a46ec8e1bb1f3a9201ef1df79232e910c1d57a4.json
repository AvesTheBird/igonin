{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\n/**\n * Returns the touch or mouse event that contains the mouse coordinates.\n */\nexport const getMainEvent = evt => {\n  let t = evt;\n  if ((t.type === 'touchstart' || t.type === 'touchmove') && t.touches && t.touches[0]) {\n    t = t.touches[0];\n  } else if (t.type === 'touchend' && t.changedTouches && t.changedTouches[0]) {\n    t = t.changedTouches[0];\n  }\n  return t;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\nexport const getClientX = evt => {\n  return getMainEvent(evt).clientX;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\n// static getClientY(e: TouchEvent | MouseEvent): number;\nexport const getClientY = evt => {\n  return getMainEvent(evt).clientY;\n};\n/**\n * Returns the event's target or srcElement depending on the browser.\n */\nexport const getSource = evt => {\n  return evt.target;\n};\n/**\n * Returns true if the event has been consumed using {@link consume}.\n */\nexport const isConsumed = evt => {\n  const t = evt;\n  return t.isConsumed !== undefined && t.isConsumed;\n};\n/**\n * Returns true if the event was generated using a touch device (not a pen or mouse).\n */\nexport const isTouchEvent = evt => {\n  const t = evt;\n  return t.pointerType ? t.pointerType === 'touch' || t.pointerType === t.MSPOINTER_TYPE_TOUCH : t.mozInputSource !== undefined ? t.mozInputSource === 5 : t.type.indexOf('touch') === 0;\n};\n/**\n * Returns true if the event was generated using a pen (not a touch device or mouse).\n */\nexport const isPenEvent = evt => {\n  const t = evt;\n  return t.pointerType ? t.pointerType == 'pen' || t.pointerType === t.MSPOINTER_TYPE_PEN : t.mozInputSource !== undefined ? t.mozInputSource === 2 : t.type.indexOf('pen') === 0;\n};\n/**\n * Returns true if the event was generated using a touch device (not a pen or mouse).\n */\nexport const isMultiTouchEvent = evt => {\n  const t = evt;\n  return t.type && t.type.indexOf('touch') == 0 && t.touches !== undefined && t.touches.length > 1;\n};\n/**\n * Returns true if the event was generated using a mouse (not a pen or touch device).\n */\nexport const isMouseEvent = evt => {\n  const t = evt;\n  return t.pointerType ? t.pointerType == 'mouse' || t.pointerType === t.MSPOINTER_TYPE_MOUSE : t.mozInputSource !== undefined ? t.mozInputSource === 1 : t.type.indexOf('mouse') === 0;\n};\n/**\n * Returns true if the left mouse button is pressed for the given event.\n * To check if a button is pressed during a mouseMove you should use the\n * {@link mxGraph.isMouseDown} property. Note that this returns true in Firefox\n * for control+left-click on the Mac.\n */\n// static isLeftMouseButton(evt: MouseEvent): boolean;\nexport const isLeftMouseButton = evt => {\n  // Special case for mousemove and mousedown we check the buttons\n  // if it exists because which is 0 even if no button is pressed\n  if ('buttons' in evt && (evt.type === 'mousedown' || evt.type === 'mousemove')) {\n    return evt.buttons === 1;\n  }\n  if (evt.which !== undefined) {\n    return evt.which === 1;\n  }\n  return evt.button === 1;\n};\n/**\n * Returns true if the middle mouse button is pressed for the given event.\n * To check if a button is pressed during a mouseMove you should use the\n * {@link mxGraph.isMouseDown} property.\n */\nexport const isMiddleMouseButton = evt => {\n  return evt.button === 4;\n};\n/**\n * Returns true if the right mouse button was pressed. Note that this\n * button might not be available on some systems. For handling a popup\n * trigger {@link isPopupTrigger} should be used.\n */\nexport const isRightMouseButton = evt => {\n  return evt.button === 2;\n};\n/**\n * Returns true if the event is a popup trigger. This implementation\n * returns true if the right button or the left button and control was\n * pressed on a Mac.\n */\nexport const isPopupTrigger = evt => {\n  return isRightMouseButton(evt) || Client.IS_MAC && isControlDown(evt) && !isShiftDown(evt) && !isMetaDown(evt) && !isAltDown(evt);\n};\n/**\n * Returns true if the shift key is pressed for the given event.\n */\nexport const isShiftDown = evt => {\n  return evt.shiftKey;\n};\n/**\n * Returns true if the alt key is pressed for the given event.\n */\nexport const isAltDown = evt => {\n  return evt.altKey;\n};\n/**\n * Returns true if the control key is pressed for the given event.\n */\nexport const isControlDown = evt => {\n  return evt.ctrlKey;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\nexport const isMetaDown = evt => {\n  return evt.metaKey;\n};","map":{"version":3,"names":["Client","getMainEvent","evt","t","type","touches","changedTouches","getClientX","clientX","getClientY","clientY","getSource","target","isConsumed","undefined","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","indexOf","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","length","isMouseEvent","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","buttons","which","button","isMiddleMouseButton","isRightMouseButton","isPopupTrigger","IS_MAC","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","ctrlKey","metaKey"],"sources":["D:/ospanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/util/EventUtils.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Client from '../Client';\n/**\n * Returns the touch or mouse event that contains the mouse coordinates.\n */\nexport const getMainEvent = (evt) => {\n    let t = evt;\n    if ((t.type === 'touchstart' || t.type === 'touchmove') && t.touches && t.touches[0]) {\n        t = t.touches[0];\n    }\n    else if (t.type === 'touchend' && t.changedTouches && t.changedTouches[0]) {\n        t = t.changedTouches[0];\n    }\n    return t;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\nexport const getClientX = (evt) => {\n    return getMainEvent(evt).clientX;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\n// static getClientY(e: TouchEvent | MouseEvent): number;\nexport const getClientY = (evt) => {\n    return getMainEvent(evt).clientY;\n};\n/**\n * Returns the event's target or srcElement depending on the browser.\n */\nexport const getSource = (evt) => {\n    return evt.target;\n};\n/**\n * Returns true if the event has been consumed using {@link consume}.\n */\nexport const isConsumed = (evt) => {\n    const t = evt;\n    return t.isConsumed !== undefined && t.isConsumed;\n};\n/**\n * Returns true if the event was generated using a touch device (not a pen or mouse).\n */\nexport const isTouchEvent = (evt) => {\n    const t = evt;\n    return t.pointerType\n        ? t.pointerType === 'touch' || t.pointerType === t.MSPOINTER_TYPE_TOUCH\n        : t.mozInputSource !== undefined\n            ? t.mozInputSource === 5\n            : t.type.indexOf('touch') === 0;\n};\n/**\n * Returns true if the event was generated using a pen (not a touch device or mouse).\n */\nexport const isPenEvent = (evt) => {\n    const t = evt;\n    return t.pointerType\n        ? t.pointerType == 'pen' || t.pointerType === t.MSPOINTER_TYPE_PEN\n        : t.mozInputSource !== undefined\n            ? t.mozInputSource === 2\n            : t.type.indexOf('pen') === 0;\n};\n/**\n * Returns true if the event was generated using a touch device (not a pen or mouse).\n */\nexport const isMultiTouchEvent = (evt) => {\n    const t = evt;\n    return (t.type &&\n        t.type.indexOf('touch') == 0 &&\n        t.touches !== undefined &&\n        t.touches.length > 1);\n};\n/**\n * Returns true if the event was generated using a mouse (not a pen or touch device).\n */\nexport const isMouseEvent = (evt) => {\n    const t = evt;\n    return t.pointerType\n        ? t.pointerType == 'mouse' || t.pointerType === t.MSPOINTER_TYPE_MOUSE\n        : t.mozInputSource !== undefined\n            ? t.mozInputSource === 1\n            : t.type.indexOf('mouse') === 0;\n};\n/**\n * Returns true if the left mouse button is pressed for the given event.\n * To check if a button is pressed during a mouseMove you should use the\n * {@link mxGraph.isMouseDown} property. Note that this returns true in Firefox\n * for control+left-click on the Mac.\n */\n// static isLeftMouseButton(evt: MouseEvent): boolean;\nexport const isLeftMouseButton = (evt) => {\n    // Special case for mousemove and mousedown we check the buttons\n    // if it exists because which is 0 even if no button is pressed\n    if ('buttons' in evt && (evt.type === 'mousedown' || evt.type === 'mousemove')) {\n        return evt.buttons === 1;\n    }\n    if (evt.which !== undefined) {\n        return evt.which === 1;\n    }\n    return evt.button === 1;\n};\n/**\n * Returns true if the middle mouse button is pressed for the given event.\n * To check if a button is pressed during a mouseMove you should use the\n * {@link mxGraph.isMouseDown} property.\n */\nexport const isMiddleMouseButton = (evt) => {\n    return evt.button === 4;\n};\n/**\n * Returns true if the right mouse button was pressed. Note that this\n * button might not be available on some systems. For handling a popup\n * trigger {@link isPopupTrigger} should be used.\n */\nexport const isRightMouseButton = (evt) => {\n    return evt.button === 2;\n};\n/**\n * Returns true if the event is a popup trigger. This implementation\n * returns true if the right button or the left button and control was\n * pressed on a Mac.\n */\nexport const isPopupTrigger = (evt) => {\n    return (isRightMouseButton(evt) ||\n        (Client.IS_MAC &&\n            isControlDown(evt) &&\n            !isShiftDown(evt) &&\n            !isMetaDown(evt) &&\n            !isAltDown(evt)));\n};\n/**\n * Returns true if the shift key is pressed for the given event.\n */\nexport const isShiftDown = (evt) => {\n    return evt.shiftKey;\n};\n/**\n * Returns true if the alt key is pressed for the given event.\n */\nexport const isAltDown = (evt) => {\n    return evt.altKey;\n};\n/**\n * Returns true if the control key is pressed for the given event.\n */\nexport const isControlDown = (evt) => {\n    return evt.ctrlKey;\n};\n/**\n * Returns true if the meta key is pressed for the given event.\n */\nexport const isMetaDown = (evt) => {\n    return evt.metaKey;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
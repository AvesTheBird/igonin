{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association) {\n  let warnOnOverwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n  // Register\n  const associationItem = toLanguageAssociationItem(association, userConfigured);\n  registeredAssociations.push(associationItem);\n  if (!associationItem.userConfigured) {\n    nonUserRegisteredAssociations.push(associationItem);\n  } else {\n    userRegisteredAssociations.push(associationItem);\n  }\n  // Check for conflicts unless this is a user configured association\n  if (warnOnOverwrite && !associationItem.userConfigured) {\n    registeredAssociations.forEach(a => {\n      if (a.mime === associationItem.mime || a.userConfigured) {\n        return; // same mime or userConfigured is ok\n      }\n      if (associationItem.extension && a.extension === associationItem.extension) {\n        console.warn(\"Overwriting extension <<\".concat(associationItem.extension, \">> to now point to mime <<\").concat(associationItem.mime, \">>\"));\n      }\n      if (associationItem.filename && a.filename === associationItem.filename) {\n        console.warn(\"Overwriting filename <<\".concat(associationItem.filename, \">> to now point to mime <<\").concat(associationItem.mime, \">>\"));\n      }\n      if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n        console.warn(\"Overwriting filepattern <<\".concat(associationItem.filepattern, \">> to now point to mime <<\").concat(associationItem.mime, \">>\"));\n      }\n      if (associationItem.firstline && a.firstline === associationItem.firstline) {\n        console.warn(\"Overwriting firstline <<\".concat(associationItem.firstline, \">> to now point to mime <<\").concat(associationItem.mime, \">>\"));\n      }\n    });\n  }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n  return {\n    id: association.id,\n    mime: association.mime,\n    filename: association.filename,\n    extension: association.extension,\n    filepattern: association.filepattern,\n    firstline: association.firstline,\n    userConfigured: userConfigured,\n    filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n    extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n    filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n    filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n  };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n  registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n  nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n  return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n  let path;\n  if (resource) {\n    switch (resource.scheme) {\n      case Schemas.file:\n        path = resource.fsPath;\n        break;\n      case Schemas.data:\n        {\n          const metadata = DataUri.parseMetaData(resource);\n          path = metadata.get(DataUri.META_DATA_LABEL);\n          break;\n        }\n      case Schemas.vscodeNotebookCell:\n        // File path not relevant for language detection of cell\n        path = undefined;\n        break;\n      default:\n        path = resource.path;\n    }\n  }\n  if (!path) {\n    return [{\n      id: 'unknown',\n      mime: Mimes.unknown\n    }];\n  }\n  path = path.toLowerCase();\n  const filename = basename(path);\n  // 1.) User configured mappings have highest priority\n  const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n  if (configuredLanguage) {\n    return [configuredLanguage, {\n      id: PLAINTEXT_LANGUAGE_ID,\n      mime: Mimes.text\n    }];\n  }\n  // 2.) Registered mappings have middle priority\n  const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n  if (registeredLanguage) {\n    return [registeredLanguage, {\n      id: PLAINTEXT_LANGUAGE_ID,\n      mime: Mimes.text\n    }];\n  }\n  // 3.) Firstline has lowest priority\n  if (firstLine) {\n    const firstlineLanguage = getAssociationByFirstline(firstLine);\n    if (firstlineLanguage) {\n      return [firstlineLanguage, {\n        id: PLAINTEXT_LANGUAGE_ID,\n        mime: Mimes.text\n      }];\n    }\n  }\n  return [{\n    id: 'unknown',\n    mime: Mimes.unknown\n  }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n  let filenameMatch = undefined;\n  let patternMatch = undefined;\n  let extensionMatch = undefined;\n  // We want to prioritize associations based on the order they are registered so that the last registered\n  // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n  for (let i = associations.length - 1; i >= 0; i--) {\n    const association = associations[i];\n    // First exact name match\n    if (filename === association.filenameLowercase) {\n      filenameMatch = association;\n      break; // take it!\n    }\n    // Longest pattern match\n    if (association.filepattern) {\n      if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n        var _association$filepatt;\n        const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n        if ((_association$filepatt = association.filepatternLowercase) !== null && _association$filepatt !== void 0 && _association$filepatt.call(association, target)) {\n          patternMatch = association;\n        }\n      }\n    }\n    // Longest extension match\n    if (association.extension) {\n      if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n        if (filename.endsWith(association.extensionLowercase)) {\n          extensionMatch = association;\n        }\n      }\n    }\n  }\n  // 1.) Exact name match has second highest priority\n  if (filenameMatch) {\n    return filenameMatch;\n  }\n  // 2.) Match on pattern\n  if (patternMatch) {\n    return patternMatch;\n  }\n  // 3.) Match on extension comes next\n  if (extensionMatch) {\n    return extensionMatch;\n  }\n  return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n  if (startsWithUTF8BOM(firstLine)) {\n    firstLine = firstLine.substr(1);\n  }\n  if (firstLine.length > 0) {\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n      const association = registeredAssociations[i];\n      if (!association.firstline) {\n        continue;\n      }\n      const matches = firstLine.match(association.firstline);\n      if (matches && matches.length > 0) {\n        return association;\n      }\n    }\n  }\n  return undefined;\n}","map":{"version":3,"names":["parse","Mimes","Schemas","basename","posix","DataUri","startsWithUTF8BOM","PLAINTEXT_LANGUAGE_ID","registeredAssociations","nonUserRegisteredAssociations","userRegisteredAssociations","registerPlatformLanguageAssociation","association","warnOnOverwrite","arguments","length","undefined","_registerLanguageAssociation","userConfigured","associationItem","toLanguageAssociationItem","push","forEach","a","mime","extension","console","warn","concat","filename","filepattern","firstline","id","filenameLowercase","toLowerCase","extensionLowercase","filepatternLowercase","filepatternOnPath","indexOf","sep","clearPlatformLanguageAssociations","filter","getLanguageIds","resource","firstLine","getAssociations","map","item","path","scheme","file","fsPath","data","metadata","parseMetaData","get","META_DATA_LABEL","vscodeNotebookCell","unknown","configuredLanguage","getAssociationByPath","text","registeredLanguage","firstlineLanguage","getAssociationByFirstline","associations","filenameMatch","patternMatch","extensionMatch","i","_association$filepatt","target","call","endsWith","substr","matches","match"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/editor/common/services/languagesAssociations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { parse } from '../../../base/common/glob.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { basename, posix } from '../../../base/common/path.js';\nimport { DataUri } from '../../../base/common/resources.js';\nimport { startsWithUTF8BOM } from '../../../base/common/strings.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nlet registeredAssociations = [];\nlet nonUserRegisteredAssociations = [];\nlet userRegisteredAssociations = [];\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association, warnOnOverwrite = false) {\n    _registerLanguageAssociation(association, false, warnOnOverwrite);\n}\nfunction _registerLanguageAssociation(association, userConfigured, warnOnOverwrite) {\n    // Register\n    const associationItem = toLanguageAssociationItem(association, userConfigured);\n    registeredAssociations.push(associationItem);\n    if (!associationItem.userConfigured) {\n        nonUserRegisteredAssociations.push(associationItem);\n    }\n    else {\n        userRegisteredAssociations.push(associationItem);\n    }\n    // Check for conflicts unless this is a user configured association\n    if (warnOnOverwrite && !associationItem.userConfigured) {\n        registeredAssociations.forEach(a => {\n            if (a.mime === associationItem.mime || a.userConfigured) {\n                return; // same mime or userConfigured is ok\n            }\n            if (associationItem.extension && a.extension === associationItem.extension) {\n                console.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filename && a.filename === associationItem.filename) {\n                console.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n                console.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n            if (associationItem.firstline && a.firstline === associationItem.firstline) {\n                console.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n            }\n        });\n    }\n}\nfunction toLanguageAssociationItem(association, userConfigured) {\n    return {\n        id: association.id,\n        mime: association.mime,\n        filename: association.filename,\n        extension: association.extension,\n        filepattern: association.filepattern,\n        firstline: association.firstline,\n        userConfigured: userConfigured,\n        filenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n        extensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n        filepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n        filepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n    };\n}\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations() {\n    registeredAssociations = registeredAssociations.filter(a => a.userConfigured);\n    nonUserRegisteredAssociations = [];\n}\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource, firstLine) {\n    return getAssociations(resource, firstLine).map(item => item.id);\n}\nfunction getAssociations(resource, firstLine) {\n    let path;\n    if (resource) {\n        switch (resource.scheme) {\n            case Schemas.file:\n                path = resource.fsPath;\n                break;\n            case Schemas.data: {\n                const metadata = DataUri.parseMetaData(resource);\n                path = metadata.get(DataUri.META_DATA_LABEL);\n                break;\n            }\n            case Schemas.vscodeNotebookCell:\n                // File path not relevant for language detection of cell\n                path = undefined;\n                break;\n            default:\n                path = resource.path;\n        }\n    }\n    if (!path) {\n        return [{ id: 'unknown', mime: Mimes.unknown }];\n    }\n    path = path.toLowerCase();\n    const filename = basename(path);\n    // 1.) User configured mappings have highest priority\n    const configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n    if (configuredLanguage) {\n        return [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 2.) Registered mappings have middle priority\n    const registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n    if (registeredLanguage) {\n        return [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n    }\n    // 3.) Firstline has lowest priority\n    if (firstLine) {\n        const firstlineLanguage = getAssociationByFirstline(firstLine);\n        if (firstlineLanguage) {\n            return [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n        }\n    }\n    return [{ id: 'unknown', mime: Mimes.unknown }];\n}\nfunction getAssociationByPath(path, filename, associations) {\n    let filenameMatch = undefined;\n    let patternMatch = undefined;\n    let extensionMatch = undefined;\n    // We want to prioritize associations based on the order they are registered so that the last registered\n    // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n    for (let i = associations.length - 1; i >= 0; i--) {\n        const association = associations[i];\n        // First exact name match\n        if (filename === association.filenameLowercase) {\n            filenameMatch = association;\n            break; // take it!\n        }\n        // Longest pattern match\n        if (association.filepattern) {\n            if (!patternMatch || association.filepattern.length > patternMatch.filepattern.length) {\n                const target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n                if (association.filepatternLowercase?.(target)) {\n                    patternMatch = association;\n                }\n            }\n        }\n        // Longest extension match\n        if (association.extension) {\n            if (!extensionMatch || association.extension.length > extensionMatch.extension.length) {\n                if (filename.endsWith(association.extensionLowercase)) {\n                    extensionMatch = association;\n                }\n            }\n        }\n    }\n    // 1.) Exact name match has second highest priority\n    if (filenameMatch) {\n        return filenameMatch;\n    }\n    // 2.) Match on pattern\n    if (patternMatch) {\n        return patternMatch;\n    }\n    // 3.) Match on extension comes next\n    if (extensionMatch) {\n        return extensionMatch;\n    }\n    return undefined;\n}\nfunction getAssociationByFirstline(firstLine) {\n    if (startsWithUTF8BOM(firstLine)) {\n        firstLine = firstLine.substr(1);\n    }\n    if (firstLine.length > 0) {\n        // We want to prioritize associations based on the order they are registered so that the last registered\n        // association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n        for (let i = registeredAssociations.length - 1; i >= 0; i--) {\n            const association = registeredAssociations[i];\n            if (!association.firstline) {\n                continue;\n            }\n            const matches = firstLine.match(association.firstline);\n            if (matches && matches.length > 0) {\n                return association;\n            }\n        }\n    }\n    return undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
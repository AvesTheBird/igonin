{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport EventSource from '../event/EventSource';\n/**\n * Extends {@link EventSource} to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using {@link Graph#addCellOverlay}, and removed using\n * {@link Graph#removeCellOverlay}, or {@link Graph#removeCellOverlays} to remove all overlays.\n * The {@link Graph#getCellOverlays} function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n *\n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n *\n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * ```javascript\n * let overlay = new CellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, (sender, evt)=>\n * {\n *   let cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * ```\n *\n * For cell overlays to be printed use {@link PrintPreview#printOverlays}.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n *\n * Constructor: CellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n *\n * @param image {@link Image} that represents the icon to be displayed.\n * @param tooltip Optional string that specifies the tooltip.\n * @param align Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * @param verticalAlign Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nclass CellOverlay extends EventSource {\n  constructor(image) {\n    let tooltip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let align = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'right';\n    let verticalAlign = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'bottom';\n    let offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new Point();\n    let cursor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'help';\n    super();\n    /**\n     * Holds the horizontal alignment for the overlay.\n     *\n     * For edges, the overlay always appears in the center of the edge.\n     * @default 'right'\n     */\n    this.align = 'right';\n    /**\n     * Holds the vertical alignment for the overlay.\n     *\n     * For edges, the overlay always appears in the center of the edge.\n     * @default 'bottom'\n     */\n    this.verticalAlign = 'bottom';\n    /**\n     * Holds the offset as an {@link Point}. The offset will be scaled according to the\n     * current scale.\n     */\n    this.offset = new Point();\n    /**\n     * Holds the cursor for the overlay.\n     * @default 'help'.\n     */\n    this.cursor = 'help';\n    /**\n     * Defines the overlapping for the overlay, that is, the proportional distance\n     * from the origin to the point defined by the alignment. Default is 0.5.\n     */\n    this.defaultOverlap = 0.5;\n    this.image = image;\n    this.tooltip = tooltip;\n    this.align = align;\n    this.verticalAlign = verticalAlign;\n    this.offset = offset;\n    this.cursor = cursor;\n  }\n  /**\n   * Returns the bounds of the overlay for the given <CellState> as an\n   * {@link Rectangle}. This should be overridden when using multiple overlays\n   * per cell so that the overlays do not overlap.\n   *\n   * The following example will place the overlay along an edge (where\n   * x=[-1..1] from the start to the end of the edge and y is the\n   * orthogonal offset in px).\n   *\n   * ```javascript\n   * overlay.getBounds = function(state)\n   * {\n   *   var bounds = getBounds.apply(this, arguments);\n   *\n   *   if (state.view.graph.getDataModel().isEdge(state.cell))\n   *   {\n   *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n   *\n   *     bounds.x = pt.x - bounds.width / 2;\n   *     bounds.y = pt.y - bounds.height / 2;\n   *   }\n   *\n   *   return bounds;\n   * };\n   * ```\n   *\n   * @param state <CellState> that represents the current state of the\n   * associated cell.\n   */\n  getBounds(state) {\n    const isEdge = state.cell.isEdge();\n    const s = state.view.scale;\n    let pt = null;\n    const image = this.image;\n    const w = image.width;\n    const h = image.height;\n    if (isEdge) {\n      const pts = state.absolutePoints;\n      if (pts.length % 2 === 1) {\n        pt = pts[Math.floor(pts.length / 2)];\n      } else {\n        const idx = pts.length / 2;\n        const p0 = pts[idx - 1];\n        const p1 = pts[idx];\n        pt = new Point(p0.x + (p1.x - p0.x) / 2, p0.y + (p1.y - p0.y) / 2);\n      }\n    } else {\n      pt = new Point();\n      if (this.align === 'left') {\n        pt.x = state.x;\n      } else if (this.align === 'center') {\n        pt.x = state.x + state.width / 2;\n      } else if (this.align === 'right') {\n        pt.x = state.x + state.width;\n      } else {\n        throw new Error();\n      }\n      if (this.verticalAlign === 'top') {\n        pt.y = state.y;\n      } else if (this.verticalAlign === 'middle') {\n        pt.y = state.y + state.height / 2;\n      } else if (this.verticalAlign === 'bottom') {\n        pt.y = state.y + state.height;\n      } else {\n        throw new Error();\n      }\n    }\n    return new Rectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s), Math.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n  }\n  /**\n   * Returns the textual representation of the overlay to be used as the\n   * tooltip. This implementation returns <tooltip>.\n   */\n  toString() {\n    return this.tooltip;\n  }\n}\nexport default CellOverlay;","map":{"version":3,"names":["Point","Rectangle","EventSource","CellOverlay","constructor","image","tooltip","arguments","length","undefined","align","verticalAlign","offset","cursor","defaultOverlap","getBounds","state","isEdge","cell","s","view","scale","pt","w","width","h","height","pts","absolutePoints","Math","floor","idx","p0","p1","x","y","Error","round","toString"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/view/cell/CellOverlay.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport Rectangle from '../geometry/Rectangle';\nimport EventSource from '../event/EventSource';\n/**\n * Extends {@link EventSource} to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using {@link Graph#addCellOverlay}, and removed using\n * {@link Graph#removeCellOverlay}, or {@link Graph#removeCellOverlays} to remove all overlays.\n * The {@link Graph#getCellOverlays} function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n *\n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n *\n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * ```javascript\n * let overlay = new CellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, (sender, evt)=>\n * {\n *   let cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * ```\n *\n * For cell overlays to be printed use {@link PrintPreview#printOverlays}.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n *\n * Constructor: CellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n *\n * @param image {@link Image} that represents the icon to be displayed.\n * @param tooltip Optional string that specifies the tooltip.\n * @param align Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * @param verticalAlign Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nclass CellOverlay extends EventSource {\n    constructor(image, tooltip = null, align = 'right', verticalAlign = 'bottom', offset = new Point(), cursor = 'help') {\n        super();\n        /**\n         * Holds the horizontal alignment for the overlay.\n         *\n         * For edges, the overlay always appears in the center of the edge.\n         * @default 'right'\n         */\n        this.align = 'right';\n        /**\n         * Holds the vertical alignment for the overlay.\n         *\n         * For edges, the overlay always appears in the center of the edge.\n         * @default 'bottom'\n         */\n        this.verticalAlign = 'bottom';\n        /**\n         * Holds the offset as an {@link Point}. The offset will be scaled according to the\n         * current scale.\n         */\n        this.offset = new Point();\n        /**\n         * Holds the cursor for the overlay.\n         * @default 'help'.\n         */\n        this.cursor = 'help';\n        /**\n         * Defines the overlapping for the overlay, that is, the proportional distance\n         * from the origin to the point defined by the alignment. Default is 0.5.\n         */\n        this.defaultOverlap = 0.5;\n        this.image = image;\n        this.tooltip = tooltip;\n        this.align = align;\n        this.verticalAlign = verticalAlign;\n        this.offset = offset;\n        this.cursor = cursor;\n    }\n    /**\n     * Returns the bounds of the overlay for the given <CellState> as an\n     * {@link Rectangle}. This should be overridden when using multiple overlays\n     * per cell so that the overlays do not overlap.\n     *\n     * The following example will place the overlay along an edge (where\n     * x=[-1..1] from the start to the end of the edge and y is the\n     * orthogonal offset in px).\n     *\n     * ```javascript\n     * overlay.getBounds = function(state)\n     * {\n     *   var bounds = getBounds.apply(this, arguments);\n     *\n     *   if (state.view.graph.getDataModel().isEdge(state.cell))\n     *   {\n     *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n     *\n     *     bounds.x = pt.x - bounds.width / 2;\n     *     bounds.y = pt.y - bounds.height / 2;\n     *   }\n     *\n     *   return bounds;\n     * };\n     * ```\n     *\n     * @param state <CellState> that represents the current state of the\n     * associated cell.\n     */\n    getBounds(state) {\n        const isEdge = state.cell.isEdge();\n        const s = state.view.scale;\n        let pt = null;\n        const image = this.image;\n        const w = image.width;\n        const h = image.height;\n        if (isEdge) {\n            const pts = state.absolutePoints;\n            if (pts.length % 2 === 1) {\n                pt = pts[Math.floor(pts.length / 2)];\n            }\n            else {\n                const idx = pts.length / 2;\n                const p0 = pts[idx - 1];\n                const p1 = pts[idx];\n                pt = new Point(p0.x + (p1.x - p0.x) / 2, p0.y + (p1.y - p0.y) / 2);\n            }\n        }\n        else {\n            pt = new Point();\n            if (this.align === 'left') {\n                pt.x = state.x;\n            }\n            else if (this.align === 'center') {\n                pt.x = state.x + state.width / 2;\n            }\n            else if (this.align === 'right') {\n                pt.x = state.x + state.width;\n            }\n            else {\n                throw new Error();\n            }\n            if (this.verticalAlign === 'top') {\n                pt.y = state.y;\n            }\n            else if (this.verticalAlign === 'middle') {\n                pt.y = state.y + state.height / 2;\n            }\n            else if (this.verticalAlign === 'bottom') {\n                pt.y = state.y + state.height;\n            }\n            else {\n                throw new Error();\n            }\n        }\n        return new Rectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s), Math.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n    }\n    /**\n     * Returns the textual representation of the overlay to be used as the\n     * tooltip. This implementation returns <tooltip>.\n     */\n    toString() {\n        return this.tooltip;\n    }\n}\nexport default CellOverlay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
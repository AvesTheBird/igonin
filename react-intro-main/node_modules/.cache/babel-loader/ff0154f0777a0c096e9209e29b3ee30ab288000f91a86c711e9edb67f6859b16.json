{"ast":null,"code":"/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport GraphDataModel from '../../view/GraphDataModel';\n/**\n * Codec for {@link GraphDataModel}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n */\nexport class ModelCodec extends ObjectCodec {\n  constructor() {\n    super(new GraphDataModel());\n    this.setName('GraphDataModel');\n  }\n  /**\n   * Encodes the given {@link GraphDataModel} by writing a (flat) XML sequence of cell nodes as produced by the {@link CellCodec}.\n   * The sequence is wrapped-up in a node with the name `root`.\n   */\n  encodeObject(enc, obj, node) {\n    const rootNode = enc.document.createElement('root');\n    enc.encodeCell(obj.getRoot(), rootNode);\n    node.appendChild(rootNode);\n  }\n  /**\n   * Overrides decode child to handle special child nodes.\n   */\n  decodeChild(dec, child, obj) {\n    if (child.nodeName === 'root') {\n      this.decodeRoot(dec, child, obj);\n    } else {\n      this.decodeChild.apply(this, [dec, child, obj]);\n    }\n  }\n  /**\n   * Reads the cells into the graph model. All cells are children of the root element in the node.\n   */\n  decodeRoot(dec, root, model) {\n    let rootCell = null;\n    let tmp = root.firstChild;\n    while (tmp != null) {\n      const cell = dec.decodeCell(tmp);\n      if (cell != null && cell.getParent() == null) {\n        rootCell = cell;\n      }\n      tmp = tmp.nextSibling;\n    }\n    // Sets the root on the model if one has been decoded\n    if (rootCell != null) {\n      model.setRoot(rootCell);\n    }\n  }\n}","map":{"version":3,"names":["ObjectCodec","GraphDataModel","ModelCodec","constructor","setName","encodeObject","enc","obj","node","rootNode","document","createElement","encodeCell","getRoot","appendChild","decodeChild","dec","child","nodeName","decodeRoot","apply","root","model","rootCell","tmp","firstChild","cell","decodeCell","getParent","nextSibling","setRoot"],"sources":["D:/OSPanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/serialization/codecs/ModelCodec.js"],"sourcesContent":["/*\nCopyright 2023-present The maxGraph project Contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport ObjectCodec from '../ObjectCodec';\nimport GraphDataModel from '../../view/GraphDataModel';\n/**\n * Codec for {@link GraphDataModel}s.\n *\n * This class is created and registered dynamically at load time and used implicitly via {@link Codec} and the {@link CodecRegistry}.\n */\nexport class ModelCodec extends ObjectCodec {\n    constructor() {\n        super(new GraphDataModel());\n        this.setName('GraphDataModel');\n    }\n    /**\n     * Encodes the given {@link GraphDataModel} by writing a (flat) XML sequence of cell nodes as produced by the {@link CellCodec}.\n     * The sequence is wrapped-up in a node with the name `root`.\n     */\n    encodeObject(enc, obj, node) {\n        const rootNode = enc.document.createElement('root');\n        enc.encodeCell(obj.getRoot(), rootNode);\n        node.appendChild(rootNode);\n    }\n    /**\n     * Overrides decode child to handle special child nodes.\n     */\n    decodeChild(dec, child, obj) {\n        if (child.nodeName === 'root') {\n            this.decodeRoot(dec, child, obj);\n        }\n        else {\n            this.decodeChild.apply(this, [dec, child, obj]);\n        }\n    }\n    /**\n     * Reads the cells into the graph model. All cells are children of the root element in the node.\n     */\n    decodeRoot(dec, root, model) {\n        let rootCell = null;\n        let tmp = root.firstChild;\n        while (tmp != null) {\n            const cell = dec.decodeCell(tmp);\n            if (cell != null && cell.getParent() == null) {\n                rootCell = cell;\n            }\n            tmp = tmp.nextSibling;\n        }\n        // Sets the root on the model if one has been decoded\n        if (rootCell != null) {\n            model.setRoot(rootCell);\n        }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,gBAAgB;AACxC,OAAOC,cAAc,MAAM,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,SAASF,WAAW,CAAC;EACxCG,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,IAAIF,cAAc,CAAC,CAAC,CAAC;IAC3B,IAAI,CAACG,OAAO,CAAC,gBAAgB,CAAC;EAClC;EACA;AACJ;AACA;AACA;EACIC,YAAYA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;IACzB,MAAMC,QAAQ,GAAGH,GAAG,CAACI,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC;IACnDL,GAAG,CAACM,UAAU,CAACL,GAAG,CAACM,OAAO,CAAC,CAAC,EAAEJ,QAAQ,CAAC;IACvCD,IAAI,CAACM,WAAW,CAACL,QAAQ,CAAC;EAC9B;EACA;AACJ;AACA;EACIM,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAEV,GAAG,EAAE;IACzB,IAAIU,KAAK,CAACC,QAAQ,KAAK,MAAM,EAAE;MAC3B,IAAI,CAACC,UAAU,CAACH,GAAG,EAAEC,KAAK,EAAEV,GAAG,CAAC;IACpC,CAAC,MACI;MACD,IAAI,CAACQ,WAAW,CAACK,KAAK,CAAC,IAAI,EAAE,CAACJ,GAAG,EAAEC,KAAK,EAAEV,GAAG,CAAC,CAAC;IACnD;EACJ;EACA;AACJ;AACA;EACIY,UAAUA,CAACH,GAAG,EAAEK,IAAI,EAAEC,KAAK,EAAE;IACzB,IAAIC,QAAQ,GAAG,IAAI;IACnB,IAAIC,GAAG,GAAGH,IAAI,CAACI,UAAU;IACzB,OAAOD,GAAG,IAAI,IAAI,EAAE;MAChB,MAAME,IAAI,GAAGV,GAAG,CAACW,UAAU,CAACH,GAAG,CAAC;MAChC,IAAIE,IAAI,IAAI,IAAI,IAAIA,IAAI,CAACE,SAAS,CAAC,CAAC,IAAI,IAAI,EAAE;QAC1CL,QAAQ,GAAGG,IAAI;MACnB;MACAF,GAAG,GAAGA,GAAG,CAACK,WAAW;IACzB;IACA;IACA,IAAIN,QAAQ,IAAI,IAAI,EAAE;MAClBD,KAAK,CAACQ,OAAO,CAACP,QAAQ,CAAC;IAC3B;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
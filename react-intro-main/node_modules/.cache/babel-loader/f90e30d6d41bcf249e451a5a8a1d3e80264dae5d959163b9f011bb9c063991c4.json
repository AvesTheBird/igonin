{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { ARROW_SIZE, ARROW_SPACING, ARROW_WIDTH, NONE } from '../../../util/Constants';\nimport { relativeCcw } from '../../../util/mathUtils';\n/**\n * Extends {@link Shape} to implement an new rounded arrow shape with support for waypoints and double arrows. The\n * shape is used to represent edges, not vertices.\n *\n * This shape is registered under {@link mxConstants.SHAPE_ARROW_CONNECTOR} in {@link mxCellRenderer}.\n */\nclass ArrowConnectorShape extends Shape {\n  constructor(points, fill, stroke) {\n    let strokeWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    let arrowWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ARROW_WIDTH;\n    let spacing = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : ARROW_SPACING;\n    let endSize = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ARROW_SIZE / 5;\n    super();\n    /**\n     * Allows to use the SVG bounding box in SVG.\n     * @defaultValue `false` for performance reasons.\n     */\n    this.useSvgBoundingBox = true;\n    this.points = points;\n    this.fill = fill;\n    this.stroke = stroke;\n    this.strokeWidth = strokeWidth;\n    this.arrowWidth = arrowWidth;\n    this.arrowSpacing = spacing;\n    this.startSize = ARROW_SIZE / 5;\n    this.endSize = endSize;\n  }\n  /**\n   * Hook for subclassers.\n   */\n  isRoundable() {\n    return true;\n  }\n  /**\n   * Overrides mxShape to reset spacing.\n   */\n  resetStyles() {\n    super.resetStyles();\n    this.arrowSpacing = ARROW_SPACING;\n  }\n  /**\n   * Overrides apply to get smooth transition from default start- and endsize.\n   */\n  apply(state) {\n    super.apply(state);\n    if (this.style && this.style.startSize != null && this.style.endSize != null) {\n      this.startSize = this.style.startSize * 3;\n      this.endSize = this.style.endSize * 3;\n    }\n  }\n  /**\n   * Augments the bounding box with the edge width and markers.\n   */\n  augmentBoundingBox(bbox) {\n    super.augmentBoundingBox(bbox);\n    let w = this.getEdgeWidth();\n    if (this.isMarkerStart()) {\n      w = Math.max(w, this.getStartArrowWidth());\n    }\n    if (this.isMarkerEnd()) {\n      w = Math.max(w, this.getEndArrowWidth());\n    }\n    bbox.grow((w / 2 + this.strokeWidth) * this.scale);\n  }\n  /**\n   * Paints the line shape.\n   */\n  paintEdgeShape(c, pts) {\n    // Geometry of arrow\n    let strokeWidth = this.strokeWidth;\n    if (this.outline) {\n      var _this$style$strokeWid, _this$style;\n      strokeWidth = Math.max(1, (_this$style$strokeWid = (_this$style = this.style) === null || _this$style === void 0 ? void 0 : _this$style.strokeWidth) !== null && _this$style$strokeWid !== void 0 ? _this$style$strokeWid : 0);\n    }\n    const startWidth = this.getStartArrowWidth() + strokeWidth;\n    const endWidth = this.getEndArrowWidth() + strokeWidth;\n    const edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n    const openEnded = this.isOpenEnded();\n    const markerStart = this.isMarkerStart();\n    const markerEnd = this.isMarkerEnd();\n    const spacing = openEnded ? 0 : this.arrowSpacing + strokeWidth / 2;\n    const startSize = this.startSize + strokeWidth;\n    const endSize = this.endSize + strokeWidth;\n    const isRounded = this.isArrowRounded();\n    // Base vector (between first points)\n    const pe = pts[pts.length - 1];\n    // Finds first non-overlapping point\n    let i0 = 1;\n    while (i0 < pts.length - 1 && pts[i0].x === pts[0].x && pts[i0].y === pts[0].y) {\n      i0++;\n    }\n    const dx = pts[i0].x - pts[0].x;\n    const dy = pts[i0].y - pts[0].y;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    if (dist === 0) {\n      return;\n    }\n    // Computes the norm and the inverse norm\n    let nx = dx / dist;\n    let nx2;\n    let nx1 = nx;\n    let ny = dy / dist;\n    let ny2;\n    let ny1 = ny;\n    let orthx = edgeWidth * ny;\n    let orthy = -edgeWidth * nx;\n    // Stores the inbound function calls in reverse order in fns\n    const fns = [];\n    if (isRounded) {\n      c.setLineJoin('round');\n    } else if (pts.length > 2) {\n      // Only mitre if there are waypoints\n      c.setMiterLimit(1.42);\n    }\n    c.begin();\n    const startNx = nx;\n    const startNy = ny;\n    if (markerStart && !openEnded) {\n      this.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n    } else {\n      const outStartX = pts[0].x + orthx / 2 + spacing * nx;\n      const outStartY = pts[0].y + orthy / 2 + spacing * ny;\n      const inEndX = pts[0].x - orthx / 2 + spacing * nx;\n      const inEndY = pts[0].y - orthy / 2 + spacing * ny;\n      if (openEnded) {\n        c.moveTo(outStartX, outStartY);\n        fns.push(() => {\n          c.lineTo(inEndX, inEndY);\n        });\n      } else {\n        c.moveTo(inEndX, inEndY);\n        c.lineTo(outStartX, outStartY);\n      }\n    }\n    let dx1 = 0;\n    let dy1 = 0;\n    let dist1 = 0;\n    for (let i = 0; i < pts.length - 2; i += 1) {\n      // Work out in which direction the line is bending\n      const pos = relativeCcw(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y, pts[i + 2].x, pts[i + 2].y);\n      dx1 = pts[i + 2].x - pts[i + 1].x;\n      dy1 = pts[i + 2].y - pts[i + 1].y;\n      dist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n      if (dist1 !== 0) {\n        nx1 = dx1 / dist1;\n        ny1 = dy1 / dist1;\n        const tmp1 = nx * nx1 + ny * ny1;\n        const tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n        // Work out the normal orthogonal to the line through the control point and the edge sides intersection\n        nx2 = nx + nx1;\n        ny2 = ny + ny1;\n        const dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n        if (dist2 !== 0) {\n          nx2 /= dist2;\n          ny2 /= dist2;\n          // Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n          const strokeWidthFactor = Math.max(tmp, Math.min(this.strokeWidth / 200 + 0.04, 0.35));\n          const angleFactor = pos !== 0 && isRounded ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n          const outX = pts[i + 1].x + ny2 * edgeWidth / 2 / angleFactor;\n          const outY = pts[i + 1].y - nx2 * edgeWidth / 2 / angleFactor;\n          const inX = pts[i + 1].x - ny2 * edgeWidth / 2 / angleFactor;\n          const inY = pts[i + 1].y + nx2 * edgeWidth / 2 / angleFactor;\n          if (pos === 0 || !isRounded) {\n            // If the two segments are aligned, or if we're not drawing curved sections between segments\n            // just draw straight to the intersection point\n            c.lineTo(outX, outY);\n            ((x, y) => {\n              fns.push(() => {\n                c.lineTo(x, y);\n              });\n            })(inX, inY);\n          } else if (pos === -1) {\n            const c1x = inX + ny * edgeWidth;\n            const c1y = inY - nx * edgeWidth;\n            const c2x = inX + ny1 * edgeWidth;\n            const c2y = inY - nx1 * edgeWidth;\n            c.lineTo(c1x, c1y);\n            c.quadTo(outX, outY, c2x, c2y);\n            ((x, y) => {\n              fns.push(() => {\n                c.lineTo(x, y);\n              });\n            })(inX, inY);\n          } else {\n            c.lineTo(outX, outY);\n            ((x, y) => {\n              const c1x = outX - ny * edgeWidth;\n              const c1y = outY + nx * edgeWidth;\n              const c2x = outX - ny1 * edgeWidth;\n              const c2y = outY + nx1 * edgeWidth;\n              fns.push(() => {\n                c.quadTo(x, y, c1x, c1y);\n              });\n              fns.push(() => {\n                c.lineTo(c2x, c2y);\n              });\n            })(inX, inY);\n          }\n          nx = nx1;\n          ny = ny1;\n        }\n      }\n    }\n    orthx = edgeWidth * ny1;\n    orthy = -edgeWidth * nx1;\n    if (markerEnd && !openEnded) {\n      this.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n    } else {\n      c.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n      const inStartX = pe.x - spacing * nx1 - orthx / 2;\n      const inStartY = pe.y - spacing * ny1 - orthy / 2;\n      if (!openEnded) {\n        c.lineTo(inStartX, inStartY);\n      } else {\n        c.moveTo(inStartX, inStartY);\n        fns.splice(0, 0, () => {\n          c.moveTo(inStartX, inStartY);\n        });\n      }\n    }\n    for (let i = fns.length - 1; i >= 0; i--) {\n      fns[i]();\n    }\n    if (openEnded) {\n      c.end();\n      c.stroke();\n    } else {\n      c.close();\n      c.fillAndStroke();\n    }\n    // Workaround for shadow on top of base arrow\n    c.setShadow(false);\n    // Need to redraw the markers without the low miter limit\n    c.setMiterLimit(4);\n    if (isRounded) {\n      c.setLineJoin('flat');\n    }\n    if (pts.length > 2) {\n      // Only to repaint markers if no waypoints\n      // Need to redraw the markers without the low miter limit\n      c.setMiterLimit(4);\n      if (markerStart && !openEnded) {\n        c.begin();\n        this.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n        c.stroke();\n        c.end();\n      }\n      if (markerEnd && !openEnded) {\n        c.begin();\n        this.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n        c.stroke();\n        c.end();\n      }\n    }\n  }\n  /**\n   * Paints the marker.\n   */\n  paintMarker(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove) {\n    const widthArrowRatio = edgeWidth / arrowWidth;\n    const orthx = edgeWidth * ny / 2;\n    const orthy = -edgeWidth * nx / 2;\n    const spaceX = (spacing + size) * nx;\n    const spaceY = (spacing + size) * ny;\n    if (initialMove) {\n      c.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n    } else {\n      c.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n    }\n    c.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n    c.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n    c.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n    c.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n  }\n  /**\n   * @returns whether the arrow is rounded\n   */\n  isArrowRounded() {\n    return this.isRounded;\n  }\n  /**\n   * @returns the width of the start arrow\n   */\n  getStartArrowWidth() {\n    return ARROW_WIDTH;\n  }\n  /**\n   * @returns the width of the end arrow\n   */\n  getEndArrowWidth() {\n    return ARROW_WIDTH;\n  }\n  /**\n   * @returns the width of the body of the edge\n   */\n  getEdgeWidth() {\n    return ARROW_WIDTH / 3;\n  }\n  /**\n   * @returns whether the ends of the shape are drawn\n   */\n  isOpenEnded() {\n    return false;\n  }\n  /**\n   * @returns whether the start marker is drawn\n   */\n  isMarkerStart() {\n    var _this$style$startArro, _this$style2;\n    return ((_this$style$startArro = (_this$style2 = this.style) === null || _this$style2 === void 0 ? void 0 : _this$style2.startArrow) !== null && _this$style$startArro !== void 0 ? _this$style$startArro : NONE) !== NONE;\n  }\n  /**\n   * @returns whether the end marker is drawn\n   */\n  isMarkerEnd() {\n    var _this$style$endArrow, _this$style3;\n    return ((_this$style$endArrow = (_this$style3 = this.style) === null || _this$style3 === void 0 ? void 0 : _this$style3.endArrow) !== null && _this$style$endArrow !== void 0 ? _this$style$endArrow : NONE) !== NONE;\n  }\n}\nexport default ArrowConnectorShape;","map":{"version":3,"names":["Shape","ARROW_SIZE","ARROW_SPACING","ARROW_WIDTH","NONE","relativeCcw","ArrowConnectorShape","constructor","points","fill","stroke","strokeWidth","arguments","length","undefined","arrowWidth","spacing","endSize","useSvgBoundingBox","arrowSpacing","startSize","isRoundable","resetStyles","apply","state","style","augmentBoundingBox","bbox","w","getEdgeWidth","isMarkerStart","Math","max","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","grow","scale","paintEdgeShape","c","pts","outline","_this$style$strokeWid","_this$style","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isRounded","isArrowRounded","pe","i0","x","y","dx","dy","dist","sqrt","nx","nx2","nx1","ny","ny2","ny1","orthx","orthy","fns","setLineJoin","setMiterLimit","begin","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","moveTo","push","lineTo","dx1","dy1","dist1","i","pos","tmp1","tmp","dist2","strokeWidthFactor","min","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","quadTo","inStartX","inStartY","splice","end","close","fillAndStroke","setShadow","ptX","ptY","size","initialMove","widthArrowRatio","spaceX","spaceY","_this$style$startArro","_this$style2","startArrow","_this$style$endArrow","_this$style3","endArrow"],"sources":["D:/OSPanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/geometry/edge/ArrowConnectorShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Shape from '../Shape';\nimport { ARROW_SIZE, ARROW_SPACING, ARROW_WIDTH, NONE } from '../../../util/Constants';\nimport { relativeCcw } from '../../../util/mathUtils';\n/**\n * Extends {@link Shape} to implement an new rounded arrow shape with support for waypoints and double arrows. The\n * shape is used to represent edges, not vertices.\n *\n * This shape is registered under {@link mxConstants.SHAPE_ARROW_CONNECTOR} in {@link mxCellRenderer}.\n */\nclass ArrowConnectorShape extends Shape {\n    constructor(points, fill, stroke, strokeWidth = 1, arrowWidth = ARROW_WIDTH, spacing = ARROW_SPACING, endSize = ARROW_SIZE / 5) {\n        super();\n        /**\n         * Allows to use the SVG bounding box in SVG.\n         * @defaultValue `false` for performance reasons.\n         */\n        this.useSvgBoundingBox = true;\n        this.points = points;\n        this.fill = fill;\n        this.stroke = stroke;\n        this.strokeWidth = strokeWidth;\n        this.arrowWidth = arrowWidth;\n        this.arrowSpacing = spacing;\n        this.startSize = ARROW_SIZE / 5;\n        this.endSize = endSize;\n    }\n    /**\n     * Hook for subclassers.\n     */\n    isRoundable() {\n        return true;\n    }\n    /**\n     * Overrides mxShape to reset spacing.\n     */\n    resetStyles() {\n        super.resetStyles();\n        this.arrowSpacing = ARROW_SPACING;\n    }\n    /**\n     * Overrides apply to get smooth transition from default start- and endsize.\n     */\n    apply(state) {\n        super.apply(state);\n        if (this.style && this.style.startSize != null && this.style.endSize != null) {\n            this.startSize = this.style.startSize * 3;\n            this.endSize = this.style.endSize * 3;\n        }\n    }\n    /**\n     * Augments the bounding box with the edge width and markers.\n     */\n    augmentBoundingBox(bbox) {\n        super.augmentBoundingBox(bbox);\n        let w = this.getEdgeWidth();\n        if (this.isMarkerStart()) {\n            w = Math.max(w, this.getStartArrowWidth());\n        }\n        if (this.isMarkerEnd()) {\n            w = Math.max(w, this.getEndArrowWidth());\n        }\n        bbox.grow((w / 2 + this.strokeWidth) * this.scale);\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintEdgeShape(c, pts) {\n        // Geometry of arrow\n        let strokeWidth = this.strokeWidth;\n        if (this.outline) {\n            strokeWidth = Math.max(1, this.style?.strokeWidth ?? 0);\n        }\n        const startWidth = this.getStartArrowWidth() + strokeWidth;\n        const endWidth = this.getEndArrowWidth() + strokeWidth;\n        const edgeWidth = this.outline\n            ? this.getEdgeWidth() + strokeWidth\n            : this.getEdgeWidth();\n        const openEnded = this.isOpenEnded();\n        const markerStart = this.isMarkerStart();\n        const markerEnd = this.isMarkerEnd();\n        const spacing = openEnded ? 0 : this.arrowSpacing + strokeWidth / 2;\n        const startSize = this.startSize + strokeWidth;\n        const endSize = this.endSize + strokeWidth;\n        const isRounded = this.isArrowRounded();\n        // Base vector (between first points)\n        const pe = pts[pts.length - 1];\n        // Finds first non-overlapping point\n        let i0 = 1;\n        while (i0 < pts.length - 1 && pts[i0].x === pts[0].x && pts[i0].y === pts[0].y) {\n            i0++;\n        }\n        const dx = pts[i0].x - pts[0].x;\n        const dy = pts[i0].y - pts[0].y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        if (dist === 0) {\n            return;\n        }\n        // Computes the norm and the inverse norm\n        let nx = dx / dist;\n        let nx2;\n        let nx1 = nx;\n        let ny = dy / dist;\n        let ny2;\n        let ny1 = ny;\n        let orthx = edgeWidth * ny;\n        let orthy = -edgeWidth * nx;\n        // Stores the inbound function calls in reverse order in fns\n        const fns = [];\n        if (isRounded) {\n            c.setLineJoin('round');\n        }\n        else if (pts.length > 2) {\n            // Only mitre if there are waypoints\n            c.setMiterLimit(1.42);\n        }\n        c.begin();\n        const startNx = nx;\n        const startNy = ny;\n        if (markerStart && !openEnded) {\n            this.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n        }\n        else {\n            const outStartX = pts[0].x + orthx / 2 + spacing * nx;\n            const outStartY = pts[0].y + orthy / 2 + spacing * ny;\n            const inEndX = pts[0].x - orthx / 2 + spacing * nx;\n            const inEndY = pts[0].y - orthy / 2 + spacing * ny;\n            if (openEnded) {\n                c.moveTo(outStartX, outStartY);\n                fns.push(() => {\n                    c.lineTo(inEndX, inEndY);\n                });\n            }\n            else {\n                c.moveTo(inEndX, inEndY);\n                c.lineTo(outStartX, outStartY);\n            }\n        }\n        let dx1 = 0;\n        let dy1 = 0;\n        let dist1 = 0;\n        for (let i = 0; i < pts.length - 2; i += 1) {\n            // Work out in which direction the line is bending\n            const pos = relativeCcw(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y, pts[i + 2].x, pts[i + 2].y);\n            dx1 = pts[i + 2].x - pts[i + 1].x;\n            dy1 = pts[i + 2].y - pts[i + 1].y;\n            dist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n            if (dist1 !== 0) {\n                nx1 = dx1 / dist1;\n                ny1 = dy1 / dist1;\n                const tmp1 = nx * nx1 + ny * ny1;\n                const tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n                // Work out the normal orthogonal to the line through the control point and the edge sides intersection\n                nx2 = nx + nx1;\n                ny2 = ny + ny1;\n                const dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n                if (dist2 !== 0) {\n                    nx2 /= dist2;\n                    ny2 /= dist2;\n                    // Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n                    const strokeWidthFactor = Math.max(tmp, Math.min(this.strokeWidth / 200 + 0.04, 0.35));\n                    const angleFactor = pos !== 0 && isRounded\n                        ? Math.max(0.1, strokeWidthFactor)\n                        : Math.max(tmp, 0.06);\n                    const outX = pts[i + 1].x + (ny2 * edgeWidth) / 2 / angleFactor;\n                    const outY = pts[i + 1].y - (nx2 * edgeWidth) / 2 / angleFactor;\n                    const inX = pts[i + 1].x - (ny2 * edgeWidth) / 2 / angleFactor;\n                    const inY = pts[i + 1].y + (nx2 * edgeWidth) / 2 / angleFactor;\n                    if (pos === 0 || !isRounded) {\n                        // If the two segments are aligned, or if we're not drawing curved sections between segments\n                        // just draw straight to the intersection point\n                        c.lineTo(outX, outY);\n                        ((x, y) => {\n                            fns.push(() => {\n                                c.lineTo(x, y);\n                            });\n                        })(inX, inY);\n                    }\n                    else if (pos === -1) {\n                        const c1x = inX + ny * edgeWidth;\n                        const c1y = inY - nx * edgeWidth;\n                        const c2x = inX + ny1 * edgeWidth;\n                        const c2y = inY - nx1 * edgeWidth;\n                        c.lineTo(c1x, c1y);\n                        c.quadTo(outX, outY, c2x, c2y);\n                        ((x, y) => {\n                            fns.push(() => {\n                                c.lineTo(x, y);\n                            });\n                        })(inX, inY);\n                    }\n                    else {\n                        c.lineTo(outX, outY);\n                        ((x, y) => {\n                            const c1x = outX - ny * edgeWidth;\n                            const c1y = outY + nx * edgeWidth;\n                            const c2x = outX - ny1 * edgeWidth;\n                            const c2y = outY + nx1 * edgeWidth;\n                            fns.push(() => {\n                                c.quadTo(x, y, c1x, c1y);\n                            });\n                            fns.push(() => {\n                                c.lineTo(c2x, c2y);\n                            });\n                        })(inX, inY);\n                    }\n                    nx = nx1;\n                    ny = ny1;\n                }\n            }\n        }\n        orthx = edgeWidth * ny1;\n        orthy = -edgeWidth * nx1;\n        if (markerEnd && !openEnded) {\n            this.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n        }\n        else {\n            c.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n            const inStartX = pe.x - spacing * nx1 - orthx / 2;\n            const inStartY = pe.y - spacing * ny1 - orthy / 2;\n            if (!openEnded) {\n                c.lineTo(inStartX, inStartY);\n            }\n            else {\n                c.moveTo(inStartX, inStartY);\n                fns.splice(0, 0, () => {\n                    c.moveTo(inStartX, inStartY);\n                });\n            }\n        }\n        for (let i = fns.length - 1; i >= 0; i--) {\n            fns[i]();\n        }\n        if (openEnded) {\n            c.end();\n            c.stroke();\n        }\n        else {\n            c.close();\n            c.fillAndStroke();\n        }\n        // Workaround for shadow on top of base arrow\n        c.setShadow(false);\n        // Need to redraw the markers without the low miter limit\n        c.setMiterLimit(4);\n        if (isRounded) {\n            c.setLineJoin('flat');\n        }\n        if (pts.length > 2) {\n            // Only to repaint markers if no waypoints\n            // Need to redraw the markers without the low miter limit\n            c.setMiterLimit(4);\n            if (markerStart && !openEnded) {\n                c.begin();\n                this.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n                c.stroke();\n                c.end();\n            }\n            if (markerEnd && !openEnded) {\n                c.begin();\n                this.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n                c.stroke();\n                c.end();\n            }\n        }\n    }\n    /**\n     * Paints the marker.\n     */\n    paintMarker(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove) {\n        const widthArrowRatio = edgeWidth / arrowWidth;\n        const orthx = (edgeWidth * ny) / 2;\n        const orthy = (-edgeWidth * nx) / 2;\n        const spaceX = (spacing + size) * nx;\n        const spaceY = (spacing + size) * ny;\n        if (initialMove) {\n            c.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n        }\n        else {\n            c.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n        }\n        c.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n        c.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n        c.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n        c.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n    }\n    /**\n     * @returns whether the arrow is rounded\n     */\n    isArrowRounded() {\n        return this.isRounded;\n    }\n    /**\n     * @returns the width of the start arrow\n     */\n    getStartArrowWidth() {\n        return ARROW_WIDTH;\n    }\n    /**\n     * @returns the width of the end arrow\n     */\n    getEndArrowWidth() {\n        return ARROW_WIDTH;\n    }\n    /**\n     * @returns the width of the body of the edge\n     */\n    getEdgeWidth() {\n        return ARROW_WIDTH / 3;\n    }\n    /**\n     * @returns whether the ends of the shape are drawn\n     */\n    isOpenEnded() {\n        return false;\n    }\n    /**\n     * @returns whether the start marker is drawn\n     */\n    isMarkerStart() {\n        return (this.style?.startArrow ?? NONE) !== NONE;\n    }\n    /**\n     * @returns whether the end marker is drawn\n     */\n    isMarkerEnd() {\n        return (this.style?.endArrow ?? NONE) !== NONE;\n    }\n}\nexport default ArrowConnectorShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as monaco from 'monaco-editor';\n\n// Определяем язык VHDL\nmonaco.languages.register({\n  id: 'vhdl'\n});\n\n// Определяем подсветку синтаксиса\nmonaco.languages.setMonarchTokensProvider('vhdl', {\n  keywords: ['library', 'use', 'entity', 'architecture', 'is', 'port', 'in', 'out', 'begin', 'end', 'signal', 'process', 'if', 'then', 'else', 'elsif', 'case', 'when', 'loop', 'while', 'for', 'generate', 'component', 'generic', 'map', 'report', 'severity'],\n  operators: ['<=', '=>', '=', '/=', '<', '<=', '>', '>=', '+', '-', '*', '/', '&', '|', 'and', 'or', 'not'],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [\n    // Ключевые слова\n    [/\\b(?:library|use|entity|architecture|is|port|in|out|begin|end|signal|process|if|then|else|elsif|case|when|loop|while|for|generate|component|generic|map|report|severity)\\b/, 'keyword'],\n    // Литералы\n    [/\\b\\d+(\\.\\d+)?([eE][\\-+]?\\d+)?\\b/, 'number'],\n    // Комментарии\n    [/--.*/, 'comment'],\n    // Операторы\n    [/[=><!~?:&|+\\-*\\/\\^%]+/, 'operator'],\n    // Идентификаторы\n    [/\\b[a-zA-Z_][a-zA-Z0-9_]*\\b/, 'identifier'],\n    // Строки\n    [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n    // Неполная строка\n    [/\"([^\"\\\\]|\\\\.)*\"/, 'string']]\n  }\n});","map":{"version":3,"names":["monaco","languages","register","id","setMonarchTokensProvider","keywords","operators","symbols","tokenizer","root"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/monaco-vhdl.js"],"sourcesContent":["import * as monaco from 'monaco-editor';\r\n\r\n// Определяем язык VHDL\r\nmonaco.languages.register({ id: 'vhdl' });\r\n\r\n// Определяем подсветку синтаксиса\r\nmonaco.languages.setMonarchTokensProvider('vhdl', {\r\n  keywords: [\r\n    'library', 'use', 'entity', 'architecture', 'is', 'port', 'in', 'out',\r\n    'begin', 'end', 'signal', 'process', 'if', 'then', 'else', 'elsif', \r\n    'case', 'when', 'loop', 'while', 'for', 'generate', 'component', \r\n    'generic', 'map', 'report', 'severity'\r\n  ],\r\n  operators: [\r\n    '<=', '=>', '=', '/=', '<', '<=', '>', '>=', '+', '-', '*', '/', '&', '|', 'and', 'or', 'not'\r\n  ],\r\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n  tokenizer: {\r\n    root: [\r\n      // Ключевые слова\r\n      [/\\b(?:library|use|entity|architecture|is|port|in|out|begin|end|signal|process|if|then|else|elsif|case|when|loop|while|for|generate|component|generic|map|report|severity)\\b/, 'keyword'],\r\n      // Литералы\r\n      [/\\b\\d+(\\.\\d+)?([eE][\\-+]?\\d+)?\\b/, 'number'],\r\n      // Комментарии\r\n      [/--.*/, 'comment'],\r\n      // Операторы\r\n      [/[=><!~?:&|+\\-*\\/\\^%]+/, 'operator'],\r\n      // Идентификаторы\r\n      [/\\b[a-zA-Z_][a-zA-Z0-9_]*\\b/, 'identifier'],\r\n      // Строки\r\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // Неполная строка\r\n      [/\"([^\"\\\\]|\\\\.)*\"/, 'string'],\r\n    ],\r\n  },\r\n});\r\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,eAAe;;AAEvC;AACAA,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC;EAAEC,EAAE,EAAE;AAAO,CAAC,CAAC;;AAEzC;AACAH,MAAM,CAACC,SAAS,CAACG,wBAAwB,CAAC,MAAM,EAAE;EAChDC,QAAQ,EAAE,CACR,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EACrE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAClE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,WAAW,EAC/D,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,CACvC;EACDC,SAAS,EAAE,CACT,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAC9F;EACDC,OAAO,EAAE,uBAAuB;EAChCC,SAAS,EAAE;IACTC,IAAI,EAAE;IACJ;IACA,CAAC,4KAA4K,EAAE,SAAS,CAAC;IACzL;IACA,CAAC,iCAAiC,EAAE,QAAQ,CAAC;IAC7C;IACA,CAAC,MAAM,EAAE,SAAS,CAAC;IACnB;IACA,CAAC,uBAAuB,EAAE,UAAU,CAAC;IACrC;IACA,CAAC,4BAA4B,EAAE,YAAY,CAAC;IAC5C;IACA,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;IAAE;IACvC,CAAC,iBAAiB,EAAE,QAAQ,CAAC;EAEjC;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
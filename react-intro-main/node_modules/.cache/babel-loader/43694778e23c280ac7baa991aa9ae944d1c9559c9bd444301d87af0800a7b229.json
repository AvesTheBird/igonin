{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, append, getWindow, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { Sash } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nconst defaultStyles = {\n  separatorBorder: Color.transparent\n};\nclass ViewItem {\n  set size(size) {\n    this._size = size;\n  }\n  get size() {\n    return this._size;\n  }\n  get visible() {\n    return typeof this._cachedVisibleSize === 'undefined';\n  }\n  setVisible(visible, size) {\n    if (visible === this.visible) {\n      return;\n    }\n    if (visible) {\n      this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n      this._cachedVisibleSize = undefined;\n    } else {\n      this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n      this.size = 0;\n    }\n    this.container.classList.toggle('visible', visible);\n    try {\n      var _this$view$setVisible, _this$view;\n      (_this$view$setVisible = (_this$view = this.view).setVisible) === null || _this$view$setVisible === void 0 || _this$view$setVisible.call(_this$view, visible);\n    } catch (e) {\n      console.error('Splitview: Failed to set visible view');\n      console.error(e);\n    }\n  }\n  get minimumSize() {\n    return this.visible ? this.view.minimumSize : 0;\n  }\n  get viewMinimumSize() {\n    return this.view.minimumSize;\n  }\n  get maximumSize() {\n    return this.visible ? this.view.maximumSize : 0;\n  }\n  get viewMaximumSize() {\n    return this.view.maximumSize;\n  }\n  get priority() {\n    return this.view.priority;\n  }\n  get proportionalLayout() {\n    var _this$view$proportion;\n    return (_this$view$proportion = this.view.proportionalLayout) !== null && _this$view$proportion !== void 0 ? _this$view$proportion : true;\n  }\n  get snap() {\n    return !!this.view.snap;\n  }\n  set enabled(enabled) {\n    this.container.style.pointerEvents = enabled ? '' : 'none';\n  }\n  constructor(container, view, size, disposable) {\n    this.container = container;\n    this.view = view;\n    this.disposable = disposable;\n    this._cachedVisibleSize = undefined;\n    if (typeof size === 'number') {\n      this._size = size;\n      this._cachedVisibleSize = undefined;\n      container.classList.add('visible');\n    } else {\n      this._size = 0;\n      this._cachedVisibleSize = size.cachedVisibleSize;\n    }\n  }\n  layout(offset, layoutContext) {\n    this.layoutContainer(offset);\n    try {\n      this.view.layout(this.size, offset, layoutContext);\n    } catch (e) {\n      console.error('Splitview: Failed to layout view');\n      console.error(e);\n    }\n  }\n  dispose() {\n    this.disposable.dispose();\n  }\n}\nclass VerticalViewItem extends ViewItem {\n  layoutContainer(offset) {\n    this.container.style.top = \"\".concat(offset, \"px\");\n    this.container.style.height = \"\".concat(this.size, \"px\");\n  }\n}\nclass HorizontalViewItem extends ViewItem {\n  layoutContainer(offset) {\n    this.container.style.left = \"\".concat(offset, \"px\");\n    this.container.style.width = \"\".concat(this.size, \"px\");\n  }\n}\nvar State;\n(function (State) {\n  State[State[\"Idle\"] = 0] = \"Idle\";\n  State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\nexport var Sizing;\n(function (Sizing) {\n  /**\n   * When adding or removing views, distribute the delta space among\n   * all other views.\n   */\n  Sizing.Distribute = {\n    type: 'distribute'\n  };\n  /**\n   * When adding or removing views, split the delta space with another\n   * specific view, indexed by the provided `index`.\n   */\n  function Split(index) {\n    return {\n      type: 'split',\n      index\n    };\n  }\n  Sizing.Split = Split;\n  /**\n   * When adding a view, use DistributeSizing when all pre-existing views are\n   * distributed evenly, otherwise use SplitSizing.\n   */\n  function Auto(index) {\n    return {\n      type: 'auto',\n      index\n    };\n  }\n  Sizing.Auto = Auto;\n  /**\n   * When adding or removing views, assume the view is invisible.\n   */\n  function Invisible(cachedVisibleSize) {\n    return {\n      type: 'invisible',\n      cachedVisibleSize\n    };\n  }\n  Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\nexport class SplitView extends Disposable {\n  get orthogonalStartSash() {\n    return this._orthogonalStartSash;\n  }\n  get orthogonalEndSash() {\n    return this._orthogonalEndSash;\n  }\n  get startSnappingEnabled() {\n    return this._startSnappingEnabled;\n  }\n  get endSnappingEnabled() {\n    return this._endSnappingEnabled;\n  }\n  /**\n   * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n   * located at the left- or top-most side of the SplitView.\n   * Corner sashes will be created automatically at the intersections.\n   */\n  set orthogonalStartSash(sash) {\n    for (const sashItem of this.sashItems) {\n      sashItem.sash.orthogonalStartSash = sash;\n    }\n    this._orthogonalStartSash = sash;\n  }\n  /**\n   * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n   * located at the right- or bottom-most side of the SplitView.\n   * Corner sashes will be created automatically at the intersections.\n   */\n  set orthogonalEndSash(sash) {\n    for (const sashItem of this.sashItems) {\n      sashItem.sash.orthogonalEndSash = sash;\n    }\n    this._orthogonalEndSash = sash;\n  }\n  /**\n   * Enable/disable snapping at the beginning of this {@link SplitView}.\n   */\n  set startSnappingEnabled(startSnappingEnabled) {\n    if (this._startSnappingEnabled === startSnappingEnabled) {\n      return;\n    }\n    this._startSnappingEnabled = startSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  /**\n   * Enable/disable snapping at the end of this {@link SplitView}.\n   */\n  set endSnappingEnabled(endSnappingEnabled) {\n    if (this._endSnappingEnabled === endSnappingEnabled) {\n      return;\n    }\n    this._endSnappingEnabled = endSnappingEnabled;\n    this.updateSashEnablement();\n  }\n  /**\n   * Create a new {@link SplitView} instance.\n   */\n  constructor(container) {\n    var _options$orientation, _options$inverseAltBe, _options$proportional, _options$scrollbarVis, _options$scrollbarVis2;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.size = 0;\n    this._contentSize = 0;\n    this.proportions = undefined;\n    this.viewItems = [];\n    this.sashItems = []; // used in tests\n    this.state = State.Idle;\n    this._onDidSashChange = this._register(new Emitter());\n    this._onDidSashReset = this._register(new Emitter());\n    this._startSnappingEnabled = true;\n    this._endSnappingEnabled = true;\n    /**\n     * Fires whenever the user resizes a {@link Sash sash}.\n     */\n    this.onDidSashChange = this._onDidSashChange.event;\n    /**\n     * Fires whenever the user double clicks a {@link Sash sash}.\n     */\n    this.onDidSashReset = this._onDidSashReset.event;\n    this.orientation = (_options$orientation = options.orientation) !== null && _options$orientation !== void 0 ? _options$orientation : 0 /* Orientation.VERTICAL */;\n    this.inverseAltBehavior = (_options$inverseAltBe = options.inverseAltBehavior) !== null && _options$inverseAltBe !== void 0 ? _options$inverseAltBe : false;\n    this.proportionalLayout = (_options$proportional = options.proportionalLayout) !== null && _options$proportional !== void 0 ? _options$proportional : true;\n    this.getSashOrthogonalSize = options.getSashOrthogonalSize;\n    this.el = document.createElement('div');\n    this.el.classList.add('monaco-split-view2');\n    this.el.classList.add(this.orientation === 0 /* Orientation.VERTICAL */ ? 'vertical' : 'horizontal');\n    container.appendChild(this.el);\n    this.sashContainer = append(this.el, $('.sash-container'));\n    this.viewContainer = $('.split-view-container');\n    this.scrollable = this._register(new Scrollable({\n      forceIntegerValues: true,\n      smoothScrollDuration: 125,\n      scheduleAtNextAnimationFrame: callback => scheduleAtNextAnimationFrame(getWindow(this.el), callback)\n    }));\n    this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n      vertical: this.orientation === 0 /* Orientation.VERTICAL */ ? (_options$scrollbarVis = options.scrollbarVisibility) !== null && _options$scrollbarVis !== void 0 ? _options$scrollbarVis : 1 /* ScrollbarVisibility.Auto */ : 2 /* ScrollbarVisibility.Hidden */,\n      horizontal: this.orientation === 1 /* Orientation.HORIZONTAL */ ? (_options$scrollbarVis2 = options.scrollbarVisibility) !== null && _options$scrollbarVis2 !== void 0 ? _options$scrollbarVis2 : 1 /* ScrollbarVisibility.Auto */ : 2 /* ScrollbarVisibility.Hidden */\n    }, this.scrollable));\n    // https://github.com/microsoft/vscode/issues/157737\n    const onDidScrollViewContainer = this._register(new DomEmitter(this.viewContainer, 'scroll')).event;\n    this._register(onDidScrollViewContainer(_ => {\n      const position = this.scrollableElement.getScrollPosition();\n      const scrollLeft = Math.abs(this.viewContainer.scrollLeft - position.scrollLeft) <= 1 ? undefined : this.viewContainer.scrollLeft;\n      const scrollTop = Math.abs(this.viewContainer.scrollTop - position.scrollTop) <= 1 ? undefined : this.viewContainer.scrollTop;\n      if (scrollLeft !== undefined || scrollTop !== undefined) {\n        this.scrollableElement.setScrollPosition({\n          scrollLeft,\n          scrollTop\n        });\n      }\n    }));\n    this.onDidScroll = this.scrollableElement.onScroll;\n    this._register(this.onDidScroll(e => {\n      if (e.scrollTopChanged) {\n        this.viewContainer.scrollTop = e.scrollTop;\n      }\n      if (e.scrollLeftChanged) {\n        this.viewContainer.scrollLeft = e.scrollLeft;\n      }\n    }));\n    append(this.el, this.scrollableElement.getDomNode());\n    this.style(options.styles || defaultStyles);\n    // We have an existing set of view, add them now\n    if (options.descriptor) {\n      this.size = options.descriptor.size;\n      options.descriptor.views.forEach((viewDescriptor, index) => {\n        const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : {\n          type: 'invisible',\n          cachedVisibleSize: viewDescriptor.size\n        };\n        const view = viewDescriptor.view;\n        this.doAddView(view, sizing, index, true);\n      });\n      // Initialize content size and proportions for first layout\n      this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n      this.saveProportions();\n    }\n  }\n  style(styles) {\n    if (styles.separatorBorder.isTransparent()) {\n      this.el.classList.remove('separator-border');\n      this.el.style.removeProperty('--separator-border');\n    } else {\n      this.el.classList.add('separator-border');\n      this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n    }\n  }\n  /**\n   * Add a {@link IView view} to this {@link SplitView}.\n   *\n   * @param view The view to add.\n   * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n   * @param index The index to insert the view on.\n   * @param skipLayout Whether layout should be skipped.\n   */\n  addView(view, size) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.length;\n    let skipLayout = arguments.length > 3 ? arguments[3] : undefined;\n    this.doAddView(view, size, index, skipLayout);\n  }\n  /**\n   * Layout the {@link SplitView}.\n   *\n   * @param size The entire size of the {@link SplitView}.\n   * @param layoutContext An optional layout context to pass along to {@link IView views}.\n   */\n  layout(size, layoutContext) {\n    const previousSize = Math.max(this.size, this._contentSize);\n    this.size = size;\n    this.layoutContext = layoutContext;\n    if (!this.proportions) {\n      const indexes = range(this.viewItems.length);\n      const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n      const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n      this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    } else {\n      let total = 0;\n      for (let i = 0; i < this.viewItems.length; i++) {\n        const item = this.viewItems[i];\n        const proportion = this.proportions[i];\n        if (typeof proportion === 'number') {\n          total += proportion;\n        } else {\n          size -= item.size;\n        }\n      }\n      for (let i = 0; i < this.viewItems.length; i++) {\n        const item = this.viewItems[i];\n        const proportion = this.proportions[i];\n        if (typeof proportion === 'number' && total > 0) {\n          item.size = clamp(Math.round(proportion * size / total), item.minimumSize, item.maximumSize);\n        }\n      }\n    }\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n  saveProportions() {\n    if (this.proportionalLayout && this._contentSize > 0) {\n      this.proportions = this.viewItems.map(v => v.proportionalLayout && v.visible ? v.size / this._contentSize : undefined);\n    }\n  }\n  onSashStart(_ref) {\n    let {\n      sash,\n      start,\n      alt\n    } = _ref;\n    for (const item of this.viewItems) {\n      item.enabled = false;\n    }\n    const index = this.sashItems.findIndex(item => item.sash === sash);\n    // This way, we can press Alt while we resize a sash, macOS style!\n    const disposable = combinedDisposable(addDisposableListener(this.el.ownerDocument.body, 'keydown', e => resetSashDragState(this.sashDragState.current, e.altKey)), addDisposableListener(this.el.ownerDocument.body, 'keyup', () => resetSashDragState(this.sashDragState.current, false)));\n    const resetSashDragState = (start, alt) => {\n      const sizes = this.viewItems.map(i => i.size);\n      let minDelta = Number.NEGATIVE_INFINITY;\n      let maxDelta = Number.POSITIVE_INFINITY;\n      if (this.inverseAltBehavior) {\n        alt = !alt;\n      }\n      if (alt) {\n        // When we're using the last sash with Alt, we're resizing\n        // the view to the left/up, instead of right/down as usual\n        // Thus, we must do the inverse of the usual\n        const isLastSash = index === this.sashItems.length - 1;\n        if (isLastSash) {\n          const viewItem = this.viewItems[index];\n          minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n          maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n        } else {\n          const viewItem = this.viewItems[index + 1];\n          minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n          maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n        }\n      }\n      let snapBefore;\n      let snapAfter;\n      if (!alt) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        if (typeof snapBeforeIndex === 'number') {\n          const viewItem = this.viewItems[snapBeforeIndex];\n          const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n          snapBefore = {\n            index: snapBeforeIndex,\n            limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n            size: viewItem.size\n          };\n        }\n        if (typeof snapAfterIndex === 'number') {\n          const viewItem = this.viewItems[snapAfterIndex];\n          const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n          snapAfter = {\n            index: snapAfterIndex,\n            limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n            size: viewItem.size\n          };\n        }\n      }\n      this.sashDragState = {\n        start,\n        current: start,\n        index,\n        sizes,\n        minDelta,\n        maxDelta,\n        alt,\n        snapBefore,\n        snapAfter,\n        disposable\n      };\n    };\n    resetSashDragState(start, alt);\n  }\n  onSashChange(_ref2) {\n    let {\n      current\n    } = _ref2;\n    const {\n      index,\n      start,\n      sizes,\n      alt,\n      minDelta,\n      maxDelta,\n      snapBefore,\n      snapAfter\n    } = this.sashDragState;\n    this.sashDragState.current = current;\n    const delta = current - start;\n    const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n    if (alt) {\n      const isLastSash = index === this.sashItems.length - 1;\n      const newSizes = this.viewItems.map(i => i.size);\n      const viewItemIndex = isLastSash ? index : index + 1;\n      const viewItem = this.viewItems[viewItemIndex];\n      const newMinDelta = viewItem.size - viewItem.maximumSize;\n      const newMaxDelta = viewItem.size - viewItem.minimumSize;\n      const resizeIndex = isLastSash ? index - 1 : index + 1;\n      this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n    }\n    this.distributeEmptySpace();\n    this.layoutViews();\n  }\n  onSashEnd(index) {\n    this._onDidSashChange.fire(index);\n    this.sashDragState.disposable.dispose();\n    this.saveProportions();\n    for (const item of this.viewItems) {\n      item.enabled = true;\n    }\n  }\n  onViewChange(item, size) {\n    const index = this.viewItems.indexOf(item);\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n    size = typeof size === 'number' ? size : item.size;\n    size = clamp(size, item.minimumSize, item.maximumSize);\n    if (this.inverseAltBehavior && index > 0) {\n      // In this case, we want the view to grow or shrink both sides equally\n      // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n      this.resize(index - 1, Math.floor((item.size - size) / 2));\n      this.distributeEmptySpace();\n      this.layoutViews();\n    } else {\n      item.size = size;\n      this.relayout([index], undefined);\n    }\n  }\n  /**\n   * Resize a {@link IView view} within the {@link SplitView}.\n   *\n   * @param index The {@link IView view} index.\n   * @param size The {@link IView view} size.\n   */\n  resizeView(index, size) {\n    if (index < 0 || index >= this.viewItems.length) {\n      return;\n    }\n    if (this.state !== State.Idle) {\n      throw new Error('Cant modify splitview');\n    }\n    this.state = State.Busy;\n    try {\n      const indexes = range(this.viewItems.length).filter(i => i !== index);\n      const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */), index];\n      const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n      const item = this.viewItems[index];\n      size = Math.round(size);\n      size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n      item.size = size;\n      this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    } finally {\n      this.state = State.Idle;\n    }\n  }\n  /**\n   * Distribute the entire {@link SplitView} size among all {@link IView views}.\n   */\n  distributeViewSizes() {\n    const flexibleViewItems = [];\n    let flexibleSize = 0;\n    for (const item of this.viewItems) {\n      if (item.maximumSize - item.minimumSize > 0) {\n        flexibleViewItems.push(item);\n        flexibleSize += item.size;\n      }\n    }\n    const size = Math.floor(flexibleSize / flexibleViewItems.length);\n    for (const item of flexibleViewItems) {\n      item.size = clamp(size, item.minimumSize, item.maximumSize);\n    }\n    const indexes = range(this.viewItems.length);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n    this.relayout(lowPriorityIndexes, highPriorityIndexes);\n  }\n  /**\n   * Returns the size of a {@link IView view}.\n   */\n  getViewSize(index) {\n    if (index < 0 || index >= this.viewItems.length) {\n      return -1;\n    }\n    return this.viewItems[index].size;\n  }\n  doAddView(view, size) {\n    let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.length;\n    let skipLayout = arguments.length > 3 ? arguments[3] : undefined;\n    if (this.state !== State.Idle) {\n      throw new Error('Cant modify splitview');\n    }\n    this.state = State.Busy;\n    try {\n      // Add view\n      const container = $('.split-view-view');\n      if (index === this.viewItems.length) {\n        this.viewContainer.appendChild(container);\n      } else {\n        this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n      }\n      const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n      const containerDisposable = toDisposable(() => container.remove());\n      const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n      let viewSize;\n      if (typeof size === 'number') {\n        viewSize = size;\n      } else {\n        if (size.type === 'auto') {\n          if (this.areViewsDistributed()) {\n            size = {\n              type: 'distribute'\n            };\n          } else {\n            size = {\n              type: 'split',\n              index: size.index\n            };\n          }\n        }\n        if (size.type === 'split') {\n          viewSize = this.getViewSize(size.index) / 2;\n        } else if (size.type === 'invisible') {\n          viewSize = {\n            cachedVisibleSize: size.cachedVisibleSize\n          };\n        } else {\n          viewSize = view.minimumSize;\n        }\n      }\n      const item = this.orientation === 0 /* Orientation.VERTICAL */ ? new VerticalViewItem(container, view, viewSize, disposable) : new HorizontalViewItem(container, view, viewSize, disposable);\n      this.viewItems.splice(index, 0, item);\n      // Add sash\n      if (this.viewItems.length > 1) {\n        const opts = {\n          orthogonalStartSash: this.orthogonalStartSash,\n          orthogonalEndSash: this.orthogonalEndSash\n        };\n        const sash = this.orientation === 0 /* Orientation.VERTICAL */ ? new Sash(this.sashContainer, {\n          getHorizontalSashTop: s => this.getSashPosition(s),\n          getHorizontalSashWidth: this.getSashOrthogonalSize\n        }, {\n          ...opts,\n          orientation: 1 /* Orientation.HORIZONTAL */\n        }) : new Sash(this.sashContainer, {\n          getVerticalSashLeft: s => this.getSashPosition(s),\n          getVerticalSashHeight: this.getSashOrthogonalSize\n        }, {\n          ...opts,\n          orientation: 0 /* Orientation.VERTICAL */\n        });\n        const sashEventMapper = this.orientation === 0 /* Orientation.VERTICAL */ ? e => ({\n          sash,\n          start: e.startY,\n          current: e.currentY,\n          alt: e.altKey\n        }) : e => ({\n          sash,\n          start: e.startX,\n          current: e.currentX,\n          alt: e.altKey\n        });\n        const onStart = Event.map(sash.onDidStart, sashEventMapper);\n        const onStartDisposable = onStart(this.onSashStart, this);\n        const onChange = Event.map(sash.onDidChange, sashEventMapper);\n        const onChangeDisposable = onChange(this.onSashChange, this);\n        const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n        const onEndDisposable = onEnd(this.onSashEnd, this);\n        const onDidResetDisposable = sash.onDidReset(() => {\n          const index = this.sashItems.findIndex(item => item.sash === sash);\n          const upIndexes = range(index, -1);\n          const downIndexes = range(index + 1, this.viewItems.length);\n          const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n          const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n          if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n            return;\n          }\n          if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n            return;\n          }\n          this._onDidSashReset.fire(index);\n        });\n        const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n        const sashItem = {\n          sash,\n          disposable\n        };\n        this.sashItems.splice(index - 1, 0, sashItem);\n      }\n      container.appendChild(view.element);\n      let highPriorityIndexes;\n      if (typeof size !== 'number' && size.type === 'split') {\n        highPriorityIndexes = [size.index];\n      }\n      if (!skipLayout) {\n        this.relayout([index], highPriorityIndexes);\n      }\n      if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n        this.distributeViewSizes();\n      }\n    } finally {\n      this.state = State.Idle;\n    }\n  }\n  relayout(lowPriorityIndexes, highPriorityIndexes) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n    this.distributeEmptySpace();\n    this.layoutViews();\n    this.saveProportions();\n  }\n  resize(index, delta) {\n    let sizes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.viewItems.map(i => i.size);\n    let lowPriorityIndexes = arguments.length > 3 ? arguments[3] : undefined;\n    let highPriorityIndexes = arguments.length > 4 ? arguments[4] : undefined;\n    let overloadMinDelta = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Number.NEGATIVE_INFINITY;\n    let overloadMaxDelta = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Number.POSITIVE_INFINITY;\n    let snapBefore = arguments.length > 7 ? arguments[7] : undefined;\n    let snapAfter = arguments.length > 8 ? arguments[8] : undefined;\n    if (index < 0 || index >= this.viewItems.length) {\n      return 0;\n    }\n    const upIndexes = range(index, -1);\n    const downIndexes = range(index + 1, this.viewItems.length);\n    if (highPriorityIndexes) {\n      for (const index of highPriorityIndexes) {\n        pushToStart(upIndexes, index);\n        pushToStart(downIndexes, index);\n      }\n    }\n    if (lowPriorityIndexes) {\n      for (const index of lowPriorityIndexes) {\n        pushToEnd(upIndexes, index);\n        pushToEnd(downIndexes, index);\n      }\n    }\n    const upItems = upIndexes.map(i => this.viewItems[i]);\n    const upSizes = upIndexes.map(i => sizes[i]);\n    const downItems = downIndexes.map(i => this.viewItems[i]);\n    const downSizes = downIndexes.map(i => sizes[i]);\n    const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n    const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n    const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n    const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n    const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n    const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n    let snapped = false;\n    if (snapBefore) {\n      const snapView = this.viewItems[snapBefore.index];\n      const visible = delta >= snapBefore.limitDelta;\n      snapped = visible !== snapView.visible;\n      snapView.setVisible(visible, snapBefore.size);\n    }\n    if (!snapped && snapAfter) {\n      const snapView = this.viewItems[snapAfter.index];\n      const visible = delta < snapAfter.limitDelta;\n      snapped = visible !== snapView.visible;\n      snapView.setVisible(visible, snapAfter.size);\n    }\n    if (snapped) {\n      return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n    }\n    delta = clamp(delta, minDelta, maxDelta);\n    for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n      const item = upItems[i];\n      const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n      const viewDelta = size - upSizes[i];\n      deltaUp -= viewDelta;\n      item.size = size;\n    }\n    for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n      const item = downItems[i];\n      const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n      const viewDelta = size - downSizes[i];\n      deltaDown += viewDelta;\n      item.size = size;\n    }\n    return delta;\n  }\n  distributeEmptySpace(lowPriorityIndex) {\n    const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    let emptyDelta = this.size - contentSize;\n    const indexes = range(this.viewItems.length - 1, -1);\n    const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n    const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n    for (const index of highPriorityIndexes) {\n      pushToStart(indexes, index);\n    }\n    for (const index of lowPriorityIndexes) {\n      pushToEnd(indexes, index);\n    }\n    if (typeof lowPriorityIndex === 'number') {\n      pushToEnd(indexes, lowPriorityIndex);\n    }\n    for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n      const item = this.viewItems[indexes[i]];\n      const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n      const viewDelta = size - item.size;\n      emptyDelta -= viewDelta;\n      item.size = size;\n    }\n  }\n  layoutViews() {\n    // Save new content size\n    this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n    // Layout views\n    let offset = 0;\n    for (const viewItem of this.viewItems) {\n      viewItem.layout(offset, this.layoutContext);\n      offset += viewItem.size;\n    }\n    // Layout sashes\n    this.sashItems.forEach(item => item.sash.layout());\n    this.updateSashEnablement();\n    this.updateScrollableElement();\n  }\n  updateScrollableElement() {\n    if (this.orientation === 0 /* Orientation.VERTICAL */) {\n      this.scrollableElement.setScrollDimensions({\n        height: this.size,\n        scrollHeight: this._contentSize\n      });\n    } else {\n      this.scrollableElement.setScrollDimensions({\n        width: this.size,\n        scrollWidth: this._contentSize\n      });\n    }\n  }\n  updateSashEnablement() {\n    let previous = false;\n    const collapsesDown = this.viewItems.map(i => previous = i.size - i.minimumSize > 0 || previous);\n    previous = false;\n    const expandsDown = this.viewItems.map(i => previous = i.maximumSize - i.size > 0 || previous);\n    const reverseViews = [...this.viewItems].reverse();\n    previous = false;\n    const collapsesUp = reverseViews.map(i => previous = i.size - i.minimumSize > 0 || previous).reverse();\n    previous = false;\n    const expandsUp = reverseViews.map(i => previous = i.maximumSize - i.size > 0 || previous).reverse();\n    let position = 0;\n    for (let index = 0; index < this.sashItems.length; index++) {\n      const {\n        sash\n      } = this.sashItems[index];\n      const viewItem = this.viewItems[index];\n      position += viewItem.size;\n      const min = !(collapsesDown[index] && expandsUp[index + 1]);\n      const max = !(expandsDown[index] && collapsesUp[index + 1]);\n      if (min && max) {\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n        const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n        const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n        const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n        if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n          sash.state = 1 /* SashState.AtMinimum */;\n        } else if (snappedAfter && collapsesDown[index] && (position < this._contentSize || this.endSnappingEnabled)) {\n          sash.state = 2 /* SashState.AtMaximum */;\n        } else {\n          sash.state = 0 /* SashState.Disabled */;\n        }\n      } else if (min && !max) {\n        sash.state = 1 /* SashState.AtMinimum */;\n      } else if (!min && max) {\n        sash.state = 2 /* SashState.AtMaximum */;\n      } else {\n        sash.state = 3 /* SashState.Enabled */;\n      }\n    }\n  }\n  getSashPosition(sash) {\n    let position = 0;\n    for (let i = 0; i < this.sashItems.length; i++) {\n      position += this.viewItems[i].size;\n      if (this.sashItems[i].sash === sash) {\n        return position;\n      }\n    }\n    return 0;\n  }\n  findFirstSnapIndex(indexes) {\n    // visible views first\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n      if (!viewItem.visible) {\n        continue;\n      }\n      if (viewItem.snap) {\n        return index;\n      }\n    }\n    // then, hidden views\n    for (const index of indexes) {\n      const viewItem = this.viewItems[index];\n      if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n        return undefined;\n      }\n      if (!viewItem.visible && viewItem.snap) {\n        return index;\n      }\n    }\n    return undefined;\n  }\n  areViewsDistributed() {\n    let min = undefined,\n      max = undefined;\n    for (const view of this.viewItems) {\n      min = min === undefined ? view.size : Math.min(min, view.size);\n      max = max === undefined ? view.size : Math.max(max, view.size);\n      if (max - min > 2) {\n        return false;\n      }\n    }\n    return true;\n  }\n  dispose() {\n    var _this$sashDragState;\n    (_this$sashDragState = this.sashDragState) === null || _this$sashDragState === void 0 || _this$sashDragState.disposable.dispose();\n    dispose(this.viewItems);\n    this.viewItems = [];\n    this.sashItems.forEach(i => i.disposable.dispose());\n    this.sashItems = [];\n    super.dispose();\n  }\n}","map":{"version":3,"names":["$","addDisposableListener","append","getWindow","scheduleAtNextAnimationFrame","DomEmitter","Sash","SmoothScrollableElement","pushToEnd","pushToStart","range","Color","Emitter","Event","combinedDisposable","Disposable","dispose","toDisposable","clamp","Scrollable","types","defaultStyles","separatorBorder","transparent","ViewItem","size","_size","visible","_cachedVisibleSize","setVisible","viewMinimumSize","viewMaximumSize","undefined","container","classList","toggle","_this$view$setVisible","_this$view","view","call","e","console","error","minimumSize","maximumSize","priority","proportionalLayout","_this$view$proportion","snap","enabled","style","pointerEvents","constructor","disposable","add","cachedVisibleSize","layout","offset","layoutContext","layoutContainer","VerticalViewItem","top","concat","height","HorizontalViewItem","left","width","State","Sizing","Distribute","type","Split","index","Auto","Invisible","SplitView","orthogonalStartSash","_orthogonalStartSash","orthogonalEndSash","_orthogonalEndSash","startSnappingEnabled","_startSnappingEnabled","endSnappingEnabled","_endSnappingEnabled","sash","sashItem","sashItems","updateSashEnablement","_options$orientation","_options$inverseAltBe","_options$proportional","_options$scrollbarVis","_options$scrollbarVis2","options","arguments","length","_contentSize","proportions","viewItems","state","Idle","_onDidSashChange","_register","_onDidSashReset","onDidSashChange","event","onDidSashReset","orientation","inverseAltBehavior","getSashOrthogonalSize","el","document","createElement","appendChild","sashContainer","viewContainer","scrollable","forceIntegerValues","smoothScrollDuration","callback","scrollableElement","vertical","scrollbarVisibility","horizontal","onDidScrollViewContainer","_","position","getScrollPosition","scrollLeft","Math","abs","scrollTop","setScrollPosition","onDidScroll","onScroll","scrollTopChanged","scrollLeftChanged","getDomNode","styles","descriptor","views","forEach","viewDescriptor","sizing","isUndefined","doAddView","reduce","r","i","saveProportions","isTransparent","remove","removeProperty","setProperty","toString","addView","skipLayout","previousSize","max","indexes","lowPriorityIndexes","filter","highPriorityIndexes","resize","total","item","proportion","round","distributeEmptySpace","layoutViews","map","v","onSashStart","_ref","start","alt","findIndex","ownerDocument","body","resetSashDragState","sashDragState","current","altKey","sizes","minDelta","Number","NEGATIVE_INFINITY","maxDelta","POSITIVE_INFINITY","isLastSash","viewItem","snapBefore","snapAfter","upIndexes","downIndexes","minDeltaUp","maxDeltaUp","maxDeltaDown","minDeltaDown","min","snapBeforeIndex","findFirstSnapIndex","snapAfterIndex","halfSize","floor","limitDelta","onSashChange","_ref2","delta","newDelta","newSizes","viewItemIndex","newMinDelta","newMaxDelta","resizeIndex","onSashEnd","fire","onViewChange","indexOf","relayout","resizeView","Error","Busy","distributeViewSizes","flexibleViewItems","flexibleSize","push","getViewSize","insertBefore","children","onChangeDisposable","onDidChange","containerDisposable","viewSize","areViewsDistributed","splice","opts","getHorizontalSashTop","s","getSashPosition","getHorizontalSashWidth","getVerticalSashLeft","getVerticalSashHeight","sashEventMapper","startY","currentY","startX","currentX","onStart","onDidStart","onStartDisposable","onChange","onEnd","onDidEnd","onEndDisposable","onDidResetDisposable","onDidReset","element","contentSize","overloadMinDelta","overloadMaxDelta","upItems","upSizes","downItems","downSizes","snapped","snapView","deltaUp","viewDelta","deltaDown","lowPriorityIndex","emptyDelta","updateScrollableElement","setScrollDimensions","scrollHeight","scrollWidth","previous","collapsesDown","expandsDown","reverseViews","reverse","collapsesUp","expandsUp","snappedBefore","snappedAfter","_this$sashDragState"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/monaco-editor/esm/vs/base/browser/ui/splitview/splitview.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, addDisposableListener, append, getWindow, scheduleAtNextAnimationFrame } from '../../dom.js';\nimport { DomEmitter } from '../../event.js';\nimport { Sash } from '../sash/sash.js';\nimport { SmoothScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { pushToEnd, pushToStart, range } from '../../../common/arrays.js';\nimport { Color } from '../../../common/color.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { combinedDisposable, Disposable, dispose, toDisposable } from '../../../common/lifecycle.js';\nimport { clamp } from '../../../common/numbers.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nimport * as types from '../../../common/types.js';\nimport './splitview.css';\nconst defaultStyles = {\n    separatorBorder: Color.transparent\n};\nclass ViewItem {\n    set size(size) {\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    get visible() {\n        return typeof this._cachedVisibleSize === 'undefined';\n    }\n    setVisible(visible, size) {\n        if (visible === this.visible) {\n            return;\n        }\n        if (visible) {\n            this.size = clamp(this._cachedVisibleSize, this.viewMinimumSize, this.viewMaximumSize);\n            this._cachedVisibleSize = undefined;\n        }\n        else {\n            this._cachedVisibleSize = typeof size === 'number' ? size : this.size;\n            this.size = 0;\n        }\n        this.container.classList.toggle('visible', visible);\n        try {\n            this.view.setVisible?.(visible);\n        }\n        catch (e) {\n            console.error('Splitview: Failed to set visible view');\n            console.error(e);\n        }\n    }\n    get minimumSize() { return this.visible ? this.view.minimumSize : 0; }\n    get viewMinimumSize() { return this.view.minimumSize; }\n    get maximumSize() { return this.visible ? this.view.maximumSize : 0; }\n    get viewMaximumSize() { return this.view.maximumSize; }\n    get priority() { return this.view.priority; }\n    get proportionalLayout() { return this.view.proportionalLayout ?? true; }\n    get snap() { return !!this.view.snap; }\n    set enabled(enabled) {\n        this.container.style.pointerEvents = enabled ? '' : 'none';\n    }\n    constructor(container, view, size, disposable) {\n        this.container = container;\n        this.view = view;\n        this.disposable = disposable;\n        this._cachedVisibleSize = undefined;\n        if (typeof size === 'number') {\n            this._size = size;\n            this._cachedVisibleSize = undefined;\n            container.classList.add('visible');\n        }\n        else {\n            this._size = 0;\n            this._cachedVisibleSize = size.cachedVisibleSize;\n        }\n    }\n    layout(offset, layoutContext) {\n        this.layoutContainer(offset);\n        try {\n            this.view.layout(this.size, offset, layoutContext);\n        }\n        catch (e) {\n            console.error('Splitview: Failed to layout view');\n            console.error(e);\n        }\n    }\n    dispose() {\n        this.disposable.dispose();\n    }\n}\nclass VerticalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.top = `${offset}px`;\n        this.container.style.height = `${this.size}px`;\n    }\n}\nclass HorizontalViewItem extends ViewItem {\n    layoutContainer(offset) {\n        this.container.style.left = `${offset}px`;\n        this.container.style.width = `${this.size}px`;\n    }\n}\nvar State;\n(function (State) {\n    State[State[\"Idle\"] = 0] = \"Idle\";\n    State[State[\"Busy\"] = 1] = \"Busy\";\n})(State || (State = {}));\nexport var Sizing;\n(function (Sizing) {\n    /**\n     * When adding or removing views, distribute the delta space among\n     * all other views.\n     */\n    Sizing.Distribute = { type: 'distribute' };\n    /**\n     * When adding or removing views, split the delta space with another\n     * specific view, indexed by the provided `index`.\n     */\n    function Split(index) { return { type: 'split', index }; }\n    Sizing.Split = Split;\n    /**\n     * When adding a view, use DistributeSizing when all pre-existing views are\n     * distributed evenly, otherwise use SplitSizing.\n     */\n    function Auto(index) { return { type: 'auto', index }; }\n    Sizing.Auto = Auto;\n    /**\n     * When adding or removing views, assume the view is invisible.\n     */\n    function Invisible(cachedVisibleSize) { return { type: 'invisible', cachedVisibleSize }; }\n    Sizing.Invisible = Invisible;\n})(Sizing || (Sizing = {}));\n/**\n * The {@link SplitView} is the UI component which implements a one dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are essentially HTMLElement instances with the following size constraints:\n *\n * - {@link IView.minimumSize}\n * - {@link IView.maximumSize}\n * - {@link IView.priority}\n * - {@link IView.snap}\n *\n * In case the SplitView doesn't have enough size to fit all views, it will overflow\n * its content with a scrollbar.\n *\n * In between each pair of views there will be a {@link Sash} allowing the user\n * to resize the views, making sure the constraints are respected.\n *\n * An optional {@link TLayoutContext layout context type} may be used in order to\n * pass along layout contextual data from the {@link SplitView.layout} method down\n * to each view's {@link IView.layout} calls.\n *\n * Features:\n * - Flex-like layout algorithm\n * - Snap support\n * - Orthogonal sash support, for corner sashes\n * - View hide/show support\n * - View swap/move support\n * - Alt key modifier behavior, macOS style\n */\nexport class SplitView extends Disposable {\n    get orthogonalStartSash() { return this._orthogonalStartSash; }\n    get orthogonalEndSash() { return this._orthogonalEndSash; }\n    get startSnappingEnabled() { return this._startSnappingEnabled; }\n    get endSnappingEnabled() { return this._endSnappingEnabled; }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the left- or top-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalStartSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalStartSash = sash;\n        }\n        this._orthogonalStartSash = sash;\n    }\n    /**\n     * A reference to a sash, perpendicular to all sashes in this {@link SplitView},\n     * located at the right- or bottom-most side of the SplitView.\n     * Corner sashes will be created automatically at the intersections.\n     */\n    set orthogonalEndSash(sash) {\n        for (const sashItem of this.sashItems) {\n            sashItem.sash.orthogonalEndSash = sash;\n        }\n        this._orthogonalEndSash = sash;\n    }\n    /**\n     * Enable/disable snapping at the beginning of this {@link SplitView}.\n     */\n    set startSnappingEnabled(startSnappingEnabled) {\n        if (this._startSnappingEnabled === startSnappingEnabled) {\n            return;\n        }\n        this._startSnappingEnabled = startSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    /**\n     * Enable/disable snapping at the end of this {@link SplitView}.\n     */\n    set endSnappingEnabled(endSnappingEnabled) {\n        if (this._endSnappingEnabled === endSnappingEnabled) {\n            return;\n        }\n        this._endSnappingEnabled = endSnappingEnabled;\n        this.updateSashEnablement();\n    }\n    /**\n     * Create a new {@link SplitView} instance.\n     */\n    constructor(container, options = {}) {\n        super();\n        this.size = 0;\n        this._contentSize = 0;\n        this.proportions = undefined;\n        this.viewItems = [];\n        this.sashItems = []; // used in tests\n        this.state = State.Idle;\n        this._onDidSashChange = this._register(new Emitter());\n        this._onDidSashReset = this._register(new Emitter());\n        this._startSnappingEnabled = true;\n        this._endSnappingEnabled = true;\n        /**\n         * Fires whenever the user resizes a {@link Sash sash}.\n         */\n        this.onDidSashChange = this._onDidSashChange.event;\n        /**\n         * Fires whenever the user double clicks a {@link Sash sash}.\n         */\n        this.onDidSashReset = this._onDidSashReset.event;\n        this.orientation = options.orientation ?? 0 /* Orientation.VERTICAL */;\n        this.inverseAltBehavior = options.inverseAltBehavior ?? false;\n        this.proportionalLayout = options.proportionalLayout ?? true;\n        this.getSashOrthogonalSize = options.getSashOrthogonalSize;\n        this.el = document.createElement('div');\n        this.el.classList.add('monaco-split-view2');\n        this.el.classList.add(this.orientation === 0 /* Orientation.VERTICAL */ ? 'vertical' : 'horizontal');\n        container.appendChild(this.el);\n        this.sashContainer = append(this.el, $('.sash-container'));\n        this.viewContainer = $('.split-view-container');\n        this.scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration: 125,\n            scheduleAtNextAnimationFrame: callback => scheduleAtNextAnimationFrame(getWindow(this.el), callback),\n        }));\n        this.scrollableElement = this._register(new SmoothScrollableElement(this.viewContainer, {\n            vertical: this.orientation === 0 /* Orientation.VERTICAL */ ? (options.scrollbarVisibility ?? 1 /* ScrollbarVisibility.Auto */) : 2 /* ScrollbarVisibility.Hidden */,\n            horizontal: this.orientation === 1 /* Orientation.HORIZONTAL */ ? (options.scrollbarVisibility ?? 1 /* ScrollbarVisibility.Auto */) : 2 /* ScrollbarVisibility.Hidden */\n        }, this.scrollable));\n        // https://github.com/microsoft/vscode/issues/157737\n        const onDidScrollViewContainer = this._register(new DomEmitter(this.viewContainer, 'scroll')).event;\n        this._register(onDidScrollViewContainer(_ => {\n            const position = this.scrollableElement.getScrollPosition();\n            const scrollLeft = Math.abs(this.viewContainer.scrollLeft - position.scrollLeft) <= 1 ? undefined : this.viewContainer.scrollLeft;\n            const scrollTop = Math.abs(this.viewContainer.scrollTop - position.scrollTop) <= 1 ? undefined : this.viewContainer.scrollTop;\n            if (scrollLeft !== undefined || scrollTop !== undefined) {\n                this.scrollableElement.setScrollPosition({ scrollLeft, scrollTop });\n            }\n        }));\n        this.onDidScroll = this.scrollableElement.onScroll;\n        this._register(this.onDidScroll(e => {\n            if (e.scrollTopChanged) {\n                this.viewContainer.scrollTop = e.scrollTop;\n            }\n            if (e.scrollLeftChanged) {\n                this.viewContainer.scrollLeft = e.scrollLeft;\n            }\n        }));\n        append(this.el, this.scrollableElement.getDomNode());\n        this.style(options.styles || defaultStyles);\n        // We have an existing set of view, add them now\n        if (options.descriptor) {\n            this.size = options.descriptor.size;\n            options.descriptor.views.forEach((viewDescriptor, index) => {\n                const sizing = types.isUndefined(viewDescriptor.visible) || viewDescriptor.visible ? viewDescriptor.size : { type: 'invisible', cachedVisibleSize: viewDescriptor.size };\n                const view = viewDescriptor.view;\n                this.doAddView(view, sizing, index, true);\n            });\n            // Initialize content size and proportions for first layout\n            this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n            this.saveProportions();\n        }\n    }\n    style(styles) {\n        if (styles.separatorBorder.isTransparent()) {\n            this.el.classList.remove('separator-border');\n            this.el.style.removeProperty('--separator-border');\n        }\n        else {\n            this.el.classList.add('separator-border');\n            this.el.style.setProperty('--separator-border', styles.separatorBorder.toString());\n        }\n    }\n    /**\n     * Add a {@link IView view} to this {@link SplitView}.\n     *\n     * @param view The view to add.\n     * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n     * @param index The index to insert the view on.\n     * @param skipLayout Whether layout should be skipped.\n     */\n    addView(view, size, index = this.viewItems.length, skipLayout) {\n        this.doAddView(view, size, index, skipLayout);\n    }\n    /**\n     * Layout the {@link SplitView}.\n     *\n     * @param size The entire size of the {@link SplitView}.\n     * @param layoutContext An optional layout context to pass along to {@link IView views}.\n     */\n    layout(size, layoutContext) {\n        const previousSize = Math.max(this.size, this._contentSize);\n        this.size = size;\n        this.layoutContext = layoutContext;\n        if (!this.proportions) {\n            const indexes = range(this.viewItems.length);\n            const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n            const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n            this.resize(this.viewItems.length - 1, size - previousSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        }\n        else {\n            let total = 0;\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n                if (typeof proportion === 'number') {\n                    total += proportion;\n                }\n                else {\n                    size -= item.size;\n                }\n            }\n            for (let i = 0; i < this.viewItems.length; i++) {\n                const item = this.viewItems[i];\n                const proportion = this.proportions[i];\n                if (typeof proportion === 'number' && total > 0) {\n                    item.size = clamp(Math.round(proportion * size / total), item.minimumSize, item.maximumSize);\n                }\n            }\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    saveProportions() {\n        if (this.proportionalLayout && this._contentSize > 0) {\n            this.proportions = this.viewItems.map(v => v.proportionalLayout && v.visible ? v.size / this._contentSize : undefined);\n        }\n    }\n    onSashStart({ sash, start, alt }) {\n        for (const item of this.viewItems) {\n            item.enabled = false;\n        }\n        const index = this.sashItems.findIndex(item => item.sash === sash);\n        // This way, we can press Alt while we resize a sash, macOS style!\n        const disposable = combinedDisposable(addDisposableListener(this.el.ownerDocument.body, 'keydown', e => resetSashDragState(this.sashDragState.current, e.altKey)), addDisposableListener(this.el.ownerDocument.body, 'keyup', () => resetSashDragState(this.sashDragState.current, false)));\n        const resetSashDragState = (start, alt) => {\n            const sizes = this.viewItems.map(i => i.size);\n            let minDelta = Number.NEGATIVE_INFINITY;\n            let maxDelta = Number.POSITIVE_INFINITY;\n            if (this.inverseAltBehavior) {\n                alt = !alt;\n            }\n            if (alt) {\n                // When we're using the last sash with Alt, we're resizing\n                // the view to the left/up, instead of right/down as usual\n                // Thus, we must do the inverse of the usual\n                const isLastSash = index === this.sashItems.length - 1;\n                if (isLastSash) {\n                    const viewItem = this.viewItems[index];\n                    minDelta = (viewItem.minimumSize - viewItem.size) / 2;\n                    maxDelta = (viewItem.maximumSize - viewItem.size) / 2;\n                }\n                else {\n                    const viewItem = this.viewItems[index + 1];\n                    minDelta = (viewItem.size - viewItem.maximumSize) / 2;\n                    maxDelta = (viewItem.size - viewItem.minimumSize) / 2;\n                }\n            }\n            let snapBefore;\n            let snapAfter;\n            if (!alt) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n                const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].viewMaximumSize - sizes[i]), 0);\n                const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n                const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].viewMaximumSize), 0);\n                const minDelta = Math.max(minDeltaUp, minDeltaDown);\n                const maxDelta = Math.min(maxDeltaDown, maxDeltaUp);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                if (typeof snapBeforeIndex === 'number') {\n                    const viewItem = this.viewItems[snapBeforeIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapBefore = {\n                        index: snapBeforeIndex,\n                        limitDelta: viewItem.visible ? minDelta - halfSize : minDelta + halfSize,\n                        size: viewItem.size\n                    };\n                }\n                if (typeof snapAfterIndex === 'number') {\n                    const viewItem = this.viewItems[snapAfterIndex];\n                    const halfSize = Math.floor(viewItem.viewMinimumSize / 2);\n                    snapAfter = {\n                        index: snapAfterIndex,\n                        limitDelta: viewItem.visible ? maxDelta + halfSize : maxDelta - halfSize,\n                        size: viewItem.size\n                    };\n                }\n            }\n            this.sashDragState = { start, current: start, index, sizes, minDelta, maxDelta, alt, snapBefore, snapAfter, disposable };\n        };\n        resetSashDragState(start, alt);\n    }\n    onSashChange({ current }) {\n        const { index, start, sizes, alt, minDelta, maxDelta, snapBefore, snapAfter } = this.sashDragState;\n        this.sashDragState.current = current;\n        const delta = current - start;\n        const newDelta = this.resize(index, delta, sizes, undefined, undefined, minDelta, maxDelta, snapBefore, snapAfter);\n        if (alt) {\n            const isLastSash = index === this.sashItems.length - 1;\n            const newSizes = this.viewItems.map(i => i.size);\n            const viewItemIndex = isLastSash ? index : index + 1;\n            const viewItem = this.viewItems[viewItemIndex];\n            const newMinDelta = viewItem.size - viewItem.maximumSize;\n            const newMaxDelta = viewItem.size - viewItem.minimumSize;\n            const resizeIndex = isLastSash ? index - 1 : index + 1;\n            this.resize(resizeIndex, -newDelta, newSizes, undefined, undefined, newMinDelta, newMaxDelta);\n        }\n        this.distributeEmptySpace();\n        this.layoutViews();\n    }\n    onSashEnd(index) {\n        this._onDidSashChange.fire(index);\n        this.sashDragState.disposable.dispose();\n        this.saveProportions();\n        for (const item of this.viewItems) {\n            item.enabled = true;\n        }\n    }\n    onViewChange(item, size) {\n        const index = this.viewItems.indexOf(item);\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        size = typeof size === 'number' ? size : item.size;\n        size = clamp(size, item.minimumSize, item.maximumSize);\n        if (this.inverseAltBehavior && index > 0) {\n            // In this case, we want the view to grow or shrink both sides equally\n            // so we just resize the \"left\" side by half and let `resize` do the clamping magic\n            this.resize(index - 1, Math.floor((item.size - size) / 2));\n            this.distributeEmptySpace();\n            this.layoutViews();\n        }\n        else {\n            item.size = size;\n            this.relayout([index], undefined);\n        }\n    }\n    /**\n     * Resize a {@link IView view} within the {@link SplitView}.\n     *\n     * @param index The {@link IView view} index.\n     * @param size The {@link IView view} size.\n     */\n    resizeView(index, size) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return;\n        }\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        try {\n            const indexes = range(this.viewItems.length).filter(i => i !== index);\n            const lowPriorityIndexes = [...indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */), index];\n            const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n            const item = this.viewItems[index];\n            size = Math.round(size);\n            size = clamp(size, item.minimumSize, Math.min(item.maximumSize, this.size));\n            item.size = size;\n            this.relayout(lowPriorityIndexes, highPriorityIndexes);\n        }\n        finally {\n            this.state = State.Idle;\n        }\n    }\n    /**\n     * Distribute the entire {@link SplitView} size among all {@link IView views}.\n     */\n    distributeViewSizes() {\n        const flexibleViewItems = [];\n        let flexibleSize = 0;\n        for (const item of this.viewItems) {\n            if (item.maximumSize - item.minimumSize > 0) {\n                flexibleViewItems.push(item);\n                flexibleSize += item.size;\n            }\n        }\n        const size = Math.floor(flexibleSize / flexibleViewItems.length);\n        for (const item of flexibleViewItems) {\n            item.size = clamp(size, item.minimumSize, item.maximumSize);\n        }\n        const indexes = range(this.viewItems.length);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        this.relayout(lowPriorityIndexes, highPriorityIndexes);\n    }\n    /**\n     * Returns the size of a {@link IView view}.\n     */\n    getViewSize(index) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return -1;\n        }\n        return this.viewItems[index].size;\n    }\n    doAddView(view, size, index = this.viewItems.length, skipLayout) {\n        if (this.state !== State.Idle) {\n            throw new Error('Cant modify splitview');\n        }\n        this.state = State.Busy;\n        try {\n            // Add view\n            const container = $('.split-view-view');\n            if (index === this.viewItems.length) {\n                this.viewContainer.appendChild(container);\n            }\n            else {\n                this.viewContainer.insertBefore(container, this.viewContainer.children.item(index));\n            }\n            const onChangeDisposable = view.onDidChange(size => this.onViewChange(item, size));\n            const containerDisposable = toDisposable(() => container.remove());\n            const disposable = combinedDisposable(onChangeDisposable, containerDisposable);\n            let viewSize;\n            if (typeof size === 'number') {\n                viewSize = size;\n            }\n            else {\n                if (size.type === 'auto') {\n                    if (this.areViewsDistributed()) {\n                        size = { type: 'distribute' };\n                    }\n                    else {\n                        size = { type: 'split', index: size.index };\n                    }\n                }\n                if (size.type === 'split') {\n                    viewSize = this.getViewSize(size.index) / 2;\n                }\n                else if (size.type === 'invisible') {\n                    viewSize = { cachedVisibleSize: size.cachedVisibleSize };\n                }\n                else {\n                    viewSize = view.minimumSize;\n                }\n            }\n            const item = this.orientation === 0 /* Orientation.VERTICAL */\n                ? new VerticalViewItem(container, view, viewSize, disposable)\n                : new HorizontalViewItem(container, view, viewSize, disposable);\n            this.viewItems.splice(index, 0, item);\n            // Add sash\n            if (this.viewItems.length > 1) {\n                const opts = { orthogonalStartSash: this.orthogonalStartSash, orthogonalEndSash: this.orthogonalEndSash };\n                const sash = this.orientation === 0 /* Orientation.VERTICAL */\n                    ? new Sash(this.sashContainer, { getHorizontalSashTop: s => this.getSashPosition(s), getHorizontalSashWidth: this.getSashOrthogonalSize }, { ...opts, orientation: 1 /* Orientation.HORIZONTAL */ })\n                    : new Sash(this.sashContainer, { getVerticalSashLeft: s => this.getSashPosition(s), getVerticalSashHeight: this.getSashOrthogonalSize }, { ...opts, orientation: 0 /* Orientation.VERTICAL */ });\n                const sashEventMapper = this.orientation === 0 /* Orientation.VERTICAL */\n                    ? (e) => ({ sash, start: e.startY, current: e.currentY, alt: e.altKey })\n                    : (e) => ({ sash, start: e.startX, current: e.currentX, alt: e.altKey });\n                const onStart = Event.map(sash.onDidStart, sashEventMapper);\n                const onStartDisposable = onStart(this.onSashStart, this);\n                const onChange = Event.map(sash.onDidChange, sashEventMapper);\n                const onChangeDisposable = onChange(this.onSashChange, this);\n                const onEnd = Event.map(sash.onDidEnd, () => this.sashItems.findIndex(item => item.sash === sash));\n                const onEndDisposable = onEnd(this.onSashEnd, this);\n                const onDidResetDisposable = sash.onDidReset(() => {\n                    const index = this.sashItems.findIndex(item => item.sash === sash);\n                    const upIndexes = range(index, -1);\n                    const downIndexes = range(index + 1, this.viewItems.length);\n                    const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                    const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                    if (typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible) {\n                        return;\n                    }\n                    if (typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible) {\n                        return;\n                    }\n                    this._onDidSashReset.fire(index);\n                });\n                const disposable = combinedDisposable(onStartDisposable, onChangeDisposable, onEndDisposable, onDidResetDisposable, sash);\n                const sashItem = { sash, disposable };\n                this.sashItems.splice(index - 1, 0, sashItem);\n            }\n            container.appendChild(view.element);\n            let highPriorityIndexes;\n            if (typeof size !== 'number' && size.type === 'split') {\n                highPriorityIndexes = [size.index];\n            }\n            if (!skipLayout) {\n                this.relayout([index], highPriorityIndexes);\n            }\n            if (!skipLayout && typeof size !== 'number' && size.type === 'distribute') {\n                this.distributeViewSizes();\n            }\n        }\n        finally {\n            this.state = State.Idle;\n        }\n    }\n    relayout(lowPriorityIndexes, highPriorityIndexes) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        this.resize(this.viewItems.length - 1, this.size - contentSize, undefined, lowPriorityIndexes, highPriorityIndexes);\n        this.distributeEmptySpace();\n        this.layoutViews();\n        this.saveProportions();\n    }\n    resize(index, delta, sizes = this.viewItems.map(i => i.size), lowPriorityIndexes, highPriorityIndexes, overloadMinDelta = Number.NEGATIVE_INFINITY, overloadMaxDelta = Number.POSITIVE_INFINITY, snapBefore, snapAfter) {\n        if (index < 0 || index >= this.viewItems.length) {\n            return 0;\n        }\n        const upIndexes = range(index, -1);\n        const downIndexes = range(index + 1, this.viewItems.length);\n        if (highPriorityIndexes) {\n            for (const index of highPriorityIndexes) {\n                pushToStart(upIndexes, index);\n                pushToStart(downIndexes, index);\n            }\n        }\n        if (lowPriorityIndexes) {\n            for (const index of lowPriorityIndexes) {\n                pushToEnd(upIndexes, index);\n                pushToEnd(downIndexes, index);\n            }\n        }\n        const upItems = upIndexes.map(i => this.viewItems[i]);\n        const upSizes = upIndexes.map(i => sizes[i]);\n        const downItems = downIndexes.map(i => this.viewItems[i]);\n        const downSizes = downIndexes.map(i => sizes[i]);\n        const minDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].minimumSize - sizes[i]), 0);\n        const maxDeltaUp = upIndexes.reduce((r, i) => r + (this.viewItems[i].maximumSize - sizes[i]), 0);\n        const maxDeltaDown = downIndexes.length === 0 ? Number.POSITIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].minimumSize), 0);\n        const minDeltaDown = downIndexes.length === 0 ? Number.NEGATIVE_INFINITY : downIndexes.reduce((r, i) => r + (sizes[i] - this.viewItems[i].maximumSize), 0);\n        const minDelta = Math.max(minDeltaUp, minDeltaDown, overloadMinDelta);\n        const maxDelta = Math.min(maxDeltaDown, maxDeltaUp, overloadMaxDelta);\n        let snapped = false;\n        if (snapBefore) {\n            const snapView = this.viewItems[snapBefore.index];\n            const visible = delta >= snapBefore.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapBefore.size);\n        }\n        if (!snapped && snapAfter) {\n            const snapView = this.viewItems[snapAfter.index];\n            const visible = delta < snapAfter.limitDelta;\n            snapped = visible !== snapView.visible;\n            snapView.setVisible(visible, snapAfter.size);\n        }\n        if (snapped) {\n            return this.resize(index, delta, sizes, lowPriorityIndexes, highPriorityIndexes, overloadMinDelta, overloadMaxDelta);\n        }\n        delta = clamp(delta, minDelta, maxDelta);\n        for (let i = 0, deltaUp = delta; i < upItems.length; i++) {\n            const item = upItems[i];\n            const size = clamp(upSizes[i] + deltaUp, item.minimumSize, item.maximumSize);\n            const viewDelta = size - upSizes[i];\n            deltaUp -= viewDelta;\n            item.size = size;\n        }\n        for (let i = 0, deltaDown = delta; i < downItems.length; i++) {\n            const item = downItems[i];\n            const size = clamp(downSizes[i] - deltaDown, item.minimumSize, item.maximumSize);\n            const viewDelta = size - downSizes[i];\n            deltaDown += viewDelta;\n            item.size = size;\n        }\n        return delta;\n    }\n    distributeEmptySpace(lowPriorityIndex) {\n        const contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        let emptyDelta = this.size - contentSize;\n        const indexes = range(this.viewItems.length - 1, -1);\n        const lowPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 1 /* LayoutPriority.Low */);\n        const highPriorityIndexes = indexes.filter(i => this.viewItems[i].priority === 2 /* LayoutPriority.High */);\n        for (const index of highPriorityIndexes) {\n            pushToStart(indexes, index);\n        }\n        for (const index of lowPriorityIndexes) {\n            pushToEnd(indexes, index);\n        }\n        if (typeof lowPriorityIndex === 'number') {\n            pushToEnd(indexes, lowPriorityIndex);\n        }\n        for (let i = 0; emptyDelta !== 0 && i < indexes.length; i++) {\n            const item = this.viewItems[indexes[i]];\n            const size = clamp(item.size + emptyDelta, item.minimumSize, item.maximumSize);\n            const viewDelta = size - item.size;\n            emptyDelta -= viewDelta;\n            item.size = size;\n        }\n    }\n    layoutViews() {\n        // Save new content size\n        this._contentSize = this.viewItems.reduce((r, i) => r + i.size, 0);\n        // Layout views\n        let offset = 0;\n        for (const viewItem of this.viewItems) {\n            viewItem.layout(offset, this.layoutContext);\n            offset += viewItem.size;\n        }\n        // Layout sashes\n        this.sashItems.forEach(item => item.sash.layout());\n        this.updateSashEnablement();\n        this.updateScrollableElement();\n    }\n    updateScrollableElement() {\n        if (this.orientation === 0 /* Orientation.VERTICAL */) {\n            this.scrollableElement.setScrollDimensions({\n                height: this.size,\n                scrollHeight: this._contentSize\n            });\n        }\n        else {\n            this.scrollableElement.setScrollDimensions({\n                width: this.size,\n                scrollWidth: this._contentSize\n            });\n        }\n    }\n    updateSashEnablement() {\n        let previous = false;\n        const collapsesDown = this.viewItems.map(i => previous = (i.size - i.minimumSize > 0) || previous);\n        previous = false;\n        const expandsDown = this.viewItems.map(i => previous = (i.maximumSize - i.size > 0) || previous);\n        const reverseViews = [...this.viewItems].reverse();\n        previous = false;\n        const collapsesUp = reverseViews.map(i => previous = (i.size - i.minimumSize > 0) || previous).reverse();\n        previous = false;\n        const expandsUp = reverseViews.map(i => previous = (i.maximumSize - i.size > 0) || previous).reverse();\n        let position = 0;\n        for (let index = 0; index < this.sashItems.length; index++) {\n            const { sash } = this.sashItems[index];\n            const viewItem = this.viewItems[index];\n            position += viewItem.size;\n            const min = !(collapsesDown[index] && expandsUp[index + 1]);\n            const max = !(expandsDown[index] && collapsesUp[index + 1]);\n            if (min && max) {\n                const upIndexes = range(index, -1);\n                const downIndexes = range(index + 1, this.viewItems.length);\n                const snapBeforeIndex = this.findFirstSnapIndex(upIndexes);\n                const snapAfterIndex = this.findFirstSnapIndex(downIndexes);\n                const snappedBefore = typeof snapBeforeIndex === 'number' && !this.viewItems[snapBeforeIndex].visible;\n                const snappedAfter = typeof snapAfterIndex === 'number' && !this.viewItems[snapAfterIndex].visible;\n                if (snappedBefore && collapsesUp[index] && (position > 0 || this.startSnappingEnabled)) {\n                    sash.state = 1 /* SashState.AtMinimum */;\n                }\n                else if (snappedAfter && collapsesDown[index] && (position < this._contentSize || this.endSnappingEnabled)) {\n                    sash.state = 2 /* SashState.AtMaximum */;\n                }\n                else {\n                    sash.state = 0 /* SashState.Disabled */;\n                }\n            }\n            else if (min && !max) {\n                sash.state = 1 /* SashState.AtMinimum */;\n            }\n            else if (!min && max) {\n                sash.state = 2 /* SashState.AtMaximum */;\n            }\n            else {\n                sash.state = 3 /* SashState.Enabled */;\n            }\n        }\n    }\n    getSashPosition(sash) {\n        let position = 0;\n        for (let i = 0; i < this.sashItems.length; i++) {\n            position += this.viewItems[i].size;\n            if (this.sashItems[i].sash === sash) {\n                return position;\n            }\n        }\n        return 0;\n    }\n    findFirstSnapIndex(indexes) {\n        // visible views first\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (!viewItem.visible) {\n                continue;\n            }\n            if (viewItem.snap) {\n                return index;\n            }\n        }\n        // then, hidden views\n        for (const index of indexes) {\n            const viewItem = this.viewItems[index];\n            if (viewItem.visible && viewItem.maximumSize - viewItem.minimumSize > 0) {\n                return undefined;\n            }\n            if (!viewItem.visible && viewItem.snap) {\n                return index;\n            }\n        }\n        return undefined;\n    }\n    areViewsDistributed() {\n        let min = undefined, max = undefined;\n        for (const view of this.viewItems) {\n            min = min === undefined ? view.size : Math.min(min, view.size);\n            max = max === undefined ? view.size : Math.max(max, view.size);\n            if (max - min > 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n    dispose() {\n        this.sashDragState?.disposable.dispose();\n        dispose(this.viewItems);\n        this.viewItems = [];\n        this.sashItems.forEach(i => i.disposable.dispose());\n        this.sashItems = [];\n        super.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../Rectangle';\nimport { ALIGN, DEFAULT_IMAGESIZE, NONE } from '../../../util/Constants';\nimport RectangleShape from './RectangleShape';\n/**\n * Extends {@link Shape} to implement an image shape with a label.\n * This shape is registered under {@link Constants#SHAPE_LABEL} in\n * {@link CellRenderer}.\n *\n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n *\n * @param bounds {@link Rectangle} that defines the bounds. This is stored in\n * {@link Shape#bounds}.\n * @param fill String that defines the fill color. This is stored in <fill>.\n * @param stroke String that defines the stroke color. This is stored in <stroke>.\n * @param strokewidth Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nclass LabelShape extends RectangleShape {\n  constructor(bounds, fill, stroke, strokeWidth) {\n    super(bounds, fill, stroke, strokeWidth);\n    /**\n     * Default width and height for the image.\n     * @default mxConstants.DEFAULT_IMAGESIZE\n     */\n    this.imageSize = DEFAULT_IMAGESIZE;\n    this.imageSrc = null;\n    /**\n     * Default value for image spacing\n     * @type {number}\n     * @default 2\n     */\n    this.spacing = 2;\n    /**\n     * Default width and height for the indicicator.\n     * @type {number}\n     * @default 10\n     */\n    this.indicatorSize = 10;\n    /**\n     * Default spacing between image and indicator\n     * @default 2\n     * @type {number}\n     */\n    this.indicatorSpacing = 2;\n    this.indicatorImageSrc = null;\n  }\n  /**\n   * Initializes the shape and the <indicator>.\n   */\n  init(container) {\n    super.init(container);\n    if (this.indicatorShape) {\n      this.indicator = new this.indicatorShape();\n      this.indicator.dialect = this.dialect;\n      this.indicator.init(this.node);\n    }\n  }\n  /**\n   * Reconfigures this shape. This will update the colors of the indicator\n   * and reconfigure it if required.\n   */\n  redraw() {\n    if (this.indicator) {\n      this.indicator.fill = this.indicatorColor;\n      this.indicator.stroke = this.indicatorStrokeColor;\n      this.indicator.gradient = this.indicatorGradientColor;\n      this.indicator.direction = this.indicatorDirection;\n      this.indicator.redraw();\n    }\n    super.redraw();\n  }\n  /**\n   * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n   * no indicator shape.\n   */\n  isHtmlAllowed() {\n    return super.isHtmlAllowed() && this.indicatorColor === NONE && !!this.indicatorShape;\n  }\n  /**\n   * Generic background painting implementation.\n   * @param {mxAbstractCanvas2D} c\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   */\n  paintForeground(c, x, y, w, h) {\n    this.paintImage(c, x, y, w, h);\n    this.paintIndicator(c, x, y, w, h);\n    super.paintForeground(c, x, y, w, h);\n  }\n  /**\n   * Generic background painting implementation.\n   * @param {mxAbstractCanvas2D} c\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   */\n  paintImage(c, x, y, w, h) {\n    if (this.imageSrc) {\n      const bounds = this.getImageBounds(x, y, w, h);\n      c.image(bounds.x, bounds.y, bounds.width, bounds.height, this.imageSrc, false, false, false);\n    }\n  }\n  /**\n   * Generic background painting implementation.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   */\n  getImageBounds(x, y, w, h) {\n    const align = this.style?.imageAlign ?? ALIGN.LEFT;\n    const valign = this.style?.verticalAlign ?? ALIGN.MIDDLE;\n    const width = this.style?.imageWidth ?? DEFAULT_IMAGESIZE;\n    const height = this.style?.imageHeight ?? DEFAULT_IMAGESIZE;\n    const spacing = this.style?.spacing ?? this.spacing + 5;\n    if (align === ALIGN.CENTER) {\n      x += (w - width) / 2;\n    } else if (align === ALIGN.RIGHT) {\n      x += w - width - spacing;\n    } // default is left\n    else {\n      x += spacing;\n    }\n    if (valign === ALIGN.TOP) {\n      y += spacing;\n    } else if (valign === ALIGN.BOTTOM) {\n      y += h - height - spacing;\n    } // default is middle\n    else {\n      y += (h - height) / 2;\n    }\n    return new Rectangle(x, y, width, height);\n  }\n  /**\n   * Generic background painting implementation.\n   * @param {mxAbstractCanvas2D} c\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   */\n  paintIndicator(c, x, y, w, h) {\n    if (this.indicator) {\n      this.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n      this.indicator.paint(c);\n    } else if (this.indicatorImageSrc) {\n      const bounds = this.getIndicatorBounds(x, y, w, h);\n      c.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImageSrc, false, false, false);\n    }\n  }\n  /**\n   * Generic background painting implementation.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   * @returns {Rectangle}\n   */\n  getIndicatorBounds(x, y, w, h) {\n    const align = this.style?.imageAlign ?? ALIGN.LEFT;\n    const valign = this.style?.verticalAlign ?? ALIGN.MIDDLE;\n    const width = this.style?.indicatorWidth ?? this.indicatorSize;\n    const height = this.style?.indicatorHeight ?? this.indicatorSize;\n    const spacing = this.spacing + 5;\n    if (align === ALIGN.RIGHT) {\n      x += w - width - spacing;\n    } else if (align === ALIGN.CENTER) {\n      x += (w - width) / 2;\n    } // default is left\n    else {\n      x += spacing;\n    }\n    if (valign === ALIGN.BOTTOM) {\n      y += h - height - spacing;\n    } else if (valign === ALIGN.TOP) {\n      y += spacing;\n    } // default is middle\n    else {\n      y += (h - height) / 2;\n    }\n    return new Rectangle(x, y, width, height);\n  }\n  /**\n   * Generic background painting implementation.\n   */\n  redrawHtmlShape() {\n    super.redrawHtmlShape();\n    // Removes all children\n    while (this.node.hasChildNodes()) {\n      this.node.removeChild(this.node.lastChild);\n    }\n    if (this.imageSrc && this.bounds) {\n      const node = document.createElement('img');\n      node.style.position = 'relative';\n      node.setAttribute('border', '0');\n      const bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n      bounds.x -= this.bounds.x;\n      bounds.y -= this.bounds.y;\n      node.style.left = `${Math.round(bounds.x)}px`;\n      node.style.top = `${Math.round(bounds.y)}px`;\n      node.style.width = `${Math.round(bounds.width)}px`;\n      node.style.height = `${Math.round(bounds.height)}px`;\n      node.src = this.imageSrc;\n      this.node.appendChild(node);\n    }\n  }\n}\nexport default LabelShape;","map":{"version":3,"names":["Rectangle","ALIGN","DEFAULT_IMAGESIZE","NONE","RectangleShape","LabelShape","constructor","bounds","fill","stroke","strokeWidth","imageSize","imageSrc","spacing","indicatorSize","indicatorSpacing","indicatorImageSrc","init","container","indicatorShape","indicator","dialect","node","redraw","indicatorColor","indicatorStrokeColor","gradient","indicatorGradientColor","direction","indicatorDirection","isHtmlAllowed","paintForeground","c","x","y","w","h","paintImage","paintIndicator","getImageBounds","image","width","height","align","style","imageAlign","LEFT","valign","verticalAlign","MIDDLE","imageWidth","imageHeight","CENTER","RIGHT","TOP","BOTTOM","getIndicatorBounds","paint","indicatorWidth","indicatorHeight","redrawHtmlShape","hasChildNodes","removeChild","lastChild","document","createElement","position","setAttribute","left","Math","round","top","src","appendChild"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/view/geometry/node/LabelShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Rectangle from '../Rectangle';\nimport { ALIGN, DEFAULT_IMAGESIZE, NONE } from '../../../util/Constants';\nimport RectangleShape from './RectangleShape';\n/**\n * Extends {@link Shape} to implement an image shape with a label.\n * This shape is registered under {@link Constants#SHAPE_LABEL} in\n * {@link CellRenderer}.\n *\n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n *\n * @param bounds {@link Rectangle} that defines the bounds. This is stored in\n * {@link Shape#bounds}.\n * @param fill String that defines the fill color. This is stored in <fill>.\n * @param stroke String that defines the stroke color. This is stored in <stroke>.\n * @param strokewidth Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nclass LabelShape extends RectangleShape {\n    constructor(bounds, fill, stroke, strokeWidth) {\n        super(bounds, fill, stroke, strokeWidth);\n        /**\n         * Default width and height for the image.\n         * @default mxConstants.DEFAULT_IMAGESIZE\n         */\n        this.imageSize = DEFAULT_IMAGESIZE;\n        this.imageSrc = null;\n        /**\n         * Default value for image spacing\n         * @type {number}\n         * @default 2\n         */\n        this.spacing = 2;\n        /**\n         * Default width and height for the indicicator.\n         * @type {number}\n         * @default 10\n         */\n        this.indicatorSize = 10;\n        /**\n         * Default spacing between image and indicator\n         * @default 2\n         * @type {number}\n         */\n        this.indicatorSpacing = 2;\n        this.indicatorImageSrc = null;\n    }\n    /**\n     * Initializes the shape and the <indicator>.\n     */\n    init(container) {\n        super.init(container);\n        if (this.indicatorShape) {\n            this.indicator = new this.indicatorShape();\n            this.indicator.dialect = this.dialect;\n            this.indicator.init(this.node);\n        }\n    }\n    /**\n     * Reconfigures this shape. This will update the colors of the indicator\n     * and reconfigure it if required.\n     */\n    redraw() {\n        if (this.indicator) {\n            this.indicator.fill = this.indicatorColor;\n            this.indicator.stroke = this.indicatorStrokeColor;\n            this.indicator.gradient = this.indicatorGradientColor;\n            this.indicator.direction = this.indicatorDirection;\n            this.indicator.redraw();\n        }\n        super.redraw();\n    }\n    /**\n     * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n     * no indicator shape.\n     */\n    isHtmlAllowed() {\n        return super.isHtmlAllowed() && this.indicatorColor === NONE && !!this.indicatorShape;\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintForeground(c, x, y, w, h) {\n        this.paintImage(c, x, y, w, h);\n        this.paintIndicator(c, x, y, w, h);\n        super.paintForeground(c, x, y, w, h);\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintImage(c, x, y, w, h) {\n        if (this.imageSrc) {\n            const bounds = this.getImageBounds(x, y, w, h);\n            c.image(bounds.x, bounds.y, bounds.width, bounds.height, this.imageSrc, false, false, false);\n        }\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    getImageBounds(x, y, w, h) {\n        const align = this.style?.imageAlign ?? ALIGN.LEFT;\n        const valign = this.style?.verticalAlign ?? ALIGN.MIDDLE;\n        const width = this.style?.imageWidth ?? DEFAULT_IMAGESIZE;\n        const height = this.style?.imageHeight ?? DEFAULT_IMAGESIZE;\n        const spacing = this.style?.spacing ?? this.spacing + 5;\n        if (align === ALIGN.CENTER) {\n            x += (w - width) / 2;\n        }\n        else if (align === ALIGN.RIGHT) {\n            x += w - width - spacing;\n        } // default is left\n        else {\n            x += spacing;\n        }\n        if (valign === ALIGN.TOP) {\n            y += spacing;\n        }\n        else if (valign === ALIGN.BOTTOM) {\n            y += h - height - spacing;\n        } // default is middle\n        else {\n            y += (h - height) / 2;\n        }\n        return new Rectangle(x, y, width, height);\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {mxAbstractCanvas2D} c\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     */\n    paintIndicator(c, x, y, w, h) {\n        if (this.indicator) {\n            this.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n            this.indicator.paint(c);\n        }\n        else if (this.indicatorImageSrc) {\n            const bounds = this.getIndicatorBounds(x, y, w, h);\n            c.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImageSrc, false, false, false);\n        }\n    }\n    /**\n     * Generic background painting implementation.\n     * @param {number} x\n     * @param {number} y\n     * @param {number} w\n     * @param {number} h\n     * @returns {Rectangle}\n     */\n    getIndicatorBounds(x, y, w, h) {\n        const align = this.style?.imageAlign ?? ALIGN.LEFT;\n        const valign = this.style?.verticalAlign ?? ALIGN.MIDDLE;\n        const width = this.style?.indicatorWidth ?? this.indicatorSize;\n        const height = this.style?.indicatorHeight ?? this.indicatorSize;\n        const spacing = this.spacing + 5;\n        if (align === ALIGN.RIGHT) {\n            x += w - width - spacing;\n        }\n        else if (align === ALIGN.CENTER) {\n            x += (w - width) / 2;\n        } // default is left\n        else {\n            x += spacing;\n        }\n        if (valign === ALIGN.BOTTOM) {\n            y += h - height - spacing;\n        }\n        else if (valign === ALIGN.TOP) {\n            y += spacing;\n        } // default is middle\n        else {\n            y += (h - height) / 2;\n        }\n        return new Rectangle(x, y, width, height);\n    }\n    /**\n     * Generic background painting implementation.\n     */\n    redrawHtmlShape() {\n        super.redrawHtmlShape();\n        // Removes all children\n        while (this.node.hasChildNodes()) {\n            this.node.removeChild(this.node.lastChild);\n        }\n        if (this.imageSrc && this.bounds) {\n            const node = document.createElement('img');\n            node.style.position = 'relative';\n            node.setAttribute('border', '0');\n            const bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n            bounds.x -= this.bounds.x;\n            bounds.y -= this.bounds.y;\n            node.style.left = `${Math.round(bounds.x)}px`;\n            node.style.top = `${Math.round(bounds.y)}px`;\n            node.style.width = `${Math.round(bounds.width)}px`;\n            node.style.height = `${Math.round(bounds.height)}px`;\n            node.src = this.imageSrc;\n            this.node.appendChild(node);\n        }\n    }\n}\nexport default LabelShape;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,SAAS,MAAM,cAAc;AACpC,SAASC,KAAK,EAAEC,iBAAiB,EAAEC,IAAI,QAAQ,yBAAyB;AACxE,OAAOC,cAAc,MAAM,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASD,cAAc,CAAC;EACpCE,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,WAAW,EAAE;IAC3C,KAAK,CAACH,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,WAAW,CAAC;IACxC;AACR;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAGT,iBAAiB;IAClC,IAAI,CAACU,QAAQ,GAAG,IAAI;IACpB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,CAAC;IAChB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB;AACR;AACA;AACA;AACA;IACQ,IAAI,CAACC,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,iBAAiB,GAAG,IAAI;EACjC;EACA;AACJ;AACA;EACIC,IAAIA,CAACC,SAAS,EAAE;IACZ,KAAK,CAACD,IAAI,CAACC,SAAS,CAAC;IACrB,IAAI,IAAI,CAACC,cAAc,EAAE;MACrB,IAAI,CAACC,SAAS,GAAG,IAAI,IAAI,CAACD,cAAc,CAAC,CAAC;MAC1C,IAAI,CAACC,SAAS,CAACC,OAAO,GAAG,IAAI,CAACA,OAAO;MACrC,IAAI,CAACD,SAAS,CAACH,IAAI,CAAC,IAAI,CAACK,IAAI,CAAC;IAClC;EACJ;EACA;AACJ;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACH,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAACZ,IAAI,GAAG,IAAI,CAACgB,cAAc;MACzC,IAAI,CAACJ,SAAS,CAACX,MAAM,GAAG,IAAI,CAACgB,oBAAoB;MACjD,IAAI,CAACL,SAAS,CAACM,QAAQ,GAAG,IAAI,CAACC,sBAAsB;MACrD,IAAI,CAACP,SAAS,CAACQ,SAAS,GAAG,IAAI,CAACC,kBAAkB;MAClD,IAAI,CAACT,SAAS,CAACG,MAAM,CAAC,CAAC;IAC3B;IACA,KAAK,CAACA,MAAM,CAAC,CAAC;EAClB;EACA;AACJ;AACA;AACA;EACIO,aAAaA,CAAA,EAAG;IACZ,OAAO,KAAK,CAACA,aAAa,CAAC,CAAC,IAAI,IAAI,CAACN,cAAc,KAAKrB,IAAI,IAAI,CAAC,CAAC,IAAI,CAACgB,cAAc;EACzF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIY,eAAeA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC3B,IAAI,CAACC,UAAU,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAC9B,IAAI,CAACE,cAAc,CAACN,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAClC,KAAK,CAACL,eAAe,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACtB,IAAI,IAAI,CAACxB,QAAQ,EAAE;MACf,MAAML,MAAM,GAAG,IAAI,CAACgC,cAAc,CAACN,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAC9CJ,CAAC,CAACQ,KAAK,CAACjC,MAAM,CAAC0B,CAAC,EAAE1B,MAAM,CAAC2B,CAAC,EAAE3B,MAAM,CAACkC,KAAK,EAAElC,MAAM,CAACmC,MAAM,EAAE,IAAI,CAAC9B,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAChG;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2B,cAAcA,CAACN,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACvB,MAAMO,KAAK,GAAG,IAAI,CAACC,KAAK,EAAEC,UAAU,IAAI5C,KAAK,CAAC6C,IAAI;IAClD,MAAMC,MAAM,GAAG,IAAI,CAACH,KAAK,EAAEI,aAAa,IAAI/C,KAAK,CAACgD,MAAM;IACxD,MAAMR,KAAK,GAAG,IAAI,CAACG,KAAK,EAAEM,UAAU,IAAIhD,iBAAiB;IACzD,MAAMwC,MAAM,GAAG,IAAI,CAACE,KAAK,EAAEO,WAAW,IAAIjD,iBAAiB;IAC3D,MAAMW,OAAO,GAAG,IAAI,CAAC+B,KAAK,EAAE/B,OAAO,IAAI,IAAI,CAACA,OAAO,GAAG,CAAC;IACvD,IAAI8B,KAAK,KAAK1C,KAAK,CAACmD,MAAM,EAAE;MACxBnB,CAAC,IAAI,CAACE,CAAC,GAAGM,KAAK,IAAI,CAAC;IACxB,CAAC,MACI,IAAIE,KAAK,KAAK1C,KAAK,CAACoD,KAAK,EAAE;MAC5BpB,CAAC,IAAIE,CAAC,GAAGM,KAAK,GAAG5B,OAAO;IAC5B,CAAC,CAAC;IAAA,KACG;MACDoB,CAAC,IAAIpB,OAAO;IAChB;IACA,IAAIkC,MAAM,KAAK9C,KAAK,CAACqD,GAAG,EAAE;MACtBpB,CAAC,IAAIrB,OAAO;IAChB,CAAC,MACI,IAAIkC,MAAM,KAAK9C,KAAK,CAACsD,MAAM,EAAE;MAC9BrB,CAAC,IAAIE,CAAC,GAAGM,MAAM,GAAG7B,OAAO;IAC7B,CAAC,CAAC;IAAA,KACG;MACDqB,CAAC,IAAI,CAACE,CAAC,GAAGM,MAAM,IAAI,CAAC;IACzB;IACA,OAAO,IAAI1C,SAAS,CAACiC,CAAC,EAAEC,CAAC,EAAEO,KAAK,EAAEC,MAAM,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIJ,cAAcA,CAACN,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC1B,IAAI,IAAI,CAAChB,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,CAACb,MAAM,GAAG,IAAI,CAACiD,kBAAkB,CAACvB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAC3D,IAAI,CAAChB,SAAS,CAACqC,KAAK,CAACzB,CAAC,CAAC;IAC3B,CAAC,MACI,IAAI,IAAI,CAAChB,iBAAiB,EAAE;MAC7B,MAAMT,MAAM,GAAG,IAAI,CAACiD,kBAAkB,CAACvB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAClDJ,CAAC,CAACQ,KAAK,CAACjC,MAAM,CAAC0B,CAAC,EAAE1B,MAAM,CAAC2B,CAAC,EAAE3B,MAAM,CAACkC,KAAK,EAAElC,MAAM,CAACmC,MAAM,EAAE,IAAI,CAAC1B,iBAAiB,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IACzG;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIwC,kBAAkBA,CAACvB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IAC3B,MAAMO,KAAK,GAAG,IAAI,CAACC,KAAK,EAAEC,UAAU,IAAI5C,KAAK,CAAC6C,IAAI;IAClD,MAAMC,MAAM,GAAG,IAAI,CAACH,KAAK,EAAEI,aAAa,IAAI/C,KAAK,CAACgD,MAAM;IACxD,MAAMR,KAAK,GAAG,IAAI,CAACG,KAAK,EAAEc,cAAc,IAAI,IAAI,CAAC5C,aAAa;IAC9D,MAAM4B,MAAM,GAAG,IAAI,CAACE,KAAK,EAAEe,eAAe,IAAI,IAAI,CAAC7C,aAAa;IAChE,MAAMD,OAAO,GAAG,IAAI,CAACA,OAAO,GAAG,CAAC;IAChC,IAAI8B,KAAK,KAAK1C,KAAK,CAACoD,KAAK,EAAE;MACvBpB,CAAC,IAAIE,CAAC,GAAGM,KAAK,GAAG5B,OAAO;IAC5B,CAAC,MACI,IAAI8B,KAAK,KAAK1C,KAAK,CAACmD,MAAM,EAAE;MAC7BnB,CAAC,IAAI,CAACE,CAAC,GAAGM,KAAK,IAAI,CAAC;IACxB,CAAC,CAAC;IAAA,KACG;MACDR,CAAC,IAAIpB,OAAO;IAChB;IACA,IAAIkC,MAAM,KAAK9C,KAAK,CAACsD,MAAM,EAAE;MACzBrB,CAAC,IAAIE,CAAC,GAAGM,MAAM,GAAG7B,OAAO;IAC7B,CAAC,MACI,IAAIkC,MAAM,KAAK9C,KAAK,CAACqD,GAAG,EAAE;MAC3BpB,CAAC,IAAIrB,OAAO;IAChB,CAAC,CAAC;IAAA,KACG;MACDqB,CAAC,IAAI,CAACE,CAAC,GAAGM,MAAM,IAAI,CAAC;IACzB;IACA,OAAO,IAAI1C,SAAS,CAACiC,CAAC,EAAEC,CAAC,EAAEO,KAAK,EAAEC,MAAM,CAAC;EAC7C;EACA;AACJ;AACA;EACIkB,eAAeA,CAAA,EAAG;IACd,KAAK,CAACA,eAAe,CAAC,CAAC;IACvB;IACA,OAAO,IAAI,CAACtC,IAAI,CAACuC,aAAa,CAAC,CAAC,EAAE;MAC9B,IAAI,CAACvC,IAAI,CAACwC,WAAW,CAAC,IAAI,CAACxC,IAAI,CAACyC,SAAS,CAAC;IAC9C;IACA,IAAI,IAAI,CAACnD,QAAQ,IAAI,IAAI,CAACL,MAAM,EAAE;MAC9B,MAAMe,IAAI,GAAG0C,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC1C3C,IAAI,CAACsB,KAAK,CAACsB,QAAQ,GAAG,UAAU;MAChC5C,IAAI,CAAC6C,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC;MAChC,MAAM5D,MAAM,GAAG,IAAI,CAACgC,cAAc,CAAC,IAAI,CAAChC,MAAM,CAAC0B,CAAC,EAAE,IAAI,CAAC1B,MAAM,CAAC2B,CAAC,EAAE,IAAI,CAAC3B,MAAM,CAACkC,KAAK,EAAE,IAAI,CAAClC,MAAM,CAACmC,MAAM,CAAC;MACvGnC,MAAM,CAAC0B,CAAC,IAAI,IAAI,CAAC1B,MAAM,CAAC0B,CAAC;MACzB1B,MAAM,CAAC2B,CAAC,IAAI,IAAI,CAAC3B,MAAM,CAAC2B,CAAC;MACzBZ,IAAI,CAACsB,KAAK,CAACwB,IAAI,GAAI,GAAEC,IAAI,CAACC,KAAK,CAAC/D,MAAM,CAAC0B,CAAC,CAAE,IAAG;MAC7CX,IAAI,CAACsB,KAAK,CAAC2B,GAAG,GAAI,GAAEF,IAAI,CAACC,KAAK,CAAC/D,MAAM,CAAC2B,CAAC,CAAE,IAAG;MAC5CZ,IAAI,CAACsB,KAAK,CAACH,KAAK,GAAI,GAAE4B,IAAI,CAACC,KAAK,CAAC/D,MAAM,CAACkC,KAAK,CAAE,IAAG;MAClDnB,IAAI,CAACsB,KAAK,CAACF,MAAM,GAAI,GAAE2B,IAAI,CAACC,KAAK,CAAC/D,MAAM,CAACmC,MAAM,CAAE,IAAG;MACpDpB,IAAI,CAACkD,GAAG,GAAG,IAAI,CAAC5D,QAAQ;MACxB,IAAI,CAACU,IAAI,CAACmD,WAAW,CAACnD,IAAI,CAAC;IAC/B;EACJ;AACJ;AACA,eAAejB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
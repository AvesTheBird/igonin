{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import*as monaco from'monaco-editor';import'./monaco-vhdl';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const VHDLEditor=/*#__PURE__*/React.memo(_ref=>{let{id,onCodeChange,initialCode}=_ref;const editorRef=useRef(null);const editorInstanceRef=useRef(null);const scrollPositionRef=useRef({top:0,left:0});const cursorPositionRef=useRef(null);useEffect(()=>{if(editorRef.current){editorInstanceRef.current=monaco.editor.create(editorRef.current,{value:initialCode,language:'vhdl',theme:'vs-dark',automaticLayout:true});const editorInstance=editorInstanceRef.current;const debounceChangeHandler=debounce(()=>{const code=editorInstance.getValue();onCodeChange(code);},300);editorInstance.onDidChangeModelContent(debounceChangeHandler);return()=>{editorInstance.dispose();};}},[initialCode,onCodeChange]);const saveCursorAndScroll=()=>{if(editorInstanceRef.current){const editor=editorInstanceRef.current;scrollPositionRef.current.top=editor.getScrollTop();scrollPositionRef.current.left=editor.getScrollLeft();cursorPositionRef.current=editor.getPosition();}};const restoreCursorAndScroll=()=>{if(editorInstanceRef.current){const editor=editorInstanceRef.current;editor.setScrollTop(scrollPositionRef.current.top);editor.setScrollLeft(scrollPositionRef.current.left);if(cursorPositionRef.current){editor.setPosition(cursorPositionRef.current);editor.revealPositionInCenter(cursorPositionRef.current);}}};useEffect(()=>{const editor=editorInstanceRef.current;if(editor){const scrollListener=editor.onDidScrollChange(saveCursorAndScroll);const cursorListener=editor.onDidChangeCursorPosition(saveCursorAndScroll);return()=>{scrollListener.dispose();cursorListener.dispose();};}},[]);useEffect(()=>{restoreCursorAndScroll();},[initialCode]);return/*#__PURE__*/_jsx(\"div\",{id:id,ref:editorRef,className:\"vhdl-editor\"});});function debounce(func,wait){let timeout;return function(){clearTimeout(timeout);timeout=setTimeout(func,wait);};}const CompilerConsole=_ref2=>{let{output}=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:\"compiler-console\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u041A\\u043E\\u043D\\u0441\\u043E\\u043B\\u044C:\"}),/*#__PURE__*/_jsx(\"pre\",{children:output})]});};const VHDLEditorWithCompiler=()=>{const[architectureCode,setArchitectureCode]=useState(\"library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\nentity adder is\\n  generic (\\n    operand_width_g: natural\\n  );\\n\\n  port (\\n    clk : in std_logic;\\n    rst_n : in std_logic;\\n\\n    -- a_in, b_in and sum_out are signed numbers (2's complement)\\n    a_in : in std_logic_vector(operand_width_g - 1 downto 0);\\n    b_in : in std_logic_vector(operand_width_g - 1 downto 0);\\n    sum_out : out std_logic_vector(operand_width_g downto 0)\\n  );\\nend entity;\\n\\n------------------------------------------------------------------------------\\n\\narchitecture rtl of adder is\\n  constant outw: natural := operand_width_g + 1; -- Output width\\n  signal result_r: signed(operand_width_g downto 0);\\nbegin\\n  -- Internal signal result_r goes to output port\\n  sum_out <= std_logic_vector(result_r);\\n\\n  -- Synchronous process performs addition on clock edge\\n  sync: process(rst_n, clk)\\n  begin\\n    if (rst_n = '0') then\\n      result_r <= to_signed(0, outw);\\n    elsif rising_edge(clk) then\\n      result_r <= resize(signed(a_in), outw) + resize(signed(b_in), outw);\\n    end if;\\n  end process;\\nend architecture;\");const[testbenchCode,setTestbenchCode]=useState(\"library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\nentity tb_adder is\\nend tb_adder;\\n\\n\\narchitecture testbench of tb_adder is\\n\\n  -- Define constants: bit widths and duration of clk period\\n  constant input_w_c : integer := 8;\\n  constant output_w_c : integer := 9;\\n  constant clk_period_c : time := 100 ns;\\n\\n  -- Calculate minimum and maximum values of input values\\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\\n\\n  -- Component declaration of DUV\\n  component adder\\n    generic (\\n      operand_width_g : integer\\n    );\\n    port (\\n      clk : in std_logic;\\n      rst_n : in std_logic;\\n      a_in : in std_logic_vector(operand_width_g-1 downto 0);\\n      b_in : in std_logic_vector(operand_width_g-1 downto 0);\\n      sum_out : out std_logic_vector(operand_width_g downto 0)\\n    );\\n  end component;\\n\\n  -- Define the needed signals\\n  signal clk : std_logic := '0';\\n  signal rst_n : std_logic := '0';\\n  signal term1_r : signed(input_w_c-1 downto 0);\\n  signal term2_r : signed(input_w_c-1 downto 0);\\n  signal sum : std_logic_vector(output_w_c-1 downto 0);\\n  signal expected_sum_r : signed(output_w_c-1 downto 0);\\n  signal end_simulation_r : std_logic;\\n\\nbegin -- testbench\\n\\n  adder_1 : adder\\n    generic map (\\n      operand_width_g => input_w_c)\\n    port map (\\n      clk => clk,\\n      rst_n => rst_n,\\n      a_in => std_logic_vector(term1_r),\\n      b_in => std_logic_vector(term2_r),\\n      sum_out => sum);\\n\\n  rst_n <= '1' after clk_period_c*2;\\n\\n  clk_gen : process (clk)\\n  begin\\n    clk <= not clk after clk_period_c/2;\\n  end process clk_gen;\\n\\n  input_gen_output_check : process (clk, rst_n)\\n  begin\\n    if rst_n = '0' then\\n      term1_r <= min_value_c;\\n      term2_r <= min_value_c;\\n      expected_sum_r <= (others => '0');\\n      end_simulation_r <= '0';\\n    elsif clk'event and clk = '1' then\\n      if ( term1_r = max_value_c ) then\\n        term1_r <= min_value_c;\\n        if ( term2_r = max_value_c ) then\\n          term2_r <= min_value_c;\\n          end_simulation_r <= '1';\\n        else\\n          term2_r <= term2_r + to_signed(1, input_w_c);\\n        end if;\\n      else\\n        term1_r <= term1_r + to_signed(1, input_w_c);\\n      end if;\\n      expected_sum_r <= resize(term1_r, output_w_c) + resize(term2_r, output_w_c);\\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\\n        report \\\"output signal is not equal to the sum of the inputs\\\"\\n        severity failure;\\n      assert end_simulation_r = '0'\\n        report \\\"Simulation ended!\\\" severity failure;\\n    end if;\\n  end process input_gen_output_check;\\n\\nend testbench;\\n\");const[output,setOutput]=useState('');const compileCode=async()=>{try{const response=await fetch('http://localhost:5000/compile-vhdl',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({architectureCode,testbenchCode})});const text=await response.text();try{const result=JSON.parse(text);if(result.success){setOutput(\"\\u041A\\u043E\\u043C\\u043F\\u0438\\u043B\\u044F\\u0446\\u0438\\u044F \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u0430:\\n\".concat(result.stdout));}else{setOutput(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043A\\u043E\\u043C\\u043F\\u0438\\u043B\\u044F\\u0446\\u0438\\u0438:\\n\".concat(result.stderr));}}catch{throw new Error(\"\\u041D\\u0435\\u043A\\u043E\\u0440\\u0440\\u0435\\u043A\\u0442\\u043D\\u044B\\u0439 JSON-\\u043E\\u0442\\u0432\\u0435\\u0442: \".concat(text));}}catch(error){setOutput(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0430: \".concat(error.message));}};const downloadVCD=async()=>{try{const response=await fetch('http://localhost:5000/download-vcd',{method:'GET'});if(!response.ok){throw new Error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(response.statusText));}const blob=await response.blob();const link=document.createElement('a');link.href=URL.createObjectURL(blob);link.download='out.vcd';link.click();}catch(error){setOutput('Ошибка скачивания VCD: '+error.message);}};return/*#__PURE__*/_jsxs(\"div\",{id:\"content-container\",className:\"content-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430:\"}),/*#__PURE__*/_jsx(VHDLEditor,{id:\"architecture-editor\",onCodeChange:setArchitectureCode,initialCode:architectureCode}),/*#__PURE__*/_jsx(\"h3\",{children:\"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434:\"}),/*#__PURE__*/_jsx(VHDLEditor,{id:\"testbench-editor\",onCodeChange:setTestbenchCode,initialCode:testbenchCode}),/*#__PURE__*/_jsx(CompilerConsole,{output:output}),/*#__PURE__*/_jsx(\"button\",{onClick:compileCode,children:\"\\u041A\\u043E\\u043C\\u043F\\u0438\\u043B\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"}),/*#__PURE__*/_jsx(\"button\",{onClick:downloadVCD,children:\"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C VCD\"})]});};export default VHDLEditorWithCompiler;","map":{"version":3,"names":["React","useState","useEffect","useRef","monaco","jsx","_jsx","jsxs","_jsxs","VHDLEditor","memo","_ref","id","onCodeChange","initialCode","editorRef","editorInstanceRef","scrollPositionRef","top","left","cursorPositionRef","current","editor","create","value","language","theme","automaticLayout","editorInstance","debounceChangeHandler","debounce","code","getValue","onDidChangeModelContent","dispose","saveCursorAndScroll","getScrollTop","getScrollLeft","getPosition","restoreCursorAndScroll","setScrollTop","setScrollLeft","setPosition","revealPositionInCenter","scrollListener","onDidScrollChange","cursorListener","onDidChangeCursorPosition","ref","className","func","wait","timeout","clearTimeout","setTimeout","CompilerConsole","_ref2","output","children","VHDLEditorWithCompiler","architectureCode","setArchitectureCode","testbenchCode","setTestbenchCode","setOutput","compileCode","response","fetch","method","headers","body","JSON","stringify","text","result","parse","success","concat","stdout","stderr","Error","error","message","downloadVCD","ok","statusText","blob","link","document","createElement","href","URL","createObjectURL","download","click","onClick"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport * as monaco from 'monaco-editor';\r\nimport './monaco-vhdl'; \r\n\r\nconst VHDLEditor = React.memo(({ id, onCodeChange, initialCode }) => {\r\n  const editorRef = useRef(null);\r\n  const editorInstanceRef = useRef(null);\r\n  const scrollPositionRef = useRef({ top: 0, left: 0 });\r\n  const cursorPositionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (editorRef.current) {\r\n      editorInstanceRef.current = monaco.editor.create(editorRef.current, {\r\n        value: initialCode,\r\n        language: 'vhdl',\r\n        theme: 'vs-dark',\r\n        automaticLayout: true,\r\n      });\r\n\r\n      const editorInstance = editorInstanceRef.current;\r\n\r\n      const debounceChangeHandler = debounce(() => {\r\n        const code = editorInstance.getValue();\r\n        onCodeChange(code);\r\n      }, 300);\r\n\r\n      editorInstance.onDidChangeModelContent(debounceChangeHandler);\r\n\r\n      return () => {\r\n        editorInstance.dispose();\r\n      };\r\n    }\r\n  }, [initialCode, onCodeChange]);\r\n\r\n  const saveCursorAndScroll = () => {\r\n    if (editorInstanceRef.current) {\r\n      const editor = editorInstanceRef.current;\r\n      scrollPositionRef.current.top = editor.getScrollTop();\r\n      scrollPositionRef.current.left = editor.getScrollLeft();\r\n      cursorPositionRef.current = editor.getPosition();\r\n    }\r\n  };\r\n\r\n  const restoreCursorAndScroll = () => {\r\n    if (editorInstanceRef.current) {\r\n      const editor = editorInstanceRef.current;\r\n      editor.setScrollTop(scrollPositionRef.current.top);\r\n      editor.setScrollLeft(scrollPositionRef.current.left);\r\n      if (cursorPositionRef.current) {\r\n        editor.setPosition(cursorPositionRef.current);\r\n        editor.revealPositionInCenter(cursorPositionRef.current);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const editor = editorInstanceRef.current;\r\n\r\n    if (editor) {\r\n      const scrollListener = editor.onDidScrollChange(saveCursorAndScroll);\r\n      const cursorListener = editor.onDidChangeCursorPosition(saveCursorAndScroll);\r\n\r\n      return () => {\r\n        scrollListener.dispose();\r\n        cursorListener.dispose();\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    restoreCursorAndScroll();\r\n  }, [initialCode]);\r\n\r\n  return <div id={id} ref={editorRef} className=\"vhdl-editor\"></div>;\r\n});\r\n\r\nfunction debounce(func, wait) {\r\n  let timeout;\r\n  return function () {\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(func, wait);\r\n  };\r\n}\r\n\r\nconst CompilerConsole = ({ output }) => (\r\n  <div className=\"compiler-console\">\r\n    <h3>Консоль:</h3>\r\n    <pre>{output}</pre>\r\n  </div>\r\n);\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity adder is\r\n  generic (\r\n    operand_width_g: natural\r\n  );\r\n\r\n  port (\r\n    clk : in std_logic;\r\n    rst_n : in std_logic;\r\n\r\n    -- a_in, b_in and sum_out are signed numbers (2's complement)\r\n    a_in : in std_logic_vector(operand_width_g - 1 downto 0);\r\n    b_in : in std_logic_vector(operand_width_g - 1 downto 0);\r\n    sum_out : out std_logic_vector(operand_width_g downto 0)\r\n  );\r\nend entity;\r\n\r\n------------------------------------------------------------------------------\r\n\r\narchitecture rtl of adder is\r\n  constant outw: natural := operand_width_g + 1; -- Output width\r\n  signal result_r: signed(operand_width_g downto 0);\r\nbegin\r\n  -- Internal signal result_r goes to output port\r\n  sum_out <= std_logic_vector(result_r);\r\n\r\n  -- Synchronous process performs addition on clock edge\r\n  sync: process(rst_n, clk)\r\n  begin\r\n    if (rst_n = '0') then\r\n      result_r <= to_signed(0, outw);\r\n    elsif rising_edge(clk) then\r\n      result_r <= resize(signed(a_in), outw) + resize(signed(b_in), outw);\r\n    end if;\r\n  end process;\r\nend architecture;`);\r\n\r\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity tb_adder is\r\nend tb_adder;\r\n\r\n\r\narchitecture testbench of tb_adder is\r\n\r\n  -- Define constants: bit widths and duration of clk period\r\n  constant input_w_c : integer := 8;\r\n  constant output_w_c : integer := 9;\r\n  constant clk_period_c : time := 100 ns;\r\n\r\n  -- Calculate minimum and maximum values of input values\r\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\r\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\r\n\r\n  -- Component declaration of DUV\r\n  component adder\r\n    generic (\r\n      operand_width_g : integer\r\n    );\r\n    port (\r\n      clk : in std_logic;\r\n      rst_n : in std_logic;\r\n      a_in : in std_logic_vector(operand_width_g-1 downto 0);\r\n      b_in : in std_logic_vector(operand_width_g-1 downto 0);\r\n      sum_out : out std_logic_vector(operand_width_g downto 0)\r\n    );\r\n  end component;\r\n\r\n  -- Define the needed signals\r\n  signal clk : std_logic := '0';\r\n  signal rst_n : std_logic := '0';\r\n  signal term1_r : signed(input_w_c-1 downto 0);\r\n  signal term2_r : signed(input_w_c-1 downto 0);\r\n  signal sum : std_logic_vector(output_w_c-1 downto 0);\r\n  signal expected_sum_r : signed(output_w_c-1 downto 0);\r\n  signal end_simulation_r : std_logic;\r\n\r\nbegin -- testbench\r\n\r\n  adder_1 : adder\r\n    generic map (\r\n      operand_width_g => input_w_c)\r\n    port map (\r\n      clk => clk,\r\n      rst_n => rst_n,\r\n      a_in => std_logic_vector(term1_r),\r\n      b_in => std_logic_vector(term2_r),\r\n      sum_out => sum);\r\n\r\n  rst_n <= '1' after clk_period_c*2;\r\n\r\n  clk_gen : process (clk)\r\n  begin\r\n    clk <= not clk after clk_period_c/2;\r\n  end process clk_gen;\r\n\r\n  input_gen_output_check : process (clk, rst_n)\r\n  begin\r\n    if rst_n = '0' then\r\n      term1_r <= min_value_c;\r\n      term2_r <= min_value_c;\r\n      expected_sum_r <= (others => '0');\r\n      end_simulation_r <= '0';\r\n    elsif clk'event and clk = '1' then\r\n      if ( term1_r = max_value_c ) then\r\n        term1_r <= min_value_c;\r\n        if ( term2_r = max_value_c ) then\r\n          term2_r <= min_value_c;\r\n          end_simulation_r <= '1';\r\n        else\r\n          term2_r <= term2_r + to_signed(1, input_w_c);\r\n        end if;\r\n      else\r\n        term1_r <= term1_r + to_signed(1, input_w_c);\r\n      end if;\r\n      expected_sum_r <= resize(term1_r, output_w_c) + resize(term2_r, output_w_c);\r\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\r\n        report \"output signal is not equal to the sum of the inputs\"\r\n        severity failure;\r\n      assert end_simulation_r = '0'\r\n        report \"Simulation ended!\" severity failure;\r\n    end if;\r\n  end process input_gen_output_check;\r\n\r\nend testbench;\r\n`);\r\n\r\n  const [output, setOutput] = useState('');\r\n\r\n  const compileCode = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ architectureCode, testbenchCode }),\r\n      });\r\n\r\n      const text = await response.text();\r\n      try {\r\n        const result = JSON.parse(text);\r\n        if (result.success) {\r\n          setOutput(`Компиляция успешна:\\n${result.stdout}`);\r\n        } else {\r\n          setOutput(`Ошибка компиляции:\\n${result.stderr}`);\r\n        }\r\n      } catch {\r\n        throw new Error(`Некорректный JSON-ответ: ${text}`);\r\n      }\r\n    } catch (error) {\r\n      setOutput(`Ошибка запроса: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const downloadVCD = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/download-vcd', {\r\n        method: 'GET',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Ошибка: ${response.statusText}`);\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const link = document.createElement('a');\r\n      link.href = URL.createObjectURL(blob);\r\n      link.download = 'out.vcd';\r\n      link.click();\r\n    } catch (error) {\r\n      setOutput('Ошибка скачивания VCD: ' + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"content-container\" className=\"content-container\">\r\n      <h3>Архитектура:</h3>\r\n      <VHDLEditor\r\n        id=\"architecture-editor\"\r\n        onCodeChange={setArchitectureCode}\r\n        initialCode={architectureCode}\r\n      />\r\n\r\n      <h3>Тестовый стенд:</h3>\r\n      <VHDLEditor\r\n        id=\"testbench-editor\"\r\n        onCodeChange={setTestbenchCode}\r\n        initialCode={testbenchCode}\r\n      />\r\n\r\n      <CompilerConsole output={output} />\r\n\r\n      <button onClick={compileCode}>Компилировать</button>\r\n      <button onClick={downloadVCD}>Скачать VCD</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VHDLEditorWithCompiler;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
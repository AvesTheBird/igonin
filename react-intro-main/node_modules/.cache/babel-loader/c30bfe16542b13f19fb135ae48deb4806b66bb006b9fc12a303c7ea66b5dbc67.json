{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphAbstractHierarchyCell from './GraphAbstractHierarchyCell';\nimport ObjectIdentity from '../../../util/ObjectIdentity';\nclass GraphHierarchyEdge extends GraphAbstractHierarchyCell {\n  /**\n   * Class: mxGraphHierarchyEdge\n   *\n   * An abstraction of a hierarchical edge for the hierarchy layout\n   *\n   * Constructor: mxGraphHierarchyEdge\n   *\n   * Constructs a hierarchy edge\n   *\n   * Arguments:\n   *\n   * edges - a list of real graph edges this abstraction represents\n   */\n  constructor(edges) {\n    super();\n    /**\n     * The node this edge is sourced at\n     */\n    this.source = null;\n    /**\n     * The node this edge targets\n     */\n    this.target = null;\n    /**\n     * Whether or not the direction of this edge has been reversed\n     * internally to create a DAG for the hierarchical layout\n     */\n    this.isReversed = false;\n    this.edges = edges;\n    this.ids = [];\n    for (let i = 0; i < edges.length; i += 1) {\n      this.ids.push(ObjectIdentity.get(edges[i]));\n    }\n  }\n  /**\n   * Inverts the direction of this internal edge(s)\n   */\n  invert() {\n    const temp = this.source;\n    this.source = this.target;\n    this.target = temp;\n    this.isReversed = !this.isReversed;\n  }\n  /**\n   * Returns the cells this cell connects to on the next layer up\n   */\n  getNextLayerConnectedCells(layer) {\n    if (this.nextLayerConnectedCells == null) {\n      this.nextLayerConnectedCells = [];\n      for (let i = 0; i < this.temp.length; i += 1) {\n        this.nextLayerConnectedCells[i] = [];\n        if (i === this.temp.length - 1) {\n          this.nextLayerConnectedCells[i].push(this.source);\n        } else {\n          this.nextLayerConnectedCells[i].push(this);\n        }\n      }\n    }\n    return this.nextLayerConnectedCells[layer - this.minRank - 1];\n  }\n  /**\n   * Returns the cells this cell connects to on the next layer down\n   */\n  getPreviousLayerConnectedCells(layer) {\n    if (this.previousLayerConnectedCells == null) {\n      this.previousLayerConnectedCells = [];\n      for (let i = 0; i < this.temp.length; i += 1) {\n        this.previousLayerConnectedCells[i] = [];\n        if (i === 0) {\n          this.previousLayerConnectedCells[i].push(this.target);\n        } else {\n          this.previousLayerConnectedCells[i].push(this);\n        }\n      }\n    }\n    return this.previousLayerConnectedCells[layer - this.minRank - 1];\n  }\n  /**\n   * Returns true.\n   */\n  isEdge() {\n    return true;\n  }\n  /**\n   * Gets the value of temp for the specified layer\n   */\n  getGeneralPurposeVariable(layer) {\n    return this.temp[layer - this.minRank - 1];\n  }\n  /**\n   * Set the value of temp for the specified layer\n   */\n  setGeneralPurposeVariable(layer, value) {\n    this.temp[layer - this.minRank - 1] = value;\n  }\n  /**\n   * Gets the first core edge associated with this wrapper\n   */\n  getCoreCell() {\n    if (this.edges.length > 0) {\n      return this.edges[0];\n    }\n    return null;\n  }\n}\nexport default GraphHierarchyEdge;","map":{"version":3,"names":["GraphAbstractHierarchyCell","ObjectIdentity","GraphHierarchyEdge","constructor","edges","source","target","isReversed","ids","i","length","push","get","invert","temp","getNextLayerConnectedCells","layer","nextLayerConnectedCells","minRank","getPreviousLayerConnectedCells","previousLayerConnectedCells","isEdge","getGeneralPurposeVariable","setGeneralPurposeVariable","value","getCoreCell"],"sources":["D:/ospanel/domains/react/react-intro-main/node_modules/@maxgraph/core/dist/view/layout/datatypes/GraphHierarchyEdge.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphAbstractHierarchyCell from './GraphAbstractHierarchyCell';\nimport ObjectIdentity from '../../../util/ObjectIdentity';\nclass GraphHierarchyEdge extends GraphAbstractHierarchyCell {\n    /**\n     * Class: mxGraphHierarchyEdge\n     *\n     * An abstraction of a hierarchical edge for the hierarchy layout\n     *\n     * Constructor: mxGraphHierarchyEdge\n     *\n     * Constructs a hierarchy edge\n     *\n     * Arguments:\n     *\n     * edges - a list of real graph edges this abstraction represents\n     */\n    constructor(edges) {\n        super();\n        /**\n         * The node this edge is sourced at\n         */\n        this.source = null;\n        /**\n         * The node this edge targets\n         */\n        this.target = null;\n        /**\n         * Whether or not the direction of this edge has been reversed\n         * internally to create a DAG for the hierarchical layout\n         */\n        this.isReversed = false;\n        this.edges = edges;\n        this.ids = [];\n        for (let i = 0; i < edges.length; i += 1) {\n            this.ids.push(ObjectIdentity.get(edges[i]));\n        }\n    }\n    /**\n     * Inverts the direction of this internal edge(s)\n     */\n    invert() {\n        const temp = this.source;\n        this.source = this.target;\n        this.target = temp;\n        this.isReversed = !this.isReversed;\n    }\n    /**\n     * Returns the cells this cell connects to on the next layer up\n     */\n    getNextLayerConnectedCells(layer) {\n        if (this.nextLayerConnectedCells == null) {\n            this.nextLayerConnectedCells = [];\n            for (let i = 0; i < this.temp.length; i += 1) {\n                this.nextLayerConnectedCells[i] = [];\n                if (i === this.temp.length - 1) {\n                    this.nextLayerConnectedCells[i].push(this.source);\n                }\n                else {\n                    this.nextLayerConnectedCells[i].push(this);\n                }\n            }\n        }\n        return this.nextLayerConnectedCells[layer - this.minRank - 1];\n    }\n    /**\n     * Returns the cells this cell connects to on the next layer down\n     */\n    getPreviousLayerConnectedCells(layer) {\n        if (this.previousLayerConnectedCells == null) {\n            this.previousLayerConnectedCells = [];\n            for (let i = 0; i < this.temp.length; i += 1) {\n                this.previousLayerConnectedCells[i] = [];\n                if (i === 0) {\n                    this.previousLayerConnectedCells[i].push(this.target);\n                }\n                else {\n                    this.previousLayerConnectedCells[i].push(this);\n                }\n            }\n        }\n        return this.previousLayerConnectedCells[layer - this.minRank - 1];\n    }\n    /**\n     * Returns true.\n     */\n    isEdge() {\n        return true;\n    }\n    /**\n     * Gets the value of temp for the specified layer\n     */\n    getGeneralPurposeVariable(layer) {\n        return this.temp[layer - this.minRank - 1];\n    }\n    /**\n     * Set the value of temp for the specified layer\n     */\n    setGeneralPurposeVariable(layer, value) {\n        this.temp[layer - this.minRank - 1] = value;\n    }\n    /**\n     * Gets the first core edge associated with this wrapper\n     */\n    getCoreCell() {\n        if (this.edges.length > 0) {\n            return this.edges[0];\n        }\n        return null;\n    }\n}\nexport default GraphHierarchyEdge;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as monaco from 'monaco-editor';\nimport './monaco-vhdl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditor = ({\n  id,\n  onCodeChange,\n  initialCode\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const editorInstanceRef = useRef(null);\n  useEffect(() => {\n    if (editorRef.current) {\n      const editor = monaco.editor.create(editorRef.current, {\n        value: initialCode,\n        language: 'vhdl',\n        theme: 'my-custom-dark',\n        automaticLayout: true\n      });\n      editorInstanceRef.current = editor;\n      editor.onDidChangeModelContent(() => {\n        onCodeChange(editor.getValue());\n      });\n      return () => editor.dispose();\n    }\n  }, [initialCode, onCodeChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    ref: editorRef,\n    className: \"vhdl-editor\",\n    style: {\n      height: '300px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n_s(VHDLEditor, \"eMaykGx9e9LdP6uT5VSBHpuSIIM=\");\n_c = VHDLEditor;\nconst CompilerConsole = ({\n  output\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"compiler-console\",\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    style: {\n      color: 'black',\n      marginLeft: '15px'\n    },\n    children: \"\\u041A\\u043E\\u043D\\u0441\\u043E\\u043B\\u044C:\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n    style: {\n      color: 'black',\n      marginLeft: '15px'\n    },\n    children: output\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 32,\n  columnNumber: 3\n}, this);\n_c2 = CompilerConsole;\nconst VHDLEditorWithCompiler = () => {\n  _s2();\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity adder is\n  generic (\n    operand_width_g: natural\n  );\n\n  port (\n    clk : in std_logic;\n    rst_n : in std_logic;\n\n    -- a_in, b_in and sum_out are signed numbers (2's complement)\n    a_in : in std_logic_vector(operand_width_g - 1 downto 0);\n    b_in : in std_logic_vector(operand_width_g - 1 downto 0);\n    sum_out : out std_logic_vector(operand_width_g downto 0)\n  );\nend entity;\n\n------------------------------------------------------------------------------\n\narchitecture rtl of adder is\n  constant outw: natural := operand_width_g + 1; -- Output width\n  signal result_r: signed(operand_width_g downto 0);\nbegin\n  -- Internal signal result_r goes to output port\n  sum_out <= std_logic_vector(result_r);\n\n  -- Synchronous process performs addition on clock edge\n  sync: process(rst_n, clk)\n  begin\n    if (rst_n = '0') then\n      result_r <= to_signed(0, outw);\n    elsif rising_edge(clk) then\n      result_r <= resize(signed(a_in), outw) + resize(signed(b_in), outw);\n    end if;\n  end process;\nend architecture;`);\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity tb_adder is\nend tb_adder;\n\n\narchitecture testbench of tb_adder is\n\n  -- Define constants: bit widths and duration of clk period\n  constant input_w_c : integer := 8;\n  constant output_w_c : integer := 9;\n  constant clk_period_c : time := 100 ns;\n\n  -- Calculate minimum and maximum values of input values\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\n\n  -- Component declaration of DUV\n  component adder\n    generic (\n      operand_width_g : integer\n    );\n    port (\n      clk : in std_logic;\n      rst_n : in std_logic;\n      a_in : in std_logic_vector(operand_width_g-1 downto 0);\n      b_in : in std_logic_vector(operand_width_g-1 downto 0);\n      sum_out : out std_logic_vector(operand_width_g downto 0)\n    );\n  end component;\n\n  -- Define the needed signals\n  signal clk : std_logic := '0';\n  signal rst_n : std_logic := '0';\n  signal term1_r : signed(input_w_c-1 downto 0);\n  signal term2_r : signed(input_w_c-1 downto 0);\n  signal sum : std_logic_vector(output_w_c-1 downto 0);\n  signal expected_sum_r : signed(output_w_c-1 downto 0);\n  signal end_simulation_r : std_logic;\n\nbegin -- testbench\n\n  adder_1 : adder\n    generic map (\n      operand_width_g => input_w_c)\n    port map (\n      clk => clk,\n      rst_n => rst_n,\n      a_in => std_logic_vector(term1_r),\n      b_in => std_logic_vector(term2_r),\n      sum_out => sum);\n\n  rst_n <= '1' after clk_period_c*2;\n\n  clk_gen : process (clk)\n  begin\n    clk <= not clk after clk_period_c/2;\n  end process clk_gen;\n\n  input_gen_output_check : process (clk, rst_n)\n  begin\n    if rst_n = '0' then\n      term1_r <= min_value_c;\n      term2_r <= min_value_c;\n      expected_sum_r <= (others => '0');\n      end_simulation_r <= '0';\n    elsif clk'event and clk = '1' then\n      if ( term1_r = max_value_c ) then\n        term1_r <= min_value_c;\n        if ( term2_r = max_value_c ) then\n          term2_r <= min_value_c;\n          end_simulation_r <= '1';\n        else\n          term2_r <= term2_r + to_signed(1, input_w_c);\n        end if;\n      else\n        term1_r <= term1_r + to_signed(1, input_w_c);\n      end if;\n      expected_sum_r <= resize(term1_r, output_w_c) + resize(term2_r, output_w_c);\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\n        report \"output signal is not equal to the sum of the inputs\"\n        severity failure;\n      assert end_simulation_r = '0'\n        report \"Simulation ended!\" severity failure;\n    end if;\n  end process input_gen_output_check;\n\nend testbench;\n`);\n  const [output, setOutput] = useState('');\n  const compileCode = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          architectureCode,\n          testbenchCode\n        })\n      });\n      const text = await response.text();\n      const result = JSON.parse(text);\n      if (result.success) {\n        setOutput(`Компиляция успешна:\\n${result.stdout}`);\n      } else {\n        setOutput(`Ошибка компиляции:\\n${result.stderr}`);\n      }\n    } catch (error) {\n      setOutput(`Ошибка запроса: ${error.message}`);\n    }\n  }, [architectureCode, testbenchCode]);\n  const downloadVCD = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:5000/download-vcd', {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`Ошибка: ${response.statusText}`);\n      }\n      const blob = await response.blob();\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = 'out.vcd';\n      link.click();\n    } catch (error) {\n      setOutput('Ошибка скачивания VCD: ' + error.message);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content-container\",\n    className: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        color: 'white',\n        marginLeft: '15px'\n      },\n      children: \"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"architecture-editor\",\n      onCodeChange: setArchitectureCode,\n      initialCode: architectureCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        color: 'white',\n        marginLeft: '15px',\n        marginTop: '10px'\n      },\n      children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"testbench-editor\",\n      onCodeChange: setTestbenchCode,\n      initialCode: testbenchCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '15px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: compileCode,\n        children: \"\\u041A\\u043E\\u043C\\u043F\\u0438\\u043B\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadVCD,\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C VCD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(CompilerConsole, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 3\n  }, this);\n};\n_s2(VHDLEditorWithCompiler, \"JaDCLpqgIPQXG5cqoCrCI63iFdQ=\");\n_c3 = VHDLEditorWithCompiler;\nexport default VHDLEditorWithCompiler;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"VHDLEditor\");\n$RefreshReg$(_c2, \"CompilerConsole\");\n$RefreshReg$(_c3, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","monaco","jsxDEV","_jsxDEV","VHDLEditor","id","onCodeChange","initialCode","_s","editorRef","editorInstanceRef","current","editor","create","value","language","theme","automaticLayout","onDidChangeModelContent","getValue","dispose","ref","className","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","CompilerConsole","output","children","color","marginLeft","_c2","VHDLEditorWithCompiler","_s2","architectureCode","setArchitectureCode","testbenchCode","setTestbenchCode","setOutput","compileCode","response","fetch","method","headers","body","JSON","stringify","text","result","parse","success","stdout","stderr","error","message","downloadVCD","ok","Error","statusText","blob","link","document","createElement","href","URL","createObjectURL","download","click","marginTop","margin","onClick","_c3","$RefreshReg$"],"sources":["D:/ospanel/domains/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport * as monaco from 'monaco-editor';\r\nimport './monaco-vhdl';\r\n\r\nconst VHDLEditor = ({ id, onCodeChange, initialCode }) => {\r\n  const editorRef = useRef(null);\r\n  const editorInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (editorRef.current) {\r\n      const editor = monaco.editor.create(editorRef.current, {\r\n        value: initialCode,\r\n        language: 'vhdl',\r\n        theme: 'my-custom-dark',\r\n        automaticLayout: true,\r\n      });\r\n\r\n      editorInstanceRef.current = editor;\r\n\r\n      editor.onDidChangeModelContent(() => {\r\n        onCodeChange(editor.getValue());\r\n      });\r\n\r\n      return () => editor.dispose();\r\n    }\r\n  }, [initialCode, onCodeChange]);\r\n\r\n  return <div id={id} ref={editorRef} className=\"vhdl-editor\" style={{ height: '300px' }}></div>;\r\n};\r\n\r\nconst CompilerConsole = ({ output }) => (\r\n  <div className=\"compiler-console\">\r\n    <h3 style={{ color: 'black', marginLeft: '15px' }}>Консоль:</h3>\r\n    <pre style={{ color: 'black', marginLeft: '15px' }}>{output}</pre>\r\n  </div>\r\n);\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity adder is\r\n  generic (\r\n    operand_width_g: natural\r\n  );\r\n\r\n  port (\r\n    clk : in std_logic;\r\n    rst_n : in std_logic;\r\n\r\n    -- a_in, b_in and sum_out are signed numbers (2's complement)\r\n    a_in : in std_logic_vector(operand_width_g - 1 downto 0);\r\n    b_in : in std_logic_vector(operand_width_g - 1 downto 0);\r\n    sum_out : out std_logic_vector(operand_width_g downto 0)\r\n  );\r\nend entity;\r\n\r\n------------------------------------------------------------------------------\r\n\r\narchitecture rtl of adder is\r\n  constant outw: natural := operand_width_g + 1; -- Output width\r\n  signal result_r: signed(operand_width_g downto 0);\r\nbegin\r\n  -- Internal signal result_r goes to output port\r\n  sum_out <= std_logic_vector(result_r);\r\n\r\n  -- Synchronous process performs addition on clock edge\r\n  sync: process(rst_n, clk)\r\n  begin\r\n    if (rst_n = '0') then\r\n      result_r <= to_signed(0, outw);\r\n    elsif rising_edge(clk) then\r\n      result_r <= resize(signed(a_in), outw) + resize(signed(b_in), outw);\r\n    end if;\r\n  end process;\r\nend architecture;`);\r\n\r\n  const [testbenchCode, setTestbenchCode] = useState(`library ieee;\r\nuse ieee.std_logic_1164.all;\r\nuse ieee.numeric_std.all;\r\n\r\nentity tb_adder is\r\nend tb_adder;\r\n\r\n\r\narchitecture testbench of tb_adder is\r\n\r\n  -- Define constants: bit widths and duration of clk period\r\n  constant input_w_c : integer := 8;\r\n  constant output_w_c : integer := 9;\r\n  constant clk_period_c : time := 100 ns;\r\n\r\n  -- Calculate minimum and maximum values of input values\r\n  constant min_value_c : signed(input_w_c-1 downto 0) := to_signed( -(2**(input_w_c-1)), input_w_c);\r\n  constant max_value_c : signed(input_w_c-1 downto 0) := to_signed( 2**(input_w_c-1)-1, input_w_c);\r\n\r\n  -- Component declaration of DUV\r\n  component adder\r\n    generic (\r\n      operand_width_g : integer\r\n    );\r\n    port (\r\n      clk : in std_logic;\r\n      rst_n : in std_logic;\r\n      a_in : in std_logic_vector(operand_width_g-1 downto 0);\r\n      b_in : in std_logic_vector(operand_width_g-1 downto 0);\r\n      sum_out : out std_logic_vector(operand_width_g downto 0)\r\n    );\r\n  end component;\r\n\r\n  -- Define the needed signals\r\n  signal clk : std_logic := '0';\r\n  signal rst_n : std_logic := '0';\r\n  signal term1_r : signed(input_w_c-1 downto 0);\r\n  signal term2_r : signed(input_w_c-1 downto 0);\r\n  signal sum : std_logic_vector(output_w_c-1 downto 0);\r\n  signal expected_sum_r : signed(output_w_c-1 downto 0);\r\n  signal end_simulation_r : std_logic;\r\n\r\nbegin -- testbench\r\n\r\n  adder_1 : adder\r\n    generic map (\r\n      operand_width_g => input_w_c)\r\n    port map (\r\n      clk => clk,\r\n      rst_n => rst_n,\r\n      a_in => std_logic_vector(term1_r),\r\n      b_in => std_logic_vector(term2_r),\r\n      sum_out => sum);\r\n\r\n  rst_n <= '1' after clk_period_c*2;\r\n\r\n  clk_gen : process (clk)\r\n  begin\r\n    clk <= not clk after clk_period_c/2;\r\n  end process clk_gen;\r\n\r\n  input_gen_output_check : process (clk, rst_n)\r\n  begin\r\n    if rst_n = '0' then\r\n      term1_r <= min_value_c;\r\n      term2_r <= min_value_c;\r\n      expected_sum_r <= (others => '0');\r\n      end_simulation_r <= '0';\r\n    elsif clk'event and clk = '1' then\r\n      if ( term1_r = max_value_c ) then\r\n        term1_r <= min_value_c;\r\n        if ( term2_r = max_value_c ) then\r\n          term2_r <= min_value_c;\r\n          end_simulation_r <= '1';\r\n        else\r\n          term2_r <= term2_r + to_signed(1, input_w_c);\r\n        end if;\r\n      else\r\n        term1_r <= term1_r + to_signed(1, input_w_c);\r\n      end if;\r\n      expected_sum_r <= resize(term1_r, output_w_c) + resize(term2_r, output_w_c);\r\n      assert to_integer(signed(sum)) = to_integer(expected_sum_r)\r\n        report \"output signal is not equal to the sum of the inputs\"\r\n        severity failure;\r\n      assert end_simulation_r = '0'\r\n        report \"Simulation ended!\" severity failure;\r\n    end if;\r\n  end process input_gen_output_check;\r\n\r\nend testbench;\r\n`);\r\n\r\nconst [output, setOutput] = useState('');\r\n\r\nconst compileCode = useCallback(async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ architectureCode, testbenchCode }),\r\n    });\r\n\r\n    const text = await response.text();\r\n    const result = JSON.parse(text);\r\n\r\n    if (result.success) {\r\n      setOutput(`Компиляция успешна:\\n${result.stdout}`);\r\n    } else {\r\n      setOutput(`Ошибка компиляции:\\n${result.stderr}`);\r\n    }\r\n  } catch (error) {\r\n    setOutput(`Ошибка запроса: ${error.message}`);\r\n  }\r\n}, [architectureCode, testbenchCode]);\r\n\r\nconst downloadVCD = useCallback(async () => {\r\n  try {\r\n    const response = await fetch('http://localhost:5000/download-vcd', { method: 'GET' });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Ошибка: ${response.statusText}`);\r\n    }\r\n\r\n    const blob = await response.blob();\r\n    const link = document.createElement('a');\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = 'out.vcd';\r\n    link.click();\r\n  } catch (error) {\r\n    setOutput('Ошибка скачивания VCD: ' + error.message);\r\n  }\r\n}, []);\r\n\r\nreturn (\r\n  <div id=\"content-container\" className=\"content-container\">\r\n    <h4 style={{ color: 'white', marginLeft: '15px' }}>Архитектура:</h4>\r\n    <VHDLEditor\r\n      id=\"architecture-editor\"\r\n      onCodeChange={setArchitectureCode}\r\n      initialCode={architectureCode}\r\n    />\r\n\r\n    <h4 style={{ color: 'white', marginLeft: '15px', marginTop: '10px' }}>Тестовый стенд:</h4>\r\n    <VHDLEditor\r\n      id=\"testbench-editor\"\r\n      onCodeChange={setTestbenchCode}\r\n      initialCode={testbenchCode}\r\n    />\r\n\r\n    <div style={{ margin: '15px' }}>\r\n      <button onClick={compileCode}>Компилировать</button>\r\n      <button onClick={downloadVCD} style={{ marginLeft: '10px' }}>\r\n        Скачать VCD\r\n      </button>\r\n    </div>\r\n\r\n    <CompilerConsole output={output} />\r\n  </div>\r\n);\r\n};\r\n\r\nexport default VHDLEditorWithCompiler;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,UAAU,GAAGA,CAAC;EAAEC,EAAE;EAAEC,YAAY;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACxD,MAAMC,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMW,iBAAiB,GAAGX,MAAM,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,CAACE,OAAO,EAAE;MACrB,MAAMC,MAAM,GAAGX,MAAM,CAACW,MAAM,CAACC,MAAM,CAACJ,SAAS,CAACE,OAAO,EAAE;QACrDG,KAAK,EAAEP,WAAW;QAClBQ,QAAQ,EAAE,MAAM;QAChBC,KAAK,EAAE,gBAAgB;QACvBC,eAAe,EAAE;MACnB,CAAC,CAAC;MAEFP,iBAAiB,CAACC,OAAO,GAAGC,MAAM;MAElCA,MAAM,CAACM,uBAAuB,CAAC,MAAM;QACnCZ,YAAY,CAACM,MAAM,CAACO,QAAQ,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC;MAEF,OAAO,MAAMP,MAAM,CAACQ,OAAO,CAAC,CAAC;IAC/B;EACF,CAAC,EAAE,CAACb,WAAW,EAAED,YAAY,CAAC,CAAC;EAE/B,oBAAOH,OAAA;IAAKE,EAAE,EAAEA,EAAG;IAACgB,GAAG,EAAEZ,SAAU;IAACa,SAAS,EAAC,aAAa;IAACC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAChG,CAAC;AAACpB,EAAA,CAxBIJ,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AA0BhB,MAAM0B,eAAe,GAAGA,CAAC;EAAEC;AAAO,CAAC,kBACjC5B,OAAA;EAAKmB,SAAS,EAAC,kBAAkB;EAAAU,QAAA,gBAC/B7B,OAAA;IAAIoB,KAAK,EAAE;MAAEU,KAAK,EAAE,OAAO;MAAEC,UAAU,EAAE;IAAO,CAAE;IAAAF,QAAA,EAAC;EAAQ;IAAAP,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC,eAChEzB,OAAA;IAAKoB,KAAK,EAAE;MAAEU,KAAK,EAAE,OAAO;MAAEC,UAAU,EAAE;IAAO,CAAE;IAAAF,QAAA,EAAED;EAAM;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAC/D,CACN;AAACO,GAAA,GALIL,eAAe;AAOrB,MAAMM,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1C,QAAQ,CAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,CAAC;EAEjB,MAAM,CAAC2C,aAAa,EAAEC,gBAAgB,CAAC,GAAG5C,QAAQ,CAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;EAEF,MAAM,CAACkC,MAAM,EAAEW,SAAS,CAAC,GAAG7C,QAAQ,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
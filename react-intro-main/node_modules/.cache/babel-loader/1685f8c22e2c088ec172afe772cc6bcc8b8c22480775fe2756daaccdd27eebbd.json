{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphAbstractHierarchyCell from './GraphAbstractHierarchyCell';\nimport ObjectIdentity from '../../../util/ObjectIdentity';\n/**\n * An abstraction of a hierarchical edge for the hierarchy layout\n *\n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n *\n * cell - the real graph cell this node represents\n */\nclass GraphHierarchyNode extends GraphAbstractHierarchyCell {\n  constructor(cell) {\n    super();\n    /**\n     * The object identities of the wrapped cells\n     */\n    this.ids = [];\n    /**\n     * Assigns a unique hashcode for each node. Used by the model dfs instead\n     * of copying HashSets\n     */\n    this.hashCode = false;\n    this.cell = cell;\n    this.id = ObjectIdentity.get(cell);\n    this.connectsAsTarget = [];\n    this.connectsAsSource = [];\n  }\n  /**\n   * Returns the integer value of the layer that this node resides in\n   */\n  getRankValue(layer) {\n    return this.maxRank;\n  }\n  /**\n   * Returns the cells this cell connects to on the next layer up\n   */\n  getNextLayerConnectedCells(layer) {\n    if (this.nextLayerConnectedCells == null) {\n      this.nextLayerConnectedCells = {};\n      this.nextLayerConnectedCells[0] = [];\n      for (let i = 0; i < this.connectsAsTarget.length; i += 1) {\n        const edge = this.connectsAsTarget[i];\n        if (edge.maxRank === -1 || edge.maxRank === layer + 1) {\n          // Either edge is not in any rank or\n          // no dummy nodes in edge, add node of other side of edge\n          this.nextLayerConnectedCells[0].push(edge.source);\n        } else {\n          // Edge spans at least two layers, add edge\n          this.nextLayerConnectedCells[0].push(edge);\n        }\n      }\n    }\n    return this.nextLayerConnectedCells[0];\n  }\n  /**\n   * Returns the cells this cell connects to on the next layer down\n   */\n  getPreviousLayerConnectedCells(layer) {\n    if (this.previousLayerConnectedCells == null) {\n      this.previousLayerConnectedCells = [];\n      this.previousLayerConnectedCells[0] = [];\n      for (let i = 0; i < this.connectsAsSource.length; i += 1) {\n        const edge = this.connectsAsSource[i];\n        if (edge.minRank === -1 || edge.minRank === layer - 1) {\n          // No dummy nodes in edge, add node of other side of edge\n          this.previousLayerConnectedCells[0].push(edge.target);\n        } else {\n          // Edge spans at least two layers, add edge\n          this.previousLayerConnectedCells[0].push(edge);\n        }\n      }\n    }\n    return this.previousLayerConnectedCells[0];\n  }\n  /**\n   * Returns true.\n   */\n  isVertex() {\n    return true;\n  }\n  /**\n   * Gets the value of temp for the specified layer\n   */\n  getGeneralPurposeVariable(layer) {\n    return this.temp[0];\n  }\n  /**\n   * Set the value of temp for the specified layer\n   */\n  setGeneralPurposeVariable(layer, value) {\n    this.temp[0] = value;\n  }\n  isAncestor(otherNode) {\n    // Firstly, the hash code of this node needs to be shorter than the\n    // other node\n    if (otherNode != null && this.hashCode != null && otherNode.hashCode != null && this.hashCode.length < otherNode.hashCode.length) {\n      if (this.hashCode === otherNode.hashCode) {\n        return true;\n      }\n      if (this.hashCode == null || this.hashCode == null) {\n        return false;\n      }\n      // Secondly, this hash code must match the start of the other\n      // node's hash code. Arrays.equals cannot be used here since\n      // the arrays are different length, and we do not want to\n      // perform another array copy.\n      for (let i = 0; i < this.hashCode.length; i += 1) {\n        if (this.hashCode[i] !== otherNode.hashCode[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Gets the core vertex associated with this wrapper\n   */\n  getCoreCell() {\n    return this.cell;\n  }\n}\nexport default GraphHierarchyNode;","map":{"version":3,"names":["GraphAbstractHierarchyCell","ObjectIdentity","GraphHierarchyNode","constructor","cell","ids","hashCode","id","get","connectsAsTarget","connectsAsSource","getRankValue","layer","maxRank","getNextLayerConnectedCells","nextLayerConnectedCells","i","length","edge","push","source","getPreviousLayerConnectedCells","previousLayerConnectedCells","minRank","target","isVertex","getGeneralPurposeVariable","temp","setGeneralPurposeVariable","value","isAncestor","otherNode","getCoreCell"],"sources":["D:/ospanel/domains/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/layout/datatypes/GraphHierarchyNode.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport GraphAbstractHierarchyCell from './GraphAbstractHierarchyCell';\nimport ObjectIdentity from '../../../util/ObjectIdentity';\n/**\n * An abstraction of a hierarchical edge for the hierarchy layout\n *\n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n *\n * cell - the real graph cell this node represents\n */\nclass GraphHierarchyNode extends GraphAbstractHierarchyCell {\n    constructor(cell) {\n        super();\n        /**\n         * The object identities of the wrapped cells\n         */\n        this.ids = [];\n        /**\n         * Assigns a unique hashcode for each node. Used by the model dfs instead\n         * of copying HashSets\n         */\n        this.hashCode = false;\n        this.cell = cell;\n        this.id = ObjectIdentity.get(cell);\n        this.connectsAsTarget = [];\n        this.connectsAsSource = [];\n    }\n    /**\n     * Returns the integer value of the layer that this node resides in\n     */\n    getRankValue(layer) {\n        return this.maxRank;\n    }\n    /**\n     * Returns the cells this cell connects to on the next layer up\n     */\n    getNextLayerConnectedCells(layer) {\n        if (this.nextLayerConnectedCells == null) {\n            this.nextLayerConnectedCells = {};\n            this.nextLayerConnectedCells[0] = [];\n            for (let i = 0; i < this.connectsAsTarget.length; i += 1) {\n                const edge = this.connectsAsTarget[i];\n                if (edge.maxRank === -1 || edge.maxRank === layer + 1) {\n                    // Either edge is not in any rank or\n                    // no dummy nodes in edge, add node of other side of edge\n                    this.nextLayerConnectedCells[0].push(edge.source);\n                }\n                else {\n                    // Edge spans at least two layers, add edge\n                    this.nextLayerConnectedCells[0].push(edge);\n                }\n            }\n        }\n        return this.nextLayerConnectedCells[0];\n    }\n    /**\n     * Returns the cells this cell connects to on the next layer down\n     */\n    getPreviousLayerConnectedCells(layer) {\n        if (this.previousLayerConnectedCells == null) {\n            this.previousLayerConnectedCells = [];\n            this.previousLayerConnectedCells[0] = [];\n            for (let i = 0; i < this.connectsAsSource.length; i += 1) {\n                const edge = this.connectsAsSource[i];\n                if (edge.minRank === -1 || edge.minRank === layer - 1) {\n                    // No dummy nodes in edge, add node of other side of edge\n                    this.previousLayerConnectedCells[0].push(edge.target);\n                }\n                else {\n                    // Edge spans at least two layers, add edge\n                    this.previousLayerConnectedCells[0].push(edge);\n                }\n            }\n        }\n        return this.previousLayerConnectedCells[0];\n    }\n    /**\n     * Returns true.\n     */\n    isVertex() {\n        return true;\n    }\n    /**\n     * Gets the value of temp for the specified layer\n     */\n    getGeneralPurposeVariable(layer) {\n        return this.temp[0];\n    }\n    /**\n     * Set the value of temp for the specified layer\n     */\n    setGeneralPurposeVariable(layer, value) {\n        this.temp[0] = value;\n    }\n    isAncestor(otherNode) {\n        // Firstly, the hash code of this node needs to be shorter than the\n        // other node\n        if (otherNode != null &&\n            this.hashCode != null &&\n            otherNode.hashCode != null &&\n            this.hashCode.length < otherNode.hashCode.length) {\n            if (this.hashCode === otherNode.hashCode) {\n                return true;\n            }\n            if (this.hashCode == null || this.hashCode == null) {\n                return false;\n            }\n            // Secondly, this hash code must match the start of the other\n            // node's hash code. Arrays.equals cannot be used here since\n            // the arrays are different length, and we do not want to\n            // perform another array copy.\n            for (let i = 0; i < this.hashCode.length; i += 1) {\n                if (this.hashCode[i] !== otherNode.hashCode[i]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Gets the core vertex associated with this wrapper\n     */\n    getCoreCell() {\n        return this.cell;\n    }\n}\nexport default GraphHierarchyNode;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
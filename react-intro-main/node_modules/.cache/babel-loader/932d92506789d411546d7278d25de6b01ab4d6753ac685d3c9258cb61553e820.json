{"ast":null,"code":"var _jsxFileName = \"D:\\\\OSPanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\components\\\\LogicElementManager.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst handleElementAdded = event => {\n  const newElement = event.detail;\n  setElements(prevElements => {\n    const updatedElements = [...prevElements, newElement];\n    generateVHDLCode(updatedElements); // Генерация кода сразу\n    return updatedElements;\n  });\n};\nconst generateVHDLCode = elements => {\n  let vhdlCode = `library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\n`;\n  vhdlCode += `entity adder is\\nend adder;\\n\\narchitecture rtl of adder is\\n`;\n  elements.forEach((element, index) => {\n    switch (element.type) {\n      case 'AND':\n        vhdlCode += `AND_GATE_${index}: entity work.and_gate\\n`;\n        vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\n        break;\n      case 'INPUT':\n        vhdlCode += `signal ${element.inputs[0]} : std_logic;\\n`;\n        break;\n      case 'OUTPUT':\n        vhdlCode += `signal ${element.output} : std_logic;\\n`;\n        break;\n      default:\n        vhdlCode += `-- Неизвестный элемент: ${element.type}\\n`;\n    }\n  });\n  vhdlCode += `begin\\n-- Добавьте свою логику здесь\\nend rtl;\\n`;\n  console.log('✅ Сгенерированный VHDL-код:\\n', vhdlCode);\n  onGenerateCode(vhdlCode); // Передача кода в редактор\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u043D\\u044B\\u0435 \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\\u044B:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: elements.map((el, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [el.type, \" \\u2014 \", el.inputs.join(', '), \" \\u2794 \", el.output]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\nexport default LogicElementManager;","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","handleElementAdded","event","newElement","detail","setElements","prevElements","updatedElements","generateVHDLCode","elements","vhdlCode","forEach","element","index","type","inputs","output","console","log","onGenerateCode","children","fileName","_jsxFileName","lineNumber","columnNumber","map","el","join","LogicElementManager"],"sources":["D:/OSPanel/domains/react/react-intro-main/src/components/LogicElementManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst handleElementAdded = (event) => {\r\n  const newElement = event.detail;\r\n  setElements((prevElements) => {\r\n    const updatedElements = [...prevElements, newElement];\r\n    generateVHDLCode(updatedElements); // Генерация кода сразу\r\n    return updatedElements;\r\n  });\r\n};\r\n\r\nconst generateVHDLCode = (elements) => {\r\n  let vhdlCode = `library ieee;\\nuse ieee.std_logic_1164.all;\\nuse ieee.numeric_std.all;\\n\\n`;\r\n  vhdlCode += `entity adder is\\nend adder;\\n\\narchitecture rtl of adder is\\n`;\r\n\r\n  elements.forEach((element, index) => {\r\n    switch (element.type) {\r\n      case 'AND':\r\n        vhdlCode += `AND_GATE_${index}: entity work.and_gate\\n`;\r\n        vhdlCode += `port map (A => ${element.inputs[0]}, B => ${element.inputs[1]}, Y => ${element.output});\\n`;\r\n        break;\r\n\r\n      case 'INPUT':\r\n        vhdlCode += `signal ${element.inputs[0]} : std_logic;\\n`;\r\n        break;\r\n\r\n      case 'OUTPUT':\r\n        vhdlCode += `signal ${element.output} : std_logic;\\n`;\r\n        break;\r\n\r\n      default:\r\n        vhdlCode += `-- Неизвестный элемент: ${element.type}\\n`;\r\n    }\r\n  });\r\n\r\n  vhdlCode += `begin\\n-- Добавьте свою логику здесь\\nend rtl;\\n`;\r\n\r\n  console.log('✅ Сгенерированный VHDL-код:\\n', vhdlCode);\r\n  onGenerateCode(vhdlCode); // Передача кода в редактор\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4>Добавленные элементы:</h4>\r\n      <ul>\r\n        {elements.map((el, index) => (\r\n          <li key={index}>\r\n            {el.type} — {el.inputs.join(', ')} ➔ {el.output}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogicElementManager;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;EACpC,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM;EAC/BC,WAAW,CAAEC,YAAY,IAAK;IAC5B,MAAMC,eAAe,GAAG,CAAC,GAAGD,YAAY,EAAEH,UAAU,CAAC;IACrDK,gBAAgB,CAACD,eAAe,CAAC,CAAC,CAAC;IACnC,OAAOA,eAAe;EACxB,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;EACrC,IAAIC,QAAQ,GAAI,4EAA2E;EAC3FA,QAAQ,IAAK,+DAA8D;EAE3ED,QAAQ,CAACE,OAAO,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;IACnC,QAAQD,OAAO,CAACE,IAAI;MAClB,KAAK,KAAK;QACRJ,QAAQ,IAAK,YAAWG,KAAM,0BAAyB;QACvDH,QAAQ,IAAK,kBAAiBE,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,UAASH,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,UAASH,OAAO,CAACI,MAAO,MAAK;QACxG;MAEF,KAAK,OAAO;QACVN,QAAQ,IAAK,UAASE,OAAO,CAACG,MAAM,CAAC,CAAC,CAAE,iBAAgB;QACxD;MAEF,KAAK,QAAQ;QACXL,QAAQ,IAAK,UAASE,OAAO,CAACI,MAAO,iBAAgB;QACrD;MAEF;QACEN,QAAQ,IAAK,2BAA0BE,OAAO,CAACE,IAAK,IAAG;IAC3D;EACF,CAAC,CAAC;EAEFJ,QAAQ,IAAK,kDAAiD;EAE9DO,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAER,QAAQ,CAAC;EACtDS,cAAc,CAACT,QAAQ,CAAC,CAAC,CAAC;;EAG1B,oBACEV,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9BxB,OAAA;MAAAoB,QAAA,EACGX,QAAQ,CAACgB,GAAG,CAAC,CAACC,EAAE,EAAEb,KAAK,kBACtBb,OAAA;QAAAoB,QAAA,GACGM,EAAE,CAACZ,IAAI,EAAC,UAAG,EAACY,EAAE,CAACX,MAAM,CAACY,IAAI,CAAC,IAAI,CAAC,EAAC,UAAG,EAACD,EAAE,CAACV,MAAM;MAAA,GADxCH,KAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAED,eAAeI,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
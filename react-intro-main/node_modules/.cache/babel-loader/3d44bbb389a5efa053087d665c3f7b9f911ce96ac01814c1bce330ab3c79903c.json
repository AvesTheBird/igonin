{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B open server\\\\old\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react'; // добавлен useRef\nimport * as monaco from 'monaco-editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditorWithCompiler = () => {\n  _s();\n  const [architectureCode, setArchitectureCode] = useState(`library IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity AND_Gate is\n    Port (\n        A : in STD_LOGIC;\n        B : in STD_LOGIC;\n        Y : out STD_LOGIC\n    );\nend AND_Gate;\n\narchitecture Behavioral of AND_Gate is\nbegin\n    Y <= A and B;\nend Behavioral;`);\n  const [testbenchCode, setTestbenchCode] = useState(`library IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\n\nentity AND_Gate_TB is\nend AND_Gate_TB;\n\narchitecture Behavioral of AND_Gate_TB is\n    component AND_Gate\n        Port (\n            A : in STD_LOGIC;\n            B : in STD_LOGIC;\n            Y : out STD_LOGIC\n        );\n    end component;\n\n    signal A : STD_LOGIC := '0';\n    signal B : STD_LOGIC := '0';\n    signal Y : STD_LOGIC;\n\nbegin\n    UUT: AND_Gate\n        Port map (\n            A => A,\n            B => B,\n            Y => Y\n        );\n\n    stimulus: process\n    begin\n        A <= '0'; B <= '0';\n        wait for 10 ns;\n        A <= '0'; B <= '1';\n        wait for 10 ns;\n        A <= '1'; B <= '0';\n        wait for 10 ns;\n        A <= '1'; B <= '1';\n        wait for 10 ns;\n        wait;\n    end process;\nend Behavioral;`);\n  const [output, setOutput] = useState('');\n  const compileCode = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          architectureCode,\n          testbenchCode\n        })\n      });\n      const result = await response.text(); // Получаем текстовый ответ\n      setOutput(result); // Выводим результат в консоль\n    } catch (error) {\n      setOutput('Ошибка компиляции: ' + error.message);\n    }\n  };\n  const downloadVCD = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          architectureCode,\n          testbenchCode\n        })\n      });\n      const result = await response.text(); // Получаем текстовый ответ (содержимое VCD файла)\n\n      if (result) {\n        const blob = new Blob([result], {\n          type: 'text/plain'\n        });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = 'out.vcd'; // Имя файла для скачивания\n        link.click();\n      } else {\n        setOutput('Ошибка: файл VCD не сгенерирован.');\n      }\n    } catch (error) {\n      setOutput('Ошибка скачивания VCD: ' + error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content-container\",\n    className: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0410\\u0440\\u0445\\u0438\\u0442\\u0435\\u043A\\u0442\\u0443\\u0440\\u0430:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"architecture-editor\",\n      onCodeChange: setArchitectureCode,\n      initialCode: architectureCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      id: \"testbench-editor\",\n      onCodeChange: setTestbenchCode,\n      initialCode: testbenchCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompilerConsole, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: compileCode,\n      children: \"\\u041A\\u043E\\u043C\\u043F\\u0438\\u043B\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: downloadVCD,\n      children: \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C VCD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(VHDLEditorWithCompiler, \"I9cDmI3k2eAVmSMd+x2wJhEB8n8=\");\n_c = VHDLEditorWithCompiler;\nexport default VHDLEditorWithCompiler;\nvar _c;\n$RefreshReg$(_c, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["React","useState","useEffect","useRef","monaco","jsxDEV","_jsxDEV","VHDLEditorWithCompiler","_s","architectureCode","setArchitectureCode","testbenchCode","setTestbenchCode","output","setOutput","compileCode","response","fetch","method","headers","body","JSON","stringify","result","text","error","message","downloadVCD","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","VHDLEditor","onCodeChange","initialCode","CompilerConsole","onClick","_c","$RefreshReg$"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'; // добавлен useRef\r\nimport * as monaco from 'monaco-editor';\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [architectureCode, setArchitectureCode] = useState(`library IEEE;\r\nuse IEEE.STD_LOGIC_1164.ALL;\r\n\r\nentity AND_Gate is\r\n    Port (\r\n        A : in STD_LOGIC;\r\n        B : in STD_LOGIC;\r\n        Y : out STD_LOGIC\r\n    );\r\nend AND_Gate;\r\n\r\narchitecture Behavioral of AND_Gate is\r\nbegin\r\n    Y <= A and B;\r\nend Behavioral;`);\r\n  \r\n  const [testbenchCode, setTestbenchCode] = useState(`library IEEE;\r\nuse IEEE.STD_LOGIC_1164.ALL;\r\n\r\nentity AND_Gate_TB is\r\nend AND_Gate_TB;\r\n\r\narchitecture Behavioral of AND_Gate_TB is\r\n    component AND_Gate\r\n        Port (\r\n            A : in STD_LOGIC;\r\n            B : in STD_LOGIC;\r\n            Y : out STD_LOGIC\r\n        );\r\n    end component;\r\n\r\n    signal A : STD_LOGIC := '0';\r\n    signal B : STD_LOGIC := '0';\r\n    signal Y : STD_LOGIC;\r\n\r\nbegin\r\n    UUT: AND_Gate\r\n        Port map (\r\n            A => A,\r\n            B => B,\r\n            Y => Y\r\n        );\r\n\r\n    stimulus: process\r\n    begin\r\n        A <= '0'; B <= '0';\r\n        wait for 10 ns;\r\n        A <= '0'; B <= '1';\r\n        wait for 10 ns;\r\n        A <= '1'; B <= '0';\r\n        wait for 10 ns;\r\n        A <= '1'; B <= '1';\r\n        wait for 10 ns;\r\n        wait;\r\n    end process;\r\nend Behavioral;`);\r\n  \r\n  const [output, setOutput] = useState('');\r\n  \r\n  const compileCode = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ architectureCode, testbenchCode }),\r\n      });\r\n      \r\n      const result = await response.text(); // Получаем текстовый ответ\r\n      setOutput(result); // Выводим результат в консоль\r\n    } catch (error) {\r\n      setOutput('Ошибка компиляции: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const downloadVCD = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ architectureCode, testbenchCode }),\r\n      });\r\n\r\n      const result = await response.text(); // Получаем текстовый ответ (содержимое VCD файла)\r\n      \r\n      if (result) {\r\n        const blob = new Blob([result], { type: 'text/plain' });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = 'out.vcd'; // Имя файла для скачивания\r\n        link.click();\r\n      } else {\r\n        setOutput('Ошибка: файл VCD не сгенерирован.');\r\n      }\r\n    } catch (error) {\r\n      setOutput('Ошибка скачивания VCD: ' + error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"content-container\" className=\"content-container\">\r\n      <h3>Архитектура:</h3>\r\n      <VHDLEditor\r\n        id=\"architecture-editor\"\r\n        onCodeChange={setArchitectureCode}\r\n        initialCode={architectureCode}\r\n      />\r\n\r\n      <h3>Тестовый стенд:</h3>\r\n      <VHDLEditor\r\n        id=\"testbench-editor\"\r\n        onCodeChange={setTestbenchCode}\r\n        initialCode={testbenchCode}\r\n      />\r\n\r\n      <CompilerConsole output={output} />\r\n\r\n      <button onClick={compileCode}>Компилировать</button>\r\n      <button onClick={downloadVCD}>Скачать VCD</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VHDLEditorWithCompiler;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
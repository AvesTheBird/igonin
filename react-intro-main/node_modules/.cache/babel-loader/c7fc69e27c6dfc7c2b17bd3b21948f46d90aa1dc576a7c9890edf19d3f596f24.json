{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DEFAULT_MARKERSIZE, NONE } from '../../../util/Constants';\nimport PolylineShape from './PolylineShape';\nimport MarkerShape from './MarkerShape';\n/**\n * Extends {@link mxShape} to implement a connector shape.\n * The connector shape allows for arrow heads on either side.\n * This shape is registered under {@link mxConstants.SHAPE_CONNECTOR} in {@link mxCellRenderer}.\n *\n * @class ConnectorShape\n * @extends {PolylineShape}\n */\nclass ConnectorShape extends PolylineShape {\n  constructor(points, stroke, strokewidth) {\n    super(points, stroke, strokewidth);\n  }\n  /**\n   * Updates the <boundingBox> for this shape using <createBoundingBox>\n   * and augmentBoundingBox and stores the result in <boundingBox>.\n   */\n  updateBoundingBox() {\n    this.useSvgBoundingBox = !!this.style?.curved;\n    super.updateBoundingBox();\n  }\n  /**\n   * Paints the line shape.\n   */\n  paintEdgeShape(c, pts) {\n    // The indirection via functions for markers is needed in\n    // order to apply the offsets before painting the line and\n    // paint the markers after painting the line.\n    const sourceMarker = this.createMarker(c, pts, true);\n    const targetMarker = this.createMarker(c, pts, false);\n    super.paintEdgeShape(c, pts);\n    // Disables shadows, dashed styles and fixes fill color for markers\n    c.setFillColor(this.stroke);\n    c.setShadow(false);\n    c.setDashed(false);\n    if (sourceMarker) {\n      sourceMarker();\n    }\n    if (targetMarker) {\n      targetMarker();\n    }\n  }\n  /**\n   * Prepares the marker by adding offsets in pts and returning a function to paint the marker.\n   */\n  createMarker(c, pts, source) {\n    if (!this.style) return null;\n    let result = null;\n    const n = pts.length;\n    const type = (source ? this.style.startArrow : this.style.endArrow) || NONE;\n    let p0 = source ? pts[1] : pts[n - 2];\n    const pe = source ? pts[0] : pts[n - 1];\n    if (type !== NONE && p0 !== null && pe !== null) {\n      let count = 1;\n      // Uses next non-overlapping point\n      while (count < n - 1 && Math.round(p0.x - pe.x) === 0 && Math.round(p0.y - pe.y) === 0) {\n        p0 = source ? pts[1 + count] : pts[n - 2 - count];\n        count++;\n      }\n      // Computes the norm and the inverse norm\n      const dx = pe.x - p0.x;\n      const dy = pe.y - p0.y;\n      const dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n      const unitX = dx / dist;\n      const unitY = dy / dist;\n      const size = (source ? this.style.startSize : this.style.endSize) ?? DEFAULT_MARKERSIZE;\n      // Allow for stroke width in the end point used and the\n      // orthogonal vectors describing the direction of the marker\n      const filled = (source ? this.style.startFill : this.style.endFill) ?? true;\n      result = MarkerShape.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokeWidth, filled);\n    }\n    return result;\n  }\n  /**\n   * Augments the bounding box with the strokewidth and shadow offsets.\n   */\n  augmentBoundingBox(bbox) {\n    super.augmentBoundingBox(bbox);\n    if (!this.style) return;\n    // Adds marker sizes\n    let size = 0;\n    if (this.style.startArrow !== NONE) {\n      size = (this.style.startSize ?? DEFAULT_MARKERSIZE) + 1;\n    }\n    if (this.style.endArrow !== NONE) {\n      size = Math.max(size, this.style.endSize ?? DEFAULT_MARKERSIZE) + 1;\n    }\n    bbox.grow(size * this.scale);\n  }\n}\nexport default ConnectorShape;","map":{"version":3,"names":["DEFAULT_MARKERSIZE","NONE","PolylineShape","MarkerShape","ConnectorShape","constructor","points","stroke","strokewidth","updateBoundingBox","useSvgBoundingBox","style","curved","paintEdgeShape","c","pts","sourceMarker","createMarker","targetMarker","setFillColor","setShadow","setDashed","source","result","n","length","type","startArrow","endArrow","p0","pe","count","Math","round","x","y","dx","dy","dist","max","sqrt","unitX","unitY","size","startSize","endSize","filled","startFill","endFill","strokeWidth","augmentBoundingBox","bbox","grow","scale"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/node_modules/@maxgraph/core/dist/view/geometry/edge/ConnectorShape.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { DEFAULT_MARKERSIZE, NONE } from '../../../util/Constants';\nimport PolylineShape from './PolylineShape';\nimport MarkerShape from './MarkerShape';\n/**\n * Extends {@link mxShape} to implement a connector shape.\n * The connector shape allows for arrow heads on either side.\n * This shape is registered under {@link mxConstants.SHAPE_CONNECTOR} in {@link mxCellRenderer}.\n *\n * @class ConnectorShape\n * @extends {PolylineShape}\n */\nclass ConnectorShape extends PolylineShape {\n    constructor(points, stroke, strokewidth) {\n        super(points, stroke, strokewidth);\n    }\n    /**\n     * Updates the <boundingBox> for this shape using <createBoundingBox>\n     * and augmentBoundingBox and stores the result in <boundingBox>.\n     */\n    updateBoundingBox() {\n        this.useSvgBoundingBox = !!this.style?.curved;\n        super.updateBoundingBox();\n    }\n    /**\n     * Paints the line shape.\n     */\n    paintEdgeShape(c, pts) {\n        // The indirection via functions for markers is needed in\n        // order to apply the offsets before painting the line and\n        // paint the markers after painting the line.\n        const sourceMarker = this.createMarker(c, pts, true);\n        const targetMarker = this.createMarker(c, pts, false);\n        super.paintEdgeShape(c, pts);\n        // Disables shadows, dashed styles and fixes fill color for markers\n        c.setFillColor(this.stroke);\n        c.setShadow(false);\n        c.setDashed(false);\n        if (sourceMarker) {\n            sourceMarker();\n        }\n        if (targetMarker) {\n            targetMarker();\n        }\n    }\n    /**\n     * Prepares the marker by adding offsets in pts and returning a function to paint the marker.\n     */\n    createMarker(c, pts, source) {\n        if (!this.style)\n            return null;\n        let result = null;\n        const n = pts.length;\n        const type = (source ? this.style.startArrow : this.style.endArrow) || NONE;\n        let p0 = source ? pts[1] : pts[n - 2];\n        const pe = source ? pts[0] : pts[n - 1];\n        if (type !== NONE && p0 !== null && pe !== null) {\n            let count = 1;\n            // Uses next non-overlapping point\n            while (count < n - 1 &&\n                Math.round(p0.x - pe.x) === 0 &&\n                Math.round(p0.y - pe.y) === 0) {\n                p0 = source ? pts[1 + count] : pts[n - 2 - count];\n                count++;\n            }\n            // Computes the norm and the inverse norm\n            const dx = pe.x - p0.x;\n            const dy = pe.y - p0.y;\n            const dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n            const unitX = dx / dist;\n            const unitY = dy / dist;\n            const size = (source ? this.style.startSize : this.style.endSize) ?? DEFAULT_MARKERSIZE;\n            // Allow for stroke width in the end point used and the\n            // orthogonal vectors describing the direction of the marker\n            const filled = (source ? this.style.startFill : this.style.endFill) ?? true;\n            result = MarkerShape.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokeWidth, filled);\n        }\n        return result;\n    }\n    /**\n     * Augments the bounding box with the strokewidth and shadow offsets.\n     */\n    augmentBoundingBox(bbox) {\n        super.augmentBoundingBox(bbox);\n        if (!this.style)\n            return;\n        // Adds marker sizes\n        let size = 0;\n        if (this.style.startArrow !== NONE) {\n            size = (this.style.startSize ?? DEFAULT_MARKERSIZE) + 1;\n        }\n        if (this.style.endArrow !== NONE) {\n            size = Math.max(size, this.style.endSize ?? DEFAULT_MARKERSIZE) + 1;\n        }\n        bbox.grow(size * this.scale);\n    }\n}\nexport default ConnectorShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
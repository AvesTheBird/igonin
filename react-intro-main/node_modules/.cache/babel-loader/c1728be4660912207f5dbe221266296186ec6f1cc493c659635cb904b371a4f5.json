{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B open server\\\\old\\\\react\\\\react-intro-main\\\\src\\\\components\\\\Editor.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VHDLEditor = ({\n  onCodeChange,\n  initialCode\n}) => {\n  _s();\n  const [editor, setEditor] = useState(null);\n  useEffect(() => {\n    const editorInstance = monaco.editor.create(document.getElementById('vhdl-editor'), {\n      value: initialCode,\n      // Изначальный код передаваемый из родительского компонента\n      language: 'vhdl',\n      theme: 'vs-dark',\n      automaticLayout: true\n    });\n    setEditor(editorInstance);\n\n    // Отслеживаем изменения в редакторе\n    const debounceChangeHandler = debounce(() => {\n      const code = editorInstance.getValue();\n      onCodeChange(code); // Передаем код в родительский компонент\n    }, 300); // Задержка в 300ms\n\n    editorInstance.onDidChangeModelContent(debounceChangeHandler);\n    return () => {\n      editorInstance.dispose(); // Очистка редактора при удалении компонента\n    };\n  }, [initialCode, onCodeChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"vhdl-editor\",\n    style: {\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n\n// Функция debounce, которая задерживает вызов\n_s(VHDLEditor, \"eO/YciI7gB53i41D9HzIqznfTpA=\");\n_c = VHDLEditor;\nfunction debounce(func, wait) {\n  let timeout;\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(context, args), wait);\n  };\n}\nconst CompilerConsole = ({\n  output\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"compiler-console\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\u041A\\u043E\\u043D\\u0441\\u043E\\u043B\\u044C:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c2 = CompilerConsole;\nconst VHDLEditorWithCompiler = () => {\n  _s2();\n  const [vhdlCode, setVhdlCode] = useState(`-- Напишите ваш VHDL код здесь`);\n  const [output, setOutput] = useState('');\n\n  // Функция для компиляции кода\n  const compileCode = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          vhdlCode\n        }) // Отправляем код VHDL на сервер\n      });\n      const result = await response.text(); // Получаем результат компиляции\n      setOutput(result); // Отображаем результат компиляции в консоли\n    } catch (error) {\n      setOutput('Ошибка компиляции: ' + error.message); // Если ошибка, выводим её\n    }\n  };\n\n  // Обновляем код из редактора Monaco\n  const handleCodeChange = code => {\n    setVhdlCode(code); // Обновляем состояние для VHDL кода\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"VHDL \\u041A\\u043E\\u0434:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VHDLEditor, {\n      onCodeChange: handleCodeChange,\n      initialCode: vhdlCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"testbench-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439 \\u0441\\u0442\\u0435\\u043D\\u0434:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"testbench-textarea\",\n        value: vhdlCode // Текстовый стенд синхронизируется с редактором Monaco\n        ,\n        onChange: e => setVhdlCode(e.target.value),\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043A\\u043E\\u0434 \\u0442\\u0435\\u0441\\u0442\\u0430...\",\n        style: {\n          width: '100%',\n          height: '150px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"compile-button\",\n      onClick: compileCode,\n      children: \"\\u041A\\u043E\\u043C\\u043F\\u0438\\u043B\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CompilerConsole, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s2(VHDLEditorWithCompiler, \"fqIjVpdlKpPX9ZusWfNDDgVWsCc=\");\n_c3 = VHDLEditorWithCompiler;\nexport default VHDLEditorWithCompiler;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"VHDLEditor\");\n$RefreshReg$(_c2, \"CompilerConsole\");\n$RefreshReg$(_c3, \"VHDLEditorWithCompiler\");","map":{"version":3,"names":["React","useState","useEffect","monaco","jsxDEV","_jsxDEV","VHDLEditor","onCodeChange","initialCode","_s","editor","setEditor","editorInstance","create","document","getElementById","value","language","theme","automaticLayout","debounceChangeHandler","debounce","code","getValue","onDidChangeModelContent","dispose","id","style","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","func","wait","timeout","context","args","arguments","clearTimeout","setTimeout","apply","CompilerConsole","output","className","children","_c2","VHDLEditorWithCompiler","_s2","vhdlCode","setVhdlCode","setOutput","compileCode","response","fetch","method","headers","body","JSON","stringify","result","text","error","message","handleCodeChange","onChange","e","target","placeholder","width","onClick","_c3","$RefreshReg$"],"sources":["D:/ospanel/domains/проекты open server/old/react/react-intro-main/src/components/Editor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as monaco from 'monaco-editor';\r\n\r\nconst VHDLEditor = ({ onCodeChange, initialCode }) => {\r\n  const [editor, setEditor] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const editorInstance = monaco.editor.create(document.getElementById('vhdl-editor'), {\r\n      value: initialCode, // Изначальный код передаваемый из родительского компонента\r\n      language: 'vhdl',\r\n      theme: 'vs-dark',\r\n      automaticLayout: true,\r\n    });\r\n\r\n    setEditor(editorInstance);\r\n\r\n    // Отслеживаем изменения в редакторе\r\n    const debounceChangeHandler = debounce(() => {\r\n      const code = editorInstance.getValue();\r\n      onCodeChange(code); // Передаем код в родительский компонент\r\n    }, 300); // Задержка в 300ms\r\n\r\n    editorInstance.onDidChangeModelContent(debounceChangeHandler);\r\n\r\n    return () => {\r\n      editorInstance.dispose(); // Очистка редактора при удалении компонента\r\n    };\r\n  }, [initialCode, onCodeChange]);\r\n\r\n  return <div id=\"vhdl-editor\" style={{ height: '400px' }}></div>;\r\n};\r\n\r\n// Функция debounce, которая задерживает вызов\r\nfunction debounce(func, wait) {\r\n  let timeout;\r\n  return function() {\r\n    const context = this;\r\n    const args = arguments;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(() => func.apply(context, args), wait);\r\n  };\r\n}\r\n\r\nconst CompilerConsole = ({ output }) => {\r\n  return (\r\n    <div className=\"compiler-console\">\r\n      <h3>Консоль:</h3>\r\n      <pre>{output}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst VHDLEditorWithCompiler = () => {\r\n  const [vhdlCode, setVhdlCode] = useState(`-- Напишите ваш VHDL код здесь`);\r\n  const [output, setOutput] = useState('');\r\n\r\n  // Функция для компиляции кода\r\n  const compileCode = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/compile-vhdl', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ vhdlCode }), // Отправляем код VHDL на сервер\r\n      });\r\n\r\n      const result = await response.text(); // Получаем результат компиляции\r\n      setOutput(result); // Отображаем результат компиляции в консоли\r\n    } catch (error) {\r\n      setOutput('Ошибка компиляции: ' + error.message); // Если ошибка, выводим её\r\n    }\r\n  };\r\n\r\n  // Обновляем код из редактора Monaco\r\n  const handleCodeChange = (code) => {\r\n    setVhdlCode(code); // Обновляем состояние для VHDL кода\r\n  };\r\n\r\n  return (\r\n    <div id=\"content-container\">\r\n      <h3>VHDL Код:</h3>\r\n      <VHDLEditor onCodeChange={handleCodeChange} initialCode={vhdlCode} />\r\n      \r\n      <div id=\"testbench-container\">\r\n        <h3>Тестовый стенд:</h3>\r\n        <textarea \r\n          id=\"testbench-textarea\"\r\n          value={vhdlCode} // Текстовый стенд синхронизируется с редактором Monaco\r\n          onChange={(e) => setVhdlCode(e.target.value)} \r\n          placeholder=\"Введите код теста...\"\r\n          style={{ width: '100%', height: '150px' }}\r\n        />\r\n      </div>\r\n\r\n      <button id=\"compile-button\" onClick={compileCode}>Компилировать</button>\r\n\r\n      <CompilerConsole output={output} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VHDLEditorWithCompiler;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
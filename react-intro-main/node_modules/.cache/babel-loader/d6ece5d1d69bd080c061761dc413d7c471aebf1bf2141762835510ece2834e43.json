{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NODETYPE } from '../../util/Constants';\nimport { clone } from '../../util/cloneUtils';\nimport Point from '../geometry/Point';\nimport CellPath from './CellPath';\nimport { isNotNullish } from '../../util/Utils';\n/**\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n *\n * ### Custom attributes\n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the value:\n * ```javascript\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * ```\n *\n * For the label to work, {@link graph.convertValueToString} and\n * {@link graph.cellLabelChanged} should be overridden as follows:\n *\n * ```javascript\n * graph.convertValueToString(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n *\n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *\n *   cellLabelChanged.apply(this, arguments);\n * };\n * ```\n * @class Cell\n */\nexport class Cell {\n  constructor() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let geometry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // TODO: Document me!\n    // used by invalidate() of mxGraphView\n    this.invalidating = false;\n    this.onInit = null;\n    // used by addCellOverlay() of mxGraph\n    this.overlays = [];\n    /**\n     * Holds the Id. Default is null.\n     */\n    this.id = null;\n    /**\n     * Holds the user object. Default is null.\n     */\n    this.value = null;\n    /**\n     * Holds the {@link Geometry}. Default is null.\n     */\n    this.geometry = null;\n    /**\n     * Holds the style as a string of the form [(stylename|key=value);]. Default is\n     * null.\n     */\n    this.style = {};\n    /**\n     * Specifies whether the cell is a vertex. Default is false.\n     */\n    this.vertex = false;\n    /**\n     * Specifies whether the cell is an edge. Default is false.\n     */\n    this.edge = false;\n    /**\n     * Specifies whether the cell is connectable. Default is true.\n     */\n    this.connectable = true;\n    /**\n     * Specifies whether the cell is visible. Default is true.\n     */\n    this.visible = true;\n    /**\n     * Specifies whether the cell is collapsed. Default is false.\n     */\n    this.collapsed = false;\n    /**\n     * Reference to the parent cell.\n     */\n    this.parent = null;\n    /**\n     * Reference to the source terminal.\n     */\n    this.source = null;\n    /**\n     * Reference to the target terminal.\n     */\n    this.target = null;\n    /**\n     * Holds the child cells.\n     */\n    this.children = [];\n    /**\n     * Holds the edges.\n     */\n    this.edges = [];\n    /**\n     * List of members that should not be cloned inside <clone>. This field is\n     * passed to {@link Utils#clone} and is not made persistent in <CellCodec>.\n     * This is not a convention for all classes, it is only used in this class\n     * to mark transient fields since transient modifiers are not supported by\n     * the language.\n     */\n    this.mxTransient = ['id', 'value', 'parent', 'source', 'target', 'children', 'edges'];\n    this.value = value;\n    this.setGeometry(geometry);\n    this.setStyle(style);\n    if (this.onInit) {\n      this.onInit();\n    }\n  }\n  // TODO: Document me!!!\n  getChildren() {\n    return this.children || [];\n  }\n  /**\n   * Returns the Id of the cell as a string.\n   */\n  getId() {\n    return this.id;\n  }\n  /**\n   * Sets the Id of the cell to the given string.\n   */\n  setId(id) {\n    this.id = id;\n  }\n  /**\n   * Returns the user object of the cell. The user\n   * object is stored in <value>.\n   */\n  getValue() {\n    return this.value;\n  }\n  /**\n   * Sets the user object of the cell. The user object\n   * is stored in <value>.\n   */\n  setValue(value) {\n    this.value = value;\n  }\n  /**\n   * Changes the user object after an in-place edit\n   * and returns the previous value. This implementation\n   * replaces the user object with the given value and\n   * returns the old user object.\n   */\n  valueChanged(newValue) {\n    const previous = this.getValue();\n    this.setValue(newValue);\n    return previous;\n  }\n  /**\n   * Returns the {@link Geometry} that describes the <geometry>.\n   */\n  getGeometry() {\n    return this.geometry;\n  }\n  /**\n   * Sets the {@link Geometry} to be used as the <geometry>.\n   */\n  setGeometry(geometry) {\n    this.geometry = geometry;\n  }\n  /**\n   * Returns a string that describes the <style>.\n   */\n  getStyle() {\n    return this.style;\n  }\n  /**\n   * Sets the string to be used as the <style>.\n   */\n  setStyle(style) {\n    this.style = style;\n  }\n  /**\n   * Returns true if the cell is a vertex.\n   */\n  isVertex() {\n    return this.vertex;\n  }\n  /**\n   * Specifies if the cell is a vertex. This should only be assigned at\n   * construction of the cell and not be changed during its lifecycle.\n   *\n   * @param vertex Boolean that specifies if the cell is a vertex.\n   */\n  setVertex(vertex) {\n    this.vertex = vertex;\n  }\n  /**\n   * Returns true if the cell is an edge.\n   */\n  isEdge() {\n    return this.edge;\n  }\n  /**\n   * Specifies if the cell is an edge. This should only be assigned at\n   * construction of the cell and not be changed during its lifecycle.\n   *\n   * @param edge Boolean that specifies if the cell is an edge.\n   */\n  setEdge(edge) {\n    this.edge = edge;\n  }\n  /**\n   * Returns true if the cell is connectable.\n   */\n  isConnectable() {\n    return this.connectable;\n  }\n  /**\n   * Sets the connectable state.\n   *\n   * @param connectable Boolean that specifies the new connectable state.\n   */\n  setConnectable(connectable) {\n    this.connectable = connectable;\n  }\n  /**\n   * Returns true if the cell is visibile.\n   */\n  isVisible() {\n    return this.visible;\n  }\n  /**\n   * Specifies if the cell is visible.\n   *\n   * @param visible Boolean that specifies the new visible state.\n   */\n  setVisible(visible) {\n    this.visible = visible;\n  }\n  /**\n   * Returns true if the cell is collapsed.\n   */\n  isCollapsed() {\n    return this.collapsed;\n  }\n  /**\n   * Sets the collapsed state.\n   *\n   * @param collapsed Boolean that specifies the new collapsed state.\n   */\n  setCollapsed(collapsed) {\n    this.collapsed = collapsed;\n  }\n  /**\n   * Returns the cell's parent.\n   */\n  getParent() {\n    return this.parent;\n  }\n  /**\n   * Sets the parent cell.\n   *\n   * @param parent<Cell> that represents the new parent.\n   */\n  setParent(parent) {\n    this.parent = parent;\n  }\n  /**\n   * Returns the source or target terminal.\n   *\n   * @param source Boolean that specifies if the source terminal should be\n   * returned.\n   */\n  getTerminal() {\n    let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return source ? this.source : this.target;\n  }\n  /**\n   * Sets the source or target terminal and returns the new terminal.\n   *\n   * @param {Cell} terminal     mxCell that represents the new source or target terminal.\n   * @param {boolean} isSource  boolean that specifies if the source or target terminal\n   * should be set.\n   */\n  setTerminal(terminal, isSource) {\n    if (isSource) {\n      this.source = terminal;\n    } else {\n      this.target = terminal;\n    }\n    return terminal;\n  }\n  /**\n   * Returns the number of child cells.\n   */\n  getChildCount() {\n    return this.children.length;\n  }\n  /**\n   * Returns the index of the specified child in the child array.\n   *\n   * @param childChild whose index should be returned.\n   */\n  getIndex(child) {\n    if (child === null) return -1;\n    return this.children.indexOf(child);\n  }\n  /**\n   * Returns the child at the specified index.\n   *\n   * @param indexInteger that specifies the child to be returned.\n   */\n  getChildAt(index) {\n    return this.children[index];\n  }\n  /**\n   * Inserts the specified child into the child array at the specified index\n   * and updates the parent reference of the child. If not childIndex is\n   * specified then the child is appended to the child array. Returns the\n   * inserted child.\n   *\n   * @param child<Cell> to be inserted or appended to the child array.\n   * @param indexOptional integer that specifies the index at which the child\n   * should be inserted into the child array.\n   */\n  insert(child, index) {\n    if (index === undefined) {\n      index = this.getChildCount();\n      if (child.getParent() === this) {\n        index--;\n      }\n    }\n    child.removeFromParent();\n    child.setParent(this);\n    this.children.splice(index, 0, child);\n    return child;\n  }\n  /**\n   * Removes the child at the specified index from the child array and\n   * returns the child that was removed. Will remove the parent reference of\n   * the child.\n   *\n   * @param indexInteger that specifies the index of the child to be\n   * removed.\n   */\n  remove(index) {\n    let child = null;\n    if (index >= 0) {\n      child = this.getChildAt(index);\n      if (child) {\n        this.children.splice(index, 1);\n        child.setParent(null);\n      }\n    }\n    return child;\n  }\n  /**\n   * Removes the cell from its parent.\n   */\n  removeFromParent() {\n    if (this.parent) {\n      const index = this.parent.getIndex(this);\n      this.parent.remove(index);\n    }\n  }\n  /**\n   * Returns the number of edges in the edge array.\n   */\n  getEdgeCount() {\n    return this.edges.length;\n  }\n  /**\n   * Returns the index of the specified edge in <edges>.\n   *\n   * @param edge<Cell> whose index in <edges> should be returned.\n   */\n  getEdgeIndex(edge) {\n    return this.edges.indexOf(edge);\n  }\n  /**\n   * Returns the edge at the specified index in <edges>.\n   *\n   * @param indexInteger that specifies the index of the edge to be returned.\n   */\n  getEdgeAt(index) {\n    return this.edges[index];\n  }\n  /**\n   * Inserts the specified edge into the edge array and returns the edge.\n   * Will update the respective terminal reference of the edge.\n   *\n   * @param edge              <Cell> to be inserted into the edge array.\n   * @param isOutgoing Boolean that specifies if the edge is outgoing.\n   */\n  insertEdge(edge) {\n    let isOutgoing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    edge.removeFromTerminal(isOutgoing);\n    edge.setTerminal(this, isOutgoing);\n    if (this.edges.length === 0 || edge.getTerminal(!isOutgoing) !== this || this.edges.indexOf(edge) < 0) {\n      this.edges.push(edge);\n    }\n    return edge;\n  }\n  /**\n   * Removes the specified edge from the edge array and returns the edge.\n   * Will remove the respective terminal reference from the edge.\n   *\n   * @param edge<Cell> to be removed from the edge array.\n   * @param isOutgoing Boolean that specifies if the edge is outgoing.\n   */\n  removeEdge(edge) {\n    let isOutgoing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (edge != null) {\n      if (edge.getTerminal(!isOutgoing) !== this && this.edges != null) {\n        const index = this.getEdgeIndex(edge);\n        if (index >= 0) {\n          this.edges.splice(index, 1);\n        }\n      }\n      edge.setTerminal(null, isOutgoing);\n    }\n    return edge;\n  }\n  /**\n   * Removes the edge from its source or target terminal.\n   *\n   * @param isSource Boolean that specifies if the edge should be removed from its source or target terminal.\n   */\n  removeFromTerminal(isSource) {\n    const terminal = this.getTerminal(isSource);\n    if (terminal) {\n      terminal.removeEdge(this, isSource);\n    }\n  }\n  /**\n   * Returns true if the user object is an XML node that contains the given\n   * attribute.\n   *\n   * @param nameName nameName of the attribute.\n   */\n  hasAttribute(name) {\n    const userObject = this.getValue();\n    return isNotNullish(userObject) && (userObject.nodeType === NODETYPE.ELEMENT && userObject.hasAttribute ? userObject.hasAttribute(name) : isNotNullish(userObject.getAttribute(name)));\n  }\n  /**\n   * Returns the specified attribute from the user object if it is an XML\n   * node.\n   *\n   * @param nameName              of the attribute whose value should be returned.\n   * @param defaultValueOptional  default value to use if the attribute has no\n   * value.\n   */\n  getAttribute(name, defaultValue) {\n    const userObject = this.getValue();\n    const val = isNotNullish(userObject) && userObject.nodeType === NODETYPE.ELEMENT ? userObject.getAttribute(name) : null;\n    return val ? val : defaultValue;\n  }\n  /**\n   * Sets the specified attribute on the user object if it is an XML node.\n   *\n   * @param nameName    of the attribute whose value should be set.\n   * @param valueNew    value of the attribute.\n   */\n  setAttribute(name, value) {\n    const userObject = this.getValue();\n    if (isNotNullish(userObject) && userObject.nodeType === NODETYPE.ELEMENT) {\n      userObject.setAttribute(name, value);\n    }\n  }\n  /**\n   * Returns a clone of the cell. Uses <cloneValue> to clone\n   * the user object. All fields in {@link Transient} are ignored\n   * during the cloning.\n   */\n  clone() {\n    const c = clone(this, this.mxTransient);\n    c.setValue(this.cloneValue());\n    return c;\n  }\n  /**\n   * Returns a clone of the cell's user object.\n   */\n  cloneValue() {\n    let value = this.getValue();\n    if (isNotNullish(value)) {\n      if (typeof value.clone === 'function') {\n        value = value.clone();\n      } else if (isNotNullish(value.nodeType)) {\n        value = value.cloneNode(true);\n      }\n    }\n    return value;\n  }\n  /**\n   * Returns the nearest common ancestor for the specified cells to `this`.\n   *\n   * @param {Cell} cell2  that specifies the second cell in the tree.\n   */\n  getNearestCommonAncestor(cell2) {\n    // Creates the cell path for the second cell\n    let path = CellPath.create(cell2);\n    if (path.length > 0) {\n      // Bubbles through the ancestors of the first\n      // cell to find the nearest common ancestor.\n      let cell = this;\n      let current = CellPath.create(cell);\n      // Inverts arguments\n      if (path.length < current.length) {\n        cell = cell2;\n        const tmp = current;\n        current = path;\n        path = tmp;\n      }\n      while (cell && current) {\n        const parent = cell.getParent();\n        // Checks if the cell path is equal to the beginning of the given cell path\n        if (path.indexOf(current + CellPath.PATH_SEPARATOR) === 0 && parent) {\n          return cell;\n        }\n        current = CellPath.getParentPath(current);\n        cell = parent;\n      }\n    }\n    return null;\n  }\n  /**\n   * Returns true if the given parent is an ancestor of the given child. Note\n   * returns true if child == parent.\n   *\n   * @param {Cell} child  that specifies the child.\n   */\n  isAncestor(child) {\n    while (child && child !== this) {\n      child = child.getParent();\n    }\n    return child === this;\n  }\n  /**\n   * Returns the child vertices of the given parent.\n   */\n  getChildVertices() {\n    return this.getChildCells(true, false);\n  }\n  /**\n   * Returns the child edges of the given parent.\n   */\n  getChildEdges() {\n    return this.getChildCells(false, true);\n  }\n  /**\n   * Returns the children of the given cell that are vertices and/or edges\n   * depending on the arguments.\n   *\n   * @param vertices  Boolean indicating if child vertices should be returned.\n   * Default is false.\n   * @param edges  Boolean indicating if child edges should be returned.\n   * Default is false.\n   */\n  getChildCells() {\n    let vertices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let edges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const childCount = this.getChildCount();\n    const result = [];\n    for (let i = 0; i < childCount; i += 1) {\n      const child = this.getChildAt(i);\n      if (!edges && !vertices || edges && child.isEdge() || vertices && child.isVertex()) {\n        result.push(child);\n      }\n    }\n    return result;\n  }\n  /**\n   * Returns the number of incoming or outgoing edges, ignoring the given\n   * edge.\n   *\n   * @param outgoing  Boolean that specifies if the number of outgoing or\n   * incoming edges should be returned.\n   * @param {Cell} ignoredEdge  that represents an edge to be ignored.\n   */\n  getDirectedEdgeCount(outgoing) {\n    let ignoredEdge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let count = 0;\n    const edgeCount = this.getEdgeCount();\n    for (let i = 0; i < edgeCount; i += 1) {\n      const edge = this.getEdgeAt(i);\n      if (edge !== ignoredEdge && edge && edge.getTerminal(outgoing) === this) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n  /**\n   * Returns all edges of the given cell without loops.\n   */\n  getConnections() {\n    return this.getEdges(true, true, false);\n  }\n  /**\n   * Returns the incoming edges of the given cell without loops.\n   */\n  getIncomingEdges() {\n    return this.getEdges(true, false, false);\n  }\n  /**\n   * Returns the outgoing edges of the given cell without loops.\n   */\n  getOutgoingEdges() {\n    return this.getEdges(false, true, false);\n  }\n  /**\n   * Returns all distinct edges connected to this cell as a new array of\n   * {@link Cell}. If at least one of incoming or outgoing is true, then loops\n   * are ignored, otherwise if both are false, then all edges connected to\n   * the given cell are returned including loops.\n   *\n   * @param incoming  Optional boolean that specifies if incoming edges should be\n   * returned. Default is true.\n   * @param outgoing  Optional boolean that specifies if outgoing edges should be\n   * returned. Default is true.\n   * @param includeLoops  Optional boolean that specifies if loops should be returned.\n   * Default is true.\n   */\n  getEdges() {\n    let incoming = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let outgoing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let includeLoops = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const edgeCount = this.getEdgeCount();\n    const result = [];\n    for (let i = 0; i < edgeCount; i += 1) {\n      const edge = this.getEdgeAt(i);\n      const source = edge.getTerminal(true);\n      const target = edge.getTerminal(false);\n      if (includeLoops && source === target || source !== target && (incoming && target === this || outgoing && source === this)) {\n        result.push(edge);\n      }\n    }\n    return result;\n  }\n  /**\n   * Returns the absolute, accumulated origin for the children inside the\n   * given parent as an {@link Point}.\n   */\n  getOrigin() {\n    let result = new Point();\n    const parent = this.getParent();\n    if (parent) {\n      result = parent.getOrigin();\n      if (!this.isEdge()) {\n        const geo = this.getGeometry();\n        if (geo) {\n          result.x += geo.x;\n          result.y += geo.y;\n        }\n      }\n    }\n    return result;\n  }\n  /**\n   * Returns all descendants of the given cell and the cell itself in an array.\n   */\n  getDescendants() {\n    return this.filterDescendants(null);\n  }\n  /**\n   * Visits all cells recursively and applies the specified filter function\n   * to each cell. If the function returns true then the cell is added\n   * to the resulting array. The parent and result paramters are optional.\n   * If parent is not specified then the recursion starts at {@link root}.\n   *\n   * Example:\n   * The following example extracts all vertices from a given model:\n   * ```javascript\n   * var filter(cell)\n   * {\n   * \treturn model.isVertex(cell);\n   * }\n   * var vertices = model.filterDescendants(filter);\n   * ```\n   *\n   * @param filter  JavaScript function that takes an {@link Cell} as an argument\n   * and returns a boolean.\n   */\n  filterDescendants(filter) {\n    // Creates a new array for storing the result\n    let result = [];\n    // Checks if the filter returns true for the cell\n    // and adds it to the result array\n    if (filter === null || filter(this)) {\n      result.push(this);\n    }\n    // Visits the children of the cell\n    const childCount = this.getChildCount();\n    for (let i = 0; i < childCount; i += 1) {\n      const child = this.getChildAt(i);\n      result = result.concat(child.filterDescendants(filter));\n    }\n    return result;\n  }\n  /**\n   * Returns the root of the model or the topmost parent of the given cell.\n   */\n  getRoot() {\n    let root = this;\n    let cell = this;\n    while (cell) {\n      root = cell;\n      cell = cell.getParent();\n    }\n    return root;\n  }\n}\nexport default Cell;","map":{"version":3,"names":["NODETYPE","clone","Point","CellPath","isNotNullish","Cell","constructor","value","arguments","length","undefined","geometry","style","invalidating","onInit","overlays","id","vertex","edge","connectable","visible","collapsed","parent","source","target","children","edges","mxTransient","setGeometry","setStyle","getChildren","getId","setId","getValue","setValue","valueChanged","newValue","previous","getGeometry","getStyle","isVertex","setVertex","isEdge","setEdge","isConnectable","setConnectable","isVisible","setVisible","isCollapsed","setCollapsed","getParent","setParent","getTerminal","setTerminal","terminal","isSource","getChildCount","getIndex","child","indexOf","getChildAt","index","insert","removeFromParent","splice","remove","getEdgeCount","getEdgeIndex","getEdgeAt","insertEdge","isOutgoing","removeFromTerminal","push","removeEdge","hasAttribute","name","userObject","nodeType","ELEMENT","getAttribute","defaultValue","val","setAttribute","c","cloneValue","cloneNode","getNearestCommonAncestor","cell2","path","create","cell","current","tmp","PATH_SEPARATOR","getParentPath","isAncestor","getChildVertices","getChildCells","getChildEdges","vertices","childCount","result","i","getDirectedEdgeCount","outgoing","ignoredEdge","count","edgeCount","getConnections","getEdges","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","getOrigin","geo","x","y","getDescendants","filterDescendants","filter","concat","getRoot","root"],"sources":["D:/OSPanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/cell/Cell.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { NODETYPE } from '../../util/Constants';\nimport { clone } from '../../util/cloneUtils';\nimport Point from '../geometry/Point';\nimport CellPath from './CellPath';\nimport { isNotNullish } from '../../util/Utils';\n/**\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n *\n * ### Custom attributes\n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the value:\n * ```javascript\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * ```\n *\n * For the label to work, {@link graph.convertValueToString} and\n * {@link graph.cellLabelChanged} should be overridden as follows:\n *\n * ```javascript\n * graph.convertValueToString(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n *\n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *\n *   cellLabelChanged.apply(this, arguments);\n * };\n * ```\n * @class Cell\n */\nexport class Cell {\n    constructor(value = null, geometry = null, style = {}) {\n        // TODO: Document me!\n        // used by invalidate() of mxGraphView\n        this.invalidating = false;\n        this.onInit = null;\n        // used by addCellOverlay() of mxGraph\n        this.overlays = [];\n        /**\n         * Holds the Id. Default is null.\n         */\n        this.id = null;\n        /**\n         * Holds the user object. Default is null.\n         */\n        this.value = null;\n        /**\n         * Holds the {@link Geometry}. Default is null.\n         */\n        this.geometry = null;\n        /**\n         * Holds the style as a string of the form [(stylename|key=value);]. Default is\n         * null.\n         */\n        this.style = {};\n        /**\n         * Specifies whether the cell is a vertex. Default is false.\n         */\n        this.vertex = false;\n        /**\n         * Specifies whether the cell is an edge. Default is false.\n         */\n        this.edge = false;\n        /**\n         * Specifies whether the cell is connectable. Default is true.\n         */\n        this.connectable = true;\n        /**\n         * Specifies whether the cell is visible. Default is true.\n         */\n        this.visible = true;\n        /**\n         * Specifies whether the cell is collapsed. Default is false.\n         */\n        this.collapsed = false;\n        /**\n         * Reference to the parent cell.\n         */\n        this.parent = null;\n        /**\n         * Reference to the source terminal.\n         */\n        this.source = null;\n        /**\n         * Reference to the target terminal.\n         */\n        this.target = null;\n        /**\n         * Holds the child cells.\n         */\n        this.children = [];\n        /**\n         * Holds the edges.\n         */\n        this.edges = [];\n        /**\n         * List of members that should not be cloned inside <clone>. This field is\n         * passed to {@link Utils#clone} and is not made persistent in <CellCodec>.\n         * This is not a convention for all classes, it is only used in this class\n         * to mark transient fields since transient modifiers are not supported by\n         * the language.\n         */\n        this.mxTransient = [\n            'id',\n            'value',\n            'parent',\n            'source',\n            'target',\n            'children',\n            'edges',\n        ];\n        this.value = value;\n        this.setGeometry(geometry);\n        this.setStyle(style);\n        if (this.onInit) {\n            this.onInit();\n        }\n    }\n    // TODO: Document me!!!\n    getChildren() {\n        return this.children || [];\n    }\n    /**\n     * Returns the Id of the cell as a string.\n     */\n    getId() {\n        return this.id;\n    }\n    /**\n     * Sets the Id of the cell to the given string.\n     */\n    setId(id) {\n        this.id = id;\n    }\n    /**\n     * Returns the user object of the cell. The user\n     * object is stored in <value>.\n     */\n    getValue() {\n        return this.value;\n    }\n    /**\n     * Sets the user object of the cell. The user object\n     * is stored in <value>.\n     */\n    setValue(value) {\n        this.value = value;\n    }\n    /**\n     * Changes the user object after an in-place edit\n     * and returns the previous value. This implementation\n     * replaces the user object with the given value and\n     * returns the old user object.\n     */\n    valueChanged(newValue) {\n        const previous = this.getValue();\n        this.setValue(newValue);\n        return previous;\n    }\n    /**\n     * Returns the {@link Geometry} that describes the <geometry>.\n     */\n    getGeometry() {\n        return this.geometry;\n    }\n    /**\n     * Sets the {@link Geometry} to be used as the <geometry>.\n     */\n    setGeometry(geometry) {\n        this.geometry = geometry;\n    }\n    /**\n     * Returns a string that describes the <style>.\n     */\n    getStyle() {\n        return this.style;\n    }\n    /**\n     * Sets the string to be used as the <style>.\n     */\n    setStyle(style) {\n        this.style = style;\n    }\n    /**\n     * Returns true if the cell is a vertex.\n     */\n    isVertex() {\n        return this.vertex;\n    }\n    /**\n     * Specifies if the cell is a vertex. This should only be assigned at\n     * construction of the cell and not be changed during its lifecycle.\n     *\n     * @param vertex Boolean that specifies if the cell is a vertex.\n     */\n    setVertex(vertex) {\n        this.vertex = vertex;\n    }\n    /**\n     * Returns true if the cell is an edge.\n     */\n    isEdge() {\n        return this.edge;\n    }\n    /**\n     * Specifies if the cell is an edge. This should only be assigned at\n     * construction of the cell and not be changed during its lifecycle.\n     *\n     * @param edge Boolean that specifies if the cell is an edge.\n     */\n    setEdge(edge) {\n        this.edge = edge;\n    }\n    /**\n     * Returns true if the cell is connectable.\n     */\n    isConnectable() {\n        return this.connectable;\n    }\n    /**\n     * Sets the connectable state.\n     *\n     * @param connectable Boolean that specifies the new connectable state.\n     */\n    setConnectable(connectable) {\n        this.connectable = connectable;\n    }\n    /**\n     * Returns true if the cell is visibile.\n     */\n    isVisible() {\n        return this.visible;\n    }\n    /**\n     * Specifies if the cell is visible.\n     *\n     * @param visible Boolean that specifies the new visible state.\n     */\n    setVisible(visible) {\n        this.visible = visible;\n    }\n    /**\n     * Returns true if the cell is collapsed.\n     */\n    isCollapsed() {\n        return this.collapsed;\n    }\n    /**\n     * Sets the collapsed state.\n     *\n     * @param collapsed Boolean that specifies the new collapsed state.\n     */\n    setCollapsed(collapsed) {\n        this.collapsed = collapsed;\n    }\n    /**\n     * Returns the cell's parent.\n     */\n    getParent() {\n        return this.parent;\n    }\n    /**\n     * Sets the parent cell.\n     *\n     * @param parent<Cell> that represents the new parent.\n     */\n    setParent(parent) {\n        this.parent = parent;\n    }\n    /**\n     * Returns the source or target terminal.\n     *\n     * @param source Boolean that specifies if the source terminal should be\n     * returned.\n     */\n    getTerminal(source = false) {\n        return source ? this.source : this.target;\n    }\n    /**\n     * Sets the source or target terminal and returns the new terminal.\n     *\n     * @param {Cell} terminal     mxCell that represents the new source or target terminal.\n     * @param {boolean} isSource  boolean that specifies if the source or target terminal\n     * should be set.\n     */\n    setTerminal(terminal, isSource) {\n        if (isSource) {\n            this.source = terminal;\n        }\n        else {\n            this.target = terminal;\n        }\n        return terminal;\n    }\n    /**\n     * Returns the number of child cells.\n     */\n    getChildCount() {\n        return this.children.length;\n    }\n    /**\n     * Returns the index of the specified child in the child array.\n     *\n     * @param childChild whose index should be returned.\n     */\n    getIndex(child) {\n        if (child === null)\n            return -1;\n        return this.children.indexOf(child);\n    }\n    /**\n     * Returns the child at the specified index.\n     *\n     * @param indexInteger that specifies the child to be returned.\n     */\n    getChildAt(index) {\n        return this.children[index];\n    }\n    /**\n     * Inserts the specified child into the child array at the specified index\n     * and updates the parent reference of the child. If not childIndex is\n     * specified then the child is appended to the child array. Returns the\n     * inserted child.\n     *\n     * @param child<Cell> to be inserted or appended to the child array.\n     * @param indexOptional integer that specifies the index at which the child\n     * should be inserted into the child array.\n     */\n    insert(child, index) {\n        if (index === undefined) {\n            index = this.getChildCount();\n            if (child.getParent() === this) {\n                index--;\n            }\n        }\n        child.removeFromParent();\n        child.setParent(this);\n        this.children.splice(index, 0, child);\n        return child;\n    }\n    /**\n     * Removes the child at the specified index from the child array and\n     * returns the child that was removed. Will remove the parent reference of\n     * the child.\n     *\n     * @param indexInteger that specifies the index of the child to be\n     * removed.\n     */\n    remove(index) {\n        let child = null;\n        if (index >= 0) {\n            child = this.getChildAt(index);\n            if (child) {\n                this.children.splice(index, 1);\n                child.setParent(null);\n            }\n        }\n        return child;\n    }\n    /**\n     * Removes the cell from its parent.\n     */\n    removeFromParent() {\n        if (this.parent) {\n            const index = this.parent.getIndex(this);\n            this.parent.remove(index);\n        }\n    }\n    /**\n     * Returns the number of edges in the edge array.\n     */\n    getEdgeCount() {\n        return this.edges.length;\n    }\n    /**\n     * Returns the index of the specified edge in <edges>.\n     *\n     * @param edge<Cell> whose index in <edges> should be returned.\n     */\n    getEdgeIndex(edge) {\n        return this.edges.indexOf(edge);\n    }\n    /**\n     * Returns the edge at the specified index in <edges>.\n     *\n     * @param indexInteger that specifies the index of the edge to be returned.\n     */\n    getEdgeAt(index) {\n        return this.edges[index];\n    }\n    /**\n     * Inserts the specified edge into the edge array and returns the edge.\n     * Will update the respective terminal reference of the edge.\n     *\n     * @param edge              <Cell> to be inserted into the edge array.\n     * @param isOutgoing Boolean that specifies if the edge is outgoing.\n     */\n    insertEdge(edge, isOutgoing = false) {\n        edge.removeFromTerminal(isOutgoing);\n        edge.setTerminal(this, isOutgoing);\n        if (this.edges.length === 0 ||\n            edge.getTerminal(!isOutgoing) !== this ||\n            this.edges.indexOf(edge) < 0) {\n            this.edges.push(edge);\n        }\n        return edge;\n    }\n    /**\n     * Removes the specified edge from the edge array and returns the edge.\n     * Will remove the respective terminal reference from the edge.\n     *\n     * @param edge<Cell> to be removed from the edge array.\n     * @param isOutgoing Boolean that specifies if the edge is outgoing.\n     */\n    removeEdge(edge, isOutgoing = false) {\n        if (edge != null) {\n            if (edge.getTerminal(!isOutgoing) !== this && this.edges != null) {\n                const index = this.getEdgeIndex(edge);\n                if (index >= 0) {\n                    this.edges.splice(index, 1);\n                }\n            }\n            edge.setTerminal(null, isOutgoing);\n        }\n        return edge;\n    }\n    /**\n     * Removes the edge from its source or target terminal.\n     *\n     * @param isSource Boolean that specifies if the edge should be removed from its source or target terminal.\n     */\n    removeFromTerminal(isSource) {\n        const terminal = this.getTerminal(isSource);\n        if (terminal) {\n            terminal.removeEdge(this, isSource);\n        }\n    }\n    /**\n     * Returns true if the user object is an XML node that contains the given\n     * attribute.\n     *\n     * @param nameName nameName of the attribute.\n     */\n    hasAttribute(name) {\n        const userObject = this.getValue();\n        return (isNotNullish(userObject) &&\n            (userObject.nodeType === NODETYPE.ELEMENT && userObject.hasAttribute\n                ? userObject.hasAttribute(name)\n                : isNotNullish(userObject.getAttribute(name))));\n    }\n    /**\n     * Returns the specified attribute from the user object if it is an XML\n     * node.\n     *\n     * @param nameName              of the attribute whose value should be returned.\n     * @param defaultValueOptional  default value to use if the attribute has no\n     * value.\n     */\n    getAttribute(name, defaultValue) {\n        const userObject = this.getValue();\n        const val = isNotNullish(userObject) && userObject.nodeType === NODETYPE.ELEMENT\n            ? userObject.getAttribute(name)\n            : null;\n        return val ? val : defaultValue;\n    }\n    /**\n     * Sets the specified attribute on the user object if it is an XML node.\n     *\n     * @param nameName    of the attribute whose value should be set.\n     * @param valueNew    value of the attribute.\n     */\n    setAttribute(name, value) {\n        const userObject = this.getValue();\n        if (isNotNullish(userObject) && userObject.nodeType === NODETYPE.ELEMENT) {\n            userObject.setAttribute(name, value);\n        }\n    }\n    /**\n     * Returns a clone of the cell. Uses <cloneValue> to clone\n     * the user object. All fields in {@link Transient} are ignored\n     * during the cloning.\n     */\n    clone() {\n        const c = clone(this, this.mxTransient);\n        c.setValue(this.cloneValue());\n        return c;\n    }\n    /**\n     * Returns a clone of the cell's user object.\n     */\n    cloneValue() {\n        let value = this.getValue();\n        if (isNotNullish(value)) {\n            if (typeof value.clone === 'function') {\n                value = value.clone();\n            }\n            else if (isNotNullish(value.nodeType)) {\n                value = value.cloneNode(true);\n            }\n        }\n        return value;\n    }\n    /**\n     * Returns the nearest common ancestor for the specified cells to `this`.\n     *\n     * @param {Cell} cell2  that specifies the second cell in the tree.\n     */\n    getNearestCommonAncestor(cell2) {\n        // Creates the cell path for the second cell\n        let path = CellPath.create(cell2);\n        if (path.length > 0) {\n            // Bubbles through the ancestors of the first\n            // cell to find the nearest common ancestor.\n            let cell = this;\n            let current = CellPath.create(cell);\n            // Inverts arguments\n            if (path.length < current.length) {\n                cell = cell2;\n                const tmp = current;\n                current = path;\n                path = tmp;\n            }\n            while (cell && current) {\n                const parent = cell.getParent();\n                // Checks if the cell path is equal to the beginning of the given cell path\n                if (path.indexOf(current + CellPath.PATH_SEPARATOR) === 0 && parent) {\n                    return cell;\n                }\n                current = CellPath.getParentPath(current);\n                cell = parent;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns true if the given parent is an ancestor of the given child. Note\n     * returns true if child == parent.\n     *\n     * @param {Cell} child  that specifies the child.\n     */\n    isAncestor(child) {\n        while (child && child !== this) {\n            child = child.getParent();\n        }\n        return child === this;\n    }\n    /**\n     * Returns the child vertices of the given parent.\n     */\n    getChildVertices() {\n        return this.getChildCells(true, false);\n    }\n    /**\n     * Returns the child edges of the given parent.\n     */\n    getChildEdges() {\n        return this.getChildCells(false, true);\n    }\n    /**\n     * Returns the children of the given cell that are vertices and/or edges\n     * depending on the arguments.\n     *\n     * @param vertices  Boolean indicating if child vertices should be returned.\n     * Default is false.\n     * @param edges  Boolean indicating if child edges should be returned.\n     * Default is false.\n     */\n    getChildCells(vertices = false, edges = false) {\n        const childCount = this.getChildCount();\n        const result = [];\n        for (let i = 0; i < childCount; i += 1) {\n            const child = this.getChildAt(i);\n            if ((!edges && !vertices) ||\n                (edges && child.isEdge()) ||\n                (vertices && child.isVertex())) {\n                result.push(child);\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns the number of incoming or outgoing edges, ignoring the given\n     * edge.\n     *\n     * @param outgoing  Boolean that specifies if the number of outgoing or\n     * incoming edges should be returned.\n     * @param {Cell} ignoredEdge  that represents an edge to be ignored.\n     */\n    getDirectedEdgeCount(outgoing, ignoredEdge = null) {\n        let count = 0;\n        const edgeCount = this.getEdgeCount();\n        for (let i = 0; i < edgeCount; i += 1) {\n            const edge = this.getEdgeAt(i);\n            if (edge !== ignoredEdge && edge && edge.getTerminal(outgoing) === this) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n    /**\n     * Returns all edges of the given cell without loops.\n     */\n    getConnections() {\n        return this.getEdges(true, true, false);\n    }\n    /**\n     * Returns the incoming edges of the given cell without loops.\n     */\n    getIncomingEdges() {\n        return this.getEdges(true, false, false);\n    }\n    /**\n     * Returns the outgoing edges of the given cell without loops.\n     */\n    getOutgoingEdges() {\n        return this.getEdges(false, true, false);\n    }\n    /**\n     * Returns all distinct edges connected to this cell as a new array of\n     * {@link Cell}. If at least one of incoming or outgoing is true, then loops\n     * are ignored, otherwise if both are false, then all edges connected to\n     * the given cell are returned including loops.\n     *\n     * @param incoming  Optional boolean that specifies if incoming edges should be\n     * returned. Default is true.\n     * @param outgoing  Optional boolean that specifies if outgoing edges should be\n     * returned. Default is true.\n     * @param includeLoops  Optional boolean that specifies if loops should be returned.\n     * Default is true.\n     */\n    getEdges(incoming = true, outgoing = true, includeLoops = true) {\n        const edgeCount = this.getEdgeCount();\n        const result = [];\n        for (let i = 0; i < edgeCount; i += 1) {\n            const edge = this.getEdgeAt(i);\n            const source = edge.getTerminal(true);\n            const target = edge.getTerminal(false);\n            if ((includeLoops && source === target) ||\n                (source !== target &&\n                    ((incoming && target === this) || (outgoing && source === this)))) {\n                result.push(edge);\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns the absolute, accumulated origin for the children inside the\n     * given parent as an {@link Point}.\n     */\n    getOrigin() {\n        let result = new Point();\n        const parent = this.getParent();\n        if (parent) {\n            result = parent.getOrigin();\n            if (!this.isEdge()) {\n                const geo = this.getGeometry();\n                if (geo) {\n                    result.x += geo.x;\n                    result.y += geo.y;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns all descendants of the given cell and the cell itself in an array.\n     */\n    getDescendants() {\n        return this.filterDescendants(null);\n    }\n    /**\n     * Visits all cells recursively and applies the specified filter function\n     * to each cell. If the function returns true then the cell is added\n     * to the resulting array. The parent and result paramters are optional.\n     * If parent is not specified then the recursion starts at {@link root}.\n     *\n     * Example:\n     * The following example extracts all vertices from a given model:\n     * ```javascript\n     * var filter(cell)\n     * {\n     * \treturn model.isVertex(cell);\n     * }\n     * var vertices = model.filterDescendants(filter);\n     * ```\n     *\n     * @param filter  JavaScript function that takes an {@link Cell} as an argument\n     * and returns a boolean.\n     */\n    filterDescendants(filter) {\n        // Creates a new array for storing the result\n        let result = [];\n        // Checks if the filter returns true for the cell\n        // and adds it to the result array\n        if (filter === null || filter(this)) {\n            result.push(this);\n        }\n        // Visits the children of the cell\n        const childCount = this.getChildCount();\n        for (let i = 0; i < childCount; i += 1) {\n            const child = this.getChildAt(i);\n            result = result.concat(child.filterDescendants(filter));\n        }\n        return result;\n    }\n    /**\n     * Returns the root of the model or the topmost parent of the given cell.\n     */\n    getRoot() {\n        let root = this;\n        let cell = this;\n        while (cell) {\n            root = cell;\n            cell = cell.getParent();\n        }\n        return root;\n    }\n}\nexport default Cell;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellState from '../../cell/CellState';\nimport Point from '../../geometry/Point';\nimport { DIRECTION_MASK, ENTITY_SEGMENT } from '../../../util/Constants';\nimport { getPortConstraints } from '../../../util/mathUtils';\nimport { getValue } from '../../../util/Utils';\nexport const EntityRelation = (state, source, target, _points, result) => {\n  const {\n    view\n  } = state;\n  const segment = getValue(state.style, 'segment', ENTITY_SEGMENT) * view.scale;\n  const pts = state.absolutePoints;\n  const p0 = pts[0];\n  const pe = pts[pts.length - 1];\n  let isSourceLeft = false;\n  if (source != null) {\n    const sourceGeometry = source.cell.getGeometry();\n    if (sourceGeometry.relative) {\n      isSourceLeft = sourceGeometry.x <= 0.5;\n    } else if (target != null) {\n      isSourceLeft = (pe != null ? pe.x : target.x + target.width) < (p0 != null ? p0.x : source.x);\n    }\n  }\n  if (p0 != null) {\n    source = new CellState();\n    source.x = p0.x;\n    source.y = p0.y;\n  } else if (source != null) {\n    const constraint = getPortConstraints(source, state, true, DIRECTION_MASK.NONE);\n    if (constraint !== DIRECTION_MASK.NONE && constraint !== DIRECTION_MASK.WEST + DIRECTION_MASK.EAST) {\n      isSourceLeft = constraint === DIRECTION_MASK.WEST;\n    }\n  } else {\n    return;\n  }\n  let isTargetLeft = true;\n  if (target != null) {\n    const targetGeometry = target.cell.getGeometry();\n    if (targetGeometry.relative) {\n      isTargetLeft = targetGeometry.x <= 0.5;\n    } else if (source != null) {\n      isTargetLeft = (p0 != null ? p0.x : source.x + source.width) < (pe != null ? pe.x : target.x);\n    }\n  }\n  if (pe != null) {\n    target = new CellState();\n    target.x = pe.x;\n    target.y = pe.y;\n  } else if (target != null) {\n    const constraint = getPortConstraints(target, state, false, DIRECTION_MASK.NONE);\n    if (constraint !== DIRECTION_MASK.NONE && constraint != DIRECTION_MASK.WEST + DIRECTION_MASK.EAST) {\n      isTargetLeft = constraint === DIRECTION_MASK.WEST;\n    }\n  }\n  if (source != null && target != null) {\n    const x0 = isSourceLeft ? source.x : source.x + source.width;\n    const y0 = view.getRoutingCenterY(source);\n    const xe = isTargetLeft ? target.x : target.x + target.width;\n    const ye = view.getRoutingCenterY(target);\n    const seg = segment;\n    let dx = isSourceLeft ? -seg : seg;\n    const dep = new Point(x0 + dx, y0);\n    dx = isTargetLeft ? -seg : seg;\n    const arr = new Point(xe + dx, ye);\n    // Adds intermediate points if both go out on same side\n    if (isSourceLeft === isTargetLeft) {\n      const x = isSourceLeft ? Math.min(x0, xe) - segment : Math.max(x0, xe) + segment;\n      result.push(new Point(x, y0));\n      result.push(new Point(x, ye));\n    } else if (dep.x < arr.x === isSourceLeft) {\n      const midY = y0 + (ye - y0) / 2;\n      result.push(dep);\n      result.push(new Point(dep.x, midY));\n      result.push(new Point(arr.x, midY));\n      result.push(arr);\n    } else {\n      result.push(dep);\n      result.push(arr);\n    }\n  }\n};","map":{"version":3,"names":["CellState","Point","DIRECTION_MASK","ENTITY_SEGMENT","getPortConstraints","getValue","EntityRelation","state","source","target","_points","result","view","segment","style","scale","pts","absolutePoints","p0","pe","length","isSourceLeft","sourceGeometry","cell","getGeometry","relative","x","width","y","constraint","NONE","WEST","EAST","isTargetLeft","targetGeometry","x0","y0","getRoutingCenterY","xe","ye","seg","dx","dep","arr","Math","min","max","push","midY"],"sources":["D:/OSPanel/domains/old/react/react-intro/node_modules/@maxgraph/core/dist/view/style/edge/EntityRelation.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport CellState from '../../cell/CellState';\nimport Point from '../../geometry/Point';\nimport { DIRECTION_MASK, ENTITY_SEGMENT } from '../../../util/Constants';\nimport { getPortConstraints } from '../../../util/mathUtils';\nimport { getValue } from '../../../util/Utils';\nexport const EntityRelation = (state, source, target, _points, result) => {\n    const { view } = state;\n    const segment = getValue(state.style, 'segment', ENTITY_SEGMENT) * view.scale;\n    const pts = state.absolutePoints;\n    const p0 = pts[0];\n    const pe = pts[pts.length - 1];\n    let isSourceLeft = false;\n    if (source != null) {\n        const sourceGeometry = source.cell.getGeometry();\n        if (sourceGeometry.relative) {\n            isSourceLeft = sourceGeometry.x <= 0.5;\n        }\n        else if (target != null) {\n            isSourceLeft =\n                (pe != null ? pe.x : target.x + target.width) < (p0 != null ? p0.x : source.x);\n        }\n    }\n    if (p0 != null) {\n        source = new CellState();\n        source.x = p0.x;\n        source.y = p0.y;\n    }\n    else if (source != null) {\n        const constraint = getPortConstraints(source, state, true, DIRECTION_MASK.NONE);\n        if (constraint !== DIRECTION_MASK.NONE &&\n            constraint !== DIRECTION_MASK.WEST + DIRECTION_MASK.EAST) {\n            isSourceLeft = constraint === DIRECTION_MASK.WEST;\n        }\n    }\n    else {\n        return;\n    }\n    let isTargetLeft = true;\n    if (target != null) {\n        const targetGeometry = target.cell.getGeometry();\n        if (targetGeometry.relative) {\n            isTargetLeft = targetGeometry.x <= 0.5;\n        }\n        else if (source != null) {\n            isTargetLeft =\n                (p0 != null ? p0.x : source.x + source.width) < (pe != null ? pe.x : target.x);\n        }\n    }\n    if (pe != null) {\n        target = new CellState();\n        target.x = pe.x;\n        target.y = pe.y;\n    }\n    else if (target != null) {\n        const constraint = getPortConstraints(target, state, false, DIRECTION_MASK.NONE);\n        if (constraint !== DIRECTION_MASK.NONE &&\n            constraint != DIRECTION_MASK.WEST + DIRECTION_MASK.EAST) {\n            isTargetLeft = constraint === DIRECTION_MASK.WEST;\n        }\n    }\n    if (source != null && target != null) {\n        const x0 = isSourceLeft ? source.x : source.x + source.width;\n        const y0 = view.getRoutingCenterY(source);\n        const xe = isTargetLeft ? target.x : target.x + target.width;\n        const ye = view.getRoutingCenterY(target);\n        const seg = segment;\n        let dx = isSourceLeft ? -seg : seg;\n        const dep = new Point(x0 + dx, y0);\n        dx = isTargetLeft ? -seg : seg;\n        const arr = new Point(xe + dx, ye);\n        // Adds intermediate points if both go out on same side\n        if (isSourceLeft === isTargetLeft) {\n            const x = isSourceLeft ? Math.min(x0, xe) - segment : Math.max(x0, xe) + segment;\n            result.push(new Point(x, y0));\n            result.push(new Point(x, ye));\n        }\n        else if (dep.x < arr.x === isSourceLeft) {\n            const midY = y0 + (ye - y0) / 2;\n            result.push(dep);\n            result.push(new Point(dep.x, midY));\n            result.push(new Point(arr.x, midY));\n            result.push(arr);\n        }\n        else {\n            result.push(dep);\n            result.push(arr);\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
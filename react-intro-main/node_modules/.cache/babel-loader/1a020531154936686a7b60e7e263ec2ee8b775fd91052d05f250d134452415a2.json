{"ast":null,"code":"var _jsxFileName = \"D:\\\\ospanel\\\\domains\\\\react\\\\react-intro-main\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Chart from 'chart.js/auto';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 5\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nconst addGraphButton = document.getElementById('addgraph');\nconst sidePanel = document.getElementById('side-panel');\nconst graphContainer = document.getElementById('graph-container');\nlet isPanelOpen = false;\n\n// Обработчик клика по кнопке для открытия/закрытия панели\naddGraphButton.addEventListener('click', () => {\n  if (isPanelOpen) {\n    sidePanel.style.left = '-100%'; // Заползает обратно\n  } else {\n    sidePanel.style.left = '0'; // Выезжает на весь экран\n    loadGraph(); // Загружаем график при открытии панели\n  }\n  isPanelOpen = !isPanelOpen; // Переключаем состояние\n});\n\n// Функция для загрузки графика\nconst loadGraph = () => {\n  // Создаём элемент для отображения графика\n  const graphElement = document.createElement('div');\n  graphElement.id = 'graph-element';\n  graphContainer.appendChild(graphElement);\n\n  // Загрузка данных для графика (например, с сервера)\n  fetch('http://localhost:5000/get-cvd').then(response => response.json()).then(data => {\n    const parsedData = parseCVDData(data.content);\n    renderGraph(parsedData); // Рендерим график\n  }).catch(error => {\n    console.error('Ошибка загрузки данных:', error);\n  });\n};\n\n// Функция для парсинга данных VCD\nconst parseCVDData = content => {\n  const lines = content.split('\\n');\n  const timestamps = [];\n  const signals = [[], []];\n  lines.forEach(line => {\n    const [time, signal1, signal2] = line.split(' ');\n    if (time && signal1 && signal2) {\n      timestamps.push(time);\n      signals[0].push(Number(signal1));\n      signals[1].push(Number(signal2));\n    }\n  });\n  return {\n    labels: timestamps,\n    datasets: [{\n      label: 'Сигнал 1',\n      data: signals[0],\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }, {\n      label: 'Сигнал 2',\n      data: signals[1],\n      borderColor: 'rgb(255, 99, 132)',\n      tension: 0.1\n    }]\n  };\n};\n\n// Функция для рендеринга графика\nconst renderGraph = chartData => {\n  const ctx = document.getElementById('graph-element').getContext('2d');\n  new Chart(ctx, {\n    type: 'line',\n    // Тип графика\n    data: chartData,\n    options: {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: 'Сигнал-график VCD файла'\n        }\n      }\n    }\n  });\n};","map":{"version":3,"names":["React","ReactDOM","Chart","App","reportWebVitals","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","fileName","_jsxFileName","lineNumber","columnNumber","addGraphButton","sidePanel","graphContainer","isPanelOpen","addEventListener","style","left","loadGraph","graphElement","createElement","id","appendChild","fetch","then","response","json","data","parsedData","parseCVDData","content","renderGraph","catch","error","console","lines","split","timestamps","signals","forEach","line","time","signal1","signal2","push","Number","labels","datasets","label","borderColor","tension","chartData","ctx","getContext","type","options","responsive","plugins","legend","position","title","display","text"],"sources":["D:/ospanel/domains/react/react-intro-main/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport Chart from 'chart.js/auto';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nconst addGraphButton = document.getElementById('addgraph');\nconst sidePanel = document.getElementById('side-panel');\nconst graphContainer = document.getElementById('graph-container');\n\nlet isPanelOpen = false;\n\n// Обработчик клика по кнопке для открытия/закрытия панели\naddGraphButton.addEventListener('click', () => {\n    if (isPanelOpen) {\n        sidePanel.style.left = '-100%'; // Заползает обратно\n    } else {\n        sidePanel.style.left = '0'; // Выезжает на весь экран\n        loadGraph(); // Загружаем график при открытии панели\n    }\n    isPanelOpen = !isPanelOpen; // Переключаем состояние\n});\n\n// Функция для загрузки графика\nconst loadGraph = () => {\n    // Создаём элемент для отображения графика\n    const graphElement = document.createElement('div');\n    graphElement.id = 'graph-element';\n    graphContainer.appendChild(graphElement);\n\n    // Загрузка данных для графика (например, с сервера)\n    fetch('http://localhost:5000/get-cvd')\n        .then(response => response.json())\n        .then(data => {\n            const parsedData = parseCVDData(data.content);\n            renderGraph(parsedData); // Рендерим график\n        })\n        .catch(error => {\n            console.error('Ошибка загрузки данных:', error);\n        });\n};\n\n// Функция для парсинга данных VCD\nconst parseCVDData = (content) => {\n    const lines = content.split('\\n');\n    const timestamps = [];\n    const signals = [[], []];\n\n    lines.forEach((line) => {\n        const [time, signal1, signal2] = line.split(' ');\n        if (time && signal1 && signal2) {\n            timestamps.push(time);\n            signals[0].push(Number(signal1));\n            signals[1].push(Number(signal2));\n        }\n    });\n\n    return {\n        labels: timestamps,\n        datasets: [\n            {\n                label: 'Сигнал 1',\n                data: signals[0],\n                borderColor: 'rgb(75, 192, 192)',\n                tension: 0.1,\n            },\n            {\n                label: 'Сигнал 2',\n                data: signals[1],\n                borderColor: 'rgb(255, 99, 132)',\n                tension: 0.1,\n            },\n        ],\n    };\n};\n\n// Функция для рендеринга графика\nconst renderGraph = (chartData) => {\n    const ctx = document.getElementById('graph-element').getContext('2d');\n    new Chart(ctx, {\n        type: 'line', // Тип графика\n        data: chartData,\n        options: {\n            responsive: true,\n            plugins: {\n                legend: {\n                    position: 'top',\n                },\n                title: {\n                    display: true,\n                    text: 'Сигнал-график VCD файла',\n                },\n            },\n        },\n    });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
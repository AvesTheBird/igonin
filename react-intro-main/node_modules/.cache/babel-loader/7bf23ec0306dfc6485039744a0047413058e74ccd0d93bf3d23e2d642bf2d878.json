{"ast":null,"code":"/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport GraphLayout from './GraphLayout';\nimport ObjectIdentity from '../../util/ObjectIdentity';\n/**\n * Extends {@link GraphLayout} for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n *\n * Example:\n *\n * ```javascript\n * let layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n *\n * ```javascript\n * let layout = new mxParallelEdgeLayout(graph);\n *\n * graph.addListener(mxEvent.CELL_CONNECTED, (sender, evt)=>\n * {\n *   let model = graph.getDataModel();\n *   let edge = evt.getProperty('edge');\n *   let src = model.getTerminal(edge, true);\n *   let trg = model.getTerminal(edge, false);\n *\n *   layout.isEdgeIgnored = (edge2)=>\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *\n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *\n *   layout.execute(graph.getDefaultParent());\n * });\n * ```\n *\n * Constructor: mxParallelEdgeLayout\n *\n * Constructs a new parallel edge layout for the specified graph.\n */\nclass ParallelEdgeLayout extends GraphLayout {\n  constructor(graph) {\n    super(graph);\n    /**\n     * Defines the spacing between the parallels. Default is 20.\n     */\n    this.spacing = 20;\n    /**\n     * Specifies if only overlapping edges should be considered\n     * parallel. Default is false.\n     */\n    this.checkOverlap = false;\n  }\n  /**\n   * Implements {@link GraphLayout#execute}.\n   */\n  execute(parent) {\n    let cells = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const lookup = this.findParallels(parent, cells);\n    this.graph.batchUpdate(() => {\n      for (const i in lookup) {\n        const parallels = lookup[i];\n        if (parallels.length > 1) {\n          this.layout(parallels);\n        }\n      }\n    });\n  }\n  /**\n   * Finds the parallel edges in the given parent.\n   */\n  findParallels(parent) {\n    let cells = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const lookup = [];\n    const addCell = cell => {\n      if (!this.isEdgeIgnored(cell)) {\n        const id = this.getEdgeId(cell);\n        if (id != null) {\n          if (lookup[id] == null) {\n            lookup[id] = [];\n          }\n          lookup[id].push(cell);\n        }\n      }\n    };\n    if (cells != null) {\n      for (let i = 0; i < cells.length; i += 1) {\n        addCell(cells[i]);\n      }\n    } else {\n      const model = this.graph.getDataModel();\n      const childCount = parent.getChildCount();\n      for (let i = 0; i < childCount; i += 1) {\n        addCell(parent.getChildAt(i));\n      }\n    }\n    return lookup;\n  }\n  /**\n   * Returns a unique ID for the given edge. The id is independent of the\n   * edge direction and is built using the visible terminal of the given\n   * edge.\n   */\n  getEdgeId(edge) {\n    const view = this.graph.getView();\n    // Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n    let src = view.getVisibleTerminal(edge, true);\n    let trg = view.getVisibleTerminal(edge, false);\n    let pts = '';\n    if (src != null && trg != null) {\n      src = ObjectIdentity.get(src);\n      trg = ObjectIdentity.get(trg);\n      if (this.checkOverlap) {\n        const state = this.graph.view.getState(edge);\n        if (state != null && state.absolutePoints != null) {\n          const tmp = [];\n          for (let i = 0; i < state.absolutePoints.length; i += 1) {\n            const pt = state.absolutePoints[i];\n            if (pt != null) {\n              tmp.push(pt.x, pt.y);\n            }\n          }\n          pts = tmp.join(',');\n        }\n      }\n      return (src > trg ? \"\".concat(trg, \"-\").concat(src) : \"\".concat(src, \"-\").concat(trg)) + pts;\n    }\n    return null;\n  }\n  /**\n   * Lays out the parallel edges in the given array.\n   */\n  layout(parallels) {\n    const edge = parallels[0];\n    const view = this.graph.getView();\n    const model = this.graph.getDataModel();\n    const src = view.getVisibleTerminal(edge, true).getGeometry();\n    const trg = view.getVisibleTerminal(edge, false).getGeometry();\n    let x0;\n    let y0;\n    // Routes multiple loops\n    if (src === trg) {\n      x0 = src.x + src.width + this.spacing;\n      y0 = src.y + src.height / 2;\n      for (let i = 0; i < parallels.length; i += 1) {\n        this.route(parallels[i], x0, y0);\n        x0 += this.spacing;\n      }\n    } else if (src != null && trg != null) {\n      // Routes parallel edges\n      const scx = src.x + src.width / 2;\n      const scy = src.y + src.height / 2;\n      const tcx = trg.x + trg.width / 2;\n      const tcy = trg.y + trg.height / 2;\n      const dx = tcx - scx;\n      const dy = tcy - scy;\n      const len = Math.sqrt(dx * dx + dy * dy);\n      if (len > 0) {\n        x0 = scx + dx / 2;\n        y0 = scy + dy / 2;\n        const nx = dy * this.spacing / len;\n        const ny = dx * this.spacing / len;\n        x0 += nx * (parallels.length - 1) / 2;\n        y0 -= ny * (parallels.length - 1) / 2;\n        for (let i = 0; i < parallels.length; i += 1) {\n          this.route(parallels[i], x0, y0);\n          x0 -= nx;\n          y0 += ny;\n        }\n      }\n    }\n  }\n  /**\n   * Routes the given edge via the given point.\n   */\n  route(edge, x, y) {\n    if (this.graph.isCellMovable(edge)) {\n      this.setEdgePoints(edge, [new Point(x, y)]);\n    }\n  }\n}\nexport default ParallelEdgeLayout;","map":{"version":3,"names":["Point","GraphLayout","ObjectIdentity","ParallelEdgeLayout","constructor","graph","spacing","checkOverlap","execute","parent","cells","arguments","length","undefined","lookup","findParallels","batchUpdate","i","parallels","layout","addCell","cell","isEdgeIgnored","id","getEdgeId","push","model","getDataModel","childCount","getChildCount","getChildAt","edge","view","getView","src","getVisibleTerminal","trg","pts","get","state","getState","absolutePoints","tmp","pt","x","y","join","concat","getGeometry","x0","y0","width","height","route","scx","scy","tcx","tcy","dx","dy","len","Math","sqrt","nx","ny","isCellMovable","setEdgePoints"],"sources":["D:/ospanel/domains/react/react-intro/node_modules/@maxgraph/core/dist/view/layout/ParallelEdgeLayout.js"],"sourcesContent":["/*\nCopyright 2021-present The maxGraph project Contributors\nCopyright (c) 2006-2015, JGraph Ltd\nCopyright (c) 2006-2015, Gaudenz Alder\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport Point from '../geometry/Point';\nimport GraphLayout from './GraphLayout';\nimport ObjectIdentity from '../../util/ObjectIdentity';\n/**\n * Extends {@link GraphLayout} for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n *\n * Example:\n *\n * ```javascript\n * let layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * ```\n *\n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n *\n * ```javascript\n * let layout = new mxParallelEdgeLayout(graph);\n *\n * graph.addListener(mxEvent.CELL_CONNECTED, (sender, evt)=>\n * {\n *   let model = graph.getDataModel();\n *   let edge = evt.getProperty('edge');\n *   let src = model.getTerminal(edge, true);\n *   let trg = model.getTerminal(edge, false);\n *\n *   layout.isEdgeIgnored = (edge2)=>\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *\n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *\n *   layout.execute(graph.getDefaultParent());\n * });\n * ```\n *\n * Constructor: mxParallelEdgeLayout\n *\n * Constructs a new parallel edge layout for the specified graph.\n */\nclass ParallelEdgeLayout extends GraphLayout {\n    constructor(graph) {\n        super(graph);\n        /**\n         * Defines the spacing between the parallels. Default is 20.\n         */\n        this.spacing = 20;\n        /**\n         * Specifies if only overlapping edges should be considered\n         * parallel. Default is false.\n         */\n        this.checkOverlap = false;\n    }\n    /**\n     * Implements {@link GraphLayout#execute}.\n     */\n    execute(parent, cells = null) {\n        const lookup = this.findParallels(parent, cells);\n        this.graph.batchUpdate(() => {\n            for (const i in lookup) {\n                const parallels = lookup[i];\n                if (parallels.length > 1) {\n                    this.layout(parallels);\n                }\n            }\n        });\n    }\n    /**\n     * Finds the parallel edges in the given parent.\n     */\n    findParallels(parent, cells = null) {\n        const lookup = [];\n        const addCell = (cell) => {\n            if (!this.isEdgeIgnored(cell)) {\n                const id = this.getEdgeId(cell);\n                if (id != null) {\n                    if (lookup[id] == null) {\n                        lookup[id] = [];\n                    }\n                    lookup[id].push(cell);\n                }\n            }\n        };\n        if (cells != null) {\n            for (let i = 0; i < cells.length; i += 1) {\n                addCell(cells[i]);\n            }\n        }\n        else {\n            const model = this.graph.getDataModel();\n            const childCount = parent.getChildCount();\n            for (let i = 0; i < childCount; i += 1) {\n                addCell(parent.getChildAt(i));\n            }\n        }\n        return lookup;\n    }\n    /**\n     * Returns a unique ID for the given edge. The id is independent of the\n     * edge direction and is built using the visible terminal of the given\n     * edge.\n     */\n    getEdgeId(edge) {\n        const view = this.graph.getView();\n        // Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n        let src = view.getVisibleTerminal(edge, true);\n        let trg = view.getVisibleTerminal(edge, false);\n        let pts = '';\n        if (src != null && trg != null) {\n            src = ObjectIdentity.get(src);\n            trg = ObjectIdentity.get(trg);\n            if (this.checkOverlap) {\n                const state = this.graph.view.getState(edge);\n                if (state != null && state.absolutePoints != null) {\n                    const tmp = [];\n                    for (let i = 0; i < state.absolutePoints.length; i += 1) {\n                        const pt = state.absolutePoints[i];\n                        if (pt != null) {\n                            tmp.push(pt.x, pt.y);\n                        }\n                    }\n                    pts = tmp.join(',');\n                }\n            }\n            return (src > trg ? `${trg}-${src}` : `${src}-${trg}`) + pts;\n        }\n        return null;\n    }\n    /**\n     * Lays out the parallel edges in the given array.\n     */\n    layout(parallels) {\n        const edge = parallels[0];\n        const view = this.graph.getView();\n        const model = this.graph.getDataModel();\n        const src = view.getVisibleTerminal(edge, true).getGeometry();\n        const trg = view.getVisibleTerminal(edge, false).getGeometry();\n        let x0;\n        let y0;\n        // Routes multiple loops\n        if (src === trg) {\n            x0 = src.x + src.width + this.spacing;\n            y0 = src.y + src.height / 2;\n            for (let i = 0; i < parallels.length; i += 1) {\n                this.route(parallels[i], x0, y0);\n                x0 += this.spacing;\n            }\n        }\n        else if (src != null && trg != null) {\n            // Routes parallel edges\n            const scx = src.x + src.width / 2;\n            const scy = src.y + src.height / 2;\n            const tcx = trg.x + trg.width / 2;\n            const tcy = trg.y + trg.height / 2;\n            const dx = tcx - scx;\n            const dy = tcy - scy;\n            const len = Math.sqrt(dx * dx + dy * dy);\n            if (len > 0) {\n                x0 = scx + dx / 2;\n                y0 = scy + dy / 2;\n                const nx = (dy * this.spacing) / len;\n                const ny = (dx * this.spacing) / len;\n                x0 += (nx * (parallels.length - 1)) / 2;\n                y0 -= (ny * (parallels.length - 1)) / 2;\n                for (let i = 0; i < parallels.length; i += 1) {\n                    this.route(parallels[i], x0, y0);\n                    x0 -= nx;\n                    y0 += ny;\n                }\n            }\n        }\n    }\n    /**\n     * Routes the given edge via the given point.\n     */\n    route(edge, x, y) {\n        if (this.graph.isCellMovable(edge)) {\n            this.setEdgePoints(edge, [new Point(x, y)]);\n        }\n    }\n}\nexport default ParallelEdgeLayout;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}